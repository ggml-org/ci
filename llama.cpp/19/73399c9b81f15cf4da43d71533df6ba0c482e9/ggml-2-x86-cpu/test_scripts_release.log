+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.551 I build: 4158 (1973399c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.021.363 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.372 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.379 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.387 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.391 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.394 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.395 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.396 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.396 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.397 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.397 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.402 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.403 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.930 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.204 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.022 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.028 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.029 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.030 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.030 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.031 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.032 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.034 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.035 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.035 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.036 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.037 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.042 I llama_model_loader: - type  f32:   37 tensors
0.00.131.042 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.304 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.231 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.907 I llm_load_vocab: special tokens cache size = 5
0.00.291.743 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.761 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.761 I llm_load_print_meta: arch             = gemma
0.00.291.762 I llm_load_print_meta: vocab type       = SPM
0.00.291.763 I llm_load_print_meta: n_vocab          = 256000
0.00.291.763 I llm_load_print_meta: n_merges         = 0
0.00.291.763 I llm_load_print_meta: vocab_only       = 0
0.00.291.764 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.764 I llm_load_print_meta: n_embd           = 2048
0.00.291.764 I llm_load_print_meta: n_layer          = 18
0.00.291.776 I llm_load_print_meta: n_head           = 8
0.00.291.777 I llm_load_print_meta: n_head_kv        = 1
0.00.291.778 I llm_load_print_meta: n_rot            = 256
0.00.291.778 I llm_load_print_meta: n_swa            = 0
0.00.291.778 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.779 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.780 I llm_load_print_meta: n_gqa            = 8
0.00.291.781 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.781 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.782 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.783 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.784 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.784 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.784 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.785 I llm_load_print_meta: n_ff             = 16384
0.00.291.786 I llm_load_print_meta: n_expert         = 0
0.00.291.786 I llm_load_print_meta: n_expert_used    = 0
0.00.291.786 I llm_load_print_meta: causal attn      = 1
0.00.291.787 I llm_load_print_meta: pooling type     = 0
0.00.291.787 I llm_load_print_meta: rope type        = 2
0.00.291.788 I llm_load_print_meta: rope scaling     = linear
0.00.291.789 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.790 I llm_load_print_meta: freq_scale_train = 1
0.00.291.790 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.790 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.791 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.791 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.791 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.791 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.792 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.792 I llm_load_print_meta: model type       = 2B
0.00.291.793 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.794 I llm_load_print_meta: model params     = 2.51 B
0.00.291.795 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.795 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.795 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.796 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.796 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.796 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.796 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.797 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.797 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.798 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.798 I llm_load_print_meta: max token length = 93
0.00.392.687 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.392.692 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.392.693 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.392.694 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.392.694 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.392.695 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.397.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.397.864 I llama_new_context_with_model: n_ctx         = 4096
0.00.397.865 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.397.865 I llama_new_context_with_model: n_batch       = 2048
0.00.397.865 I llama_new_context_with_model: n_ubatch      = 512
0.00.397.866 I llama_new_context_with_model: flash_attn    = 0
0.00.397.868 I llama_new_context_with_model: freq_base     = 10000.0
0.00.397.869 I llama_new_context_with_model: freq_scale    = 1
0.00.397.870 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.412.172 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.412.185 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.412.272 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.413.499 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.413.506 I llama_new_context_with_model: graph nodes  = 601
0.00.413.506 I llama_new_context_with_model: graph splits = 1
0.00.413.508 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.499.387 I main: llama threadpool init, n_threads = 4
0.00.499.401 I 
0.00.499.479 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.499.482 I 
0.00.499.522 I sampler seed: 2474619781
0.00.499.533 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.499.535 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.499.535 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.499.536 I 
 increasively through the forest.

**What is the meaning of the passage?**

The passage depicts an imaginary scene of a forest where an unknown creature moves

0.02.796.073 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6997.46 tokens per second)
0.02.796.076 I llama_perf_context_print:        load time =     498.60 ms
0.02.796.077 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.796.079 I llama_perf_context_print:        eval time =    2276.90 ms /    32 runs   (   71.15 ms per token,    14.05 tokens per second)
0.02.796.080 I llama_perf_context_print:       total time =    2296.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.574 I build: 4158 (1973399c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.000.799 I main: load the model and apply lora adapter, if any
0.00.021.550 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.565 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.577 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.581 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.585 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.585 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.586 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.587 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.588 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.588 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.593 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.594 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.594 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.595 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.298 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.911 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.740 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.746 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.747 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.748 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.749 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.749 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.752 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.753 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.753 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.753 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.754 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.758 I llama_model_loader: - type  f32:   37 tensors
0.00.131.758 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.573 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.290 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.907 I llm_load_vocab: special tokens cache size = 5
0.00.279.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.775 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.776 I llm_load_print_meta: arch             = gemma
0.00.279.777 I llm_load_print_meta: vocab type       = SPM
0.00.279.777 I llm_load_print_meta: n_vocab          = 256000
0.00.279.778 I llm_load_print_meta: n_merges         = 0
0.00.279.778 I llm_load_print_meta: vocab_only       = 0
0.00.279.778 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.779 I llm_load_print_meta: n_embd           = 2048
0.00.279.779 I llm_load_print_meta: n_layer          = 18
0.00.279.790 I llm_load_print_meta: n_head           = 8
0.00.279.791 I llm_load_print_meta: n_head_kv        = 1
0.00.279.791 I llm_load_print_meta: n_rot            = 256
0.00.279.792 I llm_load_print_meta: n_swa            = 0
0.00.279.792 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.792 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.793 I llm_load_print_meta: n_gqa            = 8
0.00.279.794 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.795 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.796 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.798 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.798 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.798 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.799 I llm_load_print_meta: n_ff             = 16384
0.00.279.800 I llm_load_print_meta: n_expert         = 0
0.00.279.800 I llm_load_print_meta: n_expert_used    = 0
0.00.279.801 I llm_load_print_meta: causal attn      = 1
0.00.279.801 I llm_load_print_meta: pooling type     = 0
0.00.279.801 I llm_load_print_meta: rope type        = 2
0.00.279.802 I llm_load_print_meta: rope scaling     = linear
0.00.279.803 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.803 I llm_load_print_meta: freq_scale_train = 1
0.00.279.804 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.804 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.804 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.805 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.805 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.805 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.805 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.806 I llm_load_print_meta: model type       = 2B
0.00.279.806 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.807 I llm_load_print_meta: model params     = 2.51 B
0.00.279.808 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.809 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.809 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.809 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.810 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.811 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.811 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.811 I llm_load_print_meta: max token length = 93
0.00.373.030 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.348 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.355 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.356 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.356 I llama_new_context_with_model: n_batch       = 2048
0.00.378.356 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.357 I llama_new_context_with_model: flash_attn    = 0
0.00.378.360 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.361 I llama_new_context_with_model: freq_scale    = 1
0.00.378.362 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.001 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.017 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.130 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.383 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.390 I llama_new_context_with_model: graph nodes  = 601
0.00.394.391 I llama_new_context_with_model: graph splits = 1
0.00.394.393 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.785 I main: llama threadpool init, n_threads = 4
0.00.475.801 I 
0.00.475.876 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.475.879 I 
0.00.475.923 I sampler seed: 3661420207
0.00.475.935 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.937 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.938 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.939 I 
 increasements of the 20th century.

**Answer:**

I am unable to provide an answer as the provided context does not contain any information regarding

0.02.702.210 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6558.03 tokens per second)
0.02.702.213 I llama_perf_context_print:        load time =     474.97 ms
0.02.702.214 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.702.216 I llama_perf_context_print:        eval time =    2206.82 ms /    32 runs   (   68.96 ms per token,    14.50 tokens per second)
0.02.702.216 I llama_perf_context_print:       total time =    2226.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.564 I build: 4158 (1973399c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.774 I main: load the model and apply lora adapter, if any
0.00.021.534 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.545 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.553 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.558 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.559 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.564 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.565 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.566 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.566 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.567 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.571 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.572 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.572 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.573 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.574 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.033 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.682 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.838 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.845 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.846 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.847 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.848 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.849 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.850 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.854 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.854 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.856 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.856 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.858 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.863 I llama_model_loader: - type  f32:   37 tensors
0.00.132.864 I llama_model_loader: - type q8_0:  127 tensors
0.00.233.783 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.286.247 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.286.896 I llm_load_vocab: special tokens cache size = 5
0.00.308.142 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.308.161 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.308.161 I llm_load_print_meta: arch             = gemma
0.00.308.162 I llm_load_print_meta: vocab type       = SPM
0.00.308.162 I llm_load_print_meta: n_vocab          = 256000
0.00.308.163 I llm_load_print_meta: n_merges         = 0
0.00.308.163 I llm_load_print_meta: vocab_only       = 0
0.00.308.164 I llm_load_print_meta: n_ctx_train      = 8192
0.00.308.164 I llm_load_print_meta: n_embd           = 2048
0.00.308.165 I llm_load_print_meta: n_layer          = 18
0.00.308.178 I llm_load_print_meta: n_head           = 8
0.00.308.179 I llm_load_print_meta: n_head_kv        = 1
0.00.308.179 I llm_load_print_meta: n_rot            = 256
0.00.308.179 I llm_load_print_meta: n_swa            = 0
0.00.308.180 I llm_load_print_meta: n_embd_head_k    = 256
0.00.308.180 I llm_load_print_meta: n_embd_head_v    = 256
0.00.308.181 I llm_load_print_meta: n_gqa            = 8
0.00.308.182 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.308.183 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.308.183 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.308.185 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.308.186 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.308.186 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.308.187 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.308.188 I llm_load_print_meta: n_ff             = 16384
0.00.308.188 I llm_load_print_meta: n_expert         = 0
0.00.308.188 I llm_load_print_meta: n_expert_used    = 0
0.00.308.189 I llm_load_print_meta: causal attn      = 1
0.00.308.189 I llm_load_print_meta: pooling type     = 0
0.00.308.189 I llm_load_print_meta: rope type        = 2
0.00.308.190 I llm_load_print_meta: rope scaling     = linear
0.00.308.191 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.308.191 I llm_load_print_meta: freq_scale_train = 1
0.00.308.192 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.308.192 I llm_load_print_meta: rope_finetuned   = unknown
0.00.308.192 I llm_load_print_meta: ssm_d_conv       = 0
0.00.308.192 I llm_load_print_meta: ssm_d_inner      = 0
0.00.308.193 I llm_load_print_meta: ssm_d_state      = 0
0.00.308.193 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.308.194 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.308.194 I llm_load_print_meta: model type       = 2B
0.00.308.195 I llm_load_print_meta: model ftype      = Q8_0
0.00.308.196 I llm_load_print_meta: model params     = 2.51 B
0.00.308.196 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.308.197 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.308.197 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.308.198 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.308.198 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.308.198 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.308.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.308.199 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.308.199 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.308.200 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.308.200 I llm_load_print_meta: max token length = 93
0.00.381.342 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.381.350 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.381.351 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.381.351 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.381.352 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.381.353 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.386.657 I llama_new_context_with_model: n_seq_max     = 1
0.00.386.664 I llama_new_context_with_model: n_ctx         = 4096
0.00.386.665 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.386.665 I llama_new_context_with_model: n_batch       = 2048
0.00.386.666 I llama_new_context_with_model: n_ubatch      = 512
0.00.386.667 I llama_new_context_with_model: flash_attn    = 0
0.00.386.670 I llama_new_context_with_model: freq_base     = 10000.0
0.00.386.671 I llama_new_context_with_model: freq_scale    = 1
0.00.386.672 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.906 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.921 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.403.015 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.331 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.404.336 I llama_new_context_with_model: graph nodes  = 601
0.00.404.336 I llama_new_context_with_model: graph splits = 1
0.00.404.338 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.995 I main: llama threadpool init, n_threads = 4
0.00.491.011 I 
0.00.491.089 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.093 I 
0.00.491.137 I sampler seed: 1860460087
0.00.491.147 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.152 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.491.152 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.153 I 
 increably in popularity.

In recent years, a significant shift has been observed in consumer behavior, with a growing emphasis on experiential consumption and personalized experiences.



0.02.814.910 I llama_perf_sampler_print:    sampling time =       5.31 ms /    33 runs   (    0.16 ms per token,  6212.35 tokens per second)
0.02.814.913 I llama_perf_context_print:        load time =     490.20 ms
0.02.814.914 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.814.916 I llama_perf_context_print:        eval time =    2304.12 ms /    32 runs   (   72.00 ms per token,    13.89 tokens per second)
0.02.814.917 I llama_perf_context_print:       total time =    2323.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.616 I build: 4158 (1973399c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.820 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.021.602 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.613 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.621 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.626 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.627 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.631 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.632 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.633 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.634 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.634 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.634 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.639 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.639 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.641 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.641 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.642 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.473 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.620 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.480 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.487 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.488 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.488 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.489 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.490 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.491 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.493 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.494 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.495 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.495 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.497 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.500 I llama_model_loader: - type  f32:   37 tensors
0.00.132.501 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.224 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.783 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.422 I llm_load_vocab: special tokens cache size = 5
0.00.275.327 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.341 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.342 I llm_load_print_meta: arch             = gemma
0.00.275.342 I llm_load_print_meta: vocab type       = SPM
0.00.275.343 I llm_load_print_meta: n_vocab          = 256000
0.00.275.343 I llm_load_print_meta: n_merges         = 0
0.00.275.344 I llm_load_print_meta: vocab_only       = 0
0.00.275.344 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.344 I llm_load_print_meta: n_embd           = 2048
0.00.275.345 I llm_load_print_meta: n_layer          = 18
0.00.275.356 I llm_load_print_meta: n_head           = 8
0.00.275.356 I llm_load_print_meta: n_head_kv        = 1
0.00.275.357 I llm_load_print_meta: n_rot            = 256
0.00.275.357 I llm_load_print_meta: n_swa            = 0
0.00.275.357 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.358 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.358 I llm_load_print_meta: n_gqa            = 8
0.00.275.359 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.360 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.361 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.363 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.363 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.364 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.365 I llm_load_print_meta: n_ff             = 16384
0.00.275.365 I llm_load_print_meta: n_expert         = 0
0.00.275.366 I llm_load_print_meta: n_expert_used    = 0
0.00.275.366 I llm_load_print_meta: causal attn      = 1
0.00.275.366 I llm_load_print_meta: pooling type     = 0
0.00.275.367 I llm_load_print_meta: rope type        = 2
0.00.275.367 I llm_load_print_meta: rope scaling     = linear
0.00.275.368 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.369 I llm_load_print_meta: freq_scale_train = 1
0.00.275.369 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.369 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.370 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.370 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.370 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.371 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.371 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.371 I llm_load_print_meta: model type       = 2B
0.00.275.372 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.373 I llm_load_print_meta: model params     = 2.51 B
0.00.275.374 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.374 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.374 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.375 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.375 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.375 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.375 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.376 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.376 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.377 I llm_load_print_meta: max token length = 93
0.00.347.241 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.347.249 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.352.775 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.783 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.783 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.783 I llama_new_context_with_model: n_batch       = 2048
0.00.352.784 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.784 I llama_new_context_with_model: flash_attn    = 0
0.00.352.788 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.788 I llama_new_context_with_model: freq_scale    = 1
0.00.352.789 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.014 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.030 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.129 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.413 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.420 I llama_new_context_with_model: graph nodes  = 601
0.00.369.420 I llama_new_context_with_model: graph splits = 1
0.00.369.422 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.182 I main: llama threadpool init, n_threads = 4
0.00.459.195 I 
0.00.459.268 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.459.271 I 
0.00.459.316 I sampler seed: 2772737343
0.00.459.326 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.330 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.331 I 
 increasities and the potential consequences of their misuse.

**Introduction:**

In recent years, there has been a surge in the use of artificial intelligence (AI

0.02.893.621 I llama_perf_sampler_print:    sampling time =       5.31 ms /    33 runs   (    0.16 ms per token,  6219.37 tokens per second)
0.02.893.624 I llama_perf_context_print:        load time =     458.34 ms
0.02.893.625 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.893.626 I llama_perf_context_print:        eval time =    2413.77 ms /    32 runs   (   75.43 ms per token,    13.26 tokens per second)
0.02.893.627 I llama_perf_context_print:       total time =    2434.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.882s
user	0m40.093s
sys	0m9.443s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4158 (1973399c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40231.53 ms
main:    total time = 40231.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4158 (1973399c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.021.414 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.423 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.441 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.442 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.446 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.447 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.448 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.448 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.449 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.452 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.453 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.453 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.454 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.096 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.103 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.104 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.104 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.105 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.106 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.106 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.109 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.110 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.111 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.112 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.113 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.118 I llama_model_loader: - type  f32:   37 tensors
0.00.131.119 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.120 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.721 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.648 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.201 I llm_load_vocab: special tokens cache size = 5
0.00.283.406 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.423 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.423 I llm_load_print_meta: arch             = gemma
0.00.283.424 I llm_load_print_meta: vocab type       = SPM
0.00.283.424 I llm_load_print_meta: n_vocab          = 256000
0.00.283.425 I llm_load_print_meta: n_merges         = 0
0.00.283.425 I llm_load_print_meta: vocab_only       = 0
0.00.283.426 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.426 I llm_load_print_meta: n_embd           = 2048
0.00.283.426 I llm_load_print_meta: n_layer          = 18
0.00.283.438 I llm_load_print_meta: n_head           = 8
0.00.283.439 I llm_load_print_meta: n_head_kv        = 1
0.00.283.439 I llm_load_print_meta: n_rot            = 256
0.00.283.439 I llm_load_print_meta: n_swa            = 0
0.00.283.439 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.440 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.441 I llm_load_print_meta: n_gqa            = 8
0.00.283.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.443 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.443 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.445 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.445 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.446 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.447 I llm_load_print_meta: n_ff             = 16384
0.00.283.447 I llm_load_print_meta: n_expert         = 0
0.00.283.448 I llm_load_print_meta: n_expert_used    = 0
0.00.283.448 I llm_load_print_meta: causal attn      = 1
0.00.283.448 I llm_load_print_meta: pooling type     = 0
0.00.283.448 I llm_load_print_meta: rope type        = 2
0.00.283.449 I llm_load_print_meta: rope scaling     = linear
0.00.283.450 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.451 I llm_load_print_meta: freq_scale_train = 1
0.00.283.451 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.451 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.451 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.452 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.452 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.452 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.453 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.453 I llm_load_print_meta: model type       = 2B
0.00.283.454 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.283.455 I llm_load_print_meta: model params     = 2.51 B
0.00.283.456 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.283.456 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.456 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.457 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.457 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.457 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.458 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.458 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.459 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.459 I llm_load_print_meta: max token length = 93
0.00.343.351 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.343.356 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.343.357 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.343.358 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.343.358 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.343.359 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.348.530 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.536 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.537 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.537 I llama_new_context_with_model: n_batch       = 2048
0.00.348.538 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.538 I llama_new_context_with_model: flash_attn    = 0
0.00.348.540 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.541 I llama_new_context_with_model: freq_scale    = 1
0.00.348.542 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.940 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.954 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.061 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.285 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.292 I llama_new_context_with_model: graph nodes  = 601
0.00.364.292 I llama_new_context_with_model: graph splits = 1
0.00.364.294 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.320 I main: llama threadpool init, n_threads = 4
0.00.439.334 I 
0.00.439.410 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.439.413 I 
0.00.439.455 I sampler seed: 703026350
0.00.439.465 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.469 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.470 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.471 I 
 seconally.

I am not sure how to format a string in Python.

**Solution:**

The format() function is used to format a string according

0.02.048.877 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6661.28 tokens per second)
0.02.048.880 I llama_perf_context_print:        load time =     438.57 ms
0.02.048.881 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.048.882 I llama_perf_context_print:        eval time =    1590.80 ms /    32 runs   (   49.71 ms per token,    20.12 tokens per second)
0.02.048.883 I llama_perf_context_print:       total time =    1609.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4158 (1973399c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40196.27 ms
main:    total time = 40196.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.568 I build: 4158 (1973399c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.406 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.422 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.433 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.434 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.438 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.439 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.440 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.441 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.441 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.441 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.446 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.447 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.447 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.447 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.448 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.404 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.060 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.067 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.068 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.069 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.070 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.071 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.072 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.074 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.074 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.080 I llama_model_loader: - type  f32:   37 tensors
0.00.133.081 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.082 I llama_model_loader: - type q6_K:   19 tensors
0.00.223.401 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.177 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.273.862 I llm_load_vocab: special tokens cache size = 5
0.00.294.663 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.294.679 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.294.680 I llm_load_print_meta: arch             = gemma
0.00.294.681 I llm_load_print_meta: vocab type       = SPM
0.00.294.682 I llm_load_print_meta: n_vocab          = 256000
0.00.294.682 I llm_load_print_meta: n_merges         = 0
0.00.294.683 I llm_load_print_meta: vocab_only       = 0
0.00.294.683 I llm_load_print_meta: n_ctx_train      = 8192
0.00.294.683 I llm_load_print_meta: n_embd           = 2048
0.00.294.684 I llm_load_print_meta: n_layer          = 18
0.00.294.694 I llm_load_print_meta: n_head           = 8
0.00.294.695 I llm_load_print_meta: n_head_kv        = 1
0.00.294.696 I llm_load_print_meta: n_rot            = 256
0.00.294.696 I llm_load_print_meta: n_swa            = 0
0.00.294.696 I llm_load_print_meta: n_embd_head_k    = 256
0.00.294.697 I llm_load_print_meta: n_embd_head_v    = 256
0.00.294.697 I llm_load_print_meta: n_gqa            = 8
0.00.294.698 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.294.699 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.294.700 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.294.702 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.294.702 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.294.702 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.294.703 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.294.703 I llm_load_print_meta: n_ff             = 16384
0.00.294.704 I llm_load_print_meta: n_expert         = 0
0.00.294.704 I llm_load_print_meta: n_expert_used    = 0
0.00.294.704 I llm_load_print_meta: causal attn      = 1
0.00.294.705 I llm_load_print_meta: pooling type     = 0
0.00.294.705 I llm_load_print_meta: rope type        = 2
0.00.294.705 I llm_load_print_meta: rope scaling     = linear
0.00.294.707 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.294.707 I llm_load_print_meta: freq_scale_train = 1
0.00.294.708 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.294.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.294.708 I llm_load_print_meta: ssm_d_conv       = 0
0.00.294.708 I llm_load_print_meta: ssm_d_inner      = 0
0.00.294.709 I llm_load_print_meta: ssm_d_state      = 0
0.00.294.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.294.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.294.710 I llm_load_print_meta: model type       = 2B
0.00.294.710 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.294.712 I llm_load_print_meta: model params     = 2.51 B
0.00.294.713 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.294.713 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.294.713 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.294.714 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.294.714 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.294.714 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.294.715 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.294.715 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.294.715 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.294.716 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.294.716 I llm_load_print_meta: max token length = 93
0.00.347.109 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.352.116 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.122 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.123 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.123 I llama_new_context_with_model: n_batch       = 2048
0.00.352.124 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.124 I llama_new_context_with_model: flash_attn    = 0
0.00.352.126 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.127 I llama_new_context_with_model: freq_scale    = 1
0.00.352.128 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.948 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.964 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.331 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.337 I llama_new_context_with_model: graph nodes  = 601
0.00.368.337 I llama_new_context_with_model: graph splits = 1
0.00.368.339 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.525 I main: llama threadpool init, n_threads = 4
0.00.442.537 I 
0.00.442.613 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.614 I 
0.00.442.656 I sampler seed: 1690611805
0.00.442.666 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.669 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.670 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.670 I 
 squaRED text:  The question you asked is quite interesting. It relates to a complex topic involving various considerations and perspectives. I would like to offer my analysis

0.02.071.842 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6461.72 tokens per second)
0.02.071.844 I llama_perf_context_print:        load time =     441.73 ms
0.02.071.846 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.071.847 I llama_perf_context_print:        eval time =    1609.47 ms /    32 runs   (   50.30 ms per token,    19.88 tokens per second)
0.02.071.848 I llama_perf_context_print:       total time =    1629.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.337s
user	10m24.342s
sys	0m7.186s
