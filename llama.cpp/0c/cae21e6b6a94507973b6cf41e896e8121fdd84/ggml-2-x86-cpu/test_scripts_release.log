+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.637 I build: 4399 (0ccae21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.834 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.021.579 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.590 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.598 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.604 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.608 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.611 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.612 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.612 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.617 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.617 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.618 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.618 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.619 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.733 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.941 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.833 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.840 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.841 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.843 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.844 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.846 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.847 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.847 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.848 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.849 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.852 I llama_model_loader: - type  f32:   37 tensors
0.00.132.854 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.416 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.701 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.307 I llm_load_vocab: special tokens cache size = 5
0.00.275.205 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.221 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.222 I llm_load_print_meta: arch             = gemma
0.00.275.223 I llm_load_print_meta: vocab type       = SPM
0.00.275.223 I llm_load_print_meta: n_vocab          = 256000
0.00.275.224 I llm_load_print_meta: n_merges         = 0
0.00.275.224 I llm_load_print_meta: vocab_only       = 0
0.00.275.224 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.225 I llm_load_print_meta: n_embd           = 2048
0.00.275.225 I llm_load_print_meta: n_layer          = 18
0.00.275.237 I llm_load_print_meta: n_head           = 8
0.00.275.239 I llm_load_print_meta: n_head_kv        = 1
0.00.275.240 I llm_load_print_meta: n_rot            = 256
0.00.275.240 I llm_load_print_meta: n_swa            = 0
0.00.275.240 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.240 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.242 I llm_load_print_meta: n_gqa            = 8
0.00.275.243 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.245 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.246 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.247 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.248 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.248 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.248 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.250 I llm_load_print_meta: n_ff             = 16384
0.00.275.251 I llm_load_print_meta: n_expert         = 0
0.00.275.251 I llm_load_print_meta: n_expert_used    = 0
0.00.275.251 I llm_load_print_meta: causal attn      = 1
0.00.275.251 I llm_load_print_meta: pooling type     = 0
0.00.275.252 I llm_load_print_meta: rope type        = 2
0.00.275.252 I llm_load_print_meta: rope scaling     = linear
0.00.275.253 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.254 I llm_load_print_meta: freq_scale_train = 1
0.00.275.254 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.255 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.255 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.255 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.256 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.256 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.256 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.258 I llm_load_print_meta: model type       = 2B
0.00.275.259 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.260 I llm_load_print_meta: model params     = 2.51 B
0.00.275.261 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.261 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.261 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.262 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.262 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.263 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.263 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.263 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.263 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.264 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.264 I llm_load_print_meta: max token length = 93
0.00.375.637 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.375.645 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.375.646 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.375.647 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.375.648 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.375.648 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.920 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.926 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.927 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.927 I llama_new_context_with_model: n_batch       = 2048
0.00.380.928 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.928 I llama_new_context_with_model: flash_attn    = 0
0.00.380.931 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.932 I llama_new_context_with_model: freq_scale    = 1
0.00.380.933 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.950 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.395.441 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.456 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.547 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.790 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.796 I llama_new_context_with_model: graph nodes  = 601
0.00.396.797 I llama_new_context_with_model: graph splits = 1
0.00.396.801 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.396.801 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.012 I main: llama threadpool init, n_threads = 4
0.00.483.028 I 
0.00.483.103 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.483.106 I 
0.00.483.139 I sampler seed: 555186686
0.00.483.151 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.162 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.166 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.166 I 
 maneuvously,
**But alas, the storm's fury eclipsed our plan.**

**Explanation:**

The sentence is taken from a poem by

0.02.768.898 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6520.45 tokens per second)
0.02.768.900 I llama_perf_context_print:        load time =     482.15 ms
0.02.768.901 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.768.903 I llama_perf_context_print:        eval time =    2266.31 ms /    32 runs   (   70.82 ms per token,    14.12 tokens per second)
0.02.768.903 I llama_perf_context_print:       total time =    2285.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.543 I build: 4399 (0ccae21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.344 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.351 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.353 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.357 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.363 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.364 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.365 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.366 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.371 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.372 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.372 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.373 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.374 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.625 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.967 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.855 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.861 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.862 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.862 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.863 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.864 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.865 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.867 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.867 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.868 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.868 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.869 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.872 I llama_model_loader: - type  f32:   37 tensors
0.00.132.873 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.724 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.523 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.112 I llm_load_vocab: special tokens cache size = 5
0.00.280.135 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.151 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.153 I llm_load_print_meta: arch             = gemma
0.00.280.154 I llm_load_print_meta: vocab type       = SPM
0.00.280.154 I llm_load_print_meta: n_vocab          = 256000
0.00.280.155 I llm_load_print_meta: n_merges         = 0
0.00.280.155 I llm_load_print_meta: vocab_only       = 0
0.00.280.156 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.156 I llm_load_print_meta: n_embd           = 2048
0.00.280.156 I llm_load_print_meta: n_layer          = 18
0.00.280.168 I llm_load_print_meta: n_head           = 8
0.00.280.170 I llm_load_print_meta: n_head_kv        = 1
0.00.280.170 I llm_load_print_meta: n_rot            = 256
0.00.280.171 I llm_load_print_meta: n_swa            = 0
0.00.280.171 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.171 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.173 I llm_load_print_meta: n_gqa            = 8
0.00.280.175 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.177 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.177 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.179 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.179 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.180 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.180 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.182 I llm_load_print_meta: n_ff             = 16384
0.00.280.182 I llm_load_print_meta: n_expert         = 0
0.00.280.182 I llm_load_print_meta: n_expert_used    = 0
0.00.280.182 I llm_load_print_meta: causal attn      = 1
0.00.280.183 I llm_load_print_meta: pooling type     = 0
0.00.280.183 I llm_load_print_meta: rope type        = 2
0.00.280.183 I llm_load_print_meta: rope scaling     = linear
0.00.280.184 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.185 I llm_load_print_meta: freq_scale_train = 1
0.00.280.185 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.186 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.186 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.186 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.187 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.187 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.187 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.189 I llm_load_print_meta: model type       = 2B
0.00.280.190 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.191 I llm_load_print_meta: model params     = 2.51 B
0.00.280.192 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.192 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.193 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.193 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.194 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.194 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.195 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.195 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.195 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.196 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.196 I llm_load_print_meta: max token length = 93
0.00.375.055 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.380.289 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.296 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.296 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.296 I llama_new_context_with_model: n_batch       = 2048
0.00.380.297 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.297 I llama_new_context_with_model: flash_attn    = 0
0.00.380.300 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.301 I llama_new_context_with_model: freq_scale    = 1
0.00.380.301 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.328 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.395.291 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.306 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.401 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.689 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.694 I llama_new_context_with_model: graph nodes  = 601
0.00.396.695 I llama_new_context_with_model: graph splits = 1
0.00.396.698 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.396.698 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.479.148 I main: llama threadpool init, n_threads = 4
0.00.479.164 I 
0.00.479.241 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.479.248 I 
0.00.479.285 I sampler seed: 1937688922
0.00.479.297 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.300 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.301 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.302 I 
 seconary clause in the sentence "The girl who lives next door is a bright and cheerful young woman"?

The sentence is in the present tense, and the

0.02.675.337 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7000.42 tokens per second)
0.02.675.340 I llama_perf_context_print:        load time =     478.38 ms
0.02.675.341 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.675.342 I llama_perf_context_print:        eval time =    2177.63 ms /    32 runs   (   68.05 ms per token,    14.69 tokens per second)
0.02.675.343 I llama_perf_context_print:       total time =    2196.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.588 I build: 4399 (0ccae21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.000.803 I main: load the model and apply lora adapter, if any
0.00.021.364 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.374 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.382 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.387 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.387 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.391 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.392 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.392 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.393 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.394 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.394 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.398 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.399 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.399 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.400 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.400 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.805 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.589 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.529 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.536 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.540 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.541 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.546 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.547 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.548 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.553 I llama_model_loader: - type  f32:   37 tensors
0.00.133.554 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.459 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.588 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.165 I llm_load_vocab: special tokens cache size = 5
0.00.282.113 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.129 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.131 I llm_load_print_meta: arch             = gemma
0.00.282.131 I llm_load_print_meta: vocab type       = SPM
0.00.282.132 I llm_load_print_meta: n_vocab          = 256000
0.00.282.132 I llm_load_print_meta: n_merges         = 0
0.00.282.133 I llm_load_print_meta: vocab_only       = 0
0.00.282.133 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.133 I llm_load_print_meta: n_embd           = 2048
0.00.282.134 I llm_load_print_meta: n_layer          = 18
0.00.282.146 I llm_load_print_meta: n_head           = 8
0.00.282.148 I llm_load_print_meta: n_head_kv        = 1
0.00.282.149 I llm_load_print_meta: n_rot            = 256
0.00.282.149 I llm_load_print_meta: n_swa            = 0
0.00.282.150 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.150 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.151 I llm_load_print_meta: n_gqa            = 8
0.00.282.153 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.155 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.156 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.157 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.158 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.158 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.159 I llm_load_print_meta: n_ff             = 16384
0.00.282.160 I llm_load_print_meta: n_expert         = 0
0.00.282.160 I llm_load_print_meta: n_expert_used    = 0
0.00.282.160 I llm_load_print_meta: causal attn      = 1
0.00.282.160 I llm_load_print_meta: pooling type     = 0
0.00.282.161 I llm_load_print_meta: rope type        = 2
0.00.282.161 I llm_load_print_meta: rope scaling     = linear
0.00.282.163 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.164 I llm_load_print_meta: freq_scale_train = 1
0.00.282.164 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.165 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.165 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.165 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.166 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.166 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.168 I llm_load_print_meta: model type       = 2B
0.00.282.168 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.169 I llm_load_print_meta: model params     = 2.51 B
0.00.282.170 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.170 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.171 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.171 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.172 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.172 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.172 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.173 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.173 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.173 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.174 I llm_load_print_meta: max token length = 93
0.00.359.465 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.471 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.472 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.473 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.473 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.474 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.656 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.662 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.663 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.663 I llama_new_context_with_model: n_batch       = 2048
0.00.364.664 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.664 I llama_new_context_with_model: flash_attn    = 0
0.00.364.667 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.667 I llama_new_context_with_model: freq_scale    = 1
0.00.364.668 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.688 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.378.986 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.000 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.088 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.325 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.332 I llama_new_context_with_model: graph nodes  = 601
0.00.380.332 I llama_new_context_with_model: graph splits = 1
0.00.380.336 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.380.336 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.496 I main: llama threadpool init, n_threads = 4
0.00.465.510 I 
0.00.465.585 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.589 I 
0.00.465.621 I sampler seed: 141978346
0.00.465.632 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.636 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.636 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.637 I 
 increasities. [end of text]


0.00.752.981 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7961.78 tokens per second)
0.00.752.983 I llama_perf_context_print:        load time =     464.67 ms
0.00.752.984 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.752.985 I llama_perf_context_print:        eval time =     283.99 ms /     4 runs   (   71.00 ms per token,    14.09 tokens per second)
0.00.752.986 I llama_perf_context_print:       total time =     287.49 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.716 I build: 4399 (0ccae21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.934 I main: llama backend init
0.00.000.941 I main: load the model and apply lora adapter, if any
0.00.021.452 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.462 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.470 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.475 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.476 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.480 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.480 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.481 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.482 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.482 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.483 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.492 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.493 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.493 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.274 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.394 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.402 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.403 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.404 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.404 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.406 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.406 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.410 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.411 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.411 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.412 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.412 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.416 I llama_model_loader: - type  f32:   37 tensors
0.00.132.417 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.127 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.677 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.309 I llm_load_vocab: special tokens cache size = 5
0.00.269.582 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.602 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.603 I llm_load_print_meta: arch             = gemma
0.00.269.604 I llm_load_print_meta: vocab type       = SPM
0.00.269.604 I llm_load_print_meta: n_vocab          = 256000
0.00.269.605 I llm_load_print_meta: n_merges         = 0
0.00.269.605 I llm_load_print_meta: vocab_only       = 0
0.00.269.606 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.606 I llm_load_print_meta: n_embd           = 2048
0.00.269.606 I llm_load_print_meta: n_layer          = 18
0.00.269.619 I llm_load_print_meta: n_head           = 8
0.00.269.622 I llm_load_print_meta: n_head_kv        = 1
0.00.269.622 I llm_load_print_meta: n_rot            = 256
0.00.269.623 I llm_load_print_meta: n_swa            = 0
0.00.269.623 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.624 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.626 I llm_load_print_meta: n_gqa            = 8
0.00.269.627 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.629 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.630 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.632 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.632 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.633 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.633 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.635 I llm_load_print_meta: n_ff             = 16384
0.00.269.635 I llm_load_print_meta: n_expert         = 0
0.00.269.635 I llm_load_print_meta: n_expert_used    = 0
0.00.269.635 I llm_load_print_meta: causal attn      = 1
0.00.269.636 I llm_load_print_meta: pooling type     = 0
0.00.269.637 I llm_load_print_meta: rope type        = 2
0.00.269.637 I llm_load_print_meta: rope scaling     = linear
0.00.269.639 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.639 I llm_load_print_meta: freq_scale_train = 1
0.00.269.640 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.640 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.641 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.641 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.641 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.642 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.642 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.644 I llm_load_print_meta: model type       = 2B
0.00.269.646 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.646 I llm_load_print_meta: model params     = 2.51 B
0.00.269.647 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.648 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.651 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.651 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.652 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.652 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.652 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.653 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.653 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.654 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.654 I llm_load_print_meta: max token length = 93
0.00.341.090 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.099 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.530 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.537 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.538 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.538 I llama_new_context_with_model: n_batch       = 2048
0.00.346.539 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.539 I llama_new_context_with_model: flash_attn    = 0
0.00.346.542 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.544 I llama_new_context_with_model: freq_scale    = 1
0.00.346.545 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.565 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.361.362 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.376 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.469 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.804 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.810 I llama_new_context_with_model: graph nodes  = 601
0.00.362.811 I llama_new_context_with_model: graph splits = 1
0.00.362.813 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.814 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.444 I main: llama threadpool init, n_threads = 4
0.00.450.459 I 
0.00.450.539 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.543 I 
0.00.450.594 I sampler seed: 3251690600
0.00.450.606 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.615 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.616 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.617 I 
 increably.

I am not sure if I understand the question. Could you please rephrase it?

I apologize, but I am unable to provide assistance

0.02.854.662 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6733.32 tokens per second)
0.02.854.665 I llama_perf_context_print:        load time =     449.48 ms
0.02.854.666 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.854.667 I llama_perf_context_print:        eval time =    2384.53 ms /    32 runs   (   74.52 ms per token,    13.42 tokens per second)
0.02.854.668 I llama_perf_context_print:       total time =    2404.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.655s
user	0m31.577s
sys	0m9.517s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4399 (0ccae21e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40267.84 ms
main:    total time = 40267.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.169 I build: 4399 (0ccae21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.363 I main: llama backend init
0.00.000.369 I main: load the model and apply lora adapter, if any
0.00.020.484 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.492 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.500 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.505 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.506 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.509 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.510 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.510 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.511 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.511 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.512 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.515 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.516 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.516 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.517 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.326 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.204 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.064 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.070 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.071 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.072 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.072 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.073 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.074 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.076 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.077 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.077 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.078 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.079 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.082 I llama_model_loader: - type  f32:   37 tensors
0.00.131.085 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.086 I llama_model_loader: - type q6_K:   19 tensors
0.00.220.427 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.273.474 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.274.085 I llm_load_vocab: special tokens cache size = 5
0.00.295.060 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.295.076 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.295.077 I llm_load_print_meta: arch             = gemma
0.00.295.078 I llm_load_print_meta: vocab type       = SPM
0.00.295.078 I llm_load_print_meta: n_vocab          = 256000
0.00.295.079 I llm_load_print_meta: n_merges         = 0
0.00.295.079 I llm_load_print_meta: vocab_only       = 0
0.00.295.079 I llm_load_print_meta: n_ctx_train      = 8192
0.00.295.080 I llm_load_print_meta: n_embd           = 2048
0.00.295.080 I llm_load_print_meta: n_layer          = 18
0.00.295.089 I llm_load_print_meta: n_head           = 8
0.00.295.091 I llm_load_print_meta: n_head_kv        = 1
0.00.295.092 I llm_load_print_meta: n_rot            = 256
0.00.295.093 I llm_load_print_meta: n_swa            = 0
0.00.295.093 I llm_load_print_meta: n_embd_head_k    = 256
0.00.295.093 I llm_load_print_meta: n_embd_head_v    = 256
0.00.295.095 I llm_load_print_meta: n_gqa            = 8
0.00.295.097 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.295.098 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.295.099 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.295.101 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.295.101 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.295.101 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.295.102 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.295.103 I llm_load_print_meta: n_ff             = 16384
0.00.295.103 I llm_load_print_meta: n_expert         = 0
0.00.295.104 I llm_load_print_meta: n_expert_used    = 0
0.00.295.104 I llm_load_print_meta: causal attn      = 1
0.00.295.104 I llm_load_print_meta: pooling type     = 0
0.00.295.105 I llm_load_print_meta: rope type        = 2
0.00.295.105 I llm_load_print_meta: rope scaling     = linear
0.00.295.107 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.295.107 I llm_load_print_meta: freq_scale_train = 1
0.00.295.108 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.295.108 I llm_load_print_meta: rope_finetuned   = unknown
0.00.295.109 I llm_load_print_meta: ssm_d_conv       = 0
0.00.295.109 I llm_load_print_meta: ssm_d_inner      = 0
0.00.295.109 I llm_load_print_meta: ssm_d_state      = 0
0.00.295.109 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.295.109 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.295.111 I llm_load_print_meta: model type       = 2B
0.00.295.112 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.295.113 I llm_load_print_meta: model params     = 2.51 B
0.00.295.114 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.295.114 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.295.115 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.295.115 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.295.116 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.295.116 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.295.116 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.295.117 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.295.117 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.295.117 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.295.118 I llm_load_print_meta: max token length = 93
0.00.355.010 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.355.019 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.355.019 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.355.020 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.355.020 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.355.021 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.360.151 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.157 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.158 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.159 I llama_new_context_with_model: n_batch       = 2048
0.00.360.159 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.160 I llama_new_context_with_model: flash_attn    = 0
0.00.360.162 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.163 I llama_new_context_with_model: freq_scale    = 1
0.00.360.164 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.182 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.374.487 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.501 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.591 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.832 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.839 I llama_new_context_with_model: graph nodes  = 601
0.00.375.839 I llama_new_context_with_model: graph splits = 1
0.00.375.842 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.375.843 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.891 I main: llama threadpool init, n_threads = 4
0.00.451.908 I 
0.00.451.995 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.997 I 
0.00.452.032 I sampler seed: 1142696935
0.00.452.043 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.046 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.047 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.047 I 
 increamically.

The answer is:

The answer is: Incredibly.

The meaning of the word "incredibly" is extremely impressive or remarkable.

0.02.058.823 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6530.77 tokens per second)
0.02.058.825 I llama_perf_context_print:        load time =     451.50 ms
0.02.058.827 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.058.829 I llama_perf_context_print:        eval time =    1587.93 ms /    32 runs   (   49.62 ms per token,    20.15 tokens per second)
0.02.058.830 I llama_perf_context_print:       total time =    1606.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4399 (0ccae21e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40241.46 ms
main:    total time = 40241.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.546 I build: 4399 (0ccae21e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.021.232 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.246 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.253 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.254 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.258 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.258 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.259 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.260 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.264 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.265 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.266 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.216 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.116 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.065 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.074 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.075 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.076 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.076 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.078 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.078 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.082 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.083 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.086 I llama_model_loader: - type  f32:   37 tensors
0.00.133.087 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.088 I llama_model_loader: - type q6_K:   19 tensors
0.00.225.973 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.332 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.942 I llm_load_vocab: special tokens cache size = 5
0.00.292.211 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.292.229 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.292.231 I llm_load_print_meta: arch             = gemma
0.00.292.231 I llm_load_print_meta: vocab type       = SPM
0.00.292.232 I llm_load_print_meta: n_vocab          = 256000
0.00.292.233 I llm_load_print_meta: n_merges         = 0
0.00.292.233 I llm_load_print_meta: vocab_only       = 0
0.00.292.233 I llm_load_print_meta: n_ctx_train      = 8192
0.00.292.234 I llm_load_print_meta: n_embd           = 2048
0.00.292.234 I llm_load_print_meta: n_layer          = 18
0.00.292.244 I llm_load_print_meta: n_head           = 8
0.00.292.246 I llm_load_print_meta: n_head_kv        = 1
0.00.292.247 I llm_load_print_meta: n_rot            = 256
0.00.292.247 I llm_load_print_meta: n_swa            = 0
0.00.292.247 I llm_load_print_meta: n_embd_head_k    = 256
0.00.292.248 I llm_load_print_meta: n_embd_head_v    = 256
0.00.292.249 I llm_load_print_meta: n_gqa            = 8
0.00.292.251 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.292.253 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.292.254 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.292.255 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.292.256 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.292.256 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.292.256 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.292.258 I llm_load_print_meta: n_ff             = 16384
0.00.292.258 I llm_load_print_meta: n_expert         = 0
0.00.292.258 I llm_load_print_meta: n_expert_used    = 0
0.00.292.259 I llm_load_print_meta: causal attn      = 1
0.00.292.259 I llm_load_print_meta: pooling type     = 0
0.00.292.259 I llm_load_print_meta: rope type        = 2
0.00.292.260 I llm_load_print_meta: rope scaling     = linear
0.00.292.261 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.292.262 I llm_load_print_meta: freq_scale_train = 1
0.00.292.262 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.292.263 I llm_load_print_meta: rope_finetuned   = unknown
0.00.292.263 I llm_load_print_meta: ssm_d_conv       = 0
0.00.292.264 I llm_load_print_meta: ssm_d_inner      = 0
0.00.292.264 I llm_load_print_meta: ssm_d_state      = 0
0.00.292.264 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.292.265 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.292.266 I llm_load_print_meta: model type       = 2B
0.00.292.267 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.292.268 I llm_load_print_meta: model params     = 2.51 B
0.00.292.269 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.292.269 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.292.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.292.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.292.271 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.292.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.292.271 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.292.272 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.292.272 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.292.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.292.273 I llm_load_print_meta: max token length = 93
0.00.349.078 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.354.323 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.329 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.329 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.330 I llama_new_context_with_model: n_batch       = 2048
0.00.354.330 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.331 I llama_new_context_with_model: flash_attn    = 0
0.00.354.334 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.334 I llama_new_context_with_model: freq_scale    = 1
0.00.354.335 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.358 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.369.438 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.454 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.548 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.816 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.822 I llama_new_context_with_model: graph nodes  = 601
0.00.370.823 I llama_new_context_with_model: graph splits = 1
0.00.370.826 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.370.826 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.748 I main: llama threadpool init, n_threads = 4
0.00.445.763 I 
0.00.445.844 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.445.848 I 
0.00.445.892 I sampler seed: 2859864914
0.00.445.905 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.908 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.909 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.909 I 
 seconded strings and concatenated them into a single string.

```python
original_string = "Hello world!"

# Split the string into a list

0.02.031.820 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6490.95 tokens per second)
0.02.031.822 I llama_perf_context_print:        load time =     444.96 ms
0.02.031.823 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.031.825 I llama_perf_context_print:        eval time =    1566.96 ms /    32 runs   (   48.97 ms per token,    20.42 tokens per second)
0.02.031.825 I llama_perf_context_print:       total time =    1586.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.495s
user	10m24.217s
sys	0m7.243s
