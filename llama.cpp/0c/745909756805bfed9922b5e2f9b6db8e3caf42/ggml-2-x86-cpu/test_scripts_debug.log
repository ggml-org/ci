+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4160 (0c745909) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.489 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.501 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.595 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.608 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.609 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.615 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.619 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.620 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.621 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.622 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.624 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.631 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.632 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.633 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.634 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.642 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.549 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.666 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.207 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.217 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.219 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.220 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.221 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.222 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.227 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.229 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.230 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.232 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.241 I llama_model_loader: - type  f32:   37 tensors
0.00.271.243 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.671 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.012 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.966 I llm_load_vocab: special tokens cache size = 5
0.00.611.035 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.106 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.107 I llm_load_print_meta: arch             = gemma
0.00.611.108 I llm_load_print_meta: vocab type       = SPM
0.00.611.109 I llm_load_print_meta: n_vocab          = 256000
0.00.611.112 I llm_load_print_meta: n_merges         = 0
0.00.611.112 I llm_load_print_meta: vocab_only       = 0
0.00.611.113 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.113 I llm_load_print_meta: n_embd           = 2048
0.00.611.114 I llm_load_print_meta: n_layer          = 18
0.00.611.179 I llm_load_print_meta: n_head           = 8
0.00.611.187 I llm_load_print_meta: n_head_kv        = 1
0.00.611.187 I llm_load_print_meta: n_rot            = 256
0.00.611.188 I llm_load_print_meta: n_swa            = 0
0.00.611.188 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.190 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.195 I llm_load_print_meta: n_gqa            = 8
0.00.611.211 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.228 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.233 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.234 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.235 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.235 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.236 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.241 I llm_load_print_meta: n_ff             = 16384
0.00.611.242 I llm_load_print_meta: n_expert         = 0
0.00.611.242 I llm_load_print_meta: n_expert_used    = 0
0.00.611.242 I llm_load_print_meta: causal attn      = 1
0.00.611.243 I llm_load_print_meta: pooling type     = 0
0.00.611.243 I llm_load_print_meta: rope type        = 2
0.00.611.244 I llm_load_print_meta: rope scaling     = linear
0.00.611.245 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.245 I llm_load_print_meta: freq_scale_train = 1
0.00.611.254 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.261 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.261 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.262 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.263 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.263 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.263 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.265 I llm_load_print_meta: model type       = 2B
0.00.611.266 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.266 I llm_load_print_meta: model params     = 2.51 B
0.00.611.276 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.276 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.277 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.278 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.278 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.285 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.286 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.287 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.294 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.295 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.296 I llm_load_print_meta: max token length = 93
0.00.714.495 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.714.505 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.714.506 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.714.507 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.714.508 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.714.508 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.720.400 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.408 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.408 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.409 I llama_new_context_with_model: n_batch       = 2048
0.00.720.409 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.410 I llama_new_context_with_model: flash_attn    = 0
0.00.720.412 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.413 I llama_new_context_with_model: freq_scale    = 1
0.00.720.414 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.734.820 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.734.858 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.734.985 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.532 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.737.536 I llama_new_context_with_model: graph nodes  = 601
0.00.737.536 I llama_new_context_with_model: graph splits = 1
0.00.737.560 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.592 I main: llama threadpool init, n_threads = 4
0.01.344.606 I 
0.01.344.713 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.716 I 
0.01.344.960 I sampler seed: 698809515
0.01.344.973 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.980 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.982 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.983 I 
 seconally to a given number. 

For example, if I give the number 10, the sequence would be 1, 2, 

0.14.819.551 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.84 tokens per second)
0.14.819.556 I llama_perf_context_print:        load time =    1343.63 ms
0.14.819.558 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.819.560 I llama_perf_context_print:        eval time =   13383.83 ms /    32 runs   (  418.24 ms per token,     2.39 tokens per second)
0.14.819.561 I llama_perf_context_print:       total time =   13474.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.719 I build: 4160 (0c745909) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.961 I main: llama backend init
0.00.000.971 I main: load the model and apply lora adapter, if any
0.00.023.966 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.084 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.102 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.106 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.115 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.117 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.121 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.123 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.126 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.143 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.144 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.146 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.148 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.830 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.041 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.715 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.727 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.729 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.730 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.731 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.732 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.734 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.737 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.738 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.740 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.740 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.273.742 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.751 I llama_model_loader: - type  f32:   37 tensors
0.00.273.754 I llama_model_loader: - type q8_0:  127 tensors
0.00.488.536 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.559.644 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.560.745 I llm_load_vocab: special tokens cache size = 5
0.00.675.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.675.626 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.675.627 I llm_load_print_meta: arch             = gemma
0.00.675.628 I llm_load_print_meta: vocab type       = SPM
0.00.675.629 I llm_load_print_meta: n_vocab          = 256000
0.00.675.631 I llm_load_print_meta: n_merges         = 0
0.00.675.632 I llm_load_print_meta: vocab_only       = 0
0.00.675.632 I llm_load_print_meta: n_ctx_train      = 8192
0.00.675.633 I llm_load_print_meta: n_embd           = 2048
0.00.675.633 I llm_load_print_meta: n_layer          = 18
0.00.675.698 I llm_load_print_meta: n_head           = 8
0.00.675.705 I llm_load_print_meta: n_head_kv        = 1
0.00.675.706 I llm_load_print_meta: n_rot            = 256
0.00.675.706 I llm_load_print_meta: n_swa            = 0
0.00.675.707 I llm_load_print_meta: n_embd_head_k    = 256
0.00.675.707 I llm_load_print_meta: n_embd_head_v    = 256
0.00.675.712 I llm_load_print_meta: n_gqa            = 8
0.00.675.717 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.675.722 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.675.724 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.675.725 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.675.726 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.675.726 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.675.726 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.675.731 I llm_load_print_meta: n_ff             = 16384
0.00.675.732 I llm_load_print_meta: n_expert         = 0
0.00.675.733 I llm_load_print_meta: n_expert_used    = 0
0.00.675.734 I llm_load_print_meta: causal attn      = 1
0.00.675.734 I llm_load_print_meta: pooling type     = 0
0.00.675.734 I llm_load_print_meta: rope type        = 2
0.00.675.735 I llm_load_print_meta: rope scaling     = linear
0.00.675.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.675.737 I llm_load_print_meta: freq_scale_train = 1
0.00.675.737 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.675.737 I llm_load_print_meta: rope_finetuned   = unknown
0.00.675.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.675.739 I llm_load_print_meta: ssm_d_inner      = 0
0.00.675.740 I llm_load_print_meta: ssm_d_state      = 0
0.00.675.740 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.675.740 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.675.741 I llm_load_print_meta: model type       = 2B
0.00.675.742 I llm_load_print_meta: model ftype      = Q8_0
0.00.675.742 I llm_load_print_meta: model params     = 2.51 B
0.00.675.754 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.675.755 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.675.756 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.675.756 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.675.757 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.675.758 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.675.765 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.675.765 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.675.774 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.675.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.675.786 I llm_load_print_meta: max token length = 93
0.00.770.945 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.777.330 I llama_new_context_with_model: n_seq_max     = 1
0.00.777.340 I llama_new_context_with_model: n_ctx         = 4096
0.00.777.341 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.777.341 I llama_new_context_with_model: n_batch       = 2048
0.00.777.342 I llama_new_context_with_model: n_ubatch      = 512
0.00.777.342 I llama_new_context_with_model: flash_attn    = 0
0.00.777.346 I llama_new_context_with_model: freq_base     = 10000.0
0.00.777.347 I llama_new_context_with_model: freq_scale    = 1
0.00.777.347 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.793.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.793.609 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.793.751 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.796.396 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.796.400 I llama_new_context_with_model: graph nodes  = 601
0.00.796.400 I llama_new_context_with_model: graph splits = 1
0.00.796.424 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.407.473 I main: llama threadpool init, n_threads = 4
0.01.407.490 I 
0.01.407.614 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.407.619 I 
0.01.407.857 I sampler seed: 1291767797
0.01.407.870 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.407.878 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.407.878 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.407.879 I 
 increasities, and sexual harassment.

Sexual harassment is a serious issue that can have a significant impact on the lives of victims. It is important to be aware

0.14.961.670 I llama_perf_sampler_print:    sampling time =      49.80 ms /    33 runs   (    1.51 ms per token,   662.69 tokens per second)
0.14.961.696 I llama_perf_context_print:        load time =    1406.39 ms
0.14.961.699 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.961.701 I llama_perf_context_print:        eval time =   13463.15 ms /    32 runs   (  420.72 ms per token,     2.38 tokens per second)
0.14.961.703 I llama_perf_context_print:       total time =   13554.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4160 (0c745909) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.388 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.397 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.492 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.503 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.506 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.512 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.516 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.517 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.518 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.519 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.520 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.527 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.529 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.531 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.532 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.533 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.024 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.399 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.075 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.087 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.088 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.089 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.090 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.107 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.109 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.110 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.273.113 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.121 I llama_model_loader: - type  f32:   37 tensors
0.00.273.124 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.405 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.479 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.464 I llm_load_vocab: special tokens cache size = 5
0.00.613.532 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.606 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.610 I llm_load_print_meta: arch             = gemma
0.00.613.611 I llm_load_print_meta: vocab type       = SPM
0.00.613.612 I llm_load_print_meta: n_vocab          = 256000
0.00.613.615 I llm_load_print_meta: n_merges         = 0
0.00.613.615 I llm_load_print_meta: vocab_only       = 0
0.00.613.615 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.616 I llm_load_print_meta: n_embd           = 2048
0.00.613.616 I llm_load_print_meta: n_layer          = 18
0.00.613.678 I llm_load_print_meta: n_head           = 8
0.00.613.688 I llm_load_print_meta: n_head_kv        = 1
0.00.613.689 I llm_load_print_meta: n_rot            = 256
0.00.613.689 I llm_load_print_meta: n_swa            = 0
0.00.613.690 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.690 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.695 I llm_load_print_meta: n_gqa            = 8
0.00.613.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.708 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.709 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.710 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.711 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.711 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.712 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.717 I llm_load_print_meta: n_ff             = 16384
0.00.613.718 I llm_load_print_meta: n_expert         = 0
0.00.613.718 I llm_load_print_meta: n_expert_used    = 0
0.00.613.719 I llm_load_print_meta: causal attn      = 1
0.00.613.719 I llm_load_print_meta: pooling type     = 0
0.00.613.720 I llm_load_print_meta: rope type        = 2
0.00.613.720 I llm_load_print_meta: rope scaling     = linear
0.00.613.721 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.723 I llm_load_print_meta: freq_scale_train = 1
0.00.613.723 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.724 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.734 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.735 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.736 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.736 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.737 I llm_load_print_meta: model type       = 2B
0.00.613.739 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.739 I llm_load_print_meta: model params     = 2.51 B
0.00.613.749 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.750 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.751 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.751 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.752 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.753 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.753 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.753 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.761 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.762 I llm_load_print_meta: max token length = 93
0.00.688.776 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.688.783 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.688.784 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.688.785 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.688.785 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.688.786 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.694.656 I llama_new_context_with_model: n_seq_max     = 1
0.00.694.665 I llama_new_context_with_model: n_ctx         = 4096
0.00.694.666 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.694.666 I llama_new_context_with_model: n_batch       = 2048
0.00.694.667 I llama_new_context_with_model: n_ubatch      = 512
0.00.694.667 I llama_new_context_with_model: flash_attn    = 0
0.00.694.671 I llama_new_context_with_model: freq_base     = 10000.0
0.00.694.673 I llama_new_context_with_model: freq_scale    = 1
0.00.694.674 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.709.338 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.709.378 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.709.505 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.121 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.712.125 I llama_new_context_with_model: graph nodes  = 601
0.00.712.126 I llama_new_context_with_model: graph splits = 1
0.00.712.149 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.709 I main: llama threadpool init, n_threads = 4
0.01.319.724 I 
0.01.319.832 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.319.836 I 
0.01.320.063 I sampler seed: 1901652043
0.01.320.075 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.081 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.320.085 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.085 I 
 increasities in the modern world, such as the spread of misinformation, fake news, and disinformation.

**Discussion Points:**

1. What are the key

0.14.792.300 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.44 tokens per second)
0.14.792.303 I llama_perf_context_print:        load time =    1318.76 ms
0.14.792.316 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.792.318 I llama_perf_context_print:        eval time =   13383.07 ms /    32 runs   (  418.22 ms per token,     2.39 tokens per second)
0.14.792.320 I llama_perf_context_print:       total time =   13472.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.678 I build: 4160 (0c745909) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.023.259 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.269 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.362 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.375 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.378 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.383 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.387 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.388 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.391 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.402 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.404 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.405 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.406 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.407 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.922 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.037 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.642 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.651 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.652 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.653 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.654 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.656 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.657 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.661 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.662 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.664 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.665 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.667 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.676 I llama_model_loader: - type  f32:   37 tensors
0.00.271.678 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.997 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.532.430 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.533.400 I llm_load_vocab: special tokens cache size = 5
0.00.629.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.357 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.358 I llm_load_print_meta: arch             = gemma
0.00.629.359 I llm_load_print_meta: vocab type       = SPM
0.00.629.361 I llm_load_print_meta: n_vocab          = 256000
0.00.629.363 I llm_load_print_meta: n_merges         = 0
0.00.629.363 I llm_load_print_meta: vocab_only       = 0
0.00.629.364 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.364 I llm_load_print_meta: n_embd           = 2048
0.00.629.365 I llm_load_print_meta: n_layer          = 18
0.00.629.429 I llm_load_print_meta: n_head           = 8
0.00.629.436 I llm_load_print_meta: n_head_kv        = 1
0.00.629.436 I llm_load_print_meta: n_rot            = 256
0.00.629.437 I llm_load_print_meta: n_swa            = 0
0.00.629.437 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.437 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.442 I llm_load_print_meta: n_gqa            = 8
0.00.629.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.452 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.453 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.454 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.455 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.455 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.456 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.460 I llm_load_print_meta: n_ff             = 16384
0.00.629.461 I llm_load_print_meta: n_expert         = 0
0.00.629.461 I llm_load_print_meta: n_expert_used    = 0
0.00.629.461 I llm_load_print_meta: causal attn      = 1
0.00.629.462 I llm_load_print_meta: pooling type     = 0
0.00.629.462 I llm_load_print_meta: rope type        = 2
0.00.629.462 I llm_load_print_meta: rope scaling     = linear
0.00.629.464 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.464 I llm_load_print_meta: freq_scale_train = 1
0.00.629.465 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.465 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.465 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.467 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.467 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.468 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.468 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.469 I llm_load_print_meta: model type       = 2B
0.00.629.471 I llm_load_print_meta: model ftype      = Q8_0
0.00.629.472 I llm_load_print_meta: model params     = 2.51 B
0.00.629.481 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.629.502 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.504 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.505 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.505 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.513 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.520 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.521 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.528 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.529 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.529 I llm_load_print_meta: max token length = 93
0.00.701.860 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.701.870 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.707.658 I llama_new_context_with_model: n_seq_max     = 1
0.00.707.664 I llama_new_context_with_model: n_ctx         = 4096
0.00.707.665 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.707.665 I llama_new_context_with_model: n_batch       = 2048
0.00.707.666 I llama_new_context_with_model: n_ubatch      = 512
0.00.707.666 I llama_new_context_with_model: flash_attn    = 0
0.00.707.669 I llama_new_context_with_model: freq_base     = 10000.0
0.00.707.670 I llama_new_context_with_model: freq_scale    = 1
0.00.707.671 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.722.201 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.722.243 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.722.367 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.957 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.724.961 I llama_new_context_with_model: graph nodes  = 601
0.00.724.962 I llama_new_context_with_model: graph splits = 1
0.00.724.986 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.193 I main: llama threadpool init, n_threads = 4
0.01.335.206 I 
0.01.335.324 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.328 I 
0.01.335.600 I sampler seed: 4257539197
0.01.335.614 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.335.621 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.335.622 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.335.622 I 
 maneuvously.

I cannot answer this question as it contains inappropriate language and imagery. [end of text]


0.09.352.994 I llama_perf_sampler_print:    sampling time =      29.34 ms /    20 runs   (    1.47 ms per token,   681.73 tokens per second)
0.09.352.997 I llama_perf_context_print:        load time =    1334.22 ms
0.09.352.998 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.352.999 I llama_perf_context_print:        eval time =    7963.74 ms /    19 runs   (  419.14 ms per token,     2.39 tokens per second)
0.09.353.015 I llama_perf_context_print:       total time =    8017.81 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m3.780s
user	3m26.870s
sys	0m9.566s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4160 (0c745909)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186985.57 ms
main:    total time = 186985.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4160 (0c745909) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.023.624 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.636 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.731 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.747 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.753 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.756 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.757 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.758 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.759 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.760 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.771 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.775 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.776 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.777 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.778 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.578 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.380 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.987 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.997 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.998 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.999 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.001 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.002 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.006 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.007 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.008 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.009 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.011 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.020 I llama_model_loader: - type  f32:   37 tensors
0.00.271.023 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.024 I llama_model_loader: - type q6_K:   19 tensors
0.00.459.489 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.902 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.922 I llm_load_vocab: special tokens cache size = 5
0.00.629.290 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.358 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.359 I llm_load_print_meta: arch             = gemma
0.00.629.360 I llm_load_print_meta: vocab type       = SPM
0.00.629.361 I llm_load_print_meta: n_vocab          = 256000
0.00.629.363 I llm_load_print_meta: n_merges         = 0
0.00.629.364 I llm_load_print_meta: vocab_only       = 0
0.00.629.364 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.365 I llm_load_print_meta: n_embd           = 2048
0.00.629.365 I llm_load_print_meta: n_layer          = 18
0.00.629.430 I llm_load_print_meta: n_head           = 8
0.00.629.436 I llm_load_print_meta: n_head_kv        = 1
0.00.629.437 I llm_load_print_meta: n_rot            = 256
0.00.629.437 I llm_load_print_meta: n_swa            = 0
0.00.629.438 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.438 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.443 I llm_load_print_meta: n_gqa            = 8
0.00.629.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.453 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.454 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.456 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.463 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.463 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.464 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.468 I llm_load_print_meta: n_ff             = 16384
0.00.629.469 I llm_load_print_meta: n_expert         = 0
0.00.629.470 I llm_load_print_meta: n_expert_used    = 0
0.00.629.470 I llm_load_print_meta: causal attn      = 1
0.00.629.470 I llm_load_print_meta: pooling type     = 0
0.00.629.471 I llm_load_print_meta: rope type        = 2
0.00.629.472 I llm_load_print_meta: rope scaling     = linear
0.00.629.474 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.475 I llm_load_print_meta: freq_scale_train = 1
0.00.629.475 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.476 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.476 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.477 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.477 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.477 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.478 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.479 I llm_load_print_meta: model type       = 2B
0.00.629.480 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.629.481 I llm_load_print_meta: model params     = 2.51 B
0.00.629.490 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.629.491 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.492 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.493 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.493 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.494 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.494 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.495 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.501 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.502 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.503 I llm_load_print_meta: max token length = 93
0.00.690.254 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.690.265 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.690.266 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.690.266 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.690.267 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.690.268 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.696.075 I llama_new_context_with_model: n_seq_max     = 1
0.00.696.082 I llama_new_context_with_model: n_ctx         = 4096
0.00.696.083 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.696.083 I llama_new_context_with_model: n_batch       = 2048
0.00.696.083 I llama_new_context_with_model: n_ubatch      = 512
0.00.696.084 I llama_new_context_with_model: flash_attn    = 0
0.00.696.087 I llama_new_context_with_model: freq_base     = 10000.0
0.00.696.087 I llama_new_context_with_model: freq_scale    = 1
0.00.696.088 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.710.697 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.710.736 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.710.864 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.423 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.713.426 I llama_new_context_with_model: graph nodes  = 601
0.00.713.427 I llama_new_context_with_model: graph splits = 1
0.00.713.450 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.116 I main: llama threadpool init, n_threads = 4
0.01.298.129 I 
0.01.298.236 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.240 I 
0.01.298.466 I sampler seed: 3078160327
0.01.298.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.485 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.298.487 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.298.488 I 
 increamically.

I'm not sure what you're trying to ask. Please try again. [end of text]


0.08.942.926 I llama_perf_sampler_print:    sampling time =      33.84 ms /    23 runs   (    1.47 ms per token,   679.69 tokens per second)
0.08.942.929 I llama_perf_context_print:        load time =    1297.14 ms
0.08.942.931 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.942.933 I llama_perf_context_print:        eval time =    7582.45 ms /    22 runs   (  344.66 ms per token,     2.90 tokens per second)
0.08.942.944 I llama_perf_context_print:       total time =    7644.82 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4160 (0c745909)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186206.70 ms
main:    total time = 186206.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4160 (0c745909) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.557 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.667 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.684 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.689 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.696 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.698 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.699 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.701 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.702 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.703 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.711 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.715 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.716 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.718 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.719 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.005 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.275 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.888 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.901 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.902 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.903 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.904 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.905 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.907 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.910 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.911 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.919 I llama_model_loader: - type  f32:   37 tensors
0.00.271.923 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.923 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.438 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.292 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.269 I llm_load_vocab: special tokens cache size = 5
0.00.638.328 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.638.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.638.402 I llm_load_print_meta: arch             = gemma
0.00.638.403 I llm_load_print_meta: vocab type       = SPM
0.00.638.404 I llm_load_print_meta: n_vocab          = 256000
0.00.638.407 I llm_load_print_meta: n_merges         = 0
0.00.638.407 I llm_load_print_meta: vocab_only       = 0
0.00.638.408 I llm_load_print_meta: n_ctx_train      = 8192
0.00.638.408 I llm_load_print_meta: n_embd           = 2048
0.00.638.409 I llm_load_print_meta: n_layer          = 18
0.00.638.477 I llm_load_print_meta: n_head           = 8
0.00.638.484 I llm_load_print_meta: n_head_kv        = 1
0.00.638.485 I llm_load_print_meta: n_rot            = 256
0.00.638.485 I llm_load_print_meta: n_swa            = 0
0.00.638.486 I llm_load_print_meta: n_embd_head_k    = 256
0.00.638.486 I llm_load_print_meta: n_embd_head_v    = 256
0.00.638.491 I llm_load_print_meta: n_gqa            = 8
0.00.638.495 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.638.524 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.638.525 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.638.527 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.638.528 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.638.528 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.529 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.535 I llm_load_print_meta: n_ff             = 16384
0.00.638.535 I llm_load_print_meta: n_expert         = 0
0.00.638.536 I llm_load_print_meta: n_expert_used    = 0
0.00.638.537 I llm_load_print_meta: causal attn      = 1
0.00.638.537 I llm_load_print_meta: pooling type     = 0
0.00.638.537 I llm_load_print_meta: rope type        = 2
0.00.638.538 I llm_load_print_meta: rope scaling     = linear
0.00.638.539 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.540 I llm_load_print_meta: freq_scale_train = 1
0.00.638.541 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.541 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.541 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.541 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.542 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.542 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.542 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.543 I llm_load_print_meta: model type       = 2B
0.00.638.544 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.638.546 I llm_load_print_meta: model params     = 2.51 B
0.00.638.556 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.638.557 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.558 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.558 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.567 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.568 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.574 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.577 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.586 I llm_load_print_meta: max token length = 93
0.00.694.114 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.700.039 I llama_new_context_with_model: n_seq_max     = 1
0.00.700.047 I llama_new_context_with_model: n_ctx         = 4096
0.00.700.048 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.700.048 I llama_new_context_with_model: n_batch       = 2048
0.00.700.048 I llama_new_context_with_model: n_ubatch      = 512
0.00.700.049 I llama_new_context_with_model: flash_attn    = 0
0.00.700.053 I llama_new_context_with_model: freq_base     = 10000.0
0.00.700.053 I llama_new_context_with_model: freq_scale    = 1
0.00.700.054 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.715.383 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.715.425 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.715.551 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.240 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.718.244 I llama_new_context_with_model: graph nodes  = 601
0.00.718.245 I llama_new_context_with_model: graph splits = 1
0.00.718.267 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.225 I main: llama threadpool init, n_threads = 4
0.01.301.239 I 
0.01.301.346 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.346 I 
0.01.301.590 I sampler seed: 3871894918
0.01.301.603 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.610 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.301.613 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.614 I 
 seconally. The sentence is about a hypothetical situation.

**Hypothetical Situation:**

If the government implemented a carbon tax, would people be more likely

0.12.478.083 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.95 tokens per second)
0.12.478.096 I llama_perf_context_print:        load time =    1300.27 ms
0.12.478.099 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.478.101 I llama_perf_context_print:        eval time =   11087.80 ms /    32 runs   (  346.49 ms per token,     2.89 tokens per second)
0.12.478.102 I llama_perf_context_print:       total time =   11176.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m37.565s
user	46m36.036s
sys	0m6.412s
