+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.190 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.392 I main: llama backend init
0.00.000.399 I main: load the model and apply lora adapter, if any
0.00.020.912 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.924 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.932 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.937 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.943 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.944 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.944 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.945 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.945 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.950 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.950 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.951 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.952 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.952 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.915 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.747 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.753 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.754 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.755 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.756 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.757 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.758 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.761 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.762 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.763 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.764 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.765 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.769 I llama_model_loader: - type  f32:   37 tensors
0.00.131.770 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.811 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.067 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.611 I llm_load_vocab: special tokens cache size = 5
0.00.260.507 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.521 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.522 I llm_load_print_meta: arch             = gemma
0.00.260.522 I llm_load_print_meta: vocab type       = SPM
0.00.260.523 I llm_load_print_meta: n_vocab          = 256000
0.00.260.524 I llm_load_print_meta: n_merges         = 0
0.00.260.524 I llm_load_print_meta: vocab_only       = 0
0.00.260.524 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.524 I llm_load_print_meta: n_embd           = 2048
0.00.260.525 I llm_load_print_meta: n_layer          = 18
0.00.260.536 I llm_load_print_meta: n_head           = 8
0.00.260.537 I llm_load_print_meta: n_head_kv        = 1
0.00.260.537 I llm_load_print_meta: n_rot            = 256
0.00.260.537 I llm_load_print_meta: n_swa            = 0
0.00.260.538 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.539 I llm_load_print_meta: n_gqa            = 8
0.00.260.540 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.541 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.543 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.545 I llm_load_print_meta: n_ff             = 16384
0.00.260.545 I llm_load_print_meta: n_expert         = 0
0.00.260.545 I llm_load_print_meta: n_expert_used    = 0
0.00.260.545 I llm_load_print_meta: causal attn      = 1
0.00.260.546 I llm_load_print_meta: pooling type     = 0
0.00.260.546 I llm_load_print_meta: rope type        = 2
0.00.260.546 I llm_load_print_meta: rope scaling     = linear
0.00.260.548 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.548 I llm_load_print_meta: freq_scale_train = 1
0.00.260.549 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.549 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.550 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.550 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.550 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.550 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.551 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.551 I llm_load_print_meta: model type       = 2B
0.00.260.552 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.552 I llm_load_print_meta: model params     = 2.51 B
0.00.260.553 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.553 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.554 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.554 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.554 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.555 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.555 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.556 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.556 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.556 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.556 I llm_load_print_meta: max token length = 93
0.00.362.036 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.362.045 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.362.046 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.362.046 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.362.047 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.362.047 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.367.169 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.175 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.176 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.176 I llama_new_context_with_model: n_batch       = 2048
0.00.367.177 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.177 I llama_new_context_with_model: flash_attn    = 0
0.00.367.180 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.180 I llama_new_context_with_model: freq_scale    = 1
0.00.367.181 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.130 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.143 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.233 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.473 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.480 I llama_new_context_with_model: graph nodes  = 601
0.00.382.480 I llama_new_context_with_model: graph splits = 1
0.00.382.483 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.010 I main: llama threadpool init, n_threads = 4
0.00.467.025 I 
0.00.467.096 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.100 I 
0.00.467.146 I sampler seed: 3459878202
0.00.467.157 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.160 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.161 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.161 I 
 increadibly. [end of text]


0.00.748.446 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8319.47 tokens per second)
0.00.748.448 I llama_perf_context_print:        load time =     466.59 ms
0.00.748.449 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.748.450 I llama_perf_context_print:        eval time =     278.32 ms /     4 runs   (   69.58 ms per token,    14.37 tokens per second)
0.00.748.450 I llama_perf_context_print:       total time =     281.44 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.533 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.020.806 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.821 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.827 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.829 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.833 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.837 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.837 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.838 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.839 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.839 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.842 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.843 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.843 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.844 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.845 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.203 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.173 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.027 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.034 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.035 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.036 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.036 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.037 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.038 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.041 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.041 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.042 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.044 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.045 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.048 I llama_model_loader: - type  f32:   37 tensors
0.00.131.049 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.395 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.182 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.708 I llm_load_vocab: special tokens cache size = 5
0.00.263.590 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.605 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.606 I llm_load_print_meta: arch             = gemma
0.00.263.607 I llm_load_print_meta: vocab type       = SPM
0.00.263.607 I llm_load_print_meta: n_vocab          = 256000
0.00.263.608 I llm_load_print_meta: n_merges         = 0
0.00.263.608 I llm_load_print_meta: vocab_only       = 0
0.00.263.608 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.609 I llm_load_print_meta: n_embd           = 2048
0.00.263.609 I llm_load_print_meta: n_layer          = 18
0.00.263.620 I llm_load_print_meta: n_head           = 8
0.00.263.621 I llm_load_print_meta: n_head_kv        = 1
0.00.263.622 I llm_load_print_meta: n_rot            = 256
0.00.263.622 I llm_load_print_meta: n_swa            = 0
0.00.263.622 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.622 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.623 I llm_load_print_meta: n_gqa            = 8
0.00.263.624 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.625 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.626 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.628 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.628 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.628 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.629 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.630 I llm_load_print_meta: n_ff             = 16384
0.00.263.630 I llm_load_print_meta: n_expert         = 0
0.00.263.630 I llm_load_print_meta: n_expert_used    = 0
0.00.263.631 I llm_load_print_meta: causal attn      = 1
0.00.263.631 I llm_load_print_meta: pooling type     = 0
0.00.263.631 I llm_load_print_meta: rope type        = 2
0.00.263.632 I llm_load_print_meta: rope scaling     = linear
0.00.263.633 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.634 I llm_load_print_meta: freq_scale_train = 1
0.00.263.635 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.635 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.635 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.636 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.636 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.636 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.636 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.637 I llm_load_print_meta: model type       = 2B
0.00.263.637 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.638 I llm_load_print_meta: model params     = 2.51 B
0.00.263.639 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.639 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.639 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.640 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.640 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.640 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.641 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.641 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.642 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.642 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.642 I llm_load_print_meta: max token length = 93
0.00.358.604 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.363.801 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.807 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.807 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.808 I llama_new_context_with_model: n_batch       = 2048
0.00.363.808 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.809 I llama_new_context_with_model: flash_attn    = 0
0.00.363.811 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.812 I llama_new_context_with_model: freq_scale    = 1
0.00.363.813 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.729 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.759 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.852 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.171 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.176 I llama_new_context_with_model: graph nodes  = 601
0.00.380.177 I llama_new_context_with_model: graph splits = 1
0.00.380.179 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.434 I main: llama threadpool init, n_threads = 4
0.00.461.448 I 
0.00.461.519 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.523 I 
0.00.461.570 I sampler seed: 3355449436
0.00.461.581 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.593 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.597 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.597 I 
 increably. The more people you ask, the more perplexed you become. [end of text]


0.01.548.513 I llama_perf_sampler_print:    sampling time =       2.38 ms /    17 runs   (    0.14 ms per token,  7142.86 tokens per second)
0.01.548.517 I llama_perf_context_print:        load time =     460.68 ms
0.01.548.518 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.548.521 I llama_perf_context_print:        eval time =    1076.92 ms /    16 runs   (   67.31 ms per token,    14.86 tokens per second)
0.01.548.522 I llama_perf_context_print:       total time =    1087.09 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.177 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.357 I main: llama backend init
0.00.000.363 I main: load the model and apply lora adapter, if any
0.00.020.737 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.746 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.754 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.758 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.759 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.763 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.764 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.765 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.765 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.766 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.767 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.771 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.772 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.772 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.773 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.773 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.081 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.573 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.402 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.408 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.409 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.409 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.410 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.411 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.412 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.414 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.414 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.415 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.416 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.417 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.419 I llama_model_loader: - type  f32:   37 tensors
0.00.130.420 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.931 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.730 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.324 I llm_load_vocab: special tokens cache size = 5
0.00.267.451 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.468 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.470 I llm_load_print_meta: arch             = gemma
0.00.267.471 I llm_load_print_meta: vocab type       = SPM
0.00.267.471 I llm_load_print_meta: n_vocab          = 256000
0.00.267.472 I llm_load_print_meta: n_merges         = 0
0.00.267.472 I llm_load_print_meta: vocab_only       = 0
0.00.267.472 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.473 I llm_load_print_meta: n_embd           = 2048
0.00.267.473 I llm_load_print_meta: n_layer          = 18
0.00.267.486 I llm_load_print_meta: n_head           = 8
0.00.267.487 I llm_load_print_meta: n_head_kv        = 1
0.00.267.487 I llm_load_print_meta: n_rot            = 256
0.00.267.487 I llm_load_print_meta: n_swa            = 0
0.00.267.488 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.488 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.489 I llm_load_print_meta: n_gqa            = 8
0.00.267.491 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.491 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.492 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.494 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.495 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.496 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.496 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.497 I llm_load_print_meta: n_ff             = 16384
0.00.267.497 I llm_load_print_meta: n_expert         = 0
0.00.267.498 I llm_load_print_meta: n_expert_used    = 0
0.00.267.498 I llm_load_print_meta: causal attn      = 1
0.00.267.498 I llm_load_print_meta: pooling type     = 0
0.00.267.499 I llm_load_print_meta: rope type        = 2
0.00.267.499 I llm_load_print_meta: rope scaling     = linear
0.00.267.500 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.502 I llm_load_print_meta: freq_scale_train = 1
0.00.267.502 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.503 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.503 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.504 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.504 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.504 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.505 I llm_load_print_meta: model type       = 2B
0.00.267.506 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.507 I llm_load_print_meta: model params     = 2.51 B
0.00.267.508 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.510 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.510 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.511 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.512 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.512 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.513 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.513 I llm_load_print_meta: max token length = 93
0.00.343.089 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.343.096 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.097 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.343.097 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.343.098 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.343.098 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.348.244 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.250 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.251 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.251 I llama_new_context_with_model: n_batch       = 2048
0.00.348.252 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.252 I llama_new_context_with_model: flash_attn    = 0
0.00.348.255 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.256 I llama_new_context_with_model: freq_scale    = 1
0.00.348.257 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.845 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.858 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.947 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.208 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.215 I llama_new_context_with_model: graph nodes  = 601
0.00.364.215 I llama_new_context_with_model: graph splits = 1
0.00.364.218 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.079 I main: llama threadpool init, n_threads = 4
0.00.450.096 I 
0.00.450.169 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.173 I 
0.00.450.221 I sampler seed: 4157638116
0.00.450.232 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.244 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.248 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.248 I 
 increadibly for the opportunity to contribute to this initiative.

**Subject:** Collaboration with [Organization Name] to [Project Description]

**Dear [Recipient Name

0.02.723.074 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6748.47 tokens per second)
0.02.723.076 I llama_perf_context_print:        load time =     449.70 ms
0.02.723.077 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.079 I llama_perf_context_print:        eval time =    2253.79 ms /    32 runs   (   70.43 ms per token,    14.20 tokens per second)
0.02.723.080 I llama_perf_context_print:       total time =    2273.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.563 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.020.761 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.770 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.777 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.786 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.790 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.795 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.796 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.796 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.797 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.797 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.797 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.802 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.802 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.803 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.803 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.803 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.044 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.367 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.374 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.381 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.381 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.382 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.382 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.383 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.384 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.386 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.387 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.388 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.388 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.390 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.394 I llama_model_loader: - type  f32:   37 tensors
0.00.132.395 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.664 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.098 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.689 I llm_load_vocab: special tokens cache size = 5
0.00.269.618 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.632 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.633 I llm_load_print_meta: arch             = gemma
0.00.269.633 I llm_load_print_meta: vocab type       = SPM
0.00.269.634 I llm_load_print_meta: n_vocab          = 256000
0.00.269.634 I llm_load_print_meta: n_merges         = 0
0.00.269.635 I llm_load_print_meta: vocab_only       = 0
0.00.269.635 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.635 I llm_load_print_meta: n_embd           = 2048
0.00.269.636 I llm_load_print_meta: n_layer          = 18
0.00.269.648 I llm_load_print_meta: n_head           = 8
0.00.269.649 I llm_load_print_meta: n_head_kv        = 1
0.00.269.649 I llm_load_print_meta: n_rot            = 256
0.00.269.649 I llm_load_print_meta: n_swa            = 0
0.00.269.649 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.650 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.651 I llm_load_print_meta: n_gqa            = 8
0.00.269.652 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.653 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.653 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.655 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.655 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.656 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.656 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.657 I llm_load_print_meta: n_ff             = 16384
0.00.269.657 I llm_load_print_meta: n_expert         = 0
0.00.269.657 I llm_load_print_meta: n_expert_used    = 0
0.00.269.658 I llm_load_print_meta: causal attn      = 1
0.00.269.658 I llm_load_print_meta: pooling type     = 0
0.00.269.658 I llm_load_print_meta: rope type        = 2
0.00.269.658 I llm_load_print_meta: rope scaling     = linear
0.00.269.660 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.661 I llm_load_print_meta: freq_scale_train = 1
0.00.269.661 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.661 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.662 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.662 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.662 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.663 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.663 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.663 I llm_load_print_meta: model type       = 2B
0.00.269.664 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.664 I llm_load_print_meta: model params     = 2.51 B
0.00.269.665 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.665 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.666 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.666 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.667 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.667 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.667 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.668 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.668 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.669 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.669 I llm_load_print_meta: max token length = 93
0.00.340.433 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.340.438 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.345.384 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.391 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.391 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.392 I llama_new_context_with_model: n_batch       = 2048
0.00.345.392 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.393 I llama_new_context_with_model: flash_attn    = 0
0.00.345.395 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.396 I llama_new_context_with_model: freq_scale    = 1
0.00.345.397 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.659 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.672 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.761 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.028 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.034 I llama_new_context_with_model: graph nodes  = 601
0.00.361.034 I llama_new_context_with_model: graph splits = 1
0.00.361.036 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.912 I main: llama threadpool init, n_threads = 4
0.00.449.927 I 
0.00.449.997 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.000 I 
0.00.450.044 I sampler seed: 997713234
0.00.450.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.067 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.070 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.070 I 
 increably, blurring the lines between fiction and reality.

The world had transformed, morphing into a grotesque tapestry of concrete and glass, devoid of the warmth

0.02.874.572 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6730.57 tokens per second)
0.02.874.575 I llama_perf_context_print:        load time =     449.14 ms
0.02.874.576 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.874.578 I llama_perf_context_print:        eval time =    2405.50 ms /    32 runs   (   75.17 ms per token,    13.30 tokens per second)
0.02.874.580 I llama_perf_context_print:       total time =    2424.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.597s
user	0m27.058s
sys	0m9.397s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4271 (0cd182eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40188.18 ms
main:    total time = 40188.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.195 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.389 I main: llama backend init
0.00.000.394 I main: load the model and apply lora adapter, if any
0.00.020.513 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.521 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.529 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.533 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.534 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.538 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.538 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.539 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.540 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.540 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.540 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.543 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.544 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.545 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.545 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.717 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.526 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.341 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.347 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.348 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.349 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.349 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.350 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.351 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.353 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.354 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.354 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.355 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.357 I llama_model_loader: - type  f32:   37 tensors
0.00.130.358 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.358 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.014 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.835 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.425 I llm_load_vocab: special tokens cache size = 5
0.00.261.667 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.684 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.685 I llm_load_print_meta: arch             = gemma
0.00.261.685 I llm_load_print_meta: vocab type       = SPM
0.00.261.686 I llm_load_print_meta: n_vocab          = 256000
0.00.261.686 I llm_load_print_meta: n_merges         = 0
0.00.261.687 I llm_load_print_meta: vocab_only       = 0
0.00.261.687 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.688 I llm_load_print_meta: n_embd           = 2048
0.00.261.688 I llm_load_print_meta: n_layer          = 18
0.00.261.702 I llm_load_print_meta: n_head           = 8
0.00.261.702 I llm_load_print_meta: n_head_kv        = 1
0.00.261.703 I llm_load_print_meta: n_rot            = 256
0.00.261.703 I llm_load_print_meta: n_swa            = 0
0.00.261.704 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.704 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.705 I llm_load_print_meta: n_gqa            = 8
0.00.261.706 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.707 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.708 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.709 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.709 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.710 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.710 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.711 I llm_load_print_meta: n_ff             = 16384
0.00.261.712 I llm_load_print_meta: n_expert         = 0
0.00.261.712 I llm_load_print_meta: n_expert_used    = 0
0.00.261.712 I llm_load_print_meta: causal attn      = 1
0.00.261.712 I llm_load_print_meta: pooling type     = 0
0.00.261.713 I llm_load_print_meta: rope type        = 2
0.00.261.713 I llm_load_print_meta: rope scaling     = linear
0.00.261.714 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.715 I llm_load_print_meta: freq_scale_train = 1
0.00.261.715 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.716 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.716 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.717 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.717 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.717 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.717 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.718 I llm_load_print_meta: model type       = 2B
0.00.261.718 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.719 I llm_load_print_meta: model params     = 2.51 B
0.00.261.720 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.720 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.720 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.721 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.721 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.722 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.722 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.722 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.723 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.723 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.723 I llm_load_print_meta: max token length = 93
0.00.322.665 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.672 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.673 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.673 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.674 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.675 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.722 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.728 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.729 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.729 I llama_new_context_with_model: n_batch       = 2048
0.00.327.730 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.730 I llama_new_context_with_model: flash_attn    = 0
0.00.327.732 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.733 I llama_new_context_with_model: freq_scale    = 1
0.00.327.734 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.229 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.242 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.342.331 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.555 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.561 I llama_new_context_with_model: graph nodes  = 601
0.00.343.561 I llama_new_context_with_model: graph splits = 1
0.00.343.563 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.967 I main: llama threadpool init, n_threads = 4
0.00.417.985 I 
0.00.418.057 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.418.061 I 
0.00.418.102 I sampler seed: 3497580905
0.00.418.113 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.116 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.116 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.116 I 
 seconally.

I am unable to generate the requested output as I am unable to access external websites or perform web scraping. [end of text]


0.01.706.527 I llama_perf_sampler_print:    sampling time =       4.12 ms /    27 runs   (    0.15 ms per token,  6547.04 tokens per second)
0.01.706.530 I llama_perf_context_print:        load time =     417.56 ms
0.01.706.531 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.706.533 I llama_perf_context_print:        eval time =    1273.10 ms /    26 runs   (   48.97 ms per token,    20.42 tokens per second)
0.01.706.535 I llama_perf_context_print:       total time =    1288.57 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4271 (0cd182eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40166.33 ms
main:    total time = 40166.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.588 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.177 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.191 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.202 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.206 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.210 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.211 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.212 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.213 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.213 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.214 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.651 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.533 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.293 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.301 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.302 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.303 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.308 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.309 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.312 I llama_model_loader: - type  f32:   37 tensors
0.00.131.313 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.315 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.052 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.373 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.943 I llm_load_vocab: special tokens cache size = 5
0.00.262.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.116 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.117 I llm_load_print_meta: arch             = gemma
0.00.262.117 I llm_load_print_meta: vocab type       = SPM
0.00.262.118 I llm_load_print_meta: n_vocab          = 256000
0.00.262.118 I llm_load_print_meta: n_merges         = 0
0.00.262.118 I llm_load_print_meta: vocab_only       = 0
0.00.262.119 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.119 I llm_load_print_meta: n_embd           = 2048
0.00.262.119 I llm_load_print_meta: n_layer          = 18
0.00.262.132 I llm_load_print_meta: n_head           = 8
0.00.262.133 I llm_load_print_meta: n_head_kv        = 1
0.00.262.133 I llm_load_print_meta: n_rot            = 256
0.00.262.133 I llm_load_print_meta: n_swa            = 0
0.00.262.134 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.134 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.135 I llm_load_print_meta: n_gqa            = 8
0.00.262.136 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.136 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.137 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.139 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.139 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.140 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.140 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.141 I llm_load_print_meta: n_ff             = 16384
0.00.262.142 I llm_load_print_meta: n_expert         = 0
0.00.262.142 I llm_load_print_meta: n_expert_used    = 0
0.00.262.142 I llm_load_print_meta: causal attn      = 1
0.00.262.142 I llm_load_print_meta: pooling type     = 0
0.00.262.142 I llm_load_print_meta: rope type        = 2
0.00.262.143 I llm_load_print_meta: rope scaling     = linear
0.00.262.144 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.145 I llm_load_print_meta: freq_scale_train = 1
0.00.262.145 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.145 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.146 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.146 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.146 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.147 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.147 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.148 I llm_load_print_meta: model type       = 2B
0.00.262.148 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.149 I llm_load_print_meta: model params     = 2.51 B
0.00.262.149 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.150 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.150 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.150 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.151 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.153 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.154 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.154 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.155 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.155 I llm_load_print_meta: max token length = 93
0.00.318.878 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.323.947 I llama_new_context_with_model: n_seq_max     = 1
0.00.323.952 I llama_new_context_with_model: n_ctx         = 4096
0.00.323.953 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.323.953 I llama_new_context_with_model: n_batch       = 2048
0.00.323.954 I llama_new_context_with_model: n_ubatch      = 512
0.00.323.954 I llama_new_context_with_model: flash_attn    = 0
0.00.323.956 I llama_new_context_with_model: freq_base     = 10000.0
0.00.323.957 I llama_new_context_with_model: freq_scale    = 1
0.00.323.958 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.686 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.700 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.338.787 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.995 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.001 I llama_new_context_with_model: graph nodes  = 601
0.00.340.002 I llama_new_context_with_model: graph splits = 1
0.00.340.004 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.799 I main: llama threadpool init, n_threads = 4
0.00.413.814 I 
0.00.413.887 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.413.890 I 
0.00.413.940 I sampler seed: 2227843059
0.00.413.953 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.413.968 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.413.972 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.413.972 I 
 squaRED AS ABOVE.

**Assistant**

I cannot provide responses that promote misinformation or false information. [end of text]


0.01.480.393 I llama_perf_sampler_print:    sampling time =       3.46 ms /    23 runs   (    0.15 ms per token,  6637.81 tokens per second)
0.01.480.396 I llama_perf_context_print:        load time =     412.99 ms
0.01.480.397 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.480.399 I llama_perf_context_print:        eval time =    1053.45 ms /    22 runs   (   47.88 ms per token,    20.88 tokens per second)
0.01.480.400 I llama_perf_context_print:       total time =    1066.60 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.333s
user	10m20.682s
sys	0m6.995s
