+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.838 I main: load the model and apply lora adapter, if any
0.00.023.320 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.330 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.415 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.427 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.428 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.434 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.438 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.439 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.440 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.442 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.443 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.449 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.450 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.451 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.233.381 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.278 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.665 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.683 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.684 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.685 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.690 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.691 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.693 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.694 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.696 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.705 I llama_model_loader: - type  f32:   37 tensors
0.00.358.707 I llama_model_loader: - type q8_0:  127 tensors
0.00.583.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.418 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.335 I llm_load_vocab: special tokens cache size = 5
0.00.847.738 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.847.813 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.847.814 I llm_load_print_meta: arch             = gemma
0.00.847.815 I llm_load_print_meta: vocab type       = SPM
0.00.847.816 I llm_load_print_meta: n_vocab          = 256000
0.00.847.818 I llm_load_print_meta: n_merges         = 0
0.00.847.818 I llm_load_print_meta: vocab_only       = 0
0.00.847.819 I llm_load_print_meta: n_ctx_train      = 8192
0.00.847.819 I llm_load_print_meta: n_embd           = 2048
0.00.847.819 I llm_load_print_meta: n_layer          = 18
0.00.847.884 I llm_load_print_meta: n_head           = 8
0.00.847.891 I llm_load_print_meta: n_head_kv        = 1
0.00.847.892 I llm_load_print_meta: n_rot            = 256
0.00.847.892 I llm_load_print_meta: n_swa            = 0
0.00.847.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.847.893 I llm_load_print_meta: n_embd_head_v    = 256
0.00.847.897 I llm_load_print_meta: n_gqa            = 8
0.00.847.902 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.847.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.847.908 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.847.909 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.847.910 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.847.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.847.911 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.847.916 I llm_load_print_meta: n_ff             = 16384
0.00.847.917 I llm_load_print_meta: n_expert         = 0
0.00.847.918 I llm_load_print_meta: n_expert_used    = 0
0.00.847.918 I llm_load_print_meta: causal attn      = 1
0.00.847.919 I llm_load_print_meta: pooling type     = 0
0.00.847.929 I llm_load_print_meta: rope type        = 2
0.00.847.930 I llm_load_print_meta: rope scaling     = linear
0.00.847.933 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.847.934 I llm_load_print_meta: freq_scale_train = 1
0.00.847.938 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.847.938 I llm_load_print_meta: rope_finetuned   = unknown
0.00.847.938 I llm_load_print_meta: ssm_d_conv       = 0
0.00.847.939 I llm_load_print_meta: ssm_d_inner      = 0
0.00.847.939 I llm_load_print_meta: ssm_d_state      = 0
0.00.847.939 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.847.940 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.847.940 I llm_load_print_meta: model type       = 2B
0.00.847.941 I llm_load_print_meta: model ftype      = Q8_0
0.00.847.942 I llm_load_print_meta: model params     = 2.51 B
0.00.847.943 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.847.943 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.847.944 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.847.944 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.847.945 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.847.945 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.847.945 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.847.946 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.847.951 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.847.953 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.847.953 I llm_load_print_meta: max token length = 93
0.00.952.570 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.952.580 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.952.581 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.952.582 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.952.582 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.952.583 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.958.478 I llama_new_context_with_model: n_seq_max     = 1
0.00.958.484 I llama_new_context_with_model: n_ctx         = 4096
0.00.958.484 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.958.485 I llama_new_context_with_model: n_batch       = 2048
0.00.958.485 I llama_new_context_with_model: n_ubatch      = 512
0.00.958.486 I llama_new_context_with_model: flash_attn    = 0
0.00.958.488 I llama_new_context_with_model: freq_base     = 10000.0
0.00.958.488 I llama_new_context_with_model: freq_scale    = 1
0.00.958.489 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.973.203 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.973.244 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.973.358 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.975.919 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.975.923 I llama_new_context_with_model: graph nodes  = 601
0.00.975.924 I llama_new_context_with_model: graph splits = 1
0.00.975.948 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.587.136 I main: llama threadpool init, n_threads = 4
0.01.587.153 I 
0.01.587.272 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.587.276 I 
0.01.587.522 I sampler seed: 4228945859
0.01.587.537 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.558 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.569 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.573 I 
 increasels, a species of fish known for their regenerative abilities.

**Discuss how a regenerative fish might respond to injury or disease.**

**Answer:**



0.15.169.071 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.02 tokens per second)
0.15.169.087 I llama_perf_context_print:        load time =    1586.20 ms
0.15.169.089 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.169.092 I llama_perf_context_print:        eval time =   13492.23 ms /    32 runs   (  421.63 ms per token,     2.37 tokens per second)
0.15.169.093 I llama_perf_context_print:       total time =   13581.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.840 I main: load the model and apply lora adapter, if any
0.00.023.333 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.442 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.446 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.452 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.453 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.455 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.456 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.457 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.459 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.465 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.469 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.470 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.471 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.473 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.233.234 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.333.815 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.357.072 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.357.080 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.357.082 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.357.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.357.085 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.357.087 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.357.088 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.357.093 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.357.094 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.357.095 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.357.097 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.357.099 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.357.108 I llama_model_loader: - type  f32:   37 tensors
0.00.357.111 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.293 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.417 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.372 I llm_load_vocab: special tokens cache size = 5
0.00.846.356 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.431 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.432 I llm_load_print_meta: arch             = gemma
0.00.846.433 I llm_load_print_meta: vocab type       = SPM
0.00.846.433 I llm_load_print_meta: n_vocab          = 256000
0.00.846.436 I llm_load_print_meta: n_merges         = 0
0.00.846.437 I llm_load_print_meta: vocab_only       = 0
0.00.846.437 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.437 I llm_load_print_meta: n_embd           = 2048
0.00.846.438 I llm_load_print_meta: n_layer          = 18
0.00.846.502 I llm_load_print_meta: n_head           = 8
0.00.846.510 I llm_load_print_meta: n_head_kv        = 1
0.00.846.516 I llm_load_print_meta: n_rot            = 256
0.00.846.516 I llm_load_print_meta: n_swa            = 0
0.00.846.516 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.517 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.522 I llm_load_print_meta: n_gqa            = 8
0.00.846.527 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.533 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.535 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.536 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.537 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.537 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.537 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.543 I llm_load_print_meta: n_ff             = 16384
0.00.846.544 I llm_load_print_meta: n_expert         = 0
0.00.846.544 I llm_load_print_meta: n_expert_used    = 0
0.00.846.554 I llm_load_print_meta: causal attn      = 1
0.00.846.555 I llm_load_print_meta: pooling type     = 0
0.00.846.555 I llm_load_print_meta: rope type        = 2
0.00.846.556 I llm_load_print_meta: rope scaling     = linear
0.00.846.558 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.558 I llm_load_print_meta: freq_scale_train = 1
0.00.846.559 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.560 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.560 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.560 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.561 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.573 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.574 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.574 I llm_load_print_meta: model type       = 2B
0.00.846.575 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.576 I llm_load_print_meta: model params     = 2.51 B
0.00.846.577 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.578 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.578 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.579 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.580 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.588 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.589 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.596 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.608 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.609 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.610 I llm_load_print_meta: max token length = 93
0.00.944.938 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.950.836 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.843 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.843 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.844 I llama_new_context_with_model: n_batch       = 2048
0.00.950.844 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.845 I llama_new_context_with_model: flash_attn    = 0
0.00.950.847 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.848 I llama_new_context_with_model: freq_scale    = 1
0.00.950.848 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.965.910 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.965.955 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.968.686 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.968.690 I llama_new_context_with_model: graph nodes  = 601
0.00.968.691 I llama_new_context_with_model: graph splits = 1
0.00.968.713 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.579.772 I main: llama threadpool init, n_threads = 4
0.01.579.789 I 
0.01.579.931 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.579.934 I 
0.01.580.178 I sampler seed: 3056902972
0.01.580.192 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.580.204 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.580.204 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.580.205 I 
 increasities from the Greek mythology and their interpretations.

**1. Nemesis**

- Interpretation: The relentless pursuit and retribution of wrongdoers.
-

0.15.366.702 I llama_perf_sampler_print:    sampling time =      49.45 ms /    33 runs   (    1.50 ms per token,   667.37 tokens per second)
0.15.366.705 I llama_perf_context_print:        load time =    1578.84 ms
0.15.366.707 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.366.721 I llama_perf_context_print:        eval time =   13696.90 ms /    32 runs   (  428.03 ms per token,     2.34 tokens per second)
0.15.366.722 I llama_perf_context_print:       total time =   13786.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.683 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.023.301 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.309 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.396 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.407 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.409 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.414 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.418 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.420 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.421 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.423 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.425 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.431 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.432 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.434 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.435 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.437 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.274 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.435 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.673 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.682 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.684 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.685 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.686 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.688 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.689 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.693 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.694 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.695 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.697 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.349.699 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.708 I llama_model_loader: - type  f32:   37 tensors
0.00.349.710 I llama_model_loader: - type q8_0:  127 tensors
0.00.569.858 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.821 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.869 I llm_load_vocab: special tokens cache size = 5
0.00.835.746 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.822 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.823 I llm_load_print_meta: arch             = gemma
0.00.835.824 I llm_load_print_meta: vocab type       = SPM
0.00.835.825 I llm_load_print_meta: n_vocab          = 256000
0.00.835.828 I llm_load_print_meta: n_merges         = 0
0.00.835.828 I llm_load_print_meta: vocab_only       = 0
0.00.835.829 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.829 I llm_load_print_meta: n_embd           = 2048
0.00.835.829 I llm_load_print_meta: n_layer          = 18
0.00.835.893 I llm_load_print_meta: n_head           = 8
0.00.835.899 I llm_load_print_meta: n_head_kv        = 1
0.00.835.900 I llm_load_print_meta: n_rot            = 256
0.00.835.900 I llm_load_print_meta: n_swa            = 0
0.00.835.901 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.901 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.906 I llm_load_print_meta: n_gqa            = 8
0.00.835.910 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.941 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.943 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.945 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.955 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.955 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.963 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.969 I llm_load_print_meta: n_ff             = 16384
0.00.835.970 I llm_load_print_meta: n_expert         = 0
0.00.835.974 I llm_load_print_meta: n_expert_used    = 0
0.00.835.975 I llm_load_print_meta: causal attn      = 1
0.00.835.975 I llm_load_print_meta: pooling type     = 0
0.00.835.976 I llm_load_print_meta: rope type        = 2
0.00.835.976 I llm_load_print_meta: rope scaling     = linear
0.00.835.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.978 I llm_load_print_meta: freq_scale_train = 1
0.00.835.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.979 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.980 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.980 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.981 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.981 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.982 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.983 I llm_load_print_meta: model type       = 2B
0.00.835.984 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.985 I llm_load_print_meta: model params     = 2.51 B
0.00.835.986 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.986 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.987 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.987 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.988 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.988 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.989 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.989 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.995 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.997 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.997 I llm_load_print_meta: max token length = 93
0.00.913.089 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.913.101 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.913.102 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.913.103 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.913.104 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.913.105 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.918.990 I llama_new_context_with_model: n_seq_max     = 1
0.00.918.998 I llama_new_context_with_model: n_ctx         = 4096
0.00.918.998 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.918.999 I llama_new_context_with_model: n_batch       = 2048
0.00.918.999 I llama_new_context_with_model: n_ubatch      = 512
0.00.919.000 I llama_new_context_with_model: flash_attn    = 0
0.00.919.002 I llama_new_context_with_model: freq_base     = 10000.0
0.00.919.003 I llama_new_context_with_model: freq_scale    = 1
0.00.919.003 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.933.605 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.933.642 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.933.756 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.936.381 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.936.386 I llama_new_context_with_model: graph nodes  = 601
0.00.936.386 I llama_new_context_with_model: graph splits = 1
0.00.936.410 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.545.956 I main: llama threadpool init, n_threads = 4
0.01.545.974 I 
0.01.546.098 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.546.102 I 
0.01.546.365 I sampler seed: 117489733
0.01.546.378 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.546.390 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.546.391 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.546.391 I 
 increasities. 

I'm not sure what you're trying to say. Could you please rephrase your question? [end of text]


0.12.998.162 I llama_perf_sampler_print:    sampling time =      41.48 ms /    28 runs   (    1.48 ms per token,   675.11 tokens per second)
0.12.998.165 I llama_perf_context_print:        load time =    1544.97 ms
0.12.998.180 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.998.182 I llama_perf_context_print:        eval time =   11376.71 ms /    27 runs   (  421.36 ms per token,     2.37 tokens per second)
0.12.998.184 I llama_perf_context_print:       total time =   11452.22 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.000.878 I main: load the model and apply lora adapter, if any
0.00.023.208 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.220 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.305 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.316 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.318 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.323 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.332 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.339 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.341 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.355 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.359 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.360 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.683 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.083 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.313 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.320 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.322 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.323 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.325 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.326 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.328 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.332 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.333 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.335 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.336 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.338 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.346 I llama_model_loader: - type  f32:   37 tensors
0.00.352.348 I llama_model_loader: - type q8_0:  127 tensors
0.00.578.483 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.636.973 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.873 I llm_load_vocab: special tokens cache size = 5
0.00.837.653 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.733 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.734 I llm_load_print_meta: arch             = gemma
0.00.837.734 I llm_load_print_meta: vocab type       = SPM
0.00.837.736 I llm_load_print_meta: n_vocab          = 256000
0.00.837.738 I llm_load_print_meta: n_merges         = 0
0.00.837.739 I llm_load_print_meta: vocab_only       = 0
0.00.837.740 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.740 I llm_load_print_meta: n_embd           = 2048
0.00.837.740 I llm_load_print_meta: n_layer          = 18
0.00.837.808 I llm_load_print_meta: n_head           = 8
0.00.837.815 I llm_load_print_meta: n_head_kv        = 1
0.00.837.816 I llm_load_print_meta: n_rot            = 256
0.00.837.817 I llm_load_print_meta: n_swa            = 0
0.00.837.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.836 I llm_load_print_meta: n_gqa            = 8
0.00.837.842 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.850 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.851 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.853 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.853 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.854 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.854 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.859 I llm_load_print_meta: n_ff             = 16384
0.00.837.860 I llm_load_print_meta: n_expert         = 0
0.00.837.860 I llm_load_print_meta: n_expert_used    = 0
0.00.837.862 I llm_load_print_meta: causal attn      = 1
0.00.837.863 I llm_load_print_meta: pooling type     = 0
0.00.837.863 I llm_load_print_meta: rope type        = 2
0.00.837.863 I llm_load_print_meta: rope scaling     = linear
0.00.837.865 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.866 I llm_load_print_meta: freq_scale_train = 1
0.00.837.866 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.867 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.869 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.869 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.870 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.870 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.870 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.871 I llm_load_print_meta: model type       = 2B
0.00.837.872 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.872 I llm_load_print_meta: model params     = 2.51 B
0.00.837.874 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.874 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.875 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.882 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.883 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.883 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.886 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.886 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.893 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.894 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.895 I llm_load_print_meta: max token length = 93
0.00.911.568 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.911.578 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.917.335 I llama_new_context_with_model: n_seq_max     = 1
0.00.917.343 I llama_new_context_with_model: n_ctx         = 4096
0.00.917.343 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.917.344 I llama_new_context_with_model: n_batch       = 2048
0.00.917.344 I llama_new_context_with_model: n_ubatch      = 512
0.00.917.345 I llama_new_context_with_model: flash_attn    = 0
0.00.917.347 I llama_new_context_with_model: freq_base     = 10000.0
0.00.917.348 I llama_new_context_with_model: freq_scale    = 1
0.00.917.349 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.931.919 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.931.960 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.932.072 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.934.637 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.934.641 I llama_new_context_with_model: graph nodes  = 601
0.00.934.641 I llama_new_context_with_model: graph splits = 1
0.00.934.664 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.548.516 I main: llama threadpool init, n_threads = 4
0.01.548.533 I 
0.01.548.653 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.548.657 I 
0.01.548.897 I sampler seed: 2444548430
0.01.548.911 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.923 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.923 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.924 I 
 increably.

I have a question about the definition of a variable.

A variable is a quantity that can take on different values at different times during the

0.15.166.228 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.26 tokens per second)
0.15.166.232 I llama_perf_context_print:        load time =    1547.54 ms
0.15.166.234 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.166.237 I llama_perf_context_print:        eval time =   13528.11 ms /    32 runs   (  422.75 ms per token,     2.37 tokens per second)
0.15.166.238 I llama_perf_context_print:       total time =   13617.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.916s
user	3m43.416s
sys	0m9.346s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4271 (0cd182eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185357.98 ms
main:    total time = 185357.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.729 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.931 I main: llama backend init
0.00.000.939 I main: load the model and apply lora adapter, if any
0.00.023.661 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.673 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.767 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.778 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.780 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.785 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.790 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.791 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.792 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.793 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.795 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.800 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.802 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.803 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.804 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.806 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.086 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.626 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.877 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.879 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.880 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.881 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.883 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.886 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.887 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.889 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.891 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.902 I llama_model_loader: - type  f32:   37 tensors
0.00.352.904 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.905 I llama_model_loader: - type q6_K:   19 tensors
0.00.566.638 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.625.479 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.626.329 I llm_load_vocab: special tokens cache size = 5
0.00.831.303 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.383 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.384 I llm_load_print_meta: arch             = gemma
0.00.831.384 I llm_load_print_meta: vocab type       = SPM
0.00.831.385 I llm_load_print_meta: n_vocab          = 256000
0.00.831.388 I llm_load_print_meta: n_merges         = 0
0.00.831.389 I llm_load_print_meta: vocab_only       = 0
0.00.831.389 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.389 I llm_load_print_meta: n_embd           = 2048
0.00.831.390 I llm_load_print_meta: n_layer          = 18
0.00.831.455 I llm_load_print_meta: n_head           = 8
0.00.831.462 I llm_load_print_meta: n_head_kv        = 1
0.00.831.463 I llm_load_print_meta: n_rot            = 256
0.00.831.463 I llm_load_print_meta: n_swa            = 0
0.00.831.464 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.464 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.470 I llm_load_print_meta: n_gqa            = 8
0.00.831.475 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.480 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.481 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.482 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.483 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.483 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.484 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.489 I llm_load_print_meta: n_ff             = 16384
0.00.831.489 I llm_load_print_meta: n_expert         = 0
0.00.831.489 I llm_load_print_meta: n_expert_used    = 0
0.00.831.490 I llm_load_print_meta: causal attn      = 1
0.00.831.490 I llm_load_print_meta: pooling type     = 0
0.00.831.490 I llm_load_print_meta: rope type        = 2
0.00.831.491 I llm_load_print_meta: rope scaling     = linear
0.00.831.492 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.493 I llm_load_print_meta: freq_scale_train = 1
0.00.831.493 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.494 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.494 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.495 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.495 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.496 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.496 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.497 I llm_load_print_meta: model type       = 2B
0.00.831.498 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.831.499 I llm_load_print_meta: model params     = 2.51 B
0.00.831.499 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.831.500 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.501 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.502 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.502 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.507 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.508 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.508 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.515 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.516 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.516 I llm_load_print_meta: max token length = 93
0.00.893.609 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.893.618 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.893.619 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.893.620 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.893.621 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.893.621 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.899.282 I llama_new_context_with_model: n_seq_max     = 1
0.00.899.289 I llama_new_context_with_model: n_ctx         = 4096
0.00.899.289 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.899.289 I llama_new_context_with_model: n_batch       = 2048
0.00.899.290 I llama_new_context_with_model: n_ubatch      = 512
0.00.899.290 I llama_new_context_with_model: flash_attn    = 0
0.00.899.292 I llama_new_context_with_model: freq_base     = 10000.0
0.00.899.293 I llama_new_context_with_model: freq_scale    = 1
0.00.899.294 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.913.590 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.913.632 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.913.743 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.916.271 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.916.275 I llama_new_context_with_model: graph nodes  = 601
0.00.916.276 I llama_new_context_with_model: graph splits = 1
0.00.916.299 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.504.252 I main: llama threadpool init, n_threads = 4
0.01.504.271 I 
0.01.504.411 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.504.415 I 
0.01.504.654 I sampler seed: 3571501058
0.01.504.667 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.504.679 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.504.680 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.504.680 I 
 increamically. 

I am not able to generate a response due to the provided context. [end of text]


0.08.469.627 I llama_perf_sampler_print:    sampling time =      30.88 ms /    21 runs   (    1.47 ms per token,   680.01 tokens per second)
0.08.469.631 I llama_perf_context_print:        load time =    1503.21 ms
0.08.469.633 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.469.635 I llama_perf_context_print:        eval time =    6908.42 ms /    20 runs   (  345.42 ms per token,     2.90 tokens per second)
0.08.469.636 I llama_perf_context_print:       total time =    6965.39 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4271 (0cd182eb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185378.15 ms
main:    total time = 185378.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.690 I build: 4271 (0cd182eb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.890 I main: load the model and apply lora adapter, if any
0.00.023.361 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.462 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.475 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.476 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.482 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.486 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.488 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.489 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.490 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.493 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.499 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.501 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.502 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.504 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.240.366 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.342.036 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.365.360 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.365.370 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.365.372 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.365.373 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.365.374 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.365.376 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.365.377 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.365.382 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.365.383 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.365.392 I llama_model_loader: - type  f32:   37 tensors
0.00.365.395 I llama_model_loader: - type q4_K:  108 tensors
0.00.365.395 I llama_model_loader: - type q6_K:   19 tensors
0.00.583.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.487 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.374 I llm_load_vocab: special tokens cache size = 5
0.00.834.922 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.996 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.997 I llm_load_print_meta: arch             = gemma
0.00.834.997 I llm_load_print_meta: vocab type       = SPM
0.00.834.998 I llm_load_print_meta: n_vocab          = 256000
0.00.835.001 I llm_load_print_meta: n_merges         = 0
0.00.835.002 I llm_load_print_meta: vocab_only       = 0
0.00.835.002 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.003 I llm_load_print_meta: n_embd           = 2048
0.00.835.003 I llm_load_print_meta: n_layer          = 18
0.00.835.069 I llm_load_print_meta: n_head           = 8
0.00.835.076 I llm_load_print_meta: n_head_kv        = 1
0.00.835.080 I llm_load_print_meta: n_rot            = 256
0.00.835.080 I llm_load_print_meta: n_swa            = 0
0.00.835.081 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.081 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.086 I llm_load_print_meta: n_gqa            = 8
0.00.835.090 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.095 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.097 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.098 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.099 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.099 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.100 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.105 I llm_load_print_meta: n_ff             = 16384
0.00.835.106 I llm_load_print_meta: n_expert         = 0
0.00.835.106 I llm_load_print_meta: n_expert_used    = 0
0.00.835.107 I llm_load_print_meta: causal attn      = 1
0.00.835.107 I llm_load_print_meta: pooling type     = 0
0.00.835.107 I llm_load_print_meta: rope type        = 2
0.00.835.108 I llm_load_print_meta: rope scaling     = linear
0.00.835.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.110 I llm_load_print_meta: freq_scale_train = 1
0.00.835.110 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.111 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.111 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.112 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.114 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.114 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.115 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.116 I llm_load_print_meta: model type       = 2B
0.00.835.117 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.835.117 I llm_load_print_meta: model params     = 2.51 B
0.00.835.118 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.835.119 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.120 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.120 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.121 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.130 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.131 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.131 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.137 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.138 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.139 I llm_load_print_meta: max token length = 93
0.00.893.761 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.902.330 I llama_new_context_with_model: n_seq_max     = 1
0.00.902.335 I llama_new_context_with_model: n_ctx         = 4096
0.00.902.336 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.902.336 I llama_new_context_with_model: n_batch       = 2048
0.00.902.337 I llama_new_context_with_model: n_ubatch      = 512
0.00.902.337 I llama_new_context_with_model: flash_attn    = 0
0.00.902.340 I llama_new_context_with_model: freq_base     = 10000.0
0.00.902.341 I llama_new_context_with_model: freq_scale    = 1
0.00.902.342 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.917.061 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.917.111 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.917.223 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.919.632 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.919.636 I llama_new_context_with_model: graph nodes  = 601
0.00.919.637 I llama_new_context_with_model: graph splits = 1
0.00.919.659 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.504.880 I main: llama threadpool init, n_threads = 4
0.01.504.897 I 
0.01.505.018 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.505.021 I 
0.01.505.281 I sampler seed: 493731007
0.01.505.295 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.505.304 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.505.307 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.505.307 I 
 seconded in the sentence "The government is considering imposing stricter regulations on social media platforms to prevent misinformation and propaganda."

**Questions:**
1. What is

0.12.653.728 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.38 tokens per second)
0.12.653.731 I llama_perf_context_print:        load time =    1503.89 ms
0.12.653.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.653.747 I llama_perf_context_print:        eval time =   11060.37 ms /    32 runs   (  345.64 ms per token,     2.89 tokens per second)
0.12.653.748 I llama_perf_context_print:       total time =   11148.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m34.725s
user	46m22.490s
sys	0m6.434s
