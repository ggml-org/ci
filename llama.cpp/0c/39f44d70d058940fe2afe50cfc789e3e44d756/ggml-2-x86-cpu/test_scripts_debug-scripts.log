+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4230 (0c39f44d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.627 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.638 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.726 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.737 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.739 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.745 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.749 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.753 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.755 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.764 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.766 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.768 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.769 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.770 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.683 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.952 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.525 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.538 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.539 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.540 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.542 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.543 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.544 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.549 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.550 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.552 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.553 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.555 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.565 I llama_model_loader: - type  f32:   37 tensors
0.00.350.567 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.976 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.633.928 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.634.870 I llm_load_vocab: special tokens cache size = 5
0.00.834.816 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.887 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.888 I llm_load_print_meta: arch             = gemma
0.00.834.889 I llm_load_print_meta: vocab type       = SPM
0.00.834.890 I llm_load_print_meta: n_vocab          = 256000
0.00.834.892 I llm_load_print_meta: n_merges         = 0
0.00.834.893 I llm_load_print_meta: vocab_only       = 0
0.00.834.893 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.894 I llm_load_print_meta: n_embd           = 2048
0.00.834.894 I llm_load_print_meta: n_layer          = 18
0.00.834.959 I llm_load_print_meta: n_head           = 8
0.00.834.967 I llm_load_print_meta: n_head_kv        = 1
0.00.834.967 I llm_load_print_meta: n_rot            = 256
0.00.834.968 I llm_load_print_meta: n_swa            = 0
0.00.834.968 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.968 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.973 I llm_load_print_meta: n_gqa            = 8
0.00.834.978 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.983 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.984 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.985 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.986 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.988 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.988 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.994 I llm_load_print_meta: n_ff             = 16384
0.00.834.995 I llm_load_print_meta: n_expert         = 0
0.00.834.995 I llm_load_print_meta: n_expert_used    = 0
0.00.834.996 I llm_load_print_meta: causal attn      = 1
0.00.834.996 I llm_load_print_meta: pooling type     = 0
0.00.834.996 I llm_load_print_meta: rope type        = 2
0.00.835.008 I llm_load_print_meta: rope scaling     = linear
0.00.835.010 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.023 I llm_load_print_meta: freq_scale_train = 1
0.00.835.023 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.033 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.033 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.034 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.036 I llm_load_print_meta: model type       = 2B
0.00.835.038 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.039 I llm_load_print_meta: model params     = 2.51 B
0.00.835.048 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.049 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.050 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.051 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.052 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.058 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.064 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.064 I llm_load_print_meta: max token length = 93
0.00.936.941 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.936.949 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.936.950 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.936.951 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.936.952 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.936.953 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.942.818 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.824 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.825 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.825 I llama_new_context_with_model: n_batch       = 2048
0.00.942.825 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.826 I llama_new_context_with_model: flash_attn    = 0
0.00.942.828 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.828 I llama_new_context_with_model: freq_scale    = 1
0.00.942.829 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.195 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.236 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.361 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.959.902 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.959.906 I llama_new_context_with_model: graph nodes  = 601
0.00.959.907 I llama_new_context_with_model: graph splits = 1
0.00.959.930 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.570.940 I main: llama threadpool init, n_threads = 4
0.01.570.955 I 
0.01.571.073 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.571.079 I 
0.01.571.319 I sampler seed: 2750593246
0.01.571.337 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.353 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.354 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.355 I 
 increasively, hinting at the potential for a disruptive innovation.

The key ingredient in this disruptive innovation is the ability to seamlessly integrate and leverage diverse data sources,

0.15.018.206 I llama_perf_sampler_print:    sampling time =      48.80 ms /    33 runs   (    1.48 ms per token,   676.20 tokens per second)
0.15.018.220 I llama_perf_context_print:        load time =    1569.98 ms
0.15.018.222 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.018.223 I llama_perf_context_print:        eval time =   13358.96 ms /    32 runs   (  417.47 ms per token,     2.40 tokens per second)
0.15.018.225 I llama_perf_context_print:       total time =   13447.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4230 (0c39f44d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.023.197 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.288 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.302 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.304 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.309 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.311 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.312 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.314 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.316 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.317 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.326 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.328 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.329 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.331 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.332 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.425 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.928 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.491 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.498 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.500 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.501 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.502 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.504 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.505 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.509 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.511 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.512 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.514 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.515 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.523 I llama_model_loader: - type  f32:   37 tensors
0.00.352.526 I llama_model_loader: - type q8_0:  127 tensors
0.00.571.962 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.373 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.281 I llm_load_vocab: special tokens cache size = 5
0.00.832.676 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.746 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.747 I llm_load_print_meta: arch             = gemma
0.00.832.748 I llm_load_print_meta: vocab type       = SPM
0.00.832.749 I llm_load_print_meta: n_vocab          = 256000
0.00.832.751 I llm_load_print_meta: n_merges         = 0
0.00.832.752 I llm_load_print_meta: vocab_only       = 0
0.00.832.752 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.753 I llm_load_print_meta: n_embd           = 2048
0.00.832.753 I llm_load_print_meta: n_layer          = 18
0.00.832.818 I llm_load_print_meta: n_head           = 8
0.00.832.826 I llm_load_print_meta: n_head_kv        = 1
0.00.832.826 I llm_load_print_meta: n_rot            = 256
0.00.832.827 I llm_load_print_meta: n_swa            = 0
0.00.832.827 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.828 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.833 I llm_load_print_meta: n_gqa            = 8
0.00.832.837 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.842 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.843 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.845 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.845 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.846 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.847 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.852 I llm_load_print_meta: n_ff             = 16384
0.00.832.852 I llm_load_print_meta: n_expert         = 0
0.00.832.853 I llm_load_print_meta: n_expert_used    = 0
0.00.832.854 I llm_load_print_meta: causal attn      = 1
0.00.832.854 I llm_load_print_meta: pooling type     = 0
0.00.832.855 I llm_load_print_meta: rope type        = 2
0.00.832.855 I llm_load_print_meta: rope scaling     = linear
0.00.832.856 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.857 I llm_load_print_meta: freq_scale_train = 1
0.00.832.857 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.858 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.862 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.862 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.863 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.863 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.865 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.866 I llm_load_print_meta: model type       = 2B
0.00.832.867 I llm_load_print_meta: model ftype      = Q8_0
0.00.832.867 I llm_load_print_meta: model params     = 2.51 B
0.00.832.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.832.878 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.879 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.879 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.880 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.881 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.882 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.888 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.889 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.890 I llm_load_print_meta: max token length = 93
0.00.930.036 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.935.956 I llama_new_context_with_model: n_seq_max     = 1
0.00.935.964 I llama_new_context_with_model: n_ctx         = 4096
0.00.935.964 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.935.964 I llama_new_context_with_model: n_batch       = 2048
0.00.935.965 I llama_new_context_with_model: n_ubatch      = 512
0.00.935.965 I llama_new_context_with_model: flash_attn    = 0
0.00.935.968 I llama_new_context_with_model: freq_base     = 10000.0
0.00.935.968 I llama_new_context_with_model: freq_scale    = 1
0.00.935.969 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.950.957 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.950.997 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.951.120 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.953.655 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.953.659 I llama_new_context_with_model: graph nodes  = 601
0.00.953.659 I llama_new_context_with_model: graph splits = 1
0.00.953.682 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.561.948 I main: llama threadpool init, n_threads = 4
0.01.561.964 I 
0.01.562.093 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.562.097 I 
0.01.562.339 I sampler seed: 1197262387
0.01.562.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.562.365 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.562.366 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.562.366 I 
 increasities. [end of text]


0.03.256.129 I llama_perf_sampler_print:    sampling time =       6.44 ms /     5 runs   (    1.29 ms per token,   776.76 tokens per second)
0.03.256.132 I llama_perf_context_print:        load time =    1561.01 ms
0.03.256.133 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.256.149 I llama_perf_context_print:        eval time =    1680.66 ms /     4 runs   (  420.17 ms per token,     2.38 tokens per second)
0.03.256.150 I llama_perf_context_print:       total time =    1694.19 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 4230 (0c39f44d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.920 I main: llama backend init
0.00.000.928 I main: load the model and apply lora adapter, if any
0.00.026.302 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.313 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.423 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.424 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.431 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.433 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.435 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.436 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.437 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.439 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.445 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.448 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.453 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.213 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.487 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.987 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.997 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.998 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.000 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.001 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.013 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.017 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.021 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.023 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.025 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.027 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.355.029 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.050 I llama_model_loader: - type  f32:   37 tensors
0.00.355.053 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.920 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.132 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.117 I llm_load_vocab: special tokens cache size = 5
0.00.853.269 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.343 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.344 I llm_load_print_meta: arch             = gemma
0.00.853.345 I llm_load_print_meta: vocab type       = SPM
0.00.853.345 I llm_load_print_meta: n_vocab          = 256000
0.00.853.348 I llm_load_print_meta: n_merges         = 0
0.00.853.348 I llm_load_print_meta: vocab_only       = 0
0.00.853.349 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.349 I llm_load_print_meta: n_embd           = 2048
0.00.853.349 I llm_load_print_meta: n_layer          = 18
0.00.853.423 I llm_load_print_meta: n_head           = 8
0.00.853.431 I llm_load_print_meta: n_head_kv        = 1
0.00.853.431 I llm_load_print_meta: n_rot            = 256
0.00.853.432 I llm_load_print_meta: n_swa            = 0
0.00.853.432 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.437 I llm_load_print_meta: n_gqa            = 8
0.00.853.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.472 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.473 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.473 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.474 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.486 I llm_load_print_meta: n_ff             = 16384
0.00.853.487 I llm_load_print_meta: n_expert         = 0
0.00.853.490 I llm_load_print_meta: n_expert_used    = 0
0.00.853.491 I llm_load_print_meta: causal attn      = 1
0.00.853.491 I llm_load_print_meta: pooling type     = 0
0.00.853.492 I llm_load_print_meta: rope type        = 2
0.00.853.492 I llm_load_print_meta: rope scaling     = linear
0.00.853.493 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.494 I llm_load_print_meta: freq_scale_train = 1
0.00.853.495 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.495 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.496 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.496 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.497 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.497 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.497 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.502 I llm_load_print_meta: model type       = 2B
0.00.853.503 I llm_load_print_meta: model ftype      = Q8_0
0.00.853.504 I llm_load_print_meta: model params     = 2.51 B
0.00.853.514 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.853.514 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.516 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.516 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.517 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.517 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.518 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.519 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.525 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.526 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.527 I llm_load_print_meta: max token length = 93
0.00.929.906 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.929.915 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.929.916 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.929.917 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.929.918 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.929.918 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.935.930 I llama_new_context_with_model: n_seq_max     = 1
0.00.935.939 I llama_new_context_with_model: n_ctx         = 4096
0.00.935.940 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.935.940 I llama_new_context_with_model: n_batch       = 2048
0.00.935.941 I llama_new_context_with_model: n_ubatch      = 512
0.00.935.941 I llama_new_context_with_model: flash_attn    = 0
0.00.935.945 I llama_new_context_with_model: freq_base     = 10000.0
0.00.935.946 I llama_new_context_with_model: freq_scale    = 1
0.00.935.947 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.951.553 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.951.598 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.951.729 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.954.314 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.954.318 I llama_new_context_with_model: graph nodes  = 601
0.00.954.319 I llama_new_context_with_model: graph splits = 1
0.00.954.344 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.564.976 I main: llama threadpool init, n_threads = 4
0.01.564.992 I 
0.01.565.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.565.113 I 
0.01.565.345 I sampler seed: 2910101057
0.01.565.360 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.565.386 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.565.389 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.565.390 I 
 increasities of a mythical creature.

**Challenge:**

Determine the most likely cause of the recent surge in kraken activity in the coastal town of Havenwood.

0.15.072.274 I llama_perf_sampler_print:    sampling time =      48.40 ms /    33 runs   (    1.47 ms per token,   681.85 tokens per second)
0.15.072.278 I llama_perf_context_print:        load time =    1563.93 ms
0.15.072.280 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.072.295 I llama_perf_context_print:        eval time =   13419.48 ms /    32 runs   (  419.36 ms per token,     2.38 tokens per second)
0.15.072.296 I llama_perf_context_print:       total time =   13507.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4230 (0c39f44d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.023.278 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.289 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.373 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.385 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.387 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.392 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.396 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.398 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.399 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.400 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.401 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.409 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.411 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.412 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.414 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.415 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.727 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.538 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.950 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.959 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.960 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.961 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.963 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.964 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.965 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.970 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.973 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.974 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.348.975 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.983 I llama_model_loader: - type  f32:   37 tensors
0.00.348.985 I llama_model_loader: - type q8_0:  127 tensors
0.00.567.369 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.349 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.251 I llm_load_vocab: special tokens cache size = 5
0.00.815.390 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.815.459 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.815.460 I llm_load_print_meta: arch             = gemma
0.00.815.461 I llm_load_print_meta: vocab type       = SPM
0.00.815.462 I llm_load_print_meta: n_vocab          = 256000
0.00.815.464 I llm_load_print_meta: n_merges         = 0
0.00.815.465 I llm_load_print_meta: vocab_only       = 0
0.00.815.466 I llm_load_print_meta: n_ctx_train      = 8192
0.00.815.466 I llm_load_print_meta: n_embd           = 2048
0.00.815.467 I llm_load_print_meta: n_layer          = 18
0.00.815.533 I llm_load_print_meta: n_head           = 8
0.00.815.540 I llm_load_print_meta: n_head_kv        = 1
0.00.815.541 I llm_load_print_meta: n_rot            = 256
0.00.815.542 I llm_load_print_meta: n_swa            = 0
0.00.815.542 I llm_load_print_meta: n_embd_head_k    = 256
0.00.815.543 I llm_load_print_meta: n_embd_head_v    = 256
0.00.815.548 I llm_load_print_meta: n_gqa            = 8
0.00.815.553 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.815.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.815.560 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.815.562 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.815.562 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.815.563 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.815.564 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.815.569 I llm_load_print_meta: n_ff             = 16384
0.00.815.569 I llm_load_print_meta: n_expert         = 0
0.00.815.570 I llm_load_print_meta: n_expert_used    = 0
0.00.815.570 I llm_load_print_meta: causal attn      = 1
0.00.815.575 I llm_load_print_meta: pooling type     = 0
0.00.815.575 I llm_load_print_meta: rope type        = 2
0.00.815.575 I llm_load_print_meta: rope scaling     = linear
0.00.815.577 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.815.578 I llm_load_print_meta: freq_scale_train = 1
0.00.815.578 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.815.579 I llm_load_print_meta: rope_finetuned   = unknown
0.00.815.579 I llm_load_print_meta: ssm_d_conv       = 0
0.00.815.579 I llm_load_print_meta: ssm_d_inner      = 0
0.00.815.580 I llm_load_print_meta: ssm_d_state      = 0
0.00.815.581 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.815.581 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.815.582 I llm_load_print_meta: model type       = 2B
0.00.815.583 I llm_load_print_meta: model ftype      = Q8_0
0.00.815.584 I llm_load_print_meta: model params     = 2.51 B
0.00.815.593 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.815.593 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.815.594 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.815.595 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.815.596 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.815.596 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.815.596 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.815.597 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.815.603 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.815.604 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.815.605 I llm_load_print_meta: max token length = 93
0.00.888.223 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.888.234 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.894.056 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.062 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.062 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.062 I llama_new_context_with_model: n_batch       = 2048
0.00.894.063 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.063 I llama_new_context_with_model: flash_attn    = 0
0.00.894.065 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.066 I llama_new_context_with_model: freq_scale    = 1
0.00.894.066 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.675 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.909.725 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.909.862 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.400 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.404 I llama_new_context_with_model: graph nodes  = 601
0.00.912.405 I llama_new_context_with_model: graph splits = 1
0.00.912.429 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.528.669 I main: llama threadpool init, n_threads = 4
0.01.528.686 I 
0.01.528.804 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.528.808 I 
0.01.529.042 I sampler seed: 4106887715
0.01.529.055 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.529.064 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.529.068 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.529.068 I 
 increasities, but that’s not the point. The point is that even a simple act of kindness can have a profound impact on the recipient.

This

0.15.089.621 I llama_perf_sampler_print:    sampling time =      48.91 ms /    33 runs   (    1.48 ms per token,   674.76 tokens per second)
0.15.089.635 I llama_perf_context_print:        load time =    1527.71 ms
0.15.089.637 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.089.639 I llama_perf_context_print:        eval time =   13471.42 ms /    32 runs   (  420.98 ms per token,     2.38 tokens per second)
0.15.089.640 I llama_perf_context_print:       total time =   13560.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.045s
user	3m2.452s
sys	0m9.323s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4230 (0c39f44d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185735.05 ms
main:    total time = 185735.05 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4230 (0c39f44d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.023.854 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.863 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.958 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.970 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.972 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.979 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.981 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.982 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.983 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.985 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.986 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.992 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.994 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.995 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.004 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.006 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.262 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.723 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.220 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.222 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.223 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.224 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.226 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.227 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.231 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.252 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.256 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.258 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.353.267 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.276 I llama_model_loader: - type  f32:   37 tensors
0.00.353.278 I llama_model_loader: - type q4_K:  108 tensors
0.00.353.279 I llama_model_loader: - type q6_K:   19 tensors
0.00.571.694 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.149 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.121 I llm_load_vocab: special tokens cache size = 5
0.00.820.589 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.820.660 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.820.661 I llm_load_print_meta: arch             = gemma
0.00.820.661 I llm_load_print_meta: vocab type       = SPM
0.00.820.662 I llm_load_print_meta: n_vocab          = 256000
0.00.820.665 I llm_load_print_meta: n_merges         = 0
0.00.820.665 I llm_load_print_meta: vocab_only       = 0
0.00.820.666 I llm_load_print_meta: n_ctx_train      = 8192
0.00.820.666 I llm_load_print_meta: n_embd           = 2048
0.00.820.666 I llm_load_print_meta: n_layer          = 18
0.00.820.730 I llm_load_print_meta: n_head           = 8
0.00.820.737 I llm_load_print_meta: n_head_kv        = 1
0.00.820.738 I llm_load_print_meta: n_rot            = 256
0.00.820.738 I llm_load_print_meta: n_swa            = 0
0.00.820.738 I llm_load_print_meta: n_embd_head_k    = 256
0.00.820.739 I llm_load_print_meta: n_embd_head_v    = 256
0.00.820.743 I llm_load_print_meta: n_gqa            = 8
0.00.820.748 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.820.753 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.820.754 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.820.755 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.820.756 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.820.756 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.820.757 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.820.762 I llm_load_print_meta: n_ff             = 16384
0.00.820.763 I llm_load_print_meta: n_expert         = 0
0.00.820.763 I llm_load_print_meta: n_expert_used    = 0
0.00.820.763 I llm_load_print_meta: causal attn      = 1
0.00.820.764 I llm_load_print_meta: pooling type     = 0
0.00.820.764 I llm_load_print_meta: rope type        = 2
0.00.820.764 I llm_load_print_meta: rope scaling     = linear
0.00.820.766 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.820.766 I llm_load_print_meta: freq_scale_train = 1
0.00.820.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.820.767 I llm_load_print_meta: rope_finetuned   = unknown
0.00.820.767 I llm_load_print_meta: ssm_d_conv       = 0
0.00.820.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.820.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.820.768 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.820.769 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.820.769 I llm_load_print_meta: model type       = 2B
0.00.820.770 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.820.771 I llm_load_print_meta: model params     = 2.51 B
0.00.820.780 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.820.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.820.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.820.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.820.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.820.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.820.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.820.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.820.790 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.820.791 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.820.792 I llm_load_print_meta: max token length = 93
0.00.883.125 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.883.143 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.883.143 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.883.144 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.883.145 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.883.146 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.888.834 I llama_new_context_with_model: n_seq_max     = 1
0.00.888.841 I llama_new_context_with_model: n_ctx         = 4096
0.00.888.842 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.888.842 I llama_new_context_with_model: n_batch       = 2048
0.00.888.843 I llama_new_context_with_model: n_ubatch      = 512
0.00.888.843 I llama_new_context_with_model: flash_attn    = 0
0.00.888.846 I llama_new_context_with_model: freq_base     = 10000.0
0.00.888.847 I llama_new_context_with_model: freq_scale    = 1
0.00.888.848 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.903.416 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.903.458 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.903.581 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.906.098 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.906.102 I llama_new_context_with_model: graph nodes  = 601
0.00.906.102 I llama_new_context_with_model: graph splits = 1
0.00.906.125 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.490.278 I main: llama threadpool init, n_threads = 4
0.01.490.294 I 
0.01.490.412 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.490.416 I 
0.01.490.644 I sampler seed: 4082059847
0.01.490.658 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.490.670 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.490.670 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.490.671 I 
 seconded, and downvoted responses from the same user, creating a confusing and frustrating experience.

What are some strategies to prevent this from happening?

**Prevention

0.12.605.919 I llama_perf_sampler_print:    sampling time =      48.47 ms /    33 runs   (    1.47 ms per token,   680.78 tokens per second)
0.12.605.938 I llama_perf_context_print:        load time =    1489.34 ms
0.12.605.940 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.605.942 I llama_perf_context_print:        eval time =   11027.44 ms /    32 runs   (  344.61 ms per token,     2.90 tokens per second)
0.12.605.943 I llama_perf_context_print:       total time =   11115.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4230 (0c39f44d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185612.24 ms
main:    total time = 185612.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4230 (0c39f44d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.507 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.615 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.631 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.636 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.642 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.643 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.645 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.655 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.660 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.667 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.669 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.673 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.677 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.678 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.268 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.332.021 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.454 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.463 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.464 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.465 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.467 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.468 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.470 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.475 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.476 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.484 I llama_model_loader: - type  f32:   37 tensors
0.00.355.486 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.487 I llama_model_loader: - type q6_K:   19 tensors
0.00.569.669 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.627.381 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.628.231 I llm_load_vocab: special tokens cache size = 5
0.00.813.754 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.813.827 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.813.828 I llm_load_print_meta: arch             = gemma
0.00.813.829 I llm_load_print_meta: vocab type       = SPM
0.00.813.830 I llm_load_print_meta: n_vocab          = 256000
0.00.813.832 I llm_load_print_meta: n_merges         = 0
0.00.813.833 I llm_load_print_meta: vocab_only       = 0
0.00.813.834 I llm_load_print_meta: n_ctx_train      = 8192
0.00.813.834 I llm_load_print_meta: n_embd           = 2048
0.00.813.834 I llm_load_print_meta: n_layer          = 18
0.00.813.901 I llm_load_print_meta: n_head           = 8
0.00.813.909 I llm_load_print_meta: n_head_kv        = 1
0.00.813.913 I llm_load_print_meta: n_rot            = 256
0.00.813.913 I llm_load_print_meta: n_swa            = 0
0.00.813.914 I llm_load_print_meta: n_embd_head_k    = 256
0.00.813.914 I llm_load_print_meta: n_embd_head_v    = 256
0.00.813.919 I llm_load_print_meta: n_gqa            = 8
0.00.813.924 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.813.929 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.813.931 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.813.932 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.813.932 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.813.933 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.813.933 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.813.938 I llm_load_print_meta: n_ff             = 16384
0.00.813.938 I llm_load_print_meta: n_expert         = 0
0.00.813.939 I llm_load_print_meta: n_expert_used    = 0
0.00.813.942 I llm_load_print_meta: causal attn      = 1
0.00.813.943 I llm_load_print_meta: pooling type     = 0
0.00.813.943 I llm_load_print_meta: rope type        = 2
0.00.813.944 I llm_load_print_meta: rope scaling     = linear
0.00.813.945 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.813.946 I llm_load_print_meta: freq_scale_train = 1
0.00.813.946 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.813.946 I llm_load_print_meta: rope_finetuned   = unknown
0.00.813.946 I llm_load_print_meta: ssm_d_conv       = 0
0.00.813.947 I llm_load_print_meta: ssm_d_inner      = 0
0.00.813.947 I llm_load_print_meta: ssm_d_state      = 0
0.00.813.947 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.813.948 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.813.948 I llm_load_print_meta: model type       = 2B
0.00.813.949 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.813.951 I llm_load_print_meta: model params     = 2.51 B
0.00.813.960 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.813.960 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.813.962 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.813.962 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.813.962 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.813.963 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.813.964 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.813.964 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.813.971 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.813.972 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.813.973 I llm_load_print_meta: max token length = 93
0.00.871.474 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.877.211 I llama_new_context_with_model: n_seq_max     = 1
0.00.877.217 I llama_new_context_with_model: n_ctx         = 4096
0.00.877.217 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.877.218 I llama_new_context_with_model: n_batch       = 2048
0.00.877.218 I llama_new_context_with_model: n_ubatch      = 512
0.00.877.219 I llama_new_context_with_model: flash_attn    = 0
0.00.877.221 I llama_new_context_with_model: freq_base     = 10000.0
0.00.877.222 I llama_new_context_with_model: freq_scale    = 1
0.00.877.223 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.892.239 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.892.281 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.892.408 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.894.964 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.894.968 I llama_new_context_with_model: graph nodes  = 601
0.00.894.968 I llama_new_context_with_model: graph splits = 1
0.00.894.991 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.481.446 I main: llama threadpool init, n_threads = 4
0.01.481.462 I 
0.01.481.582 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.481.586 I 
0.01.481.879 I sampler seed: 2557340445
0.01.481.893 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.481.903 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.481.906 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.481.906 I 
 maneupherously! [end of text]


0.03.225.638 I llama_perf_sampler_print:    sampling time =       7.62 ms /     6 runs   (    1.27 ms per token,   787.82 tokens per second)
0.03.225.641 I llama_perf_context_print:        load time =    1480.44 ms
0.03.225.643 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.225.645 I llama_perf_context_print:        eval time =    1728.53 ms /     5 runs   (  345.71 ms per token,     2.89 tokens per second)
0.03.225.647 I llama_perf_context_print:       total time =    1744.20 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m30.074s
user	46m7.000s
sys	0m6.380s
