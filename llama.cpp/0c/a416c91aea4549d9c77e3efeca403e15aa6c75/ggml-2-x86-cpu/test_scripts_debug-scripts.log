+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 4370 (0ca416c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.023.596 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.608 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.708 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.722 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.724 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.731 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.734 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.735 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.737 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.738 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.740 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.748 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.749 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.751 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.753 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.754 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.254.474 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.357.502 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.382.074 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.382.085 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.382.086 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.382.088 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.382.089 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.382.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.382.092 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.382.096 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.382.097 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.382.099 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.382.100 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.382.102 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.382.111 I llama_model_loader: - type  f32:   37 tensors
0.00.382.113 I llama_model_loader: - type q8_0:  127 tensors
0.00.613.391 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.682.011 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.683.013 I llm_load_vocab: special tokens cache size = 5
0.00.892.896 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.892.972 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.892.973 I llm_load_print_meta: arch             = gemma
0.00.892.974 I llm_load_print_meta: vocab type       = SPM
0.00.892.975 I llm_load_print_meta: n_vocab          = 256000
0.00.892.977 I llm_load_print_meta: n_merges         = 0
0.00.892.978 I llm_load_print_meta: vocab_only       = 0
0.00.892.978 I llm_load_print_meta: n_ctx_train      = 8192
0.00.892.978 I llm_load_print_meta: n_embd           = 2048
0.00.892.979 I llm_load_print_meta: n_layer          = 18
0.00.893.046 I llm_load_print_meta: n_head           = 8
0.00.893.053 I llm_load_print_meta: n_head_kv        = 1
0.00.893.053 I llm_load_print_meta: n_rot            = 256
0.00.893.054 I llm_load_print_meta: n_swa            = 0
0.00.893.054 I llm_load_print_meta: n_embd_head_k    = 256
0.00.893.054 I llm_load_print_meta: n_embd_head_v    = 256
0.00.893.059 I llm_load_print_meta: n_gqa            = 8
0.00.893.065 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.893.070 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.893.071 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.893.072 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.893.073 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.893.073 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.893.074 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.893.079 I llm_load_print_meta: n_ff             = 16384
0.00.893.079 I llm_load_print_meta: n_expert         = 0
0.00.893.080 I llm_load_print_meta: n_expert_used    = 0
0.00.893.081 I llm_load_print_meta: causal attn      = 1
0.00.893.081 I llm_load_print_meta: pooling type     = 0
0.00.893.082 I llm_load_print_meta: rope type        = 2
0.00.893.082 I llm_load_print_meta: rope scaling     = linear
0.00.893.084 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.893.084 I llm_load_print_meta: freq_scale_train = 1
0.00.893.085 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.893.085 I llm_load_print_meta: rope_finetuned   = unknown
0.00.893.086 I llm_load_print_meta: ssm_d_conv       = 0
0.00.893.086 I llm_load_print_meta: ssm_d_inner      = 0
0.00.893.086 I llm_load_print_meta: ssm_d_state      = 0
0.00.893.087 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.893.088 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.893.089 I llm_load_print_meta: model type       = 2B
0.00.893.090 I llm_load_print_meta: model ftype      = Q8_0
0.00.893.090 I llm_load_print_meta: model params     = 2.51 B
0.00.893.091 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.893.092 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.893.092 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.893.094 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.893.094 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.893.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.893.095 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.893.096 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.893.102 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.893.104 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.893.105 I llm_load_print_meta: max token length = 93
0.00.994.531 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.994.544 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.994.545 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.994.546 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.994.547 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.994.547 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.000.481 I llama_new_context_with_model: n_seq_max     = 1
0.01.000.489 I llama_new_context_with_model: n_ctx         = 4096
0.01.000.489 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.000.489 I llama_new_context_with_model: n_batch       = 2048
0.01.000.490 I llama_new_context_with_model: n_ubatch      = 512
0.01.000.490 I llama_new_context_with_model: flash_attn    = 0
0.01.000.493 I llama_new_context_with_model: freq_base     = 10000.0
0.01.000.494 I llama_new_context_with_model: freq_scale    = 1
0.01.000.495 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.000.585 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.01.015.245 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.015.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.015.406 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.018.022 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.018.026 I llama_new_context_with_model: graph nodes  = 601
0.01.018.026 I llama_new_context_with_model: graph splits = 1
0.01.018.049 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.018.052 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.628.207 I main: llama threadpool init, n_threads = 4
0.01.628.223 I 
0.01.628.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.628.349 I 
0.01.628.589 I sampler seed: 3071777209
0.01.628.603 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.628.613 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.628.616 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.628.617 I 
 increamically.

I understand.

I am ready to assist you with your request. [end of text]


0.09.632.954 I llama_perf_sampler_print:    sampling time =      29.39 ms /    20 runs   (    1.47 ms per token,   680.60 tokens per second)
0.09.632.958 I llama_perf_context_print:        load time =    1627.21 ms
0.09.632.972 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.632.975 I llama_perf_context_print:        eval time =    7950.17 ms /    19 runs   (  418.43 ms per token,     2.39 tokens per second)
0.09.632.976 I llama_perf_context_print:       total time =    8004.76 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4370 (0ca416c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.023.173 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.272 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.289 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.295 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.299 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.300 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.302 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.303 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.304 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.312 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.313 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.315 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.316 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.318 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.834 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.794 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.366.500 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.366.514 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.366.516 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.366.517 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.366.518 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.366.520 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.366.521 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.366.525 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.366.527 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.366.528 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.366.529 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.366.531 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.366.542 I llama_model_loader: - type  f32:   37 tensors
0.00.366.545 I llama_model_loader: - type q8_0:  127 tensors
0.00.607.081 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.676.207 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.677.179 I llm_load_vocab: special tokens cache size = 5
0.00.871.654 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.871.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.871.730 I llm_load_print_meta: arch             = gemma
0.00.871.731 I llm_load_print_meta: vocab type       = SPM
0.00.871.732 I llm_load_print_meta: n_vocab          = 256000
0.00.871.735 I llm_load_print_meta: n_merges         = 0
0.00.871.735 I llm_load_print_meta: vocab_only       = 0
0.00.871.736 I llm_load_print_meta: n_ctx_train      = 8192
0.00.871.736 I llm_load_print_meta: n_embd           = 2048
0.00.871.736 I llm_load_print_meta: n_layer          = 18
0.00.871.801 I llm_load_print_meta: n_head           = 8
0.00.871.809 I llm_load_print_meta: n_head_kv        = 1
0.00.871.809 I llm_load_print_meta: n_rot            = 256
0.00.871.810 I llm_load_print_meta: n_swa            = 0
0.00.871.810 I llm_load_print_meta: n_embd_head_k    = 256
0.00.871.810 I llm_load_print_meta: n_embd_head_v    = 256
0.00.871.815 I llm_load_print_meta: n_gqa            = 8
0.00.871.820 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.871.826 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.871.827 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.871.828 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.871.829 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.871.829 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.871.829 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.871.834 I llm_load_print_meta: n_ff             = 16384
0.00.871.835 I llm_load_print_meta: n_expert         = 0
0.00.871.835 I llm_load_print_meta: n_expert_used    = 0
0.00.871.836 I llm_load_print_meta: causal attn      = 1
0.00.871.836 I llm_load_print_meta: pooling type     = 0
0.00.871.836 I llm_load_print_meta: rope type        = 2
0.00.871.837 I llm_load_print_meta: rope scaling     = linear
0.00.871.838 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.871.839 I llm_load_print_meta: freq_scale_train = 1
0.00.871.839 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.871.839 I llm_load_print_meta: rope_finetuned   = unknown
0.00.871.840 I llm_load_print_meta: ssm_d_conv       = 0
0.00.871.840 I llm_load_print_meta: ssm_d_inner      = 0
0.00.871.840 I llm_load_print_meta: ssm_d_state      = 0
0.00.871.840 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.871.841 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.871.841 I llm_load_print_meta: model type       = 2B
0.00.871.843 I llm_load_print_meta: model ftype      = Q8_0
0.00.871.845 I llm_load_print_meta: model params     = 2.51 B
0.00.871.846 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.871.846 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.871.847 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.871.847 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.871.860 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.871.861 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.871.862 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.871.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.871.868 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.871.870 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.871.870 I llm_load_print_meta: max token length = 93
0.00.966.870 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.972.745 I llama_new_context_with_model: n_seq_max     = 1
0.00.972.753 I llama_new_context_with_model: n_ctx         = 4096
0.00.972.753 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.972.754 I llama_new_context_with_model: n_batch       = 2048
0.00.972.754 I llama_new_context_with_model: n_ubatch      = 512
0.00.972.755 I llama_new_context_with_model: flash_attn    = 0
0.00.972.757 I llama_new_context_with_model: freq_base     = 10000.0
0.00.972.758 I llama_new_context_with_model: freq_scale    = 1
0.00.972.759 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.972.846 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.987.840 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.987.885 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.988.005 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.990.605 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.990.609 I llama_new_context_with_model: graph nodes  = 601
0.00.990.609 I llama_new_context_with_model: graph splits = 1
0.00.990.632 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.990.635 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.601.271 I main: llama threadpool init, n_threads = 4
0.01.601.287 I 
0.01.601.405 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.601.408 I 
0.01.601.640 I sampler seed: 2833975938
0.01.601.655 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.601.665 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.601.666 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.601.667 I 
 increably, not to be outdone by the competition. [end of text]


0.07.088.476 I llama_perf_sampler_print:    sampling time =      20.27 ms /    14 runs   (    1.45 ms per token,   690.85 tokens per second)
0.07.088.481 I llama_perf_context_print:        load time =    1600.32 ms
0.07.088.483 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.088.485 I llama_perf_context_print:        eval time =    5449.71 ms /    13 runs   (  419.21 ms per token,     2.39 tokens per second)
0.07.088.486 I llama_perf_context_print:       total time =    5487.22 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4370 (0ca416c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.859 I main: load the model and apply lora adapter, if any
0.00.025.551 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.564 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.674 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.688 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.703 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.709 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.711 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.713 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.715 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.718 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.733 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.735 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.739 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.741 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.876 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.748 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.368.458 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.368.474 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.368.475 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.368.477 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.368.478 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.368.479 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.368.481 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.368.485 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.368.486 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.368.487 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.368.489 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.368.491 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.368.501 I llama_model_loader: - type  f32:   37 tensors
0.00.368.504 I llama_model_loader: - type q8_0:  127 tensors
0.00.616.415 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.688.512 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.689.531 I llm_load_vocab: special tokens cache size = 5
0.00.881.072 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.881.155 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.881.156 I llm_load_print_meta: arch             = gemma
0.00.881.157 I llm_load_print_meta: vocab type       = SPM
0.00.881.158 I llm_load_print_meta: n_vocab          = 256000
0.00.881.160 I llm_load_print_meta: n_merges         = 0
0.00.881.160 I llm_load_print_meta: vocab_only       = 0
0.00.881.161 I llm_load_print_meta: n_ctx_train      = 8192
0.00.881.161 I llm_load_print_meta: n_embd           = 2048
0.00.881.161 I llm_load_print_meta: n_layer          = 18
0.00.881.230 I llm_load_print_meta: n_head           = 8
0.00.881.237 I llm_load_print_meta: n_head_kv        = 1
0.00.881.238 I llm_load_print_meta: n_rot            = 256
0.00.881.238 I llm_load_print_meta: n_swa            = 0
0.00.881.239 I llm_load_print_meta: n_embd_head_k    = 256
0.00.881.239 I llm_load_print_meta: n_embd_head_v    = 256
0.00.881.243 I llm_load_print_meta: n_gqa            = 8
0.00.881.250 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.881.256 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.881.259 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.881.266 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.881.267 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.881.268 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.881.269 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.881.276 I llm_load_print_meta: n_ff             = 16384
0.00.881.277 I llm_load_print_meta: n_expert         = 0
0.00.881.278 I llm_load_print_meta: n_expert_used    = 0
0.00.881.279 I llm_load_print_meta: causal attn      = 1
0.00.881.280 I llm_load_print_meta: pooling type     = 0
0.00.881.281 I llm_load_print_meta: rope type        = 2
0.00.881.282 I llm_load_print_meta: rope scaling     = linear
0.00.881.284 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.881.285 I llm_load_print_meta: freq_scale_train = 1
0.00.881.286 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.881.287 I llm_load_print_meta: rope_finetuned   = unknown
0.00.881.287 I llm_load_print_meta: ssm_d_conv       = 0
0.00.881.288 I llm_load_print_meta: ssm_d_inner      = 0
0.00.881.289 I llm_load_print_meta: ssm_d_state      = 0
0.00.881.289 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.881.293 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.881.294 I llm_load_print_meta: model type       = 2B
0.00.881.295 I llm_load_print_meta: model ftype      = Q8_0
0.00.881.296 I llm_load_print_meta: model params     = 2.51 B
0.00.881.297 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.881.298 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.881.299 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.881.300 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.881.301 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.881.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.881.302 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.881.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.881.311 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.881.313 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.881.314 I llm_load_print_meta: max token length = 93
0.00.963.087 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.963.096 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.963.097 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.963.098 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.963.099 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.963.099 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.969.343 I llama_new_context_with_model: n_seq_max     = 1
0.00.969.351 I llama_new_context_with_model: n_ctx         = 4096
0.00.969.351 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.969.352 I llama_new_context_with_model: n_batch       = 2048
0.00.969.352 I llama_new_context_with_model: n_ubatch      = 512
0.00.969.353 I llama_new_context_with_model: flash_attn    = 0
0.00.969.356 I llama_new_context_with_model: freq_base     = 10000.0
0.00.969.356 I llama_new_context_with_model: freq_scale    = 1
0.00.969.357 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.969.449 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.984.482 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.984.524 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.984.640 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.987.307 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.987.311 I llama_new_context_with_model: graph nodes  = 601
0.00.987.311 I llama_new_context_with_model: graph splits = 1
0.00.987.336 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.987.337 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.631.951 I main: llama threadpool init, n_threads = 4
0.01.631.968 I 
0.01.632.096 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.632.099 I 
0.01.632.340 I sampler seed: 1172157518
0.01.632.353 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.632.372 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.632.376 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.632.377 I 
 secon.

I'm unable to access the requested resource. Please ensure that you have the necessary permissions to access it.

I don't have information

0.15.238.728 I llama_perf_sampler_print:    sampling time =      49.60 ms /    33 runs   (    1.50 ms per token,   665.36 tokens per second)
0.15.238.732 I llama_perf_context_print:        load time =    1630.99 ms
0.15.238.733 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.238.735 I llama_perf_context_print:        eval time =   13517.37 ms /    32 runs   (  422.42 ms per token,     2.37 tokens per second)
0.15.238.735 I llama_perf_context_print:       total time =   13606.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4370 (0ca416c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.285 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.295 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.388 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.400 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.402 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.408 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.413 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.414 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.415 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.417 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.418 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.426 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.428 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.429 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.431 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.432 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.255.551 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.358.133 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.382.747 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.382.758 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.382.759 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.382.761 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.382.762 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.382.764 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.382.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.382.769 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.382.770 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.382.771 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.382.782 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.382.786 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.382.797 I llama_model_loader: - type  f32:   37 tensors
0.00.382.800 I llama_model_loader: - type q8_0:  127 tensors
0.00.604.125 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.674.660 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.675.732 I llm_load_vocab: special tokens cache size = 5
0.00.880.072 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.880.150 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.880.151 I llm_load_print_meta: arch             = gemma
0.00.880.152 I llm_load_print_meta: vocab type       = SPM
0.00.880.153 I llm_load_print_meta: n_vocab          = 256000
0.00.880.155 I llm_load_print_meta: n_merges         = 0
0.00.880.155 I llm_load_print_meta: vocab_only       = 0
0.00.880.156 I llm_load_print_meta: n_ctx_train      = 8192
0.00.880.156 I llm_load_print_meta: n_embd           = 2048
0.00.880.156 I llm_load_print_meta: n_layer          = 18
0.00.880.222 I llm_load_print_meta: n_head           = 8
0.00.880.230 I llm_load_print_meta: n_head_kv        = 1
0.00.880.231 I llm_load_print_meta: n_rot            = 256
0.00.880.231 I llm_load_print_meta: n_swa            = 0
0.00.880.232 I llm_load_print_meta: n_embd_head_k    = 256
0.00.880.232 I llm_load_print_meta: n_embd_head_v    = 256
0.00.880.237 I llm_load_print_meta: n_gqa            = 8
0.00.880.243 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.248 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.254 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.255 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.256 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.256 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.257 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.880.262 I llm_load_print_meta: n_ff             = 16384
0.00.880.263 I llm_load_print_meta: n_expert         = 0
0.00.880.266 I llm_load_print_meta: n_expert_used    = 0
0.00.880.267 I llm_load_print_meta: causal attn      = 1
0.00.880.267 I llm_load_print_meta: pooling type     = 0
0.00.880.267 I llm_load_print_meta: rope type        = 2
0.00.880.268 I llm_load_print_meta: rope scaling     = linear
0.00.880.269 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.880.270 I llm_load_print_meta: freq_scale_train = 1
0.00.880.270 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.880.270 I llm_load_print_meta: rope_finetuned   = unknown
0.00.880.270 I llm_load_print_meta: ssm_d_conv       = 0
0.00.880.271 I llm_load_print_meta: ssm_d_inner      = 0
0.00.880.271 I llm_load_print_meta: ssm_d_state      = 0
0.00.880.271 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.880.271 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.880.272 I llm_load_print_meta: model type       = 2B
0.00.880.273 I llm_load_print_meta: model ftype      = Q8_0
0.00.880.274 I llm_load_print_meta: model params     = 2.51 B
0.00.880.275 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.880.276 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.880.277 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.880.279 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.880.280 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.880.280 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.880.280 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.880.281 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.880.287 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.880.288 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.880.290 I llm_load_print_meta: max token length = 93
0.00.953.819 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.953.831 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.959.636 I llama_new_context_with_model: n_seq_max     = 1
0.00.959.644 I llama_new_context_with_model: n_ctx         = 4096
0.00.959.645 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.959.645 I llama_new_context_with_model: n_batch       = 2048
0.00.959.646 I llama_new_context_with_model: n_ubatch      = 512
0.00.959.647 I llama_new_context_with_model: flash_attn    = 0
0.00.959.650 I llama_new_context_with_model: freq_base     = 10000.0
0.00.959.651 I llama_new_context_with_model: freq_scale    = 1
0.00.959.652 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.747 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.974.631 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.974.670 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.974.806 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.977.504 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.977.508 I llama_new_context_with_model: graph nodes  = 601
0.00.977.509 I llama_new_context_with_model: graph splits = 1
0.00.977.533 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.977.540 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.587.436 I main: llama threadpool init, n_threads = 4
0.01.587.452 I 
0.01.587.572 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.587.576 I 
0.01.587.812 I sampler seed: 3623293875
0.01.587.825 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.837 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.838 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.838 I 
 increasively, defying limitations.

This narrative is about the boundless potential of the human mind and its ability to defy physical boundaries.

**Key Points:**



0.15.121.218 I llama_perf_sampler_print:    sampling time =      49.68 ms /    33 runs   (    1.51 ms per token,   664.32 tokens per second)
0.15.121.231 I llama_perf_context_print:        load time =    1586.47 ms
0.15.121.233 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.121.235 I llama_perf_context_print:        eval time =   13444.09 ms /    32 runs   (  420.13 ms per token,     2.38 tokens per second)
0.15.121.236 I llama_perf_context_print:       total time =   13533.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.923s
user	2m56.494s
sys	0m9.558s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4370 (0ca416c9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185786.86 ms
main:    total time = 185786.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.691 I build: 4370 (0ca416c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.000.905 I main: load the model and apply lora adapter, if any
0.00.023.734 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.748 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.863 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.878 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.880 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.889 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.893 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.895 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.896 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.897 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.899 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.905 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.907 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.908 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.910 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.912 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.259.983 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.362.715 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.387.348 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.387.359 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.387.360 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.387.362 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.387.363 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.387.364 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.387.366 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.387.371 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.387.372 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.387.373 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.387.375 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.387.377 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.387.386 I llama_model_loader: - type  f32:   37 tensors
0.00.387.388 I llama_model_loader: - type q4_K:  108 tensors
0.00.387.389 I llama_model_loader: - type q6_K:   19 tensors
0.00.621.728 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.687.912 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.688.872 I llm_load_vocab: special tokens cache size = 5
0.00.902.031 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.902.106 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.902.107 I llm_load_print_meta: arch             = gemma
0.00.902.108 I llm_load_print_meta: vocab type       = SPM
0.00.902.109 I llm_load_print_meta: n_vocab          = 256000
0.00.902.111 I llm_load_print_meta: n_merges         = 0
0.00.902.111 I llm_load_print_meta: vocab_only       = 0
0.00.902.111 I llm_load_print_meta: n_ctx_train      = 8192
0.00.902.112 I llm_load_print_meta: n_embd           = 2048
0.00.902.112 I llm_load_print_meta: n_layer          = 18
0.00.902.173 I llm_load_print_meta: n_head           = 8
0.00.902.180 I llm_load_print_meta: n_head_kv        = 1
0.00.902.180 I llm_load_print_meta: n_rot            = 256
0.00.902.181 I llm_load_print_meta: n_swa            = 0
0.00.902.181 I llm_load_print_meta: n_embd_head_k    = 256
0.00.902.182 I llm_load_print_meta: n_embd_head_v    = 256
0.00.902.187 I llm_load_print_meta: n_gqa            = 8
0.00.902.192 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.902.198 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.902.199 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.902.200 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.902.201 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.902.201 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.902.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.902.210 I llm_load_print_meta: n_ff             = 16384
0.00.902.211 I llm_load_print_meta: n_expert         = 0
0.00.902.212 I llm_load_print_meta: n_expert_used    = 0
0.00.902.213 I llm_load_print_meta: causal attn      = 1
0.00.902.213 I llm_load_print_meta: pooling type     = 0
0.00.902.225 I llm_load_print_meta: rope type        = 2
0.00.902.226 I llm_load_print_meta: rope scaling     = linear
0.00.902.238 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.902.239 I llm_load_print_meta: freq_scale_train = 1
0.00.902.240 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.902.240 I llm_load_print_meta: rope_finetuned   = unknown
0.00.902.244 I llm_load_print_meta: ssm_d_conv       = 0
0.00.902.244 I llm_load_print_meta: ssm_d_inner      = 0
0.00.902.244 I llm_load_print_meta: ssm_d_state      = 0
0.00.902.245 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.902.245 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.902.246 I llm_load_print_meta: model type       = 2B
0.00.902.247 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.902.248 I llm_load_print_meta: model params     = 2.51 B
0.00.902.248 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.902.249 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.902.249 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.902.250 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.902.250 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.902.250 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.902.251 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.902.252 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.902.259 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.902.260 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.902.260 I llm_load_print_meta: max token length = 93
0.00.965.478 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.965.489 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.965.490 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.965.491 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.965.492 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.965.492 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.971.624 I llama_new_context_with_model: n_seq_max     = 1
0.00.971.630 I llama_new_context_with_model: n_ctx         = 4096
0.00.971.630 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.971.631 I llama_new_context_with_model: n_batch       = 2048
0.00.971.631 I llama_new_context_with_model: n_ubatch      = 512
0.00.971.632 I llama_new_context_with_model: flash_attn    = 0
0.00.971.634 I llama_new_context_with_model: freq_base     = 10000.0
0.00.971.635 I llama_new_context_with_model: freq_scale    = 1
0.00.971.635 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.971.731 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.986.844 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.986.885 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.986.999 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.989.622 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.989.626 I llama_new_context_with_model: graph nodes  = 601
0.00.989.626 I llama_new_context_with_model: graph splits = 1
0.00.989.649 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.989.652 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.569.636 I main: llama threadpool init, n_threads = 4
0.01.569.651 I 
0.01.569.784 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.569.788 I 
0.01.570.024 I sampler seed: 1409310403
0.01.570.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.570.050 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.570.051 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.570.051 I 
 seconally in the statement that "the best way to assess the impact of a program is to measure changes in its outcomes."

This is an important point,

0.12.671.050 I llama_perf_sampler_print:    sampling time =      49.60 ms /    33 runs   (    1.50 ms per token,   665.35 tokens per second)
0.12.671.067 I llama_perf_context_print:        load time =    1568.62 ms
0.12.671.069 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.671.070 I llama_perf_context_print:        eval time =   11010.95 ms /    32 runs   (  344.09 ms per token,     2.91 tokens per second)
0.12.671.071 I llama_perf_context_print:       total time =   11101.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4370 (0ca416c9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185746.17 ms
main:    total time = 185746.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4370 (0ca416c9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.906 I main: llama backend init
0.00.000.915 I main: load the model and apply lora adapter, if any
0.00.023.599 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.720 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.739 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.746 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.755 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.758 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.761 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.763 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.768 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.770 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.781 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.784 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.787 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.789 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.791 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.311 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.225 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.986 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.998 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.000 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.001 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.005 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.009 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.011 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.020 I llama_model_loader: - type  f32:   37 tensors
0.00.355.022 I llama_model_loader: - type q4_K:  108 tensors
0.00.355.022 I llama_model_loader: - type q6_K:   19 tensors
0.00.580.661 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.653.825 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.654.835 I llm_load_vocab: special tokens cache size = 5
0.00.854.855 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.854.934 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.854.935 I llm_load_print_meta: arch             = gemma
0.00.854.936 I llm_load_print_meta: vocab type       = SPM
0.00.854.937 I llm_load_print_meta: n_vocab          = 256000
0.00.854.939 I llm_load_print_meta: n_merges         = 0
0.00.854.939 I llm_load_print_meta: vocab_only       = 0
0.00.854.940 I llm_load_print_meta: n_ctx_train      = 8192
0.00.854.940 I llm_load_print_meta: n_embd           = 2048
0.00.854.940 I llm_load_print_meta: n_layer          = 18
0.00.855.021 I llm_load_print_meta: n_head           = 8
0.00.855.028 I llm_load_print_meta: n_head_kv        = 1
0.00.855.029 I llm_load_print_meta: n_rot            = 256
0.00.855.030 I llm_load_print_meta: n_swa            = 0
0.00.855.030 I llm_load_print_meta: n_embd_head_k    = 256
0.00.855.031 I llm_load_print_meta: n_embd_head_v    = 256
0.00.855.038 I llm_load_print_meta: n_gqa            = 8
0.00.855.044 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.855.051 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.855.052 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.855.054 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.855.055 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.855.056 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.855.056 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.855.063 I llm_load_print_meta: n_ff             = 16384
0.00.855.064 I llm_load_print_meta: n_expert         = 0
0.00.855.064 I llm_load_print_meta: n_expert_used    = 0
0.00.855.065 I llm_load_print_meta: causal attn      = 1
0.00.855.079 I llm_load_print_meta: pooling type     = 0
0.00.855.080 I llm_load_print_meta: rope type        = 2
0.00.855.081 I llm_load_print_meta: rope scaling     = linear
0.00.855.090 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.855.091 I llm_load_print_meta: freq_scale_train = 1
0.00.855.092 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.855.092 I llm_load_print_meta: rope_finetuned   = unknown
0.00.855.093 I llm_load_print_meta: ssm_d_conv       = 0
0.00.855.093 I llm_load_print_meta: ssm_d_inner      = 0
0.00.855.094 I llm_load_print_meta: ssm_d_state      = 0
0.00.855.094 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.855.095 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.855.096 I llm_load_print_meta: model type       = 2B
0.00.855.097 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.855.106 I llm_load_print_meta: model params     = 2.51 B
0.00.855.110 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.855.111 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.855.112 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.855.113 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.855.114 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.855.115 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.855.115 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.855.118 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.855.125 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.855.127 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.855.131 I llm_load_print_meta: max token length = 93
0.00.914.653 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.920.839 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.848 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.849 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.849 I llama_new_context_with_model: n_batch       = 2048
0.00.920.850 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.850 I llama_new_context_with_model: flash_attn    = 0
0.00.920.854 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.855 I llama_new_context_with_model: freq_scale    = 1
0.00.920.856 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.959 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.936.149 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.194 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.320 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.955 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.959 I llama_new_context_with_model: graph nodes  = 601
0.00.938.959 I llama_new_context_with_model: graph splits = 1
0.00.938.986 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.938.989 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.519.577 I main: llama threadpool init, n_threads = 4
0.01.519.592 I 
0.01.519.728 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.519.732 I 
0.01.519.977 I sampler seed: 2402082517
0.01.519.991 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.520.005 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.520.010 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.520.010 I 
 increasively.

The correct answer is:

The word "incredibly" is an adverb that means "to a great extent" or "in an extremely

0.12.629.026 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.25 tokens per second)
0.12.629.039 I llama_perf_context_print:        load time =    1518.55 ms
0.12.629.041 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.629.044 I llama_perf_context_print:        eval time =   11020.17 ms /    32 runs   (  344.38 ms per token,     2.90 tokens per second)
0.12.629.045 I llama_perf_context_print:       total time =   11109.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.825s
user	46m43.615s
sys	0m6.435s
