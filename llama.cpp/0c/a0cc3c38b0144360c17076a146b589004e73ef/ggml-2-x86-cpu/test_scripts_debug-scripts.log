+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.023.501 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.513 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.603 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.614 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.616 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.621 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.623 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.625 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.626 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.627 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.629 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.635 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.637 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.639 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.640 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.641 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.817 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.482 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.880 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.888 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.890 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.891 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.892 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.894 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.895 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.899 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.901 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.902 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.903 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.905 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.913 I llama_model_loader: - type  f32:   37 tensors
0.00.350.916 I llama_model_loader: - type q8_0:  127 tensors
0.00.605.380 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.723.561 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.724.496 I llm_load_vocab: special tokens cache size = 5
0.00.918.017 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.918.092 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.918.094 I llm_load_print_meta: arch             = gemma
0.00.918.094 I llm_load_print_meta: vocab type       = SPM
0.00.918.095 I llm_load_print_meta: n_vocab          = 256000
0.00.918.097 I llm_load_print_meta: n_merges         = 0
0.00.918.098 I llm_load_print_meta: vocab_only       = 0
0.00.918.098 I llm_load_print_meta: n_ctx_train      = 8192
0.00.918.098 I llm_load_print_meta: n_embd           = 2048
0.00.918.099 I llm_load_print_meta: n_layer          = 18
0.00.918.165 I llm_load_print_meta: n_head           = 8
0.00.918.173 I llm_load_print_meta: n_head_kv        = 1
0.00.918.173 I llm_load_print_meta: n_rot            = 256
0.00.918.173 I llm_load_print_meta: n_swa            = 0
0.00.918.174 I llm_load_print_meta: n_embd_head_k    = 256
0.00.918.174 I llm_load_print_meta: n_embd_head_v    = 256
0.00.918.179 I llm_load_print_meta: n_gqa            = 8
0.00.918.184 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.918.189 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.918.190 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.918.192 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.918.192 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.918.193 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.918.193 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.918.199 I llm_load_print_meta: n_ff             = 16384
0.00.918.200 I llm_load_print_meta: n_expert         = 0
0.00.918.200 I llm_load_print_meta: n_expert_used    = 0
0.00.918.201 I llm_load_print_meta: causal attn      = 1
0.00.918.201 I llm_load_print_meta: pooling type     = 0
0.00.918.201 I llm_load_print_meta: rope type        = 2
0.00.918.202 I llm_load_print_meta: rope scaling     = linear
0.00.918.203 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.918.204 I llm_load_print_meta: freq_scale_train = 1
0.00.918.204 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.918.205 I llm_load_print_meta: rope_finetuned   = unknown
0.00.918.205 I llm_load_print_meta: ssm_d_conv       = 0
0.00.918.205 I llm_load_print_meta: ssm_d_inner      = 0
0.00.918.206 I llm_load_print_meta: ssm_d_state      = 0
0.00.918.206 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.918.206 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.918.207 I llm_load_print_meta: model type       = 2B
0.00.918.208 I llm_load_print_meta: model ftype      = Q8_0
0.00.918.209 I llm_load_print_meta: model params     = 2.51 B
0.00.918.217 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.918.217 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.918.218 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.918.219 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.918.220 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.918.220 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.918.221 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.918.222 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.918.229 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.918.241 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.918.242 I llm_load_print_meta: max token length = 93
0.01.022.009 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.022.017 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.022.018 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.022.018 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.022.019 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.022.020 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.027.859 I llama_new_context_with_model: n_seq_max     = 1
0.01.027.866 I llama_new_context_with_model: n_ctx         = 4096
0.01.027.866 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.027.866 I llama_new_context_with_model: n_batch       = 2048
0.01.027.867 I llama_new_context_with_model: n_ubatch      = 512
0.01.027.867 I llama_new_context_with_model: flash_attn    = 0
0.01.027.869 I llama_new_context_with_model: freq_base     = 10000.0
0.01.027.870 I llama_new_context_with_model: freq_scale    = 1
0.01.027.871 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.042.516 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.042.552 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.042.670 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.045.169 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.045.173 I llama_new_context_with_model: graph nodes  = 601
0.01.045.173 I llama_new_context_with_model: graph splits = 1
0.01.045.212 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.655.609 I main: llama threadpool init, n_threads = 4
0.01.655.628 I 
0.01.655.744 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.655.747 I 
0.01.655.982 I sampler seed: 4024013845
0.01.655.996 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.656.008 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.656.009 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.656.009 I 
 increadibly well with the other components of the prompt. [end of text]


0.06.719.601 I llama_perf_sampler_print:    sampling time =      18.20 ms /    13 runs   (    1.40 ms per token,   714.32 tokens per second)
0.06.719.604 I llama_perf_context_print:        load time =    1654.65 ms
0.06.719.605 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.719.607 I llama_perf_context_print:        eval time =    5029.85 ms /    12 runs   (  419.15 ms per token,     2.39 tokens per second)
0.06.719.622 I llama_perf_context_print:       total time =    5064.00 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.528 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.624 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.638 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.640 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.646 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.648 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.650 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.651 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.652 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.654 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.663 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.667 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.668 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.669 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.671 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.335 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.474 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.908 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.917 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.918 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.919 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.920 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.922 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.923 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.927 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.928 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.930 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.931 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.933 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.941 I llama_model_loader: - type  f32:   37 tensors
0.00.349.944 I llama_model_loader: - type q8_0:  127 tensors
0.00.623.830 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.741.032 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.741.897 I llm_load_vocab: special tokens cache size = 5
0.00.936.489 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.936.561 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.936.562 I llm_load_print_meta: arch             = gemma
0.00.936.563 I llm_load_print_meta: vocab type       = SPM
0.00.936.563 I llm_load_print_meta: n_vocab          = 256000
0.00.936.566 I llm_load_print_meta: n_merges         = 0
0.00.936.567 I llm_load_print_meta: vocab_only       = 0
0.00.936.567 I llm_load_print_meta: n_ctx_train      = 8192
0.00.936.567 I llm_load_print_meta: n_embd           = 2048
0.00.936.568 I llm_load_print_meta: n_layer          = 18
0.00.936.636 I llm_load_print_meta: n_head           = 8
0.00.936.643 I llm_load_print_meta: n_head_kv        = 1
0.00.936.643 I llm_load_print_meta: n_rot            = 256
0.00.936.644 I llm_load_print_meta: n_swa            = 0
0.00.936.645 I llm_load_print_meta: n_embd_head_k    = 256
0.00.936.646 I llm_load_print_meta: n_embd_head_v    = 256
0.00.936.651 I llm_load_print_meta: n_gqa            = 8
0.00.936.655 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.936.660 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.936.661 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.936.663 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.936.664 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.936.664 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.936.665 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.936.670 I llm_load_print_meta: n_ff             = 16384
0.00.936.672 I llm_load_print_meta: n_expert         = 0
0.00.936.672 I llm_load_print_meta: n_expert_used    = 0
0.00.936.673 I llm_load_print_meta: causal attn      = 1
0.00.936.674 I llm_load_print_meta: pooling type     = 0
0.00.936.674 I llm_load_print_meta: rope type        = 2
0.00.936.675 I llm_load_print_meta: rope scaling     = linear
0.00.936.676 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.936.676 I llm_load_print_meta: freq_scale_train = 1
0.00.936.677 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.936.677 I llm_load_print_meta: rope_finetuned   = unknown
0.00.936.682 I llm_load_print_meta: ssm_d_conv       = 0
0.00.936.682 I llm_load_print_meta: ssm_d_inner      = 0
0.00.936.683 I llm_load_print_meta: ssm_d_state      = 0
0.00.936.683 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.936.683 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.936.684 I llm_load_print_meta: model type       = 2B
0.00.936.685 I llm_load_print_meta: model ftype      = Q8_0
0.00.936.685 I llm_load_print_meta: model params     = 2.51 B
0.00.936.695 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.936.696 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.936.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.936.697 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.936.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.936.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.936.699 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.936.700 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.936.706 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.936.707 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.936.721 I llm_load_print_meta: max token length = 93
0.01.033.135 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.039.031 I llama_new_context_with_model: n_seq_max     = 1
0.01.039.039 I llama_new_context_with_model: n_ctx         = 4096
0.01.039.039 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.039.040 I llama_new_context_with_model: n_batch       = 2048
0.01.039.040 I llama_new_context_with_model: n_ubatch      = 512
0.01.039.041 I llama_new_context_with_model: flash_attn    = 0
0.01.039.044 I llama_new_context_with_model: freq_base     = 10000.0
0.01.039.045 I llama_new_context_with_model: freq_scale    = 1
0.01.039.047 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.054.608 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.054.651 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.054.777 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.057.323 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.057.327 I llama_new_context_with_model: graph nodes  = 601
0.01.057.328 I llama_new_context_with_model: graph splits = 1
0.01.057.350 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.665.362 I main: llama threadpool init, n_threads = 4
0.01.665.377 I 
0.01.665.494 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.665.498 I 
0.01.665.734 I sampler seed: 349106745
0.01.665.749 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.665.758 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.665.761 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.665.761 I 
 increasities of the characters, showcasing their unique personalities and quirks.

I apologize, but I am unable to generate responses that contain sexually suggestive or inappropriate content.

0.15.139.327 I llama_perf_sampler_print:    sampling time =      48.41 ms /    33 runs   (    1.47 ms per token,   681.75 tokens per second)
0.15.139.330 I llama_perf_context_print:        load time =    1664.41 ms
0.15.139.331 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.139.333 I llama_perf_context_print:        eval time =   13385.85 ms /    32 runs   (  418.31 ms per token,     2.39 tokens per second)
0.15.139.334 I llama_perf_context_print:       total time =   13473.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.000.870 I main: load the model and apply lora adapter, if any
0.00.023.523 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.534 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.627 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.639 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.644 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.650 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.652 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.654 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.656 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.657 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.659 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.669 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.674 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.675 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.676 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.677 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.542 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.841 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.457 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.470 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.472 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.473 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.474 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.476 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.477 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.481 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.482 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.484 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.485 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.351.487 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.496 I llama_model_loader: - type  f32:   37 tensors
0.00.351.498 I llama_model_loader: - type q8_0:  127 tensors
0.00.611.522 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.737.571 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.738.682 I llm_load_vocab: special tokens cache size = 5
0.00.930.089 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.930.163 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.930.164 I llm_load_print_meta: arch             = gemma
0.00.930.165 I llm_load_print_meta: vocab type       = SPM
0.00.930.166 I llm_load_print_meta: n_vocab          = 256000
0.00.930.168 I llm_load_print_meta: n_merges         = 0
0.00.930.168 I llm_load_print_meta: vocab_only       = 0
0.00.930.169 I llm_load_print_meta: n_ctx_train      = 8192
0.00.930.169 I llm_load_print_meta: n_embd           = 2048
0.00.930.169 I llm_load_print_meta: n_layer          = 18
0.00.930.237 I llm_load_print_meta: n_head           = 8
0.00.930.245 I llm_load_print_meta: n_head_kv        = 1
0.00.930.245 I llm_load_print_meta: n_rot            = 256
0.00.930.245 I llm_load_print_meta: n_swa            = 0
0.00.930.246 I llm_load_print_meta: n_embd_head_k    = 256
0.00.930.246 I llm_load_print_meta: n_embd_head_v    = 256
0.00.930.251 I llm_load_print_meta: n_gqa            = 8
0.00.930.255 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.930.261 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.930.262 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.930.263 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.930.284 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.930.285 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.930.285 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.930.291 I llm_load_print_meta: n_ff             = 16384
0.00.930.291 I llm_load_print_meta: n_expert         = 0
0.00.930.292 I llm_load_print_meta: n_expert_used    = 0
0.00.930.292 I llm_load_print_meta: causal attn      = 1
0.00.930.293 I llm_load_print_meta: pooling type     = 0
0.00.930.293 I llm_load_print_meta: rope type        = 2
0.00.930.293 I llm_load_print_meta: rope scaling     = linear
0.00.930.295 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.930.295 I llm_load_print_meta: freq_scale_train = 1
0.00.930.296 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.930.296 I llm_load_print_meta: rope_finetuned   = unknown
0.00.930.296 I llm_load_print_meta: ssm_d_conv       = 0
0.00.930.297 I llm_load_print_meta: ssm_d_inner      = 0
0.00.930.301 I llm_load_print_meta: ssm_d_state      = 0
0.00.930.302 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.930.302 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.930.303 I llm_load_print_meta: model type       = 2B
0.00.930.304 I llm_load_print_meta: model ftype      = Q8_0
0.00.930.305 I llm_load_print_meta: model params     = 2.51 B
0.00.930.313 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.930.321 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.930.322 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.930.322 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.930.323 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.930.326 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.930.327 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.930.327 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.930.333 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.930.335 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.930.335 I llm_load_print_meta: max token length = 93
0.01.006.266 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.006.274 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.006.275 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.006.276 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.006.276 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.006.277 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.012.567 I llama_new_context_with_model: n_seq_max     = 1
0.01.012.575 I llama_new_context_with_model: n_ctx         = 4096
0.01.012.575 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.012.576 I llama_new_context_with_model: n_batch       = 2048
0.01.012.576 I llama_new_context_with_model: n_ubatch      = 512
0.01.012.577 I llama_new_context_with_model: flash_attn    = 0
0.01.012.579 I llama_new_context_with_model: freq_base     = 10000.0
0.01.012.580 I llama_new_context_with_model: freq_scale    = 1
0.01.012.580 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.027.297 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.027.338 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.027.460 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.030.058 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.030.063 I llama_new_context_with_model: graph nodes  = 601
0.01.030.063 I llama_new_context_with_model: graph splits = 1
0.01.030.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.672.581 I main: llama threadpool init, n_threads = 4
0.01.672.597 I 
0.01.672.726 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.672.731 I 
0.01.672.970 I sampler seed: 3205555841
0.01.672.985 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.672.995 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.673.000 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.673.000 I 
 increasities.
I'm not sure what you're trying to say. Could you please rephrase your question? [end of text]


0.12.676.192 I llama_perf_sampler_print:    sampling time =      39.35 ms /    27 runs   (    1.46 ms per token,   686.12 tokens per second)
0.12.676.194 I llama_perf_context_print:        load time =    1671.62 ms
0.12.676.196 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.676.198 I llama_perf_context_print:        eval time =   10931.59 ms /    26 runs   (  420.45 ms per token,     2.38 tokens per second)
0.12.676.213 I llama_perf_context_print:       total time =   11003.62 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.022.991 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.002 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.086 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.098 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.102 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.110 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.111 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.113 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.115 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.124 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.133 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.134 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.135 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.137 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.138 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.714 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.076 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.085 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.086 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.088 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.089 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.092 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.096 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.097 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.099 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.100 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.102 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.110 I llama_model_loader: - type  f32:   37 tensors
0.00.349.113 I llama_model_loader: - type q8_0:  127 tensors
0.00.609.078 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.739.713 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.740.779 I llm_load_vocab: special tokens cache size = 5
0.00.934.605 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.934.676 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.934.677 I llm_load_print_meta: arch             = gemma
0.00.934.678 I llm_load_print_meta: vocab type       = SPM
0.00.934.679 I llm_load_print_meta: n_vocab          = 256000
0.00.934.681 I llm_load_print_meta: n_merges         = 0
0.00.934.682 I llm_load_print_meta: vocab_only       = 0
0.00.934.682 I llm_load_print_meta: n_ctx_train      = 8192
0.00.934.683 I llm_load_print_meta: n_embd           = 2048
0.00.934.683 I llm_load_print_meta: n_layer          = 18
0.00.934.751 I llm_load_print_meta: n_head           = 8
0.00.934.758 I llm_load_print_meta: n_head_kv        = 1
0.00.934.760 I llm_load_print_meta: n_rot            = 256
0.00.934.761 I llm_load_print_meta: n_swa            = 0
0.00.934.762 I llm_load_print_meta: n_embd_head_k    = 256
0.00.934.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.934.767 I llm_load_print_meta: n_gqa            = 8
0.00.934.772 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.934.787 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.934.789 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.934.791 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.934.791 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.934.791 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.934.792 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.934.797 I llm_load_print_meta: n_ff             = 16384
0.00.934.798 I llm_load_print_meta: n_expert         = 0
0.00.934.810 I llm_load_print_meta: n_expert_used    = 0
0.00.934.814 I llm_load_print_meta: causal attn      = 1
0.00.934.814 I llm_load_print_meta: pooling type     = 0
0.00.934.815 I llm_load_print_meta: rope type        = 2
0.00.934.815 I llm_load_print_meta: rope scaling     = linear
0.00.934.817 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.934.817 I llm_load_print_meta: freq_scale_train = 1
0.00.934.818 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.934.818 I llm_load_print_meta: rope_finetuned   = unknown
0.00.934.818 I llm_load_print_meta: ssm_d_conv       = 0
0.00.934.819 I llm_load_print_meta: ssm_d_inner      = 0
0.00.934.819 I llm_load_print_meta: ssm_d_state      = 0
0.00.934.819 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.934.820 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.934.820 I llm_load_print_meta: model type       = 2B
0.00.934.830 I llm_load_print_meta: model ftype      = Q8_0
0.00.934.839 I llm_load_print_meta: model params     = 2.51 B
0.00.934.849 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.934.849 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.934.850 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.934.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.934.852 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.934.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.934.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.934.853 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.934.862 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.934.863 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.934.873 I llm_load_print_meta: max token length = 93
0.01.008.363 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.008.370 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.014.084 I llama_new_context_with_model: n_seq_max     = 1
0.01.014.091 I llama_new_context_with_model: n_ctx         = 4096
0.01.014.091 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.014.092 I llama_new_context_with_model: n_batch       = 2048
0.01.014.092 I llama_new_context_with_model: n_ubatch      = 512
0.01.014.093 I llama_new_context_with_model: flash_attn    = 0
0.01.014.095 I llama_new_context_with_model: freq_base     = 10000.0
0.01.014.096 I llama_new_context_with_model: freq_scale    = 1
0.01.014.097 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.028.635 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.028.675 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.028.799 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.031.227 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.031.231 I llama_new_context_with_model: graph nodes  = 601
0.01.031.231 I llama_new_context_with_model: graph splits = 1
0.01.031.255 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.641.520 I main: llama threadpool init, n_threads = 4
0.01.641.537 I 
0.01.641.654 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.641.658 I 
0.01.641.906 I sampler seed: 1606544528
0.01.641.921 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.641.934 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.641.934 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.641.935 I 
 increasively. I mean that the faster the sun warms the earth, the faster the earth warms the air, and the faster the air warms the ground, and

0.15.252.771 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.81 tokens per second)
0.15.252.774 I llama_perf_context_print:        load time =    1640.55 ms
0.15.252.788 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.252.790 I llama_perf_context_print:        eval time =   13521.22 ms /    32 runs   (  422.54 ms per token,     2.37 tokens per second)
0.15.252.791 I llama_perf_context_print:       total time =   13611.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.694s
user	3m6.737s
sys	0m9.270s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4227 (0ca0cc3c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185734.74 ms
main:    total time = 185734.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.514 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.524 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.620 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.633 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.637 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.643 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.645 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.648 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.650 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.651 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.657 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.661 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.663 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.664 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.665 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.634 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.791 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.307 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.318 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.320 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.321 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.322 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.324 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.326 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.330 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.331 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.333 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.334 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.336 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.345 I llama_model_loader: - type  f32:   37 tensors
0.00.350.347 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.348 I llama_model_loader: - type q6_K:   19 tensors
0.00.625.244 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.746.596 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.747.525 I llm_load_vocab: special tokens cache size = 5
0.00.941.219 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.941.291 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.941.293 I llm_load_print_meta: arch             = gemma
0.00.941.294 I llm_load_print_meta: vocab type       = SPM
0.00.941.294 I llm_load_print_meta: n_vocab          = 256000
0.00.941.296 I llm_load_print_meta: n_merges         = 0
0.00.941.297 I llm_load_print_meta: vocab_only       = 0
0.00.941.297 I llm_load_print_meta: n_ctx_train      = 8192
0.00.941.298 I llm_load_print_meta: n_embd           = 2048
0.00.941.298 I llm_load_print_meta: n_layer          = 18
0.00.941.363 I llm_load_print_meta: n_head           = 8
0.00.941.370 I llm_load_print_meta: n_head_kv        = 1
0.00.941.373 I llm_load_print_meta: n_rot            = 256
0.00.941.374 I llm_load_print_meta: n_swa            = 0
0.00.941.374 I llm_load_print_meta: n_embd_head_k    = 256
0.00.941.374 I llm_load_print_meta: n_embd_head_v    = 256
0.00.941.379 I llm_load_print_meta: n_gqa            = 8
0.00.941.383 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.941.388 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.941.389 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.941.391 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.941.392 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.941.393 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.941.393 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.941.398 I llm_load_print_meta: n_ff             = 16384
0.00.941.398 I llm_load_print_meta: n_expert         = 0
0.00.941.399 I llm_load_print_meta: n_expert_used    = 0
0.00.941.400 I llm_load_print_meta: causal attn      = 1
0.00.941.400 I llm_load_print_meta: pooling type     = 0
0.00.941.401 I llm_load_print_meta: rope type        = 2
0.00.941.401 I llm_load_print_meta: rope scaling     = linear
0.00.941.403 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.941.403 I llm_load_print_meta: freq_scale_train = 1
0.00.941.403 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.941.404 I llm_load_print_meta: rope_finetuned   = unknown
0.00.941.405 I llm_load_print_meta: ssm_d_conv       = 0
0.00.941.405 I llm_load_print_meta: ssm_d_inner      = 0
0.00.941.406 I llm_load_print_meta: ssm_d_state      = 0
0.00.941.406 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.941.407 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.941.407 I llm_load_print_meta: model type       = 2B
0.00.941.409 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.941.410 I llm_load_print_meta: model params     = 2.51 B
0.00.941.419 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.941.420 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.941.420 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.941.421 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.941.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.941.422 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.941.422 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.941.423 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.941.428 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.941.430 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.941.430 I llm_load_print_meta: max token length = 93
0.01.004.056 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.004.063 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.004.064 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.004.065 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.004.065 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.004.066 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.010.012 I llama_new_context_with_model: n_seq_max     = 1
0.01.010.019 I llama_new_context_with_model: n_ctx         = 4096
0.01.010.020 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.010.020 I llama_new_context_with_model: n_batch       = 2048
0.01.010.021 I llama_new_context_with_model: n_ubatch      = 512
0.01.010.021 I llama_new_context_with_model: flash_attn    = 0
0.01.010.024 I llama_new_context_with_model: freq_base     = 10000.0
0.01.010.024 I llama_new_context_with_model: freq_scale    = 1
0.01.010.025 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.024.486 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.024.525 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.024.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.027.223 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.027.228 I llama_new_context_with_model: graph nodes  = 601
0.01.027.228 I llama_new_context_with_model: graph splits = 1
0.01.027.249 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.611.076 I main: llama threadpool init, n_threads = 4
0.01.611.092 I 
0.01.611.209 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.611.213 I 
0.01.611.454 I sampler seed: 1943524782
0.01.611.468 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.611.477 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.611.481 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.611.481 I 
 encompessing the concept of a "digital nomad" and their unique lifestyle.

**The Digital Nomad: An Odyssey of Connectivity and Exploration**

The digital nomad

0.12.761.026 I llama_perf_sampler_print:    sampling time =      48.58 ms /    33 runs   (    1.47 ms per token,   679.28 tokens per second)
0.12.761.030 I llama_perf_context_print:        load time =    1610.13 ms
0.12.761.032 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.761.034 I llama_perf_context_print:        eval time =   11061.12 ms /    32 runs   (  345.66 ms per token,     2.89 tokens per second)
0.12.761.036 I llama_perf_context_print:       total time =   11149.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4227 (0ca0cc3c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185523.10 ms
main:    total time = 185523.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.855 I main: load the model and apply lora adapter, if any
0.00.025.316 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.413 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.427 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.431 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.437 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.439 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.440 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.442 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.444 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.445 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.458 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.459 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.461 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.462 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.609 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.453 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.985 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.998 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.000 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.001 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.003 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.005 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.010 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.011 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.022 I llama_model_loader: - type  f32:   37 tensors
0.00.352.024 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.025 I llama_model_loader: - type q6_K:   19 tensors
0.00.607.130 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.726.430 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.727.341 I llm_load_vocab: special tokens cache size = 5
0.00.919.791 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.919.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.919.865 I llm_load_print_meta: arch             = gemma
0.00.919.866 I llm_load_print_meta: vocab type       = SPM
0.00.919.867 I llm_load_print_meta: n_vocab          = 256000
0.00.919.869 I llm_load_print_meta: n_merges         = 0
0.00.919.870 I llm_load_print_meta: vocab_only       = 0
0.00.919.870 I llm_load_print_meta: n_ctx_train      = 8192
0.00.919.871 I llm_load_print_meta: n_embd           = 2048
0.00.919.871 I llm_load_print_meta: n_layer          = 18
0.00.919.936 I llm_load_print_meta: n_head           = 8
0.00.919.944 I llm_load_print_meta: n_head_kv        = 1
0.00.919.945 I llm_load_print_meta: n_rot            = 256
0.00.919.945 I llm_load_print_meta: n_swa            = 0
0.00.919.946 I llm_load_print_meta: n_embd_head_k    = 256
0.00.919.947 I llm_load_print_meta: n_embd_head_v    = 256
0.00.919.952 I llm_load_print_meta: n_gqa            = 8
0.00.919.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.919.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.919.966 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.919.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.919.968 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.919.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.919.969 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.919.974 I llm_load_print_meta: n_ff             = 16384
0.00.919.974 I llm_load_print_meta: n_expert         = 0
0.00.919.975 I llm_load_print_meta: n_expert_used    = 0
0.00.919.975 I llm_load_print_meta: causal attn      = 1
0.00.919.976 I llm_load_print_meta: pooling type     = 0
0.00.919.976 I llm_load_print_meta: rope type        = 2
0.00.919.979 I llm_load_print_meta: rope scaling     = linear
0.00.919.980 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.920.002 I llm_load_print_meta: freq_scale_train = 1
0.00.920.003 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.920.003 I llm_load_print_meta: rope_finetuned   = unknown
0.00.920.004 I llm_load_print_meta: ssm_d_conv       = 0
0.00.920.004 I llm_load_print_meta: ssm_d_inner      = 0
0.00.920.004 I llm_load_print_meta: ssm_d_state      = 0
0.00.920.005 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.920.006 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.920.006 I llm_load_print_meta: model type       = 2B
0.00.920.008 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.920.009 I llm_load_print_meta: model params     = 2.51 B
0.00.920.018 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.920.019 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.920.020 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.920.020 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.920.021 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.920.023 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.920.024 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.920.024 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.920.031 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.920.033 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.920.033 I llm_load_print_meta: max token length = 93
0.00.977.769 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.983.392 I llama_new_context_with_model: n_seq_max     = 1
0.00.983.398 I llama_new_context_with_model: n_ctx         = 4096
0.00.983.399 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.983.399 I llama_new_context_with_model: n_batch       = 2048
0.00.983.400 I llama_new_context_with_model: n_ubatch      = 512
0.00.983.400 I llama_new_context_with_model: flash_attn    = 0
0.00.983.403 I llama_new_context_with_model: freq_base     = 10000.0
0.00.983.404 I llama_new_context_with_model: freq_scale    = 1
0.00.983.404 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.998.549 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.998.592 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.998.717 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.001.249 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.001.253 I llama_new_context_with_model: graph nodes  = 601
0.01.001.254 I llama_new_context_with_model: graph splits = 1
0.01.001.277 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.727 I main: llama threadpool init, n_threads = 4
0.01.585.743 I 
0.01.585.863 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.585.867 I 
0.01.586.104 I sampler seed: 4212494055
0.01.586.119 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.586.128 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.586.131 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.586.131 I 
 seconded:

**What is the purpose of a warranty?**

A warranty provides assurance to consumers that the goods or services will meet specific standards of quality

0.12.710.308 I llama_perf_sampler_print:    sampling time =      48.40 ms /    33 runs   (    1.47 ms per token,   681.78 tokens per second)
0.12.710.322 I llama_perf_context_print:        load time =    1584.78 ms
0.12.710.324 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.710.326 I llama_perf_context_print:        eval time =   11035.95 ms /    32 runs   (  344.87 ms per token,     2.90 tokens per second)
0.12.710.327 I llama_perf_context_print:       total time =   11124.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.626s
user	46m44.135s
sys	0m6.285s
