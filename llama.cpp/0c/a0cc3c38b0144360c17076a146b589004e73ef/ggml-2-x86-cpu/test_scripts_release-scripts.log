+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.021.469 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.481 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.489 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.495 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.495 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.500 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.501 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.501 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.502 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.503 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.508 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.510 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.511 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.512 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.512 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.318 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.816 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.635 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.641 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.642 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.643 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.644 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.645 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.646 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.650 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.651 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.652 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.653 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.654 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.658 I llama_model_loader: - type  f32:   37 tensors
0.00.130.659 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.180 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.644 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.133 I llm_load_vocab: special tokens cache size = 5
0.00.261.141 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.155 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.155 I llm_load_print_meta: arch             = gemma
0.00.261.156 I llm_load_print_meta: vocab type       = SPM
0.00.261.156 I llm_load_print_meta: n_vocab          = 256000
0.00.261.157 I llm_load_print_meta: n_merges         = 0
0.00.261.157 I llm_load_print_meta: vocab_only       = 0
0.00.261.157 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.158 I llm_load_print_meta: n_embd           = 2048
0.00.261.158 I llm_load_print_meta: n_layer          = 18
0.00.261.169 I llm_load_print_meta: n_head           = 8
0.00.261.170 I llm_load_print_meta: n_head_kv        = 1
0.00.261.170 I llm_load_print_meta: n_rot            = 256
0.00.261.171 I llm_load_print_meta: n_swa            = 0
0.00.261.171 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.171 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.172 I llm_load_print_meta: n_gqa            = 8
0.00.261.173 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.174 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.174 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.176 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.176 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.177 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.177 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.178 I llm_load_print_meta: n_ff             = 16384
0.00.261.179 I llm_load_print_meta: n_expert         = 0
0.00.261.179 I llm_load_print_meta: n_expert_used    = 0
0.00.261.180 I llm_load_print_meta: causal attn      = 1
0.00.261.180 I llm_load_print_meta: pooling type     = 0
0.00.261.180 I llm_load_print_meta: rope type        = 2
0.00.261.180 I llm_load_print_meta: rope scaling     = linear
0.00.261.182 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.183 I llm_load_print_meta: freq_scale_train = 1
0.00.261.183 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.183 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.183 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.184 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.184 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.184 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.184 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.185 I llm_load_print_meta: model type       = 2B
0.00.261.186 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.187 I llm_load_print_meta: model params     = 2.51 B
0.00.261.187 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.188 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.188 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.189 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.189 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.189 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.189 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.190 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.190 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.191 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.191 I llm_load_print_meta: max token length = 93
0.00.360.768 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.360.774 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.360.774 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.360.775 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.360.776 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.360.776 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.365.889 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.895 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.896 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.896 I llama_new_context_with_model: n_batch       = 2048
0.00.365.897 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.897 I llama_new_context_with_model: flash_attn    = 0
0.00.365.899 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.900 I llama_new_context_with_model: freq_scale    = 1
0.00.365.901 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.443 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.455 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.541 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.790 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.796 I llama_new_context_with_model: graph nodes  = 601
0.00.381.796 I llama_new_context_with_model: graph splits = 1
0.00.381.798 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.397 I main: llama threadpool init, n_threads = 4
0.00.467.412 I 
0.00.467.483 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.467.487 I 
0.00.467.528 I sampler seed: 2873327109
0.00.467.539 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.551 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.555 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.555 I 
 increasities for the right to vote. 

The Fourteenth Amendment to the United States Constitution guarantees citizens the right to vote in federal elections. However, access to

0.02.712.857 I llama_perf_sampler_print:    sampling time =       4.57 ms /    33 runs   (    0.14 ms per token,  7224.17 tokens per second)
0.02.712.859 I llama_perf_context_print:        load time =     466.61 ms
0.02.712.860 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.712.862 I llama_perf_context_print:        eval time =    2226.53 ms /    32 runs   (   69.58 ms per token,    14.37 tokens per second)
0.02.712.862 I llama_perf_context_print:       total time =    2245.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.180 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.374 I main: load the model and apply lora adapter, if any
0.00.020.414 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.427 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.433 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.434 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.437 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.438 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.439 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.440 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.440 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.441 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.445 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.445 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.446 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.446 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.942 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.439 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.262 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.269 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.269 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.270 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.270 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.271 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.272 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.274 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.275 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.276 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.277 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.278 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.281 I llama_model_loader: - type  f32:   37 tensors
0.00.129.282 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.178 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.260 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.764 I llm_load_vocab: special tokens cache size = 5
0.00.276.797 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.811 I llm_load_print_meta: arch             = gemma
0.00.276.812 I llm_load_print_meta: vocab type       = SPM
0.00.276.812 I llm_load_print_meta: n_vocab          = 256000
0.00.276.813 I llm_load_print_meta: n_merges         = 0
0.00.276.813 I llm_load_print_meta: vocab_only       = 0
0.00.276.813 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.813 I llm_load_print_meta: n_embd           = 2048
0.00.276.814 I llm_load_print_meta: n_layer          = 18
0.00.276.825 I llm_load_print_meta: n_head           = 8
0.00.276.826 I llm_load_print_meta: n_head_kv        = 1
0.00.276.826 I llm_load_print_meta: n_rot            = 256
0.00.276.827 I llm_load_print_meta: n_swa            = 0
0.00.276.827 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.827 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.828 I llm_load_print_meta: n_gqa            = 8
0.00.276.829 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.830 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.831 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.832 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.832 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.833 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.833 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.834 I llm_load_print_meta: n_ff             = 16384
0.00.276.834 I llm_load_print_meta: n_expert         = 0
0.00.276.835 I llm_load_print_meta: n_expert_used    = 0
0.00.276.835 I llm_load_print_meta: causal attn      = 1
0.00.276.835 I llm_load_print_meta: pooling type     = 0
0.00.276.835 I llm_load_print_meta: rope type        = 2
0.00.276.836 I llm_load_print_meta: rope scaling     = linear
0.00.276.837 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.838 I llm_load_print_meta: freq_scale_train = 1
0.00.276.838 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.838 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.839 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.839 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.839 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.839 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.840 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.840 I llm_load_print_meta: model type       = 2B
0.00.276.841 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.841 I llm_load_print_meta: model params     = 2.51 B
0.00.276.842 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.843 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.843 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.843 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.844 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.844 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.844 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.845 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.845 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.846 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.846 I llm_load_print_meta: max token length = 93
0.00.371.791 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.807 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.813 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.813 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.813 I llama_new_context_with_model: n_batch       = 2048
0.00.376.814 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.814 I llama_new_context_with_model: flash_attn    = 0
0.00.376.816 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.817 I llama_new_context_with_model: freq_scale    = 1
0.00.376.818 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.391.839 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.853 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.943 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.200 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.206 I llama_new_context_with_model: graph nodes  = 601
0.00.393.207 I llama_new_context_with_model: graph splits = 1
0.00.393.209 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.575 I main: llama threadpool init, n_threads = 4
0.00.473.590 I 
0.00.473.660 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.473.663 I 
0.00.473.705 I sampler seed: 2135827818
0.00.473.716 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.728 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.732 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.732 I 
 increasively.

I am not able to generate text that is sexually suggestive in nature. [end of text]


0.01.760.873 I llama_perf_sampler_print:    sampling time =       2.75 ms /    20 runs   (    0.14 ms per token,  7285.97 tokens per second)
0.01.760.876 I llama_perf_context_print:        load time =     473.19 ms
0.01.760.877 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.760.879 I llama_perf_context_print:        eval time =    1275.77 ms /    19 runs   (   67.15 ms per token,    14.89 tokens per second)
0.01.760.879 I llama_perf_context_print:       total time =    1287.31 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.573 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.022.661 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.671 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.679 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.684 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.685 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.690 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.694 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.695 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.696 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.697 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.698 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.703 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.707 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.708 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.709 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.709 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.131 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.116 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.122 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.123 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.124 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.124 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.125 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.126 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.128 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.129 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.130 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.131 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.136.131 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.136.136 I llama_model_loader: - type  f32:   37 tensors
0.00.136.136 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.736 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.298 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.981 I llm_load_vocab: special tokens cache size = 5
0.00.280.722 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.741 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.742 I llm_load_print_meta: arch             = gemma
0.00.280.743 I llm_load_print_meta: vocab type       = SPM
0.00.280.744 I llm_load_print_meta: n_vocab          = 256000
0.00.280.744 I llm_load_print_meta: n_merges         = 0
0.00.280.745 I llm_load_print_meta: vocab_only       = 0
0.00.280.745 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.745 I llm_load_print_meta: n_embd           = 2048
0.00.280.745 I llm_load_print_meta: n_layer          = 18
0.00.280.758 I llm_load_print_meta: n_head           = 8
0.00.280.759 I llm_load_print_meta: n_head_kv        = 1
0.00.280.759 I llm_load_print_meta: n_rot            = 256
0.00.280.760 I llm_load_print_meta: n_swa            = 0
0.00.280.760 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.760 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.761 I llm_load_print_meta: n_gqa            = 8
0.00.280.762 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.763 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.764 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.764 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.765 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.766 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.766 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.768 I llm_load_print_meta: n_ff             = 16384
0.00.280.768 I llm_load_print_meta: n_expert         = 0
0.00.280.769 I llm_load_print_meta: n_expert_used    = 0
0.00.280.770 I llm_load_print_meta: causal attn      = 1
0.00.280.771 I llm_load_print_meta: pooling type     = 0
0.00.280.771 I llm_load_print_meta: rope type        = 2
0.00.280.772 I llm_load_print_meta: rope scaling     = linear
0.00.280.774 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.776 I llm_load_print_meta: freq_scale_train = 1
0.00.280.777 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.777 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.778 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.779 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.779 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.781 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.781 I llm_load_print_meta: model type       = 2B
0.00.280.782 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.783 I llm_load_print_meta: model params     = 2.51 B
0.00.280.784 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.785 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.786 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.786 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.787 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.787 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.787 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.788 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.789 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.789 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.790 I llm_load_print_meta: max token length = 93
0.00.354.856 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.863 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.864 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.864 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.865 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.865 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.379 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.387 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.388 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.389 I llama_new_context_with_model: n_batch       = 2048
0.00.360.389 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.390 I llama_new_context_with_model: flash_attn    = 0
0.00.360.394 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.395 I llama_new_context_with_model: freq_scale    = 1
0.00.360.396 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.093 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.116 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.224 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.164 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.173 I llama_new_context_with_model: graph nodes  = 601
0.00.380.174 I llama_new_context_with_model: graph splits = 1
0.00.380.177 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.441 I main: llama threadpool init, n_threads = 4
0.00.475.458 I 
0.00.475.531 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.475.534 I 
0.00.475.575 I sampler seed: 438253679
0.00.475.585 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.589 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.589 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.590 I 
 maneuvously.

I cannot answer this question as it contains inappropriate language and imagery. [end of text]


0.01.844.195 I llama_perf_sampler_print:    sampling time =       2.92 ms /    20 runs   (    0.15 ms per token,  6854.01 tokens per second)
0.01.844.197 I llama_perf_context_print:        load time =     474.64 ms
0.01.844.199 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.844.202 I llama_perf_context_print:        eval time =    1356.83 ms /    19 runs   (   71.41 ms per token,    14.00 tokens per second)
0.01.844.203 I llama_perf_context_print:       total time =    1368.76 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.179 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.379 I main: llama backend init
0.00.000.387 I main: load the model and apply lora adapter, if any
0.00.020.757 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.766 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.773 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.778 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.779 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.783 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.788 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.789 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.790 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.791 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.792 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.797 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.798 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.799 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.800 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.801 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.315 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.711 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.654 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.662 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.663 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.664 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.665 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.666 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.667 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.670 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.671 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.672 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.673 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.676 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.681 I llama_model_loader: - type  f32:   37 tensors
0.00.131.682 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.583 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.425 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.896 I llm_load_vocab: special tokens cache size = 5
0.00.263.745 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.762 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.762 I llm_load_print_meta: arch             = gemma
0.00.263.763 I llm_load_print_meta: vocab type       = SPM
0.00.263.764 I llm_load_print_meta: n_vocab          = 256000
0.00.263.764 I llm_load_print_meta: n_merges         = 0
0.00.263.764 I llm_load_print_meta: vocab_only       = 0
0.00.263.765 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.765 I llm_load_print_meta: n_embd           = 2048
0.00.263.766 I llm_load_print_meta: n_layer          = 18
0.00.263.778 I llm_load_print_meta: n_head           = 8
0.00.263.779 I llm_load_print_meta: n_head_kv        = 1
0.00.263.779 I llm_load_print_meta: n_rot            = 256
0.00.263.780 I llm_load_print_meta: n_swa            = 0
0.00.263.780 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.780 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.781 I llm_load_print_meta: n_gqa            = 8
0.00.263.782 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.783 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.784 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.786 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.786 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.786 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.788 I llm_load_print_meta: n_ff             = 16384
0.00.263.788 I llm_load_print_meta: n_expert         = 0
0.00.263.788 I llm_load_print_meta: n_expert_used    = 0
0.00.263.789 I llm_load_print_meta: causal attn      = 1
0.00.263.789 I llm_load_print_meta: pooling type     = 0
0.00.263.789 I llm_load_print_meta: rope type        = 2
0.00.263.789 I llm_load_print_meta: rope scaling     = linear
0.00.263.791 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.791 I llm_load_print_meta: freq_scale_train = 1
0.00.263.791 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.792 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.792 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.792 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.792 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.793 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.793 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.793 I llm_load_print_meta: model type       = 2B
0.00.263.794 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.795 I llm_load_print_meta: model params     = 2.51 B
0.00.263.795 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.796 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.796 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.797 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.798 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.798 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.798 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.799 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.799 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.799 I llm_load_print_meta: max token length = 93
0.00.334.901 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.334.910 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.182 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.188 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.189 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.189 I llama_new_context_with_model: n_batch       = 2048
0.00.340.189 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.190 I llama_new_context_with_model: flash_attn    = 0
0.00.340.192 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.192 I llama_new_context_with_model: freq_scale    = 1
0.00.340.193 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.711 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.725 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.807 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.007 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.013 I llama_new_context_with_model: graph nodes  = 601
0.00.356.014 I llama_new_context_with_model: graph splits = 1
0.00.356.016 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.390 I main: llama threadpool init, n_threads = 4
0.00.450.404 I 
0.00.450.489 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.450.492 I 
0.00.450.536 I sampler seed: 1593364489
0.00.450.547 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.550 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.552 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.553 I 
 increasements from the 1970s and 1980s. 

**1970s**

* **The Partridge

0.02.868.312 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6701.87 tokens per second)
0.02.868.314 I llama_perf_context_print:        load time =     449.98 ms
0.02.868.315 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.868.317 I llama_perf_context_print:        eval time =    2398.83 ms /    32 runs   (   74.96 ms per token,    13.34 tokens per second)
0.02.868.317 I llama_perf_context_print:       total time =    2417.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.583s
user	0m32.123s
sys	0m9.343s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4227 (0ca0cc3c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40300.76 ms
main:    total time = 40300.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.719 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.021.619 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.628 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.636 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.640 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.641 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.645 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.646 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.647 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.648 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.651 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.651 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.652 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.653 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.653 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.205 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.963 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.751 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.757 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.757 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.758 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.759 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.760 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.760 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.764 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.765 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.766 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.766 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.767 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.770 I llama_model_loader: - type  f32:   37 tensors
0.00.130.771 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.772 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.545 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.536 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.112 I llm_load_vocab: special tokens cache size = 5
0.00.264.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.365 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.366 I llm_load_print_meta: arch             = gemma
0.00.264.366 I llm_load_print_meta: vocab type       = SPM
0.00.264.367 I llm_load_print_meta: n_vocab          = 256000
0.00.264.367 I llm_load_print_meta: n_merges         = 0
0.00.264.367 I llm_load_print_meta: vocab_only       = 0
0.00.264.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.368 I llm_load_print_meta: n_embd           = 2048
0.00.264.368 I llm_load_print_meta: n_layer          = 18
0.00.264.381 I llm_load_print_meta: n_head           = 8
0.00.264.382 I llm_load_print_meta: n_head_kv        = 1
0.00.264.382 I llm_load_print_meta: n_rot            = 256
0.00.264.382 I llm_load_print_meta: n_swa            = 0
0.00.264.382 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.384 I llm_load_print_meta: n_gqa            = 8
0.00.264.385 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.385 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.386 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.388 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.388 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.388 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.389 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.390 I llm_load_print_meta: n_ff             = 16384
0.00.264.390 I llm_load_print_meta: n_expert         = 0
0.00.264.390 I llm_load_print_meta: n_expert_used    = 0
0.00.264.391 I llm_load_print_meta: causal attn      = 1
0.00.264.391 I llm_load_print_meta: pooling type     = 0
0.00.264.391 I llm_load_print_meta: rope type        = 2
0.00.264.391 I llm_load_print_meta: rope scaling     = linear
0.00.264.393 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.393 I llm_load_print_meta: freq_scale_train = 1
0.00.264.394 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.394 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.394 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.394 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.395 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.395 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.395 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.396 I llm_load_print_meta: model type       = 2B
0.00.264.396 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.397 I llm_load_print_meta: model params     = 2.51 B
0.00.264.398 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.398 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.398 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.399 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.399 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.399 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.399 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.400 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.400 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.401 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.401 I llm_load_print_meta: max token length = 93
0.00.324.572 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.578 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.578 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.579 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.580 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.580 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.702 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.708 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.709 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.709 I llama_new_context_with_model: n_batch       = 2048
0.00.329.709 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.710 I llama_new_context_with_model: flash_attn    = 0
0.00.329.712 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.713 I llama_new_context_with_model: freq_scale    = 1
0.00.329.714 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.365 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.378 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.719 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.726 I llama_new_context_with_model: graph nodes  = 601
0.00.345.726 I llama_new_context_with_model: graph splits = 1
0.00.345.728 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.470 I main: llama threadpool init, n_threads = 4
0.00.422.486 I 
0.00.422.563 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.566 I 
0.00.422.612 I sampler seed: 1820754703
0.00.422.622 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.626 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.627 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.627 I 
 seconal!

I'm so confused. I'm not sure what to do. I'm feeling overwhelmed and anxious.

I need some advice

0.02.009.723 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6843.63 tokens per second)
0.02.009.726 I llama_perf_context_print:        load time =     421.73 ms
0.02.009.728 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.009.730 I llama_perf_context_print:        eval time =    1569.17 ms /    32 runs   (   49.04 ms per token,    20.39 tokens per second)
0.02.009.731 I llama_perf_context_print:       total time =    1587.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4227 (0ca0cc3c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40181.89 ms
main:    total time = 40181.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.175 I build: 4227 (0ca0cc3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.374 I main: llama backend init
0.00.000.380 I main: load the model and apply lora adapter, if any
0.00.020.570 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.586 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.593 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.594 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.598 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.598 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.599 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.599 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.600 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.600 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.603 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.604 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.604 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.605 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.605 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.826 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.238 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.052 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.058 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.059 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.059 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.060 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.061 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.062 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.064 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.064 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.068 I llama_model_loader: - type  f32:   37 tensors
0.00.129.069 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.069 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.144 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.587 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.145 I llm_load_vocab: special tokens cache size = 5
0.00.262.163 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.179 I llm_load_print_meta: arch             = gemma
0.00.262.179 I llm_load_print_meta: vocab type       = SPM
0.00.262.180 I llm_load_print_meta: n_vocab          = 256000
0.00.262.180 I llm_load_print_meta: n_merges         = 0
0.00.262.180 I llm_load_print_meta: vocab_only       = 0
0.00.262.181 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.181 I llm_load_print_meta: n_embd           = 2048
0.00.262.181 I llm_load_print_meta: n_layer          = 18
0.00.262.192 I llm_load_print_meta: n_head           = 8
0.00.262.193 I llm_load_print_meta: n_head_kv        = 1
0.00.262.193 I llm_load_print_meta: n_rot            = 256
0.00.262.193 I llm_load_print_meta: n_swa            = 0
0.00.262.194 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.194 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.195 I llm_load_print_meta: n_gqa            = 8
0.00.262.196 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.197 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.197 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.199 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.199 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.199 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.200 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.201 I llm_load_print_meta: n_ff             = 16384
0.00.262.201 I llm_load_print_meta: n_expert         = 0
0.00.262.201 I llm_load_print_meta: n_expert_used    = 0
0.00.262.202 I llm_load_print_meta: causal attn      = 1
0.00.262.202 I llm_load_print_meta: pooling type     = 0
0.00.262.202 I llm_load_print_meta: rope type        = 2
0.00.262.202 I llm_load_print_meta: rope scaling     = linear
0.00.262.204 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.204 I llm_load_print_meta: freq_scale_train = 1
0.00.262.205 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.205 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.205 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.206 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.206 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.206 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.206 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.207 I llm_load_print_meta: model type       = 2B
0.00.262.207 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.208 I llm_load_print_meta: model params     = 2.51 B
0.00.262.209 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.209 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.210 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.210 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.210 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.211 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.211 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.211 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.211 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.212 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.212 I llm_load_print_meta: max token length = 93
0.00.317.366 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.322.327 I llama_new_context_with_model: n_seq_max     = 1
0.00.322.333 I llama_new_context_with_model: n_ctx         = 4096
0.00.322.333 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.322.334 I llama_new_context_with_model: n_batch       = 2048
0.00.322.334 I llama_new_context_with_model: n_ubatch      = 512
0.00.322.335 I llama_new_context_with_model: flash_attn    = 0
0.00.322.337 I llama_new_context_with_model: freq_base     = 10000.0
0.00.322.338 I llama_new_context_with_model: freq_scale    = 1
0.00.322.339 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.769 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.336.784 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.336.870 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.062 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.338.068 I llama_new_context_with_model: graph nodes  = 601
0.00.338.069 I llama_new_context_with_model: graph splits = 1
0.00.338.071 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.253 I main: llama threadpool init, n_threads = 4
0.00.414.270 I 
0.00.414.343 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.414.347 I 
0.00.414.391 I sampler seed: 2356242159
0.00.414.402 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.405 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.406 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.407 I 
 effe, 2023-08-26

I am unable to access the requested file.

I am unable to access the requested file

0.01.962.758 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6770.62 tokens per second)
0.01.962.761 I llama_perf_context_print:        load time =     413.85 ms
0.01.962.762 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.962.763 I llama_perf_context_print:        eval time =    1530.51 ms /    32 runs   (   47.83 ms per token,    20.91 tokens per second)
0.01.962.764 I llama_perf_context_print:       total time =    1548.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.305s
user	10m23.760s
sys	0m7.048s
