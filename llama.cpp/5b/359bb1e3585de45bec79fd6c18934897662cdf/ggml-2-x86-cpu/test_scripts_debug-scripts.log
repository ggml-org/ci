+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.001.149 I main: load the model and apply lora adapter, if any
0.00.023.899 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.911 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.003 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.015 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.017 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.021 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.023 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.032 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.036 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.037 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.039 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.045 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.047 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.048 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.049 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.054 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.460 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.820 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.944 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.953 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.954 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.955 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.956 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.958 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.959 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.962 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.963 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.965 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.982 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.984 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.992 I llama_model_loader: - type  f32:   37 tensors
0.00.264.995 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.120 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.760 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.711 I llm_load_vocab: special tokens cache size = 5
0.00.610.563 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.639 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.640 I llm_load_print_meta: arch             = gemma
0.00.610.641 I llm_load_print_meta: vocab type       = SPM
0.00.610.642 I llm_load_print_meta: n_vocab          = 256000
0.00.610.644 I llm_load_print_meta: n_merges         = 0
0.00.610.645 I llm_load_print_meta: vocab_only       = 0
0.00.610.645 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.646 I llm_load_print_meta: n_embd           = 2048
0.00.610.646 I llm_load_print_meta: n_layer          = 18
0.00.610.713 I llm_load_print_meta: n_head           = 8
0.00.610.720 I llm_load_print_meta: n_head_kv        = 1
0.00.610.722 I llm_load_print_meta: n_rot            = 256
0.00.610.723 I llm_load_print_meta: n_swa            = 0
0.00.610.723 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.723 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.728 I llm_load_print_meta: n_gqa            = 8
0.00.610.734 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.739 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.740 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.741 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.742 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.742 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.743 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.748 I llm_load_print_meta: n_ff             = 16384
0.00.610.749 I llm_load_print_meta: n_expert         = 0
0.00.610.749 I llm_load_print_meta: n_expert_used    = 0
0.00.610.750 I llm_load_print_meta: causal attn      = 1
0.00.610.750 I llm_load_print_meta: pooling type     = 0
0.00.610.751 I llm_load_print_meta: rope type        = 2
0.00.610.752 I llm_load_print_meta: rope scaling     = linear
0.00.610.753 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.754 I llm_load_print_meta: freq_scale_train = 1
0.00.610.755 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.755 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.756 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.756 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.756 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.756 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.757 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.758 I llm_load_print_meta: model type       = 2B
0.00.610.759 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.760 I llm_load_print_meta: model params     = 2.51 B
0.00.610.769 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.770 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.775 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.776 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.776 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.777 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.777 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.798 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.805 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.806 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.807 I llm_load_print_meta: max token length = 93
0.00.710.301 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.710.311 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.710.312 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.710.313 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.710.314 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.710.314 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.716.210 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.217 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.218 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.218 I llama_new_context_with_model: n_batch       = 2048
0.00.716.219 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.219 I llama_new_context_with_model: flash_attn    = 0
0.00.716.222 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.223 I llama_new_context_with_model: freq_scale    = 1
0.00.716.224 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.732.334 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.732.375 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.732.498 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.065 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.735.069 I llama_new_context_with_model: graph nodes  = 601
0.00.735.069 I llama_new_context_with_model: graph splits = 1
0.00.735.093 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.784 I main: llama threadpool init, n_threads = 4
0.01.340.797 I 
0.01.340.902 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.906 I 
0.01.341.135 I sampler seed: 2789436388
0.01.341.148 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.155 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.158 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.159 I 
 seconally. [end of text]


0.03.011.637 I llama_perf_sampler_print:    sampling time =       6.07 ms /     5 runs   (    1.21 ms per token,   824.13 tokens per second)
0.03.011.639 I llama_perf_context_print:        load time =    1339.54 ms
0.03.011.655 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.011.657 I llama_perf_context_print:        eval time =    1657.97 ms /     4 runs   (  414.49 ms per token,     2.41 tokens per second)
0.03.011.658 I llama_perf_context_print:       total time =    1670.86 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.001.155 I main: load the model and apply lora adapter, if any
0.00.023.489 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.587 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.600 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.602 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.606 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.610 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.621 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.624 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.625 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.577 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.466 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.486 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.495 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.497 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.498 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.499 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.500 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.501 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.505 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.506 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.507 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.508 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.510 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.518 I llama_model_loader: - type  f32:   37 tensors
0.00.265.521 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.204 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.249 I llm_load_vocab: special tokens cache size = 5
0.00.612.216 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.286 I llm_load_print_meta: arch             = gemma
0.00.612.286 I llm_load_print_meta: vocab type       = SPM
0.00.612.287 I llm_load_print_meta: n_vocab          = 256000
0.00.612.289 I llm_load_print_meta: n_merges         = 0
0.00.612.290 I llm_load_print_meta: vocab_only       = 0
0.00.612.290 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.291 I llm_load_print_meta: n_embd           = 2048
0.00.612.291 I llm_load_print_meta: n_layer          = 18
0.00.612.357 I llm_load_print_meta: n_head           = 8
0.00.612.365 I llm_load_print_meta: n_head_kv        = 1
0.00.612.367 I llm_load_print_meta: n_rot            = 256
0.00.612.367 I llm_load_print_meta: n_swa            = 0
0.00.612.379 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.384 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.402 I llm_load_print_meta: n_gqa            = 8
0.00.612.410 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.415 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.417 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.418 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.418 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.419 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.420 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.425 I llm_load_print_meta: n_ff             = 16384
0.00.612.434 I llm_load_print_meta: n_expert         = 0
0.00.612.438 I llm_load_print_meta: n_expert_used    = 0
0.00.612.438 I llm_load_print_meta: causal attn      = 1
0.00.612.438 I llm_load_print_meta: pooling type     = 0
0.00.612.439 I llm_load_print_meta: rope type        = 2
0.00.612.439 I llm_load_print_meta: rope scaling     = linear
0.00.612.441 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.441 I llm_load_print_meta: freq_scale_train = 1
0.00.612.442 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.442 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.443 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.443 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.443 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.443 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.444 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.445 I llm_load_print_meta: model type       = 2B
0.00.612.446 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.446 I llm_load_print_meta: model params     = 2.51 B
0.00.612.455 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.456 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.457 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.457 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.460 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.461 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.461 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.462 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.468 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.470 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.470 I llm_load_print_meta: max token length = 93
0.00.710.798 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.719.511 I llama_new_context_with_model: n_seq_max     = 1
0.00.719.518 I llama_new_context_with_model: n_ctx         = 4096
0.00.719.519 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.719.519 I llama_new_context_with_model: n_batch       = 2048
0.00.719.520 I llama_new_context_with_model: n_ubatch      = 512
0.00.719.520 I llama_new_context_with_model: flash_attn    = 0
0.00.719.523 I llama_new_context_with_model: freq_base     = 10000.0
0.00.719.523 I llama_new_context_with_model: freq_scale    = 1
0.00.719.524 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.075 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.115 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.736.256 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.759 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.763 I llama_new_context_with_model: graph nodes  = 601
0.00.738.764 I llama_new_context_with_model: graph splits = 1
0.00.738.788 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.528 I main: llama threadpool init, n_threads = 4
0.01.343.542 I 
0.01.343.649 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.653 I 
0.01.343.882 I sampler seed: 2387334318
0.01.343.895 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.901 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.904 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.905 I 
 increasively, neglecting the potential consequences. [end of text]


0.05.122.091 I llama_perf_sampler_print:    sampling time =      13.62 ms /    10 runs   (    1.36 ms per token,   734.38 tokens per second)
0.05.122.095 I llama_perf_context_print:        load time =    1342.28 ms
0.05.122.097 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.122.099 I llama_perf_context_print:        eval time =    3752.33 ms /     9 runs   (  416.93 ms per token,     2.40 tokens per second)
0.05.122.100 I llama_perf_context_print:       total time =    3778.57 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.001.131 I main: load the model and apply lora adapter, if any
0.00.023.732 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.744 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.843 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.855 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.858 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.864 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.870 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.872 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.873 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.876 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.878 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.888 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.901 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.903 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.905 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.907 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.504 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.519 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.718 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.732 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.734 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.736 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.737 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.739 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.741 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.747 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.748 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.750 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.763 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.767 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.777 I llama_model_loader: - type  f32:   37 tensors
0.00.265.779 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.487 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.459 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.416 I llm_load_vocab: special tokens cache size = 5
0.00.609.935 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.020 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.024 I llm_load_print_meta: arch             = gemma
0.00.610.026 I llm_load_print_meta: vocab type       = SPM
0.00.610.026 I llm_load_print_meta: n_vocab          = 256000
0.00.610.029 I llm_load_print_meta: n_merges         = 0
0.00.610.030 I llm_load_print_meta: vocab_only       = 0
0.00.610.031 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.032 I llm_load_print_meta: n_embd           = 2048
0.00.610.033 I llm_load_print_meta: n_layer          = 18
0.00.610.101 I llm_load_print_meta: n_head           = 8
0.00.610.113 I llm_load_print_meta: n_head_kv        = 1
0.00.610.114 I llm_load_print_meta: n_rot            = 256
0.00.610.115 I llm_load_print_meta: n_swa            = 0
0.00.610.115 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.116 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.124 I llm_load_print_meta: n_gqa            = 8
0.00.610.131 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.143 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.145 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.148 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.149 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.157 I llm_load_print_meta: n_ff             = 16384
0.00.610.158 I llm_load_print_meta: n_expert         = 0
0.00.610.159 I llm_load_print_meta: n_expert_used    = 0
0.00.610.159 I llm_load_print_meta: causal attn      = 1
0.00.610.160 I llm_load_print_meta: pooling type     = 0
0.00.610.161 I llm_load_print_meta: rope type        = 2
0.00.610.162 I llm_load_print_meta: rope scaling     = linear
0.00.610.163 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.164 I llm_load_print_meta: freq_scale_train = 1
0.00.610.165 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.165 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.166 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.166 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.167 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.167 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.168 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.169 I llm_load_print_meta: model type       = 2B
0.00.610.171 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.172 I llm_load_print_meta: model params     = 2.51 B
0.00.610.183 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.184 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.185 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.186 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.187 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.189 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.189 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.190 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.197 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.200 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.201 I llm_load_print_meta: max token length = 93
0.00.697.405 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.697.413 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.697.414 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.697.415 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.697.416 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.697.417 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.703.475 I llama_new_context_with_model: n_seq_max     = 1
0.00.703.483 I llama_new_context_with_model: n_ctx         = 4096
0.00.703.483 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.703.483 I llama_new_context_with_model: n_batch       = 2048
0.00.703.484 I llama_new_context_with_model: n_ubatch      = 512
0.00.703.484 I llama_new_context_with_model: flash_attn    = 0
0.00.703.487 I llama_new_context_with_model: freq_base     = 10000.0
0.00.703.488 I llama_new_context_with_model: freq_scale    = 1
0.00.703.489 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.719.739 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.719.779 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.719.906 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.447 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.451 I llama_new_context_with_model: graph nodes  = 601
0.00.722.451 I llama_new_context_with_model: graph splits = 1
0.00.722.479 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.327.737 I main: llama threadpool init, n_threads = 4
0.01.327.751 I 
0.01.327.878 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.327.881 I 
0.01.328.121 I sampler seed: 1174026469
0.01.328.136 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.328.145 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.328.147 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.328.147 I 
 increasities. [end of text]


0.03.008.969 I llama_perf_sampler_print:    sampling time =       6.13 ms /     5 runs   (    1.23 ms per token,   815.66 tokens per second)
0.03.008.972 I llama_perf_context_print:        load time =    1326.50 ms
0.03.008.973 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.008.987 I llama_perf_context_print:        eval time =    1668.41 ms /     4 runs   (  417.10 ms per token,     2.40 tokens per second)
0.03.008.988 I llama_perf_context_print:       total time =    1681.24 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.001.104 I main: load the model and apply lora adapter, if any
0.00.023.607 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.619 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.707 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.718 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.722 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.726 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.735 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.737 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.738 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.747 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.748 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.756 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.757 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.759 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.760 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.761 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.319 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.367 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.369 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.378 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.379 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.381 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.382 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.383 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.384 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.388 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.389 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.390 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.391 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.392 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.400 I llama_model_loader: - type  f32:   37 tensors
0.00.265.402 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.697 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.748 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.724 I llm_load_vocab: special tokens cache size = 5
0.00.617.908 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.975 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.976 I llm_load_print_meta: arch             = gemma
0.00.617.977 I llm_load_print_meta: vocab type       = SPM
0.00.617.978 I llm_load_print_meta: n_vocab          = 256000
0.00.617.980 I llm_load_print_meta: n_merges         = 0
0.00.617.981 I llm_load_print_meta: vocab_only       = 0
0.00.617.981 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.982 I llm_load_print_meta: n_embd           = 2048
0.00.617.982 I llm_load_print_meta: n_layer          = 18
0.00.618.048 I llm_load_print_meta: n_head           = 8
0.00.618.055 I llm_load_print_meta: n_head_kv        = 1
0.00.618.056 I llm_load_print_meta: n_rot            = 256
0.00.618.057 I llm_load_print_meta: n_swa            = 0
0.00.618.058 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.058 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.063 I llm_load_print_meta: n_gqa            = 8
0.00.618.068 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.073 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.074 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.076 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.077 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.077 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.078 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.083 I llm_load_print_meta: n_ff             = 16384
0.00.618.083 I llm_load_print_meta: n_expert         = 0
0.00.618.084 I llm_load_print_meta: n_expert_used    = 0
0.00.618.084 I llm_load_print_meta: causal attn      = 1
0.00.618.084 I llm_load_print_meta: pooling type     = 0
0.00.618.085 I llm_load_print_meta: rope type        = 2
0.00.618.086 I llm_load_print_meta: rope scaling     = linear
0.00.618.096 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.097 I llm_load_print_meta: freq_scale_train = 1
0.00.618.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.111 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.111 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.112 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.112 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.120 I llm_load_print_meta: model type       = 2B
0.00.618.122 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.122 I llm_load_print_meta: model params     = 2.51 B
0.00.618.132 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.132 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.133 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.133 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.140 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.140 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.143 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.144 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.149 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.151 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.152 I llm_load_print_meta: max token length = 93
0.00.690.667 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.690.678 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.696.548 I llama_new_context_with_model: n_seq_max     = 1
0.00.696.555 I llama_new_context_with_model: n_ctx         = 4096
0.00.696.555 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.696.556 I llama_new_context_with_model: n_batch       = 2048
0.00.696.556 I llama_new_context_with_model: n_ubatch      = 512
0.00.696.556 I llama_new_context_with_model: flash_attn    = 0
0.00.696.560 I llama_new_context_with_model: freq_base     = 10000.0
0.00.696.560 I llama_new_context_with_model: freq_scale    = 1
0.00.696.561 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.712.751 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.712.790 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.712.911 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.715.426 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.715.430 I llama_new_context_with_model: graph nodes  = 601
0.00.715.431 I llama_new_context_with_model: graph splits = 1
0.00.715.456 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.109 I main: llama threadpool init, n_threads = 4
0.01.350.122 I 
0.01.350.226 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.230 I 
0.01.350.457 I sampler seed: 3016984633
0.01.350.470 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.350.477 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.350.478 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.350.478 I 
 increasities. [end of text]


0.03.070.381 I llama_perf_sampler_print:    sampling time =       6.09 ms /     5 runs   (    1.22 ms per token,   821.02 tokens per second)
0.03.070.385 I llama_perf_context_print:        load time =    1348.91 ms
0.03.070.386 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.070.389 I llama_perf_context_print:        eval time =    1707.70 ms /     4 runs   (  426.93 ms per token,     2.34 tokens per second)
0.03.070.390 I llama_perf_context_print:       total time =    1720.28 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m23.963s
user	0m48.139s
sys	0m9.350s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4056 (5b359bb1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198815.15 ms
main:    total time = 198815.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.001.073 I main: load the model and apply lora adapter, if any
0.00.023.433 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.442 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.530 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.541 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.542 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.547 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.552 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.553 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.554 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.555 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.561 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.563 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.564 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.565 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.567 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.797 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.746 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.913 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.921 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.922 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.923 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.924 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.925 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.926 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.930 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.931 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.932 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.263.933 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.263.934 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.263.942 I llama_model_loader: - type  f32:   37 tensors
0.00.263.944 I llama_model_loader: - type q4_K:  108 tensors
0.00.263.945 I llama_model_loader: - type q6_K:   19 tensors
0.00.453.268 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.231 I llm_load_vocab: special tokens cache size = 5
0.00.607.276 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.345 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.346 I llm_load_print_meta: arch             = gemma
0.00.607.347 I llm_load_print_meta: vocab type       = SPM
0.00.607.347 I llm_load_print_meta: n_vocab          = 256000
0.00.607.350 I llm_load_print_meta: n_merges         = 0
0.00.607.350 I llm_load_print_meta: vocab_only       = 0
0.00.607.350 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.351 I llm_load_print_meta: n_embd           = 2048
0.00.607.351 I llm_load_print_meta: n_layer          = 18
0.00.607.418 I llm_load_print_meta: n_head           = 8
0.00.607.425 I llm_load_print_meta: n_head_kv        = 1
0.00.607.426 I llm_load_print_meta: n_rot            = 256
0.00.607.426 I llm_load_print_meta: n_swa            = 0
0.00.607.427 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.437 I llm_load_print_meta: n_gqa            = 8
0.00.607.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.450 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.450 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.451 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.452 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.477 I llm_load_print_meta: n_ff             = 16384
0.00.607.482 I llm_load_print_meta: n_expert         = 0
0.00.607.482 I llm_load_print_meta: n_expert_used    = 0
0.00.607.483 I llm_load_print_meta: causal attn      = 1
0.00.607.483 I llm_load_print_meta: pooling type     = 0
0.00.607.483 I llm_load_print_meta: rope type        = 2
0.00.607.484 I llm_load_print_meta: rope scaling     = linear
0.00.607.486 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.486 I llm_load_print_meta: freq_scale_train = 1
0.00.607.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.487 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.487 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.487 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.488 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.488 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.488 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.489 I llm_load_print_meta: model type       = 2B
0.00.607.490 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.607.491 I llm_load_print_meta: model params     = 2.51 B
0.00.607.499 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.607.500 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.501 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.502 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.502 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.503 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.503 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.504 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.510 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.511 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.512 I llm_load_print_meta: max token length = 93
0.00.671.220 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.671.230 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.671.231 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.671.232 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.671.232 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.671.233 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.677.021 I llama_new_context_with_model: n_seq_max     = 1
0.00.677.028 I llama_new_context_with_model: n_ctx         = 4096
0.00.677.028 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.677.029 I llama_new_context_with_model: n_batch       = 2048
0.00.677.029 I llama_new_context_with_model: n_ubatch      = 512
0.00.677.030 I llama_new_context_with_model: flash_attn    = 0
0.00.677.032 I llama_new_context_with_model: freq_base     = 10000.0
0.00.677.033 I llama_new_context_with_model: freq_scale    = 1
0.00.677.034 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.692.964 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.693.003 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.693.124 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.651 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.655 I llama_new_context_with_model: graph nodes  = 601
0.00.695.656 I llama_new_context_with_model: graph splits = 1
0.00.695.680 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.265.141 I main: llama threadpool init, n_threads = 4
0.01.265.153 I 
0.01.265.264 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.265.267 I 
0.01.265.494 I sampler seed: 3770286975
0.01.265.506 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.512 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.265.515 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.265.516 I 
 seconally.

I am unable to generate the requested output as I do not have access to personal or sensitive information. [end of text]


0.09.724.435 I llama_perf_sampler_print:    sampling time =      37.69 ms /    26 runs   (    1.45 ms per token,   689.91 tokens per second)
0.09.724.455 I llama_perf_context_print:        load time =    1263.98 ms
0.09.724.458 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.724.459 I llama_perf_context_print:        eval time =    8389.52 ms /    25 runs   (  335.58 ms per token,     2.98 tokens per second)
0.09.724.460 I llama_perf_context_print:       total time =    8459.30 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4056 (5b359bb1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198419.71 ms
main:    total time = 198419.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.608 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.001.077 I main: load the model and apply lora adapter, if any
0.00.023.375 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.472 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.485 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.490 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.494 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.499 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.505 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.506 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.508 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.509 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.510 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.092 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.739 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.892 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.900 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.901 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.902 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.903 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.905 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.906 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.909 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.910 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.917 I llama_model_loader: - type  f32:   37 tensors
0.00.263.919 I llama_model_loader: - type q4_K:  108 tensors
0.00.263.920 I llama_model_loader: - type q6_K:   19 tensors
0.00.437.884 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.846 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.695 I llm_load_vocab: special tokens cache size = 5
0.00.608.047 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.120 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.125 I llm_load_print_meta: arch             = gemma
0.00.608.125 I llm_load_print_meta: vocab type       = SPM
0.00.608.126 I llm_load_print_meta: n_vocab          = 256000
0.00.608.128 I llm_load_print_meta: n_merges         = 0
0.00.608.129 I llm_load_print_meta: vocab_only       = 0
0.00.608.129 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.129 I llm_load_print_meta: n_embd           = 2048
0.00.608.130 I llm_load_print_meta: n_layer          = 18
0.00.608.194 I llm_load_print_meta: n_head           = 8
0.00.608.203 I llm_load_print_meta: n_head_kv        = 1
0.00.608.204 I llm_load_print_meta: n_rot            = 256
0.00.608.204 I llm_load_print_meta: n_swa            = 0
0.00.608.205 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.206 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.211 I llm_load_print_meta: n_gqa            = 8
0.00.608.225 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.234 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.236 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.237 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.238 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.238 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.243 I llm_load_print_meta: n_ff             = 16384
0.00.608.243 I llm_load_print_meta: n_expert         = 0
0.00.608.244 I llm_load_print_meta: n_expert_used    = 0
0.00.608.244 I llm_load_print_meta: causal attn      = 1
0.00.608.247 I llm_load_print_meta: pooling type     = 0
0.00.608.247 I llm_load_print_meta: rope type        = 2
0.00.608.248 I llm_load_print_meta: rope scaling     = linear
0.00.608.249 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.250 I llm_load_print_meta: freq_scale_train = 1
0.00.608.250 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.251 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.252 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.252 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.253 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.254 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.254 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.254 I llm_load_print_meta: model type       = 2B
0.00.608.256 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.256 I llm_load_print_meta: model params     = 2.51 B
0.00.608.265 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.266 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.267 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.268 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.268 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.268 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.269 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.270 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.276 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.277 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.278 I llm_load_print_meta: max token length = 93
0.00.666.688 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.672.444 I llama_new_context_with_model: n_seq_max     = 1
0.00.672.450 I llama_new_context_with_model: n_ctx         = 4096
0.00.672.451 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.672.451 I llama_new_context_with_model: n_batch       = 2048
0.00.672.451 I llama_new_context_with_model: n_ubatch      = 512
0.00.672.452 I llama_new_context_with_model: flash_attn    = 0
0.00.672.454 I llama_new_context_with_model: freq_base     = 10000.0
0.00.672.455 I llama_new_context_with_model: freq_scale    = 1
0.00.672.455 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.689.123 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.689.164 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.689.286 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.691.850 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.691.854 I llama_new_context_with_model: graph nodes  = 601
0.00.691.855 I llama_new_context_with_model: graph splits = 1
0.00.691.879 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.264.853 I main: llama threadpool init, n_threads = 4
0.01.264.866 I 
0.01.264.974 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.264.978 I 
0.01.265.211 I sampler seed: 3307004185
0.01.265.224 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.265.233 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.265.233 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.265.233 I 
 squaRED TEXT:

I am unable to provide an answer that promotes misinformation or perpetuates harmful stereotypes. [end of text]


0.08.778.775 I llama_perf_sampler_print:    sampling time =      33.23 ms /    23 runs   (    1.44 ms per token,   692.23 tokens per second)
0.08.778.779 I llama_perf_context_print:        load time =    1263.68 ms
0.08.778.789 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.778.792 I llama_perf_context_print:        eval time =    7452.20 ms /    22 runs   (  338.74 ms per token,     2.95 tokens per second)
0.08.778.793 I llama_perf_context_print:       total time =    7513.93 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m58.546s
user	49m47.503s
sys	0m6.324s
