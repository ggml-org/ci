+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.021.701 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.713 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.720 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.726 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.727 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.731 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.732 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.733 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.734 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.735 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.735 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.740 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.740 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.741 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.741 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.742 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.479 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.176 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.016 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.022 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.023 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.023 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.024 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.025 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.026 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.029 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.029 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.030 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.030 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.031 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.036 I llama_model_loader: - type  f32:   37 tensors
0.00.133.038 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.563 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.799 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.380 I llm_load_vocab: special tokens cache size = 5
0.00.264.633 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.651 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.652 I llm_load_print_meta: arch             = gemma
0.00.264.653 I llm_load_print_meta: vocab type       = SPM
0.00.264.653 I llm_load_print_meta: n_vocab          = 256000
0.00.264.654 I llm_load_print_meta: n_merges         = 0
0.00.264.654 I llm_load_print_meta: vocab_only       = 0
0.00.264.654 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.655 I llm_load_print_meta: n_embd           = 2048
0.00.264.655 I llm_load_print_meta: n_layer          = 18
0.00.264.666 I llm_load_print_meta: n_head           = 8
0.00.264.667 I llm_load_print_meta: n_head_kv        = 1
0.00.264.667 I llm_load_print_meta: n_rot            = 256
0.00.264.668 I llm_load_print_meta: n_swa            = 0
0.00.264.668 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.668 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.669 I llm_load_print_meta: n_gqa            = 8
0.00.264.670 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.671 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.672 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.673 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.674 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.674 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.674 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.675 I llm_load_print_meta: n_ff             = 16384
0.00.264.676 I llm_load_print_meta: n_expert         = 0
0.00.264.676 I llm_load_print_meta: n_expert_used    = 0
0.00.264.676 I llm_load_print_meta: causal attn      = 1
0.00.264.677 I llm_load_print_meta: pooling type     = 0
0.00.264.677 I llm_load_print_meta: rope type        = 2
0.00.264.677 I llm_load_print_meta: rope scaling     = linear
0.00.264.679 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.679 I llm_load_print_meta: freq_scale_train = 1
0.00.264.680 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.680 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.680 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.680 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.681 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.681 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.681 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.682 I llm_load_print_meta: model type       = 2B
0.00.264.682 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.683 I llm_load_print_meta: model params     = 2.51 B
0.00.264.684 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.684 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.684 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.685 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.685 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.685 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.686 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.686 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.686 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.687 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.687 I llm_load_print_meta: max token length = 93
0.00.364.218 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.226 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.228 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.228 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.229 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.229 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.579 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.586 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.586 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.587 I llama_new_context_with_model: n_batch       = 2048
0.00.369.587 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.588 I llama_new_context_with_model: flash_attn    = 0
0.00.369.590 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.592 I llama_new_context_with_model: freq_scale    = 1
0.00.369.593 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.211 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.224 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.324 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.589 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.595 I llama_new_context_with_model: graph nodes  = 601
0.00.386.596 I llama_new_context_with_model: graph splits = 1
0.00.386.597 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.045 I main: llama threadpool init, n_threads = 4
0.00.472.057 I 
0.00.472.136 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.139 I 
0.00.472.179 I sampler seed: 2847596920
0.00.472.191 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.195 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.195 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.204 I 
 increasities:

1. **The right to choose one's own religion:** This principle is enshrined in many legal systems and has been used to justify religious

0.02.708.736 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6450.35 tokens per second)
0.02.708.739 I llama_perf_context_print:        load time =     471.15 ms
0.02.708.740 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.741 I llama_perf_context_print:        eval time =    2217.11 ms /    32 runs   (   69.28 ms per token,    14.43 tokens per second)
0.02.708.742 I llama_perf_context_print:       total time =    2236.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.876 I main: load the model and apply lora adapter, if any
0.00.021.612 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.625 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.635 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.638 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.644 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.645 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.646 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.647 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.648 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.648 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.652 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.653 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.653 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.654 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.654 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.849 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.061 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.930 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.936 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.937 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.937 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.938 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.939 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.940 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.942 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.943 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.943 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.944 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.945 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.948 I llama_model_loader: - type  f32:   37 tensors
0.00.131.949 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.728 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.269 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.005 I llm_load_vocab: special tokens cache size = 5
0.00.282.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.354 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.354 I llm_load_print_meta: arch             = gemma
0.00.282.355 I llm_load_print_meta: vocab type       = SPM
0.00.282.356 I llm_load_print_meta: n_vocab          = 256000
0.00.282.356 I llm_load_print_meta: n_merges         = 0
0.00.282.356 I llm_load_print_meta: vocab_only       = 0
0.00.282.357 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.357 I llm_load_print_meta: n_embd           = 2048
0.00.282.357 I llm_load_print_meta: n_layer          = 18
0.00.282.370 I llm_load_print_meta: n_head           = 8
0.00.282.371 I llm_load_print_meta: n_head_kv        = 1
0.00.282.371 I llm_load_print_meta: n_rot            = 256
0.00.282.371 I llm_load_print_meta: n_swa            = 0
0.00.282.372 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.372 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.373 I llm_load_print_meta: n_gqa            = 8
0.00.282.374 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.375 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.375 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.377 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.377 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.378 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.378 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.379 I llm_load_print_meta: n_ff             = 16384
0.00.282.379 I llm_load_print_meta: n_expert         = 0
0.00.282.380 I llm_load_print_meta: n_expert_used    = 0
0.00.282.380 I llm_load_print_meta: causal attn      = 1
0.00.282.380 I llm_load_print_meta: pooling type     = 0
0.00.282.381 I llm_load_print_meta: rope type        = 2
0.00.282.381 I llm_load_print_meta: rope scaling     = linear
0.00.282.382 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.383 I llm_load_print_meta: freq_scale_train = 1
0.00.282.383 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.384 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.384 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.384 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.384 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.384 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.385 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.385 I llm_load_print_meta: model type       = 2B
0.00.282.386 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.387 I llm_load_print_meta: model params     = 2.51 B
0.00.282.387 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.388 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.388 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.389 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.389 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.389 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.390 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.391 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.391 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.391 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.391 I llm_load_print_meta: max token length = 93
0.00.378.145 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.383.397 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.402 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.403 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.403 I llama_new_context_with_model: n_batch       = 2048
0.00.383.404 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.404 I llama_new_context_with_model: flash_attn    = 0
0.00.383.407 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.408 I llama_new_context_with_model: freq_scale    = 1
0.00.383.408 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.278 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.291 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.382 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.611 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.616 I llama_new_context_with_model: graph nodes  = 601
0.00.400.616 I llama_new_context_with_model: graph splits = 1
0.00.400.619 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.693 I main: llama threadpool init, n_threads = 4
0.00.481.708 I 
0.00.481.784 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.481.787 I 
0.00.481.829 I sampler seed: 4237749921
0.00.481.840 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.843 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.844 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.845 I 
 increasities, such as the Great Plague of London, are events that have the potential to cause widespread devastation and loss of life. They can also lead to social

0.02.667.738 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6875.00 tokens per second)
0.02.667.740 I llama_perf_context_print:        load time =     480.80 ms
0.02.667.742 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.667.743 I llama_perf_context_print:        eval time =    2167.45 ms /    32 runs   (   67.73 ms per token,    14.76 tokens per second)
0.02.667.743 I llama_perf_context_print:       total time =    2186.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.589 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.794 I main: llama backend init
0.00.000.926 I main: load the model and apply lora adapter, if any
0.00.021.415 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.424 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.437 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.438 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.442 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.443 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.444 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.445 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.446 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.446 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.450 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.450 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.451 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.452 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.002 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.117 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.968 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.975 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.976 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.977 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.980 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.983 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.983 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.985 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.986 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.990 I llama_model_loader: - type  f32:   37 tensors
0.00.131.992 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.721 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.266 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.811 I llm_load_vocab: special tokens cache size = 5
0.00.267.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.053 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.053 I llm_load_print_meta: arch             = gemma
0.00.267.054 I llm_load_print_meta: vocab type       = SPM
0.00.267.055 I llm_load_print_meta: n_vocab          = 256000
0.00.267.055 I llm_load_print_meta: n_merges         = 0
0.00.267.055 I llm_load_print_meta: vocab_only       = 0
0.00.267.056 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.056 I llm_load_print_meta: n_embd           = 2048
0.00.267.056 I llm_load_print_meta: n_layer          = 18
0.00.267.068 I llm_load_print_meta: n_head           = 8
0.00.267.069 I llm_load_print_meta: n_head_kv        = 1
0.00.267.069 I llm_load_print_meta: n_rot            = 256
0.00.267.069 I llm_load_print_meta: n_swa            = 0
0.00.267.070 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.070 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.071 I llm_load_print_meta: n_gqa            = 8
0.00.267.072 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.073 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.074 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.075 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.076 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.076 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.076 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.077 I llm_load_print_meta: n_ff             = 16384
0.00.267.078 I llm_load_print_meta: n_expert         = 0
0.00.267.078 I llm_load_print_meta: n_expert_used    = 0
0.00.267.079 I llm_load_print_meta: causal attn      = 1
0.00.267.080 I llm_load_print_meta: pooling type     = 0
0.00.267.080 I llm_load_print_meta: rope type        = 2
0.00.267.080 I llm_load_print_meta: rope scaling     = linear
0.00.267.082 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.083 I llm_load_print_meta: freq_scale_train = 1
0.00.267.083 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.083 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.084 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.084 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.084 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.084 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.085 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.086 I llm_load_print_meta: model type       = 2B
0.00.267.086 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.087 I llm_load_print_meta: model params     = 2.51 B
0.00.267.088 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.088 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.089 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.089 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.094 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.095 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.095 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.095 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.095 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.096 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.096 I llm_load_print_meta: max token length = 93
0.00.353.897 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.904 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.905 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.906 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.906 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.907 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.056 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.062 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.063 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.063 I llama_new_context_with_model: n_batch       = 2048
0.00.359.064 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.064 I llama_new_context_with_model: flash_attn    = 0
0.00.359.066 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.067 I llama_new_context_with_model: freq_scale    = 1
0.00.359.068 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.508 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.521 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.618 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.861 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.868 I llama_new_context_with_model: graph nodes  = 601
0.00.375.869 I llama_new_context_with_model: graph splits = 1
0.00.375.871 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.052 I main: llama threadpool init, n_threads = 4
0.00.461.065 I 
0.00.461.142 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.146 I 
0.00.461.191 I sampler seed: 1908696043
0.00.461.202 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.205 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.205 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.207 I 
 maneuvously.

The question is: Rewrite the given sentence using more formal language.

The sentence provided is:

"The sentence is awkward and needs

0.02.620.283 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6929.86 tokens per second)
0.02.620.285 I llama_perf_context_print:        load time =     460.10 ms
0.02.620.286 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.620.288 I llama_perf_context_print:        eval time =    2139.94 ms /    32 runs   (   66.87 ms per token,    14.95 tokens per second)
0.02.620.288 I llama_perf_context_print:       total time =    2159.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.540 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.021.167 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.176 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.184 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.189 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.190 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.194 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.195 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.196 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.197 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.199 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.200 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.206 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.207 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.208 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.209 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.210 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.704 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.799 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.719 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.725 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.726 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.727 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.728 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.728 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.729 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.731 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.732 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.734 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.734 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.735 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.738 I llama_model_loader: - type  f32:   37 tensors
0.00.131.739 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.420 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.788 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.372 I llm_load_vocab: special tokens cache size = 5
0.00.264.614 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.630 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.631 I llm_load_print_meta: arch             = gemma
0.00.264.631 I llm_load_print_meta: vocab type       = SPM
0.00.264.632 I llm_load_print_meta: n_vocab          = 256000
0.00.264.633 I llm_load_print_meta: n_merges         = 0
0.00.264.633 I llm_load_print_meta: vocab_only       = 0
0.00.264.633 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.634 I llm_load_print_meta: n_embd           = 2048
0.00.264.634 I llm_load_print_meta: n_layer          = 18
0.00.264.645 I llm_load_print_meta: n_head           = 8
0.00.264.646 I llm_load_print_meta: n_head_kv        = 1
0.00.264.647 I llm_load_print_meta: n_rot            = 256
0.00.264.647 I llm_load_print_meta: n_swa            = 0
0.00.264.648 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.648 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.649 I llm_load_print_meta: n_gqa            = 8
0.00.264.650 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.652 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.654 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.657 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.658 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.658 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.659 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.660 I llm_load_print_meta: n_ff             = 16384
0.00.264.660 I llm_load_print_meta: n_expert         = 0
0.00.264.661 I llm_load_print_meta: n_expert_used    = 0
0.00.264.661 I llm_load_print_meta: causal attn      = 1
0.00.264.661 I llm_load_print_meta: pooling type     = 0
0.00.264.661 I llm_load_print_meta: rope type        = 2
0.00.264.662 I llm_load_print_meta: rope scaling     = linear
0.00.264.670 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.671 I llm_load_print_meta: freq_scale_train = 1
0.00.264.671 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.672 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.673 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.673 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.674 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.674 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.675 I llm_load_print_meta: model type       = 2B
0.00.264.676 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.678 I llm_load_print_meta: model params     = 2.51 B
0.00.264.679 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.679 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.680 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.681 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.681 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.682 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.682 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.683 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.683 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.684 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.684 I llm_load_print_meta: max token length = 93
0.00.336.132 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.138 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.438 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.444 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.444 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.445 I llama_new_context_with_model: n_batch       = 2048
0.00.341.445 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.446 I llama_new_context_with_model: flash_attn    = 0
0.00.341.448 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.449 I llama_new_context_with_model: freq_scale    = 1
0.00.341.450 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.611 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.624 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.729 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.006 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.013 I llama_new_context_with_model: graph nodes  = 601
0.00.358.013 I llama_new_context_with_model: graph splits = 1
0.00.358.014 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.154 I main: llama threadpool init, n_threads = 4
0.00.445.168 I 
0.00.445.254 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.258 I 
0.00.445.304 I sampler seed: 977149064
0.00.445.323 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.330 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.330 I 
 increasities for the purpose of enhancing the accuracy of trajectory predictions.

**Explanation:**

* A trajectory is a sequence of points representing the position of an object

0.02.834.193 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6790.12 tokens per second)
0.02.834.196 I llama_perf_context_print:        load time =     444.23 ms
0.02.834.197 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.834.198 I llama_perf_context_print:        eval time =    2369.52 ms /    32 runs   (   74.05 ms per token,    13.50 tokens per second)
0.02.834.199 I llama_perf_context_print:       total time =    2389.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.325s
user	0m38.752s
sys	0m9.361s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4056 (5b359bb1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32004.65 ms
main:    total time = 32004.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.021.505 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.515 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.524 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.529 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.530 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.534 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.534 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.535 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.536 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.536 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.536 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.540 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.540 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.541 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.541 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.542 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.236 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.667 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.560 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.566 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.567 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.568 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.568 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.569 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.570 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.572 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.572 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.574 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.574 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.575 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.579 I llama_model_loader: - type  f32:   37 tensors
0.00.132.580 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.581 I llama_model_loader: - type q6_K:   19 tensors
0.00.217.386 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.923 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.435 I llm_load_vocab: special tokens cache size = 5
0.00.285.612 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.641 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.643 I llm_load_print_meta: arch             = gemma
0.00.285.643 I llm_load_print_meta: vocab type       = SPM
0.00.285.644 I llm_load_print_meta: n_vocab          = 256000
0.00.285.644 I llm_load_print_meta: n_merges         = 0
0.00.285.645 I llm_load_print_meta: vocab_only       = 0
0.00.285.645 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.645 I llm_load_print_meta: n_embd           = 2048
0.00.285.646 I llm_load_print_meta: n_layer          = 18
0.00.285.658 I llm_load_print_meta: n_head           = 8
0.00.285.659 I llm_load_print_meta: n_head_kv        = 1
0.00.285.659 I llm_load_print_meta: n_rot            = 256
0.00.285.660 I llm_load_print_meta: n_swa            = 0
0.00.285.661 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.661 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.662 I llm_load_print_meta: n_gqa            = 8
0.00.285.663 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.664 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.665 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.667 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.667 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.668 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.668 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.669 I llm_load_print_meta: n_ff             = 16384
0.00.285.670 I llm_load_print_meta: n_expert         = 0
0.00.285.670 I llm_load_print_meta: n_expert_used    = 0
0.00.285.671 I llm_load_print_meta: causal attn      = 1
0.00.285.671 I llm_load_print_meta: pooling type     = 0
0.00.285.671 I llm_load_print_meta: rope type        = 2
0.00.285.672 I llm_load_print_meta: rope scaling     = linear
0.00.285.674 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.674 I llm_load_print_meta: freq_scale_train = 1
0.00.285.675 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.676 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.676 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.677 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.677 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.677 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.678 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.679 I llm_load_print_meta: model type       = 2B
0.00.285.680 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.681 I llm_load_print_meta: model params     = 2.51 B
0.00.285.682 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.683 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.683 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.684 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.684 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.685 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.685 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.685 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.685 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.686 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.686 I llm_load_print_meta: max token length = 93
0.00.345.815 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.345.821 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.345.822 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.345.823 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.345.824 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.345.824 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.351.055 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.062 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.062 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.062 I llama_new_context_with_model: n_batch       = 2048
0.00.351.063 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.063 I llama_new_context_with_model: flash_attn    = 0
0.00.351.065 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.066 I llama_new_context_with_model: freq_scale    = 1
0.00.351.067 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.095 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.107 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.197 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.434 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.439 I llama_new_context_with_model: graph nodes  = 601
0.00.367.439 I llama_new_context_with_model: graph splits = 1
0.00.367.441 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.692 I main: llama threadpool init, n_threads = 4
0.00.443.705 I 
0.00.443.784 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.787 I 
0.00.443.832 I sampler seed: 2314404883
0.00.443.843 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.847 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.847 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.848 I 
 increasities and the resulting loss of consciousness.

**Answer the question by explaining the process and the potential consequences.**

**Answer:**

**Process:**



0.02.068.395 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6711.41 tokens per second)
0.02.068.397 I llama_perf_context_print:        load time =     442.80 ms
0.02.068.399 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.068.400 I llama_perf_context_print:        eval time =    1605.80 ms /    32 runs   (   50.18 ms per token,    19.93 tokens per second)
0.02.068.401 I llama_perf_context_print:       total time =    1624.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4056 (5b359bb1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32046.63 ms
main:    total time = 32046.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.543 I build: 4056 (5b359bb1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.021.489 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.505 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.512 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.515 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.519 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.519 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.520 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.521 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.521 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.523 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.526 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.527 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.527 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.528 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.528 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.850 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.031 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.037 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.038 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.039 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.040 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.040 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.043 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.044 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.049 I llama_model_loader: - type  f32:   37 tensors
0.00.132.049 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.050 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.557 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.328 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.047 I llm_load_vocab: special tokens cache size = 5
0.00.279.061 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.080 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.081 I llm_load_print_meta: arch             = gemma
0.00.279.082 I llm_load_print_meta: vocab type       = SPM
0.00.279.083 I llm_load_print_meta: n_vocab          = 256000
0.00.279.083 I llm_load_print_meta: n_merges         = 0
0.00.279.084 I llm_load_print_meta: vocab_only       = 0
0.00.279.084 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.084 I llm_load_print_meta: n_embd           = 2048
0.00.279.085 I llm_load_print_meta: n_layer          = 18
0.00.279.096 I llm_load_print_meta: n_head           = 8
0.00.279.097 I llm_load_print_meta: n_head_kv        = 1
0.00.279.097 I llm_load_print_meta: n_rot            = 256
0.00.279.098 I llm_load_print_meta: n_swa            = 0
0.00.279.098 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.098 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.099 I llm_load_print_meta: n_gqa            = 8
0.00.279.100 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.101 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.104 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.104 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.105 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.105 I llm_load_print_meta: n_ff             = 16384
0.00.279.106 I llm_load_print_meta: n_expert         = 0
0.00.279.106 I llm_load_print_meta: n_expert_used    = 0
0.00.279.106 I llm_load_print_meta: causal attn      = 1
0.00.279.107 I llm_load_print_meta: pooling type     = 0
0.00.279.107 I llm_load_print_meta: rope type        = 2
0.00.279.107 I llm_load_print_meta: rope scaling     = linear
0.00.279.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.109 I llm_load_print_meta: freq_scale_train = 1
0.00.279.109 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.110 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.110 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.111 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.111 I llm_load_print_meta: model type       = 2B
0.00.279.112 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.279.113 I llm_load_print_meta: model params     = 2.51 B
0.00.279.113 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.279.114 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.114 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.115 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.115 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.115 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.116 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.116 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.116 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.117 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.117 I llm_load_print_meta: max token length = 93
0.00.337.588 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.342.852 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.858 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.858 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.859 I llama_new_context_with_model: n_batch       = 2048
0.00.342.859 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.860 I llama_new_context_with_model: flash_attn    = 0
0.00.342.862 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.863 I llama_new_context_with_model: freq_scale    = 1
0.00.342.864 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.646 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.661 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.751 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.033 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.039 I llama_new_context_with_model: graph nodes  = 601
0.00.360.039 I llama_new_context_with_model: graph splits = 1
0.00.360.041 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.143 I main: llama threadpool init, n_threads = 4
0.00.434.157 I 
0.00.434.233 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.434.236 I 
0.00.434.279 I sampler seed: 1084721566
0.00.434.290 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.293 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.296 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.296 I 
 seconded in the following sentence:
"The man who broke the vase was the one who loved it the most."

The sentence implies that:
A

0.01.996.487 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6811.15 tokens per second)
0.01.996.490 I llama_perf_context_print:        load time =     433.26 ms
0.01.996.491 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.996.492 I llama_perf_context_print:        eval time =    1543.86 ms /    32 runs   (   48.25 ms per token,    20.73 tokens per second)
0.01.996.493 I llama_perf_context_print:       total time =    1562.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.887s
user	8m14.476s
sys	0m6.819s
