+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.172 I build: 4195 (5b3466be) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.370 I main: load the model and apply lora adapter, if any
0.00.020.578 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.587 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.594 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.601 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.609 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.609 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.611 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.612 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.616 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.616 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.617 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.618 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.618 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.219 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.030 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.037 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.038 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.039 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.041 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.042 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.043 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.044 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.044 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.046 I llama_model_loader: - type  f32:   37 tensors
0.00.131.047 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.425 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.367 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.042 I llm_load_vocab: special tokens cache size = 5
0.00.267.255 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.270 I llm_load_print_meta: arch             = gemma
0.00.267.271 I llm_load_print_meta: vocab type       = SPM
0.00.267.271 I llm_load_print_meta: n_vocab          = 256000
0.00.267.272 I llm_load_print_meta: n_merges         = 0
0.00.267.272 I llm_load_print_meta: vocab_only       = 0
0.00.267.272 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.272 I llm_load_print_meta: n_embd           = 2048
0.00.267.273 I llm_load_print_meta: n_layer          = 18
0.00.267.284 I llm_load_print_meta: n_head           = 8
0.00.267.286 I llm_load_print_meta: n_head_kv        = 1
0.00.267.286 I llm_load_print_meta: n_rot            = 256
0.00.267.286 I llm_load_print_meta: n_swa            = 0
0.00.267.287 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.287 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.288 I llm_load_print_meta: n_gqa            = 8
0.00.267.289 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.290 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.292 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.292 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.293 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.293 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.294 I llm_load_print_meta: n_ff             = 16384
0.00.267.294 I llm_load_print_meta: n_expert         = 0
0.00.267.294 I llm_load_print_meta: n_expert_used    = 0
0.00.267.295 I llm_load_print_meta: causal attn      = 1
0.00.267.295 I llm_load_print_meta: pooling type     = 0
0.00.267.295 I llm_load_print_meta: rope type        = 2
0.00.267.296 I llm_load_print_meta: rope scaling     = linear
0.00.267.297 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.298 I llm_load_print_meta: freq_scale_train = 1
0.00.267.298 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.299 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.299 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.300 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.300 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.300 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.300 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.301 I llm_load_print_meta: model type       = 2B
0.00.267.301 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.302 I llm_load_print_meta: model params     = 2.51 B
0.00.267.303 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.303 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.304 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.304 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.304 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.305 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.305 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.305 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.306 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.306 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.306 I llm_load_print_meta: max token length = 93
0.00.369.502 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.369.511 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.369.511 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.369.512 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.369.513 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.369.513 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.374.716 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.722 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.723 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.723 I llama_new_context_with_model: n_batch       = 2048
0.00.374.724 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.724 I llama_new_context_with_model: flash_attn    = 0
0.00.374.727 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.727 I llama_new_context_with_model: freq_scale    = 1
0.00.374.728 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.020 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.033 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.127 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.390.527 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.390.534 I llama_new_context_with_model: graph nodes  = 601
0.00.390.534 I llama_new_context_with_model: graph splits = 1
0.00.390.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.270 I main: llama threadpool init, n_threads = 4
0.00.475.285 I 
0.00.475.356 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.475.360 I 
0.00.475.402 I sampler seed: 4225047051
0.00.475.413 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.425 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.428 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.429 I 
 seconary document:

**The Role of the Media in Shaping Public Opinion**

**Introduction:**

The media plays a significant role in shaping public opinion.

0.02.717.587 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6902.32 tokens per second)
0.02.717.590 I llama_perf_context_print:        load time =     474.88 ms
0.02.717.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.717.592 I llama_perf_context_print:        eval time =    2223.03 ms /    32 runs   (   69.47 ms per token,    14.39 tokens per second)
0.02.717.593 I llama_perf_context_print:       total time =    2242.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.584 I build: 4195 (5b3466be) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.789 I main: llama backend init
0.00.000.796 I main: load the model and apply lora adapter, if any
0.00.021.674 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.688 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.700 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.701 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.706 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.709 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.710 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.711 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.712 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.713 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.717 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.718 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.719 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.719 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.720 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.100 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.594 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.456 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.461 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.462 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.463 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.463 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.464 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.465 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.468 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.468 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.469 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.470 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.471 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.474 I llama_model_loader: - type  f32:   37 tensors
0.00.133.475 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.699 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.482 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.984 I llm_load_vocab: special tokens cache size = 5
0.00.267.135 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.153 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.154 I llm_load_print_meta: arch             = gemma
0.00.267.155 I llm_load_print_meta: vocab type       = SPM
0.00.267.156 I llm_load_print_meta: n_vocab          = 256000
0.00.267.156 I llm_load_print_meta: n_merges         = 0
0.00.267.157 I llm_load_print_meta: vocab_only       = 0
0.00.267.157 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.157 I llm_load_print_meta: n_embd           = 2048
0.00.267.158 I llm_load_print_meta: n_layer          = 18
0.00.267.169 I llm_load_print_meta: n_head           = 8
0.00.267.170 I llm_load_print_meta: n_head_kv        = 1
0.00.267.170 I llm_load_print_meta: n_rot            = 256
0.00.267.170 I llm_load_print_meta: n_swa            = 0
0.00.267.171 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.171 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.172 I llm_load_print_meta: n_gqa            = 8
0.00.267.173 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.174 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.175 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.176 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.177 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.177 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.177 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.178 I llm_load_print_meta: n_ff             = 16384
0.00.267.178 I llm_load_print_meta: n_expert         = 0
0.00.267.179 I llm_load_print_meta: n_expert_used    = 0
0.00.267.179 I llm_load_print_meta: causal attn      = 1
0.00.267.179 I llm_load_print_meta: pooling type     = 0
0.00.267.179 I llm_load_print_meta: rope type        = 2
0.00.267.180 I llm_load_print_meta: rope scaling     = linear
0.00.267.181 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.182 I llm_load_print_meta: freq_scale_train = 1
0.00.267.182 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.182 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.183 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.183 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.183 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.184 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.184 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.184 I llm_load_print_meta: model type       = 2B
0.00.267.185 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.185 I llm_load_print_meta: model params     = 2.51 B
0.00.267.186 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.187 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.187 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.187 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.188 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.188 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.189 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.189 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.189 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.190 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.190 I llm_load_print_meta: max token length = 93
0.00.362.741 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.367.874 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.881 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.881 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.882 I llama_new_context_with_model: n_batch       = 2048
0.00.367.882 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.883 I llama_new_context_with_model: flash_attn    = 0
0.00.367.885 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.886 I llama_new_context_with_model: freq_scale    = 1
0.00.367.887 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.613 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.626 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.716 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.979 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.984 I llama_new_context_with_model: graph nodes  = 601
0.00.383.985 I llama_new_context_with_model: graph splits = 1
0.00.383.987 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.223 I main: llama threadpool init, n_threads = 4
0.00.464.238 I 
0.00.464.312 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.315 I 
0.00.464.357 I sampler seed: 516945735
0.00.464.370 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.390 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.394 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.394 I 
 increasively through the ranks of his peers, achieving the position of most powerful warrior in the realm.

The legend of his exploits spread far and wide, whispered

0.02.626.933 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6924.05 tokens per second)
0.02.626.935 I llama_perf_context_print:        load time =     463.41 ms
0.02.626.936 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.626.938 I llama_perf_context_print:        eval time =    2144.50 ms /    32 runs   (   67.02 ms per token,    14.92 tokens per second)
0.02.626.939 I llama_perf_context_print:       total time =    2162.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.588 I build: 4195 (5b3466be) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.021.486 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.496 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.504 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.509 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.509 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.513 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.514 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.515 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.515 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.516 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.516 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.520 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.520 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.521 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.521 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.522 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.995 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.980 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.842 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.848 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.849 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.849 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.850 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.851 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.851 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.854 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.854 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.856 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.856 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.857 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.860 I llama_model_loader: - type  f32:   37 tensors
0.00.131.861 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.223 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.813 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.333 I llm_load_vocab: special tokens cache size = 5
0.00.262.148 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.164 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.165 I llm_load_print_meta: arch             = gemma
0.00.262.165 I llm_load_print_meta: vocab type       = SPM
0.00.262.166 I llm_load_print_meta: n_vocab          = 256000
0.00.262.167 I llm_load_print_meta: n_merges         = 0
0.00.262.167 I llm_load_print_meta: vocab_only       = 0
0.00.262.167 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.168 I llm_load_print_meta: n_embd           = 2048
0.00.262.168 I llm_load_print_meta: n_layer          = 18
0.00.262.178 I llm_load_print_meta: n_head           = 8
0.00.262.179 I llm_load_print_meta: n_head_kv        = 1
0.00.262.179 I llm_load_print_meta: n_rot            = 256
0.00.262.180 I llm_load_print_meta: n_swa            = 0
0.00.262.180 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.181 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.181 I llm_load_print_meta: n_gqa            = 8
0.00.262.183 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.183 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.184 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.186 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.186 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.186 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.187 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.188 I llm_load_print_meta: n_ff             = 16384
0.00.262.188 I llm_load_print_meta: n_expert         = 0
0.00.262.188 I llm_load_print_meta: n_expert_used    = 0
0.00.262.188 I llm_load_print_meta: causal attn      = 1
0.00.262.189 I llm_load_print_meta: pooling type     = 0
0.00.262.189 I llm_load_print_meta: rope type        = 2
0.00.262.189 I llm_load_print_meta: rope scaling     = linear
0.00.262.191 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.192 I llm_load_print_meta: freq_scale_train = 1
0.00.262.192 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.192 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.193 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.193 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.193 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.193 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.193 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.194 I llm_load_print_meta: model type       = 2B
0.00.262.195 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.195 I llm_load_print_meta: model params     = 2.51 B
0.00.262.196 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.197 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.197 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.198 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.198 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.199 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.199 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.200 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.200 I llm_load_print_meta: max token length = 93
0.00.337.037 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.337.043 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.337.044 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.337.045 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.337.045 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.337.046 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.342.374 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.382 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.383 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.383 I llama_new_context_with_model: n_batch       = 2048
0.00.342.384 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.384 I llama_new_context_with_model: flash_attn    = 0
0.00.342.388 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.389 I llama_new_context_with_model: freq_scale    = 1
0.00.342.390 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.815 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.828 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.197 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.204 I llama_new_context_with_model: graph nodes  = 601
0.00.359.205 I llama_new_context_with_model: graph splits = 1
0.00.359.207 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.582 I main: llama threadpool init, n_threads = 4
0.00.446.598 I 
0.00.446.671 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.446.674 I 
0.00.446.715 I sampler seed: 3341840468
0.00.446.726 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.742 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.746 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.746 I 
 increamically. 

I am unable to generate the requested text due to limitations in my programming capabilities. [end of text]


0.01.995.405 I llama_perf_sampler_print:    sampling time =       3.75 ms /    23 runs   (    0.16 ms per token,  6125.17 tokens per second)
0.01.995.407 I llama_perf_context_print:        load time =     445.77 ms
0.01.995.409 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.995.411 I llama_perf_context_print:        eval time =    1534.92 ms /    22 runs   (   69.77 ms per token,    14.33 tokens per second)
0.01.995.411 I llama_perf_context_print:       total time =    1548.83 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.555 I build: 4195 (5b3466be) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.342 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.352 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.360 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.368 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.372 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.375 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.376 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.376 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.377 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.378 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.379 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.384 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.385 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.385 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.838 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.919 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.821 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.822 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.822 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.823 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.824 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.824 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.827 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.827 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.829 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.833 I llama_model_loader: - type  f32:   37 tensors
0.00.131.834 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.489 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.175 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.770 I llm_load_vocab: special tokens cache size = 5
0.00.264.177 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.196 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.197 I llm_load_print_meta: arch             = gemma
0.00.264.197 I llm_load_print_meta: vocab type       = SPM
0.00.264.198 I llm_load_print_meta: n_vocab          = 256000
0.00.264.198 I llm_load_print_meta: n_merges         = 0
0.00.264.198 I llm_load_print_meta: vocab_only       = 0
0.00.264.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.199 I llm_load_print_meta: n_embd           = 2048
0.00.264.200 I llm_load_print_meta: n_layer          = 18
0.00.264.211 I llm_load_print_meta: n_head           = 8
0.00.264.212 I llm_load_print_meta: n_head_kv        = 1
0.00.264.212 I llm_load_print_meta: n_rot            = 256
0.00.264.212 I llm_load_print_meta: n_swa            = 0
0.00.264.213 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.213 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.214 I llm_load_print_meta: n_gqa            = 8
0.00.264.215 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.216 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.217 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.218 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.218 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.219 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.219 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.220 I llm_load_print_meta: n_ff             = 16384
0.00.264.220 I llm_load_print_meta: n_expert         = 0
0.00.264.220 I llm_load_print_meta: n_expert_used    = 0
0.00.264.221 I llm_load_print_meta: causal attn      = 1
0.00.264.221 I llm_load_print_meta: pooling type     = 0
0.00.264.221 I llm_load_print_meta: rope type        = 2
0.00.264.222 I llm_load_print_meta: rope scaling     = linear
0.00.264.223 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.224 I llm_load_print_meta: freq_scale_train = 1
0.00.264.224 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.224 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.225 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.225 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.225 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.225 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.226 I llm_load_print_meta: model type       = 2B
0.00.264.226 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.227 I llm_load_print_meta: model params     = 2.51 B
0.00.264.228 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.229 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.229 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.230 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.230 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.230 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.231 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.231 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.231 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.232 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.232 I llm_load_print_meta: max token length = 93
0.00.335.092 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.100 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.302 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.310 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.310 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.310 I llama_new_context_with_model: n_batch       = 2048
0.00.340.311 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.311 I llama_new_context_with_model: flash_attn    = 0
0.00.340.314 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.315 I llama_new_context_with_model: freq_scale    = 1
0.00.340.316 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.500 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.515 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.610 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.949 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.954 I llama_new_context_with_model: graph nodes  = 601
0.00.356.954 I llama_new_context_with_model: graph splits = 1
0.00.356.956 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.326 I main: llama threadpool init, n_threads = 4
0.00.444.340 I 
0.00.444.410 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.444.413 I 
0.00.444.466 I sampler seed: 1008351361
0.00.444.477 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.482 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.484 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.484 I 
 increabling, or snapping fingers, are a common symptom of several neurological disorders.

**What are the possible causes of snapping fingers?**

A. Stroke

0.02.858.920 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6945.91 tokens per second)
0.02.858.923 I llama_perf_context_print:        load time =     443.56 ms
0.02.858.925 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.858.928 I llama_perf_context_print:        eval time =    2395.64 ms /    32 runs   (   74.86 ms per token,    13.36 tokens per second)
0.02.858.929 I llama_perf_context_print:       total time =    2414.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.642s
user	0m36.318s
sys	0m9.258s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4195 (5b3466be)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40187.94 ms
main:    total time = 40187.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4195 (5b3466be) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.021.404 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.412 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.420 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.425 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.427 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.431 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.433 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.434 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.434 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.435 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.438 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.439 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.439 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.440 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.440 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.773 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.579 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.585 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.586 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.587 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.588 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.589 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.589 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.592 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.592 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.593 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.594 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.595 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.597 I llama_model_loader: - type  f32:   37 tensors
0.00.131.598 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.599 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.334 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.706 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.213 I llm_load_vocab: special tokens cache size = 5
0.00.262.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.351 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.352 I llm_load_print_meta: arch             = gemma
0.00.262.352 I llm_load_print_meta: vocab type       = SPM
0.00.262.353 I llm_load_print_meta: n_vocab          = 256000
0.00.262.354 I llm_load_print_meta: n_merges         = 0
0.00.262.354 I llm_load_print_meta: vocab_only       = 0
0.00.262.354 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.355 I llm_load_print_meta: n_embd           = 2048
0.00.262.355 I llm_load_print_meta: n_layer          = 18
0.00.262.366 I llm_load_print_meta: n_head           = 8
0.00.262.367 I llm_load_print_meta: n_head_kv        = 1
0.00.262.367 I llm_load_print_meta: n_rot            = 256
0.00.262.367 I llm_load_print_meta: n_swa            = 0
0.00.262.368 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.368 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.369 I llm_load_print_meta: n_gqa            = 8
0.00.262.370 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.371 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.372 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.373 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.374 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.374 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.374 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.375 I llm_load_print_meta: n_ff             = 16384
0.00.262.376 I llm_load_print_meta: n_expert         = 0
0.00.262.376 I llm_load_print_meta: n_expert_used    = 0
0.00.262.376 I llm_load_print_meta: causal attn      = 1
0.00.262.376 I llm_load_print_meta: pooling type     = 0
0.00.262.377 I llm_load_print_meta: rope type        = 2
0.00.262.377 I llm_load_print_meta: rope scaling     = linear
0.00.262.379 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.379 I llm_load_print_meta: freq_scale_train = 1
0.00.262.380 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.380 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.380 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.380 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.381 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.381 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.381 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.382 I llm_load_print_meta: model type       = 2B
0.00.262.382 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.383 I llm_load_print_meta: model params     = 2.51 B
0.00.262.384 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.384 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.385 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.385 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.385 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.386 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.386 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.386 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.387 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.387 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.387 I llm_load_print_meta: max token length = 93
0.00.322.264 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.270 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.271 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.272 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.272 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.273 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.600 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.606 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.606 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.607 I llama_new_context_with_model: n_batch       = 2048
0.00.328.607 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.608 I llama_new_context_with_model: flash_attn    = 0
0.00.328.610 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.611 I llama_new_context_with_model: freq_scale    = 1
0.00.328.611 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.967 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.342.980 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.068 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.391 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.396 I llama_new_context_with_model: graph nodes  = 601
0.00.344.397 I llama_new_context_with_model: graph splits = 1
0.00.344.399 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.772 I main: llama threadpool init, n_threads = 4
0.00.421.788 I 
0.00.421.863 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.421.866 I 
0.00.421.909 I sampler seed: 144385270
0.00.421.920 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.933 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.936 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.937 I 
 squaRE.

## The Squamous Aurea

The squamous aurea is a fold of skin that extends from the upper lip to the corner of the

0.02.001.978 I llama_perf_sampler_print:    sampling time =       5.62 ms /    33 runs   (    0.17 ms per token,  5877.11 tokens per second)
0.02.001.980 I llama_perf_context_print:        load time =     421.01 ms
0.02.001.981 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.001.983 I llama_perf_context_print:        eval time =    1559.74 ms /    32 runs   (   48.74 ms per token,    20.52 tokens per second)
0.02.001.983 I llama_perf_context_print:       total time =    1580.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4195 (5b3466be)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40174.26 ms
main:    total time = 40174.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.534 I build: 4195 (5b3466be) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.293 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.309 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.318 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.323 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.324 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.325 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.326 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.326 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.327 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.330 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.330 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.331 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.331 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.332 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.007 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.875 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.827 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.834 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.835 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.835 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.836 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.836 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.837 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.840 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.840 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.844 I llama_model_loader: - type  f32:   37 tensors
0.00.131.844 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.845 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.433 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.914 I llm_load_vocab: special tokens cache size = 5
0.00.262.812 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.828 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.829 I llm_load_print_meta: arch             = gemma
0.00.262.829 I llm_load_print_meta: vocab type       = SPM
0.00.262.830 I llm_load_print_meta: n_vocab          = 256000
0.00.262.830 I llm_load_print_meta: n_merges         = 0
0.00.262.830 I llm_load_print_meta: vocab_only       = 0
0.00.262.831 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.831 I llm_load_print_meta: n_embd           = 2048
0.00.262.831 I llm_load_print_meta: n_layer          = 18
0.00.262.842 I llm_load_print_meta: n_head           = 8
0.00.262.843 I llm_load_print_meta: n_head_kv        = 1
0.00.262.843 I llm_load_print_meta: n_rot            = 256
0.00.262.843 I llm_load_print_meta: n_swa            = 0
0.00.262.843 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.844 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.845 I llm_load_print_meta: n_gqa            = 8
0.00.262.846 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.847 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.848 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.849 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.850 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.850 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.850 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.851 I llm_load_print_meta: n_ff             = 16384
0.00.262.851 I llm_load_print_meta: n_expert         = 0
0.00.262.852 I llm_load_print_meta: n_expert_used    = 0
0.00.262.852 I llm_load_print_meta: causal attn      = 1
0.00.262.852 I llm_load_print_meta: pooling type     = 0
0.00.262.852 I llm_load_print_meta: rope type        = 2
0.00.262.853 I llm_load_print_meta: rope scaling     = linear
0.00.262.854 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.855 I llm_load_print_meta: freq_scale_train = 1
0.00.262.855 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.856 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.856 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.858 I llm_load_print_meta: model type       = 2B
0.00.262.858 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.859 I llm_load_print_meta: model params     = 2.51 B
0.00.262.859 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.860 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.860 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.860 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.861 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.861 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.862 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.863 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.863 I llm_load_print_meta: max token length = 93
0.00.319.009 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.237 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.244 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.244 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.245 I llama_new_context_with_model: n_batch       = 2048
0.00.324.245 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.246 I llama_new_context_with_model: flash_attn    = 0
0.00.324.248 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.249 I llama_new_context_with_model: freq_scale    = 1
0.00.324.250 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.198 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.212 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.315 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.590 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.596 I llama_new_context_with_model: graph nodes  = 601
0.00.340.596 I llama_new_context_with_model: graph splits = 1
0.00.340.599 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.512 I main: llama threadpool init, n_threads = 4
0.00.414.526 I 
0.00.414.599 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.414.602 I 
0.00.414.646 I sampler seed: 2614949900
0.00.414.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.665 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.668 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.668 I 
 effe

## Using the `fetchAll()` method

The `fetchAll()` method is used to retrieve multiple records from a database and store them as an array. Here

0.01.968.128 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6519.16 tokens per second)
0.01.968.131 I llama_perf_context_print:        load time =     413.76 ms
0.01.968.132 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.968.134 I llama_perf_context_print:        eval time =    1535.16 ms /    32 runs   (   47.97 ms per token,    20.84 tokens per second)
0.01.968.134 I llama_perf_context_print:       total time =    1553.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.111s
user	10m24.237s
sys	0m6.954s
