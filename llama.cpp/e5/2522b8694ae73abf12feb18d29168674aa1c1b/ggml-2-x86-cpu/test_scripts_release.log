+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.540 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.423 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.431 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.438 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.446 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.447 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.451 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.452 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.453 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.454 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.454 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.455 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.458 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.459 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.460 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.460 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.461 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.016 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.220 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.984 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.990 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.991 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.991 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.992 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.993 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.994 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.995 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.996 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.997 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.997 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.998 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.001 I llama_model_loader: - type  f32:   37 tensors
0.00.131.001 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.448 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.570 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.112 I llm_load_vocab: special tokens cache size = 5
0.00.260.662 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.679 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.680 I llm_load_print_meta: arch             = gemma
0.00.260.680 I llm_load_print_meta: vocab type       = SPM
0.00.260.681 I llm_load_print_meta: n_vocab          = 256000
0.00.260.682 I llm_load_print_meta: n_merges         = 0
0.00.260.683 I llm_load_print_meta: vocab_only       = 0
0.00.260.683 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.683 I llm_load_print_meta: n_embd           = 2048
0.00.260.683 I llm_load_print_meta: n_layer          = 18
0.00.260.696 I llm_load_print_meta: n_head           = 8
0.00.260.697 I llm_load_print_meta: n_head_kv        = 1
0.00.260.697 I llm_load_print_meta: n_rot            = 256
0.00.260.698 I llm_load_print_meta: n_swa            = 0
0.00.260.698 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.698 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.699 I llm_load_print_meta: n_gqa            = 8
0.00.260.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.701 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.702 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.704 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.704 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.704 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.705 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.705 I llm_load_print_meta: n_ff             = 16384
0.00.260.706 I llm_load_print_meta: n_expert         = 0
0.00.260.706 I llm_load_print_meta: n_expert_used    = 0
0.00.260.706 I llm_load_print_meta: causal attn      = 1
0.00.260.707 I llm_load_print_meta: pooling type     = 0
0.00.260.707 I llm_load_print_meta: rope type        = 2
0.00.260.707 I llm_load_print_meta: rope scaling     = linear
0.00.260.709 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.709 I llm_load_print_meta: freq_scale_train = 1
0.00.260.709 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.710 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.710 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.710 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.711 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.711 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.711 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.711 I llm_load_print_meta: model type       = 2B
0.00.260.712 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.713 I llm_load_print_meta: model params     = 2.51 B
0.00.260.714 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.714 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.715 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.715 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.715 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.716 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.716 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.716 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.716 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.717 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.717 I llm_load_print_meta: max token length = 93
0.00.363.132 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.138 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.139 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.139 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.140 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.141 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.445 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.451 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.451 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.452 I llama_new_context_with_model: n_batch       = 2048
0.00.368.452 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.453 I llama_new_context_with_model: flash_attn    = 0
0.00.368.455 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.456 I llama_new_context_with_model: freq_scale    = 1
0.00.368.457 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.992 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.004 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.093 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.307 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.314 I llama_new_context_with_model: graph nodes  = 601
0.00.384.314 I llama_new_context_with_model: graph splits = 1
0.00.384.317 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.899 I main: llama threadpool init, n_threads = 4
0.00.469.913 I 
0.00.469.985 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.988 I 
0.00.470.031 I sampler seed: 2517088910
0.00.470.041 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.053 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.057 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.057 I 
 increasively, but with diminishing returns. [end of text]


0.01.103.203 I llama_perf_sampler_print:    sampling time =       1.58 ms /    10 runs   (    0.16 ms per token,  6329.11 tokens per second)
0.01.103.206 I llama_perf_context_print:        load time =     469.13 ms
0.01.103.207 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.103.208 I llama_perf_context_print:        eval time =     626.74 ms /     9 runs   (   69.64 ms per token,    14.36 tokens per second)
0.01.103.209 I llama_perf_context_print:       total time =     633.31 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.554 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.020.943 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.957 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.966 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.970 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.973 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.974 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.974 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.976 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.977 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.981 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.982 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.982 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.983 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.983 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.557 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.455 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.598 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.604 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.605 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.606 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.607 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.608 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.609 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.612 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.613 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.614 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.615 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.616 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.618 I llama_model_loader: - type  f32:   37 tensors
0.00.131.620 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.695 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.208 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.760 I llm_load_vocab: special tokens cache size = 5
0.00.265.410 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.425 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.426 I llm_load_print_meta: arch             = gemma
0.00.265.427 I llm_load_print_meta: vocab type       = SPM
0.00.265.427 I llm_load_print_meta: n_vocab          = 256000
0.00.265.428 I llm_load_print_meta: n_merges         = 0
0.00.265.428 I llm_load_print_meta: vocab_only       = 0
0.00.265.429 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.429 I llm_load_print_meta: n_embd           = 2048
0.00.265.429 I llm_load_print_meta: n_layer          = 18
0.00.265.439 I llm_load_print_meta: n_head           = 8
0.00.265.440 I llm_load_print_meta: n_head_kv        = 1
0.00.265.440 I llm_load_print_meta: n_rot            = 256
0.00.265.441 I llm_load_print_meta: n_swa            = 0
0.00.265.441 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.441 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.442 I llm_load_print_meta: n_gqa            = 8
0.00.265.443 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.444 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.445 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.447 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.447 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.447 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.448 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.449 I llm_load_print_meta: n_ff             = 16384
0.00.265.449 I llm_load_print_meta: n_expert         = 0
0.00.265.449 I llm_load_print_meta: n_expert_used    = 0
0.00.265.449 I llm_load_print_meta: causal attn      = 1
0.00.265.450 I llm_load_print_meta: pooling type     = 0
0.00.265.450 I llm_load_print_meta: rope type        = 2
0.00.265.450 I llm_load_print_meta: rope scaling     = linear
0.00.265.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.452 I llm_load_print_meta: freq_scale_train = 1
0.00.265.452 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.453 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.453 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.453 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.454 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.454 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.454 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.454 I llm_load_print_meta: model type       = 2B
0.00.265.455 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.456 I llm_load_print_meta: model params     = 2.51 B
0.00.265.457 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.457 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.457 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.458 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.458 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.458 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.459 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.459 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.459 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.459 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.460 I llm_load_print_meta: max token length = 93
0.00.361.649 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.771 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.778 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.778 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.779 I llama_new_context_with_model: n_batch       = 2048
0.00.366.779 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.780 I llama_new_context_with_model: flash_attn    = 0
0.00.366.782 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.783 I llama_new_context_with_model: freq_scale    = 1
0.00.366.784 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.118 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.134 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.528 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.533 I llama_new_context_with_model: graph nodes  = 601
0.00.383.533 I llama_new_context_with_model: graph splits = 1
0.00.383.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.758 I main: llama threadpool init, n_threads = 4
0.00.465.774 I 
0.00.465.848 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.851 I 
0.00.465.895 I sampler seed: 1084837727
0.00.465.906 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.909 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.910 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.910 I 
 increably! [end of text]


0.00.738.994 I llama_perf_sampler_print:    sampling time =       0.70 ms /     5 runs   (    0.14 ms per token,  7142.86 tokens per second)
0.00.738.996 I llama_perf_context_print:        load time =     464.98 ms
0.00.738.998 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.738.999 I llama_perf_context_print:        eval time =     270.07 ms /     4 runs   (   67.52 ms per token,    14.81 tokens per second)
0.00.738.999 I llama_perf_context_print:       total time =     273.24 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.598 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.850 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.021.145 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.155 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.162 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.172 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.177 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.181 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.182 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.184 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.185 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.186 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.187 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.192 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.193 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.194 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.195 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.196 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.539 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.749 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.680 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.686 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.687 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.688 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.689 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.690 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.691 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.694 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.695 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.696 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.697 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.699 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.702 I llama_model_loader: - type  f32:   37 tensors
0.00.131.704 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.465 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.491 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.974 I llm_load_vocab: special tokens cache size = 5
0.00.263.825 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.841 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.841 I llm_load_print_meta: arch             = gemma
0.00.263.842 I llm_load_print_meta: vocab type       = SPM
0.00.263.843 I llm_load_print_meta: n_vocab          = 256000
0.00.263.843 I llm_load_print_meta: n_merges         = 0
0.00.263.843 I llm_load_print_meta: vocab_only       = 0
0.00.263.844 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.844 I llm_load_print_meta: n_embd           = 2048
0.00.263.855 I llm_load_print_meta: n_layer          = 18
0.00.263.869 I llm_load_print_meta: n_head           = 8
0.00.263.870 I llm_load_print_meta: n_head_kv        = 1
0.00.263.871 I llm_load_print_meta: n_rot            = 256
0.00.263.872 I llm_load_print_meta: n_swa            = 0
0.00.263.873 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.874 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.875 I llm_load_print_meta: n_gqa            = 8
0.00.263.877 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.878 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.880 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.882 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.883 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.883 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.884 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.889 I llm_load_print_meta: n_ff             = 16384
0.00.263.889 I llm_load_print_meta: n_expert         = 0
0.00.263.890 I llm_load_print_meta: n_expert_used    = 0
0.00.263.890 I llm_load_print_meta: causal attn      = 1
0.00.263.891 I llm_load_print_meta: pooling type     = 0
0.00.263.892 I llm_load_print_meta: rope type        = 2
0.00.263.892 I llm_load_print_meta: rope scaling     = linear
0.00.263.894 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.895 I llm_load_print_meta: freq_scale_train = 1
0.00.263.896 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.896 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.896 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.897 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.897 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.898 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.900 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.900 I llm_load_print_meta: model type       = 2B
0.00.263.901 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.903 I llm_load_print_meta: model params     = 2.51 B
0.00.263.904 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.904 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.905 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.906 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.906 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.907 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.908 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.908 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.908 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.910 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.910 I llm_load_print_meta: max token length = 93
0.00.340.213 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.219 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.219 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.220 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.221 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.221 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.403 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.409 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.410 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.410 I llama_new_context_with_model: n_batch       = 2048
0.00.345.411 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.411 I llama_new_context_with_model: flash_attn    = 0
0.00.345.414 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.415 I llama_new_context_with_model: freq_scale    = 1
0.00.345.415 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.760 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.774 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.865 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.164 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.171 I llama_new_context_with_model: graph nodes  = 601
0.00.361.171 I llama_new_context_with_model: graph splits = 1
0.00.361.174 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.641 I main: llama threadpool init, n_threads = 4
0.00.447.658 I 
0.00.447.751 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.447.754 I 
0.00.447.809 I sampler seed: 2593161597
0.00.447.821 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.832 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.837 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.837 I 
 increasities, which are essentially high-powered psychological interventions that are used to change people's behavior or attitudes.

**a. Explain the purpose of increa

0.02.709.636 I llama_perf_sampler_print:    sampling time =       5.53 ms /    33 runs   (    0.17 ms per token,  5971.77 tokens per second)
0.02.709.638 I llama_perf_context_print:        load time =     446.77 ms
0.02.709.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.709.641 I llama_perf_context_print:        eval time =    2242.90 ms /    32 runs   (   70.09 ms per token,    14.27 tokens per second)
0.02.709.641 I llama_perf_context_print:       total time =    2262.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.584 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.000.792 I main: load the model and apply lora adapter, if any
0.00.021.653 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.663 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.671 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.677 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.678 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.683 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.684 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.686 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.687 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.688 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.693 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.694 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.694 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.696 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.696 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.670 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.141 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.885 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.891 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.892 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.893 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.893 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.894 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.895 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.898 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.899 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.900 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.900 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.901 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.905 I llama_model_loader: - type  f32:   37 tensors
0.00.131.906 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.400 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.889 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.404 I llm_load_vocab: special tokens cache size = 5
0.00.259.285 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.302 I llm_load_print_meta: arch             = gemma
0.00.259.302 I llm_load_print_meta: vocab type       = SPM
0.00.259.303 I llm_load_print_meta: n_vocab          = 256000
0.00.259.303 I llm_load_print_meta: n_merges         = 0
0.00.259.304 I llm_load_print_meta: vocab_only       = 0
0.00.259.304 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.304 I llm_load_print_meta: n_embd           = 2048
0.00.259.305 I llm_load_print_meta: n_layer          = 18
0.00.259.315 I llm_load_print_meta: n_head           = 8
0.00.259.316 I llm_load_print_meta: n_head_kv        = 1
0.00.259.316 I llm_load_print_meta: n_rot            = 256
0.00.259.317 I llm_load_print_meta: n_swa            = 0
0.00.259.317 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.317 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.318 I llm_load_print_meta: n_gqa            = 8
0.00.259.319 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.320 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.321 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.322 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.323 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.323 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.323 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.324 I llm_load_print_meta: n_ff             = 16384
0.00.259.324 I llm_load_print_meta: n_expert         = 0
0.00.259.325 I llm_load_print_meta: n_expert_used    = 0
0.00.259.325 I llm_load_print_meta: causal attn      = 1
0.00.259.325 I llm_load_print_meta: pooling type     = 0
0.00.259.325 I llm_load_print_meta: rope type        = 2
0.00.259.326 I llm_load_print_meta: rope scaling     = linear
0.00.259.328 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.328 I llm_load_print_meta: freq_scale_train = 1
0.00.259.328 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.329 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.329 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.329 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.330 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.330 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.330 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.330 I llm_load_print_meta: model type       = 2B
0.00.259.331 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.332 I llm_load_print_meta: model params     = 2.51 B
0.00.259.333 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.333 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.333 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.334 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.334 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.334 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.335 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.335 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.336 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.336 I llm_load_print_meta: max token length = 93
0.00.330.170 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.330.177 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.335.408 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.414 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.415 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.415 I llama_new_context_with_model: n_batch       = 2048
0.00.335.416 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.416 I llama_new_context_with_model: flash_attn    = 0
0.00.335.418 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.419 I llama_new_context_with_model: freq_scale    = 1
0.00.335.420 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.798 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.812 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.903 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.216 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.223 I llama_new_context_with_model: graph nodes  = 601
0.00.351.223 I llama_new_context_with_model: graph splits = 1
0.00.351.225 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.534 I main: llama threadpool init, n_threads = 4
0.00.439.550 I 
0.00.439.623 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.439.626 I 
0.00.439.667 I sampler seed: 1980075476
0.00.439.678 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.681 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.682 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.683 I 
 seconally.

The first sentence is the subject.

The second sentence is the verb.

The third sentence is the object.

The fourth sentence is

0.02.834.159 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6028.50 tokens per second)
0.02.834.162 I llama_perf_context_print:        load time =     438.73 ms
0.02.834.163 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.834.165 I llama_perf_context_print:        eval time =    2374.58 ms /    32 runs   (   74.21 ms per token,    13.48 tokens per second)
0.02.834.165 I llama_perf_context_print:       total time =    2394.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.776s
user	0m25.103s
sys	0m9.288s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4290 (e52522b8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40183.46 ms
main:    total time = 40183.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.442 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.642 I main: llama backend init
0.00.000.648 I main: load the model and apply lora adapter, if any
0.00.021.263 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.276 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.294 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.296 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.300 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.301 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.301 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.302 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.302 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.303 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.308 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.308 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.309 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.309 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.310 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.594 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.105 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.976 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.983 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.984 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.984 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.985 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.986 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.986 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.989 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.990 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.990 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.992 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.992 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.996 I llama_model_loader: - type  f32:   37 tensors
0.00.131.997 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.998 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.565 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.148 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.702 I llm_load_vocab: special tokens cache size = 5
0.00.265.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.351 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.352 I llm_load_print_meta: arch             = gemma
0.00.265.352 I llm_load_print_meta: vocab type       = SPM
0.00.265.353 I llm_load_print_meta: n_vocab          = 256000
0.00.265.353 I llm_load_print_meta: n_merges         = 0
0.00.265.354 I llm_load_print_meta: vocab_only       = 0
0.00.265.354 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.354 I llm_load_print_meta: n_embd           = 2048
0.00.265.354 I llm_load_print_meta: n_layer          = 18
0.00.265.366 I llm_load_print_meta: n_head           = 8
0.00.265.367 I llm_load_print_meta: n_head_kv        = 1
0.00.265.367 I llm_load_print_meta: n_rot            = 256
0.00.265.367 I llm_load_print_meta: n_swa            = 0
0.00.265.368 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.368 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.369 I llm_load_print_meta: n_gqa            = 8
0.00.265.370 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.371 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.372 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.373 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.373 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.373 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.374 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.374 I llm_load_print_meta: n_ff             = 16384
0.00.265.375 I llm_load_print_meta: n_expert         = 0
0.00.265.375 I llm_load_print_meta: n_expert_used    = 0
0.00.265.375 I llm_load_print_meta: causal attn      = 1
0.00.265.376 I llm_load_print_meta: pooling type     = 0
0.00.265.376 I llm_load_print_meta: rope type        = 2
0.00.265.376 I llm_load_print_meta: rope scaling     = linear
0.00.265.377 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.378 I llm_load_print_meta: freq_scale_train = 1
0.00.265.378 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.379 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.379 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.379 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.379 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.380 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.380 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.380 I llm_load_print_meta: model type       = 2B
0.00.265.381 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.382 I llm_load_print_meta: model params     = 2.51 B
0.00.265.382 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.383 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.383 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.383 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.384 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.384 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.384 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.385 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.385 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.385 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.386 I llm_load_print_meta: max token length = 93
0.00.324.600 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.607 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.608 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.608 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.609 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.610 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.728 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.735 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.735 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.736 I llama_new_context_with_model: n_batch       = 2048
0.00.329.736 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.736 I llama_new_context_with_model: flash_attn    = 0
0.00.329.738 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.739 I llama_new_context_with_model: freq_scale    = 1
0.00.329.740 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.876 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.891 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.977 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.185 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.192 I llama_new_context_with_model: graph nodes  = 601
0.00.345.192 I llama_new_context_with_model: graph splits = 1
0.00.345.194 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.722 I main: llama threadpool init, n_threads = 4
0.00.419.738 I 
0.00.419.811 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.814 I 
0.00.419.856 I sampler seed: 1765315205
0.00.419.867 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.879 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.883 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.883 I 
 seconde.

## The Importance of Ethical Leadership

**Introduction:**

Ethical leadership is paramount for creating a positive and productive work environment. It fosters trust,

0.02.010.712 I llama_perf_sampler_print:    sampling time =       5.56 ms /    33 runs   (    0.17 ms per token,  5932.05 tokens per second)
0.02.010.715 I llama_perf_context_print:        load time =     419.06 ms
0.02.010.716 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.717 I llama_perf_context_print:        eval time =    1570.96 ms /    32 runs   (   49.09 ms per token,    20.37 tokens per second)
0.02.010.717 I llama_perf_context_print:       total time =    1591.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4290 (e52522b8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40170.76 ms
main:    total time = 40170.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.580 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.780 I main: llama backend init
0.00.000.787 I main: load the model and apply lora adapter, if any
0.00.020.981 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.998 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.008 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.009 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.014 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.014 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.015 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.016 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.016 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.017 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.022 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.023 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.024 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.024 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.025 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.867 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.359 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.135 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.145 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.146 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.147 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.150 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.151 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.155 I llama_model_loader: - type  f32:   37 tensors
0.00.132.156 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.157 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.715 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.562 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.168 I llm_load_vocab: special tokens cache size = 5
0.00.269.003 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.019 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.020 I llm_load_print_meta: arch             = gemma
0.00.269.021 I llm_load_print_meta: vocab type       = SPM
0.00.269.022 I llm_load_print_meta: n_vocab          = 256000
0.00.269.023 I llm_load_print_meta: n_merges         = 0
0.00.269.023 I llm_load_print_meta: vocab_only       = 0
0.00.269.024 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.025 I llm_load_print_meta: n_embd           = 2048
0.00.269.025 I llm_load_print_meta: n_layer          = 18
0.00.269.036 I llm_load_print_meta: n_head           = 8
0.00.269.037 I llm_load_print_meta: n_head_kv        = 1
0.00.269.038 I llm_load_print_meta: n_rot            = 256
0.00.269.038 I llm_load_print_meta: n_swa            = 0
0.00.269.038 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.038 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.040 I llm_load_print_meta: n_gqa            = 8
0.00.269.041 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.042 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.043 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.045 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.045 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.046 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.047 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.048 I llm_load_print_meta: n_ff             = 16384
0.00.269.048 I llm_load_print_meta: n_expert         = 0
0.00.269.048 I llm_load_print_meta: n_expert_used    = 0
0.00.269.048 I llm_load_print_meta: causal attn      = 1
0.00.269.049 I llm_load_print_meta: pooling type     = 0
0.00.269.049 I llm_load_print_meta: rope type        = 2
0.00.269.050 I llm_load_print_meta: rope scaling     = linear
0.00.269.051 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.051 I llm_load_print_meta: freq_scale_train = 1
0.00.269.052 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.052 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.052 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.053 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.053 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.054 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.054 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.054 I llm_load_print_meta: model type       = 2B
0.00.269.055 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.056 I llm_load_print_meta: model params     = 2.51 B
0.00.269.056 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.057 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.058 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.058 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.058 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.059 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.059 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.060 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.060 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.061 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.061 I llm_load_print_meta: max token length = 93
0.00.325.849 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.922 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.928 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.929 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.929 I llama_new_context_with_model: n_batch       = 2048
0.00.330.930 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.930 I llama_new_context_with_model: flash_attn    = 0
0.00.330.933 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.934 I llama_new_context_with_model: freq_scale    = 1
0.00.330.935 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.907 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.922 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.014 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.264 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.270 I llama_new_context_with_model: graph nodes  = 601
0.00.347.271 I llama_new_context_with_model: graph splits = 1
0.00.347.273 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.335 I main: llama threadpool init, n_threads = 4
0.00.422.351 I 
0.00.422.427 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.431 I 
0.00.422.471 I sampler seed: 1099827164
0.00.422.482 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.497 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.497 I 
 strick a magical creature, but she did not know where to take it.

The creature spoke, guiding her through the forest, leading her to a hidden grove

0.01.980.238 I llama_perf_sampler_print:    sampling time =       5.77 ms /    33 runs   (    0.17 ms per token,  5723.20 tokens per second)
0.01.980.241 I llama_perf_context_print:        load time =     421.53 ms
0.01.980.242 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.980.244 I llama_perf_context_print:        eval time =    1538.33 ms /    32 runs   (   48.07 ms per token,    20.80 tokens per second)
0.01.980.245 I llama_perf_context_print:       total time =    1557.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.153s
user	10m23.909s
sys	0m6.897s
