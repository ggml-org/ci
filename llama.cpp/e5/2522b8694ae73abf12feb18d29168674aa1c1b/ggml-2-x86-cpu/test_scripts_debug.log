+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.328 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.339 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.426 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.438 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.440 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.445 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.448 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.450 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.452 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.461 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.470 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.476 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.477 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.478 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.367 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.762 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.679 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.680 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.681 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.683 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.684 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.686 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.690 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.692 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.694 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.695 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.697 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.706 I llama_model_loader: - type  f32:   37 tensors
0.00.348.708 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.124 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.627.549 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.628.502 I llm_load_vocab: special tokens cache size = 5
0.00.818.713 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.818.787 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.818.788 I llm_load_print_meta: arch             = gemma
0.00.818.789 I llm_load_print_meta: vocab type       = SPM
0.00.818.790 I llm_load_print_meta: n_vocab          = 256000
0.00.818.792 I llm_load_print_meta: n_merges         = 0
0.00.818.793 I llm_load_print_meta: vocab_only       = 0
0.00.818.793 I llm_load_print_meta: n_ctx_train      = 8192
0.00.818.794 I llm_load_print_meta: n_embd           = 2048
0.00.818.794 I llm_load_print_meta: n_layer          = 18
0.00.818.859 I llm_load_print_meta: n_head           = 8
0.00.818.867 I llm_load_print_meta: n_head_kv        = 1
0.00.818.868 I llm_load_print_meta: n_rot            = 256
0.00.818.868 I llm_load_print_meta: n_swa            = 0
0.00.818.869 I llm_load_print_meta: n_embd_head_k    = 256
0.00.818.869 I llm_load_print_meta: n_embd_head_v    = 256
0.00.818.874 I llm_load_print_meta: n_gqa            = 8
0.00.818.880 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.818.885 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.818.887 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.818.888 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.818.889 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.818.889 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.818.898 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.818.903 I llm_load_print_meta: n_ff             = 16384
0.00.818.907 I llm_load_print_meta: n_expert         = 0
0.00.818.907 I llm_load_print_meta: n_expert_used    = 0
0.00.818.907 I llm_load_print_meta: causal attn      = 1
0.00.818.908 I llm_load_print_meta: pooling type     = 0
0.00.818.908 I llm_load_print_meta: rope type        = 2
0.00.818.909 I llm_load_print_meta: rope scaling     = linear
0.00.818.910 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.818.911 I llm_load_print_meta: freq_scale_train = 1
0.00.818.911 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.818.911 I llm_load_print_meta: rope_finetuned   = unknown
0.00.818.912 I llm_load_print_meta: ssm_d_conv       = 0
0.00.818.912 I llm_load_print_meta: ssm_d_inner      = 0
0.00.818.912 I llm_load_print_meta: ssm_d_state      = 0
0.00.818.913 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.818.913 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.818.913 I llm_load_print_meta: model type       = 2B
0.00.818.914 I llm_load_print_meta: model ftype      = Q8_0
0.00.818.915 I llm_load_print_meta: model params     = 2.51 B
0.00.818.916 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.818.928 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.818.929 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.818.929 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.818.930 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.818.932 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.818.932 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.818.933 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.818.940 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.818.941 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.818.941 I llm_load_print_meta: max token length = 93
0.00.921.953 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.921.962 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.921.963 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.921.964 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.921.964 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.921.965 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.927.880 I llama_new_context_with_model: n_seq_max     = 1
0.00.927.888 I llama_new_context_with_model: n_ctx         = 4096
0.00.927.888 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.927.888 I llama_new_context_with_model: n_batch       = 2048
0.00.927.889 I llama_new_context_with_model: n_ubatch      = 512
0.00.927.889 I llama_new_context_with_model: flash_attn    = 0
0.00.927.891 I llama_new_context_with_model: freq_base     = 10000.0
0.00.927.892 I llama_new_context_with_model: freq_scale    = 1
0.00.927.893 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.942.881 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.942.924 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.047 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.945.725 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.945.729 I llama_new_context_with_model: graph nodes  = 601
0.00.945.730 I llama_new_context_with_model: graph splits = 1
0.00.945.751 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.558.284 I main: llama threadpool init, n_threads = 4
0.01.558.304 I 
0.01.558.425 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.558.429 I 
0.01.558.668 I sampler seed: 4081033277
0.01.558.682 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.558.694 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.558.694 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.558.694 I 
 increasities, and other forms of misconduct.

## Addressing Misconduct and Maintaining Professional Standards

**1. Recognizing Misconduct:**

* Observe employee behavior closely

0.15.149.067 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.32 tokens per second)
0.15.149.072 I llama_perf_context_print:        load time =    1557.33 ms
0.15.149.074 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.149.076 I llama_perf_context_print:        eval time =   13501.67 ms /    32 runs   (  421.93 ms per token,     2.37 tokens per second)
0.15.149.077 I llama_perf_context_print:       total time =   13590.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.023.413 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.505 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.518 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.520 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.525 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.527 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.529 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.531 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.533 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.543 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.544 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.545 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.547 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.548 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.230.618 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.562 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.518 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.527 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.528 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.529 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.531 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.532 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.534 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.538 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.539 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.541 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.542 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.354.544 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.552 I llama_model_loader: - type  f32:   37 tensors
0.00.354.554 I llama_model_loader: - type q8_0:  127 tensors
0.00.568.177 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.631.412 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.632.308 I llm_load_vocab: special tokens cache size = 5
0.00.823.510 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.823.581 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.823.582 I llm_load_print_meta: arch             = gemma
0.00.823.583 I llm_load_print_meta: vocab type       = SPM
0.00.823.584 I llm_load_print_meta: n_vocab          = 256000
0.00.823.586 I llm_load_print_meta: n_merges         = 0
0.00.823.587 I llm_load_print_meta: vocab_only       = 0
0.00.823.587 I llm_load_print_meta: n_ctx_train      = 8192
0.00.823.588 I llm_load_print_meta: n_embd           = 2048
0.00.823.588 I llm_load_print_meta: n_layer          = 18
0.00.823.653 I llm_load_print_meta: n_head           = 8
0.00.823.661 I llm_load_print_meta: n_head_kv        = 1
0.00.823.663 I llm_load_print_meta: n_rot            = 256
0.00.823.663 I llm_load_print_meta: n_swa            = 0
0.00.823.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.823.664 I llm_load_print_meta: n_embd_head_v    = 256
0.00.823.669 I llm_load_print_meta: n_gqa            = 8
0.00.823.674 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.823.679 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.823.681 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.823.683 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.823.683 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.823.684 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.823.684 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.823.689 I llm_load_print_meta: n_ff             = 16384
0.00.823.690 I llm_load_print_meta: n_expert         = 0
0.00.823.690 I llm_load_print_meta: n_expert_used    = 0
0.00.823.691 I llm_load_print_meta: causal attn      = 1
0.00.823.691 I llm_load_print_meta: pooling type     = 0
0.00.823.692 I llm_load_print_meta: rope type        = 2
0.00.823.693 I llm_load_print_meta: rope scaling     = linear
0.00.823.695 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.823.696 I llm_load_print_meta: freq_scale_train = 1
0.00.823.696 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.823.696 I llm_load_print_meta: rope_finetuned   = unknown
0.00.823.697 I llm_load_print_meta: ssm_d_conv       = 0
0.00.823.707 I llm_load_print_meta: ssm_d_inner      = 0
0.00.823.708 I llm_load_print_meta: ssm_d_state      = 0
0.00.823.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.823.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.823.710 I llm_load_print_meta: model type       = 2B
0.00.823.722 I llm_load_print_meta: model ftype      = Q8_0
0.00.823.723 I llm_load_print_meta: model params     = 2.51 B
0.00.823.724 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.823.725 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.823.726 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.823.726 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.823.727 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.823.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.823.728 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.823.729 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.823.735 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.823.743 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.823.744 I llm_load_print_meta: max token length = 93
0.00.921.615 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.927.626 I llama_new_context_with_model: n_seq_max     = 1
0.00.927.633 I llama_new_context_with_model: n_ctx         = 4096
0.00.927.634 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.927.634 I llama_new_context_with_model: n_batch       = 2048
0.00.927.635 I llama_new_context_with_model: n_ubatch      = 512
0.00.927.636 I llama_new_context_with_model: flash_attn    = 0
0.00.927.640 I llama_new_context_with_model: freq_base     = 10000.0
0.00.927.641 I llama_new_context_with_model: freq_scale    = 1
0.00.927.642 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.943.484 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.529 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.656 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.312 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.317 I llama_new_context_with_model: graph nodes  = 601
0.00.946.317 I llama_new_context_with_model: graph splits = 1
0.00.946.340 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.559.050 I main: llama threadpool init, n_threads = 4
0.01.559.066 I 
0.01.559.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.559.190 I 
0.01.559.426 I sampler seed: 3893248764
0.01.559.440 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.559.451 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.559.453 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.559.453 I 
 increadibly

I am unable to generate a response due to the provided context containing sexually suggestive or inappropriate content. My purpose is to assist with tasks that comply with

0.15.269.893 I llama_perf_sampler_print:    sampling time =      50.19 ms /    33 runs   (    1.52 ms per token,   657.45 tokens per second)
0.15.269.897 I llama_perf_context_print:        load time =    1558.08 ms
0.15.269.899 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.269.901 I llama_perf_context_print:        eval time =   13618.00 ms /    32 runs   (  425.56 ms per token,     2.35 tokens per second)
0.15.269.902 I llama_perf_context_print:       total time =   13710.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.000.881 I main: load the model and apply lora adapter, if any
0.00.023.347 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.359 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.451 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.463 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.465 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.471 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.474 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.475 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.476 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.478 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.479 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.490 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.491 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.492 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.494 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.495 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.237.285 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.025 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.045 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.055 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.056 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.057 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.059 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.060 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.062 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.065 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.067 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.068 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.069 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.361.071 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.080 I llama_model_loader: - type  f32:   37 tensors
0.00.361.082 I llama_model_loader: - type q8_0:  127 tensors
0.00.576.388 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.868 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.821 I llm_load_vocab: special tokens cache size = 5
0.00.828.837 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.828.912 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.828.913 I llm_load_print_meta: arch             = gemma
0.00.828.914 I llm_load_print_meta: vocab type       = SPM
0.00.828.915 I llm_load_print_meta: n_vocab          = 256000
0.00.828.917 I llm_load_print_meta: n_merges         = 0
0.00.828.918 I llm_load_print_meta: vocab_only       = 0
0.00.828.918 I llm_load_print_meta: n_ctx_train      = 8192
0.00.828.919 I llm_load_print_meta: n_embd           = 2048
0.00.828.919 I llm_load_print_meta: n_layer          = 18
0.00.828.988 I llm_load_print_meta: n_head           = 8
0.00.828.996 I llm_load_print_meta: n_head_kv        = 1
0.00.828.997 I llm_load_print_meta: n_rot            = 256
0.00.828.997 I llm_load_print_meta: n_swa            = 0
0.00.828.998 I llm_load_print_meta: n_embd_head_k    = 256
0.00.828.998 I llm_load_print_meta: n_embd_head_v    = 256
0.00.829.004 I llm_load_print_meta: n_gqa            = 8
0.00.829.008 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.829.014 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.829.015 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.829.017 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.829.018 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.829.018 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.829.019 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.829.024 I llm_load_print_meta: n_ff             = 16384
0.00.829.024 I llm_load_print_meta: n_expert         = 0
0.00.829.025 I llm_load_print_meta: n_expert_used    = 0
0.00.829.025 I llm_load_print_meta: causal attn      = 1
0.00.829.026 I llm_load_print_meta: pooling type     = 0
0.00.829.026 I llm_load_print_meta: rope type        = 2
0.00.829.026 I llm_load_print_meta: rope scaling     = linear
0.00.829.028 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.829.030 I llm_load_print_meta: freq_scale_train = 1
0.00.829.030 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.829.031 I llm_load_print_meta: rope_finetuned   = unknown
0.00.829.040 I llm_load_print_meta: ssm_d_conv       = 0
0.00.829.041 I llm_load_print_meta: ssm_d_inner      = 0
0.00.829.042 I llm_load_print_meta: ssm_d_state      = 0
0.00.829.042 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.829.043 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.829.044 I llm_load_print_meta: model type       = 2B
0.00.829.045 I llm_load_print_meta: model ftype      = Q8_0
0.00.829.046 I llm_load_print_meta: model params     = 2.51 B
0.00.829.048 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.829.048 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.829.049 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.829.050 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.829.050 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.829.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.829.051 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.829.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.829.058 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.829.059 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.829.059 I llm_load_print_meta: max token length = 93
0.00.909.289 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.909.297 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.909.298 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.909.299 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.909.300 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.909.301 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.915.116 I llama_new_context_with_model: n_seq_max     = 1
0.00.915.123 I llama_new_context_with_model: n_ctx         = 4096
0.00.915.124 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.915.124 I llama_new_context_with_model: n_batch       = 2048
0.00.915.124 I llama_new_context_with_model: n_ubatch      = 512
0.00.915.125 I llama_new_context_with_model: flash_attn    = 0
0.00.915.127 I llama_new_context_with_model: freq_base     = 10000.0
0.00.915.128 I llama_new_context_with_model: freq_scale    = 1
0.00.915.129 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.929.855 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.929.896 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.930.010 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.932.830 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.932.834 I llama_new_context_with_model: graph nodes  = 601
0.00.932.834 I llama_new_context_with_model: graph splits = 1
0.00.932.858 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.541.446 I main: llama threadpool init, n_threads = 4
0.01.541.463 I 
0.01.541.586 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.541.590 I 
0.01.541.827 I sampler seed: 3291276201
0.01.541.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.541.851 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.541.855 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.541.855 I 
 increably. [end of text]


0.03.243.988 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.13 tokens per second)
0.03.243.991 I llama_perf_context_print:        load time =    1540.47 ms
0.03.243.992 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.243.993 I llama_perf_context_print:        eval time =    1689.64 ms /     4 runs   (  422.41 ms per token,     2.37 tokens per second)
0.03.244.008 I llama_perf_context_print:       total time =    1702.55 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.851 I main: load the model and apply lora adapter, if any
0.00.023.177 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.188 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.275 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.287 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.290 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.296 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.300 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.301 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.303 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.304 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.305 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.314 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.315 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.317 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.328 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.394 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.335.353 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.291 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.301 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.303 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.304 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.306 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.310 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.328 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.330 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.332 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.358.342 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.351 I llama_model_loader: - type  f32:   37 tensors
0.00.358.353 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.724 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.669.846 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.670.797 I llm_load_vocab: special tokens cache size = 5
0.00.858.777 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.852 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.854 I llm_load_print_meta: arch             = gemma
0.00.858.854 I llm_load_print_meta: vocab type       = SPM
0.00.858.855 I llm_load_print_meta: n_vocab          = 256000
0.00.858.857 I llm_load_print_meta: n_merges         = 0
0.00.858.858 I llm_load_print_meta: vocab_only       = 0
0.00.858.858 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.859 I llm_load_print_meta: n_embd           = 2048
0.00.858.859 I llm_load_print_meta: n_layer          = 18
0.00.858.924 I llm_load_print_meta: n_head           = 8
0.00.858.931 I llm_load_print_meta: n_head_kv        = 1
0.00.858.932 I llm_load_print_meta: n_rot            = 256
0.00.858.932 I llm_load_print_meta: n_swa            = 0
0.00.858.932 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.933 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.938 I llm_load_print_meta: n_gqa            = 8
0.00.858.948 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.953 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.955 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.957 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.957 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.958 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.959 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.965 I llm_load_print_meta: n_ff             = 16384
0.00.858.966 I llm_load_print_meta: n_expert         = 0
0.00.858.966 I llm_load_print_meta: n_expert_used    = 0
0.00.858.966 I llm_load_print_meta: causal attn      = 1
0.00.858.977 I llm_load_print_meta: pooling type     = 0
0.00.858.981 I llm_load_print_meta: rope type        = 2
0.00.858.981 I llm_load_print_meta: rope scaling     = linear
0.00.858.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.984 I llm_load_print_meta: freq_scale_train = 1
0.00.858.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.985 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.986 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.986 I llm_load_print_meta: model type       = 2B
0.00.858.987 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.988 I llm_load_print_meta: model params     = 2.51 B
0.00.858.989 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.989 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.990 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.991 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.992 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.859.001 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.859.002 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.859.009 I llm_load_print_meta: max token length = 93
0.00.931.791 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.931.814 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.937.792 I llama_new_context_with_model: n_seq_max     = 1
0.00.937.800 I llama_new_context_with_model: n_ctx         = 4096
0.00.937.801 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.937.801 I llama_new_context_with_model: n_batch       = 2048
0.00.937.801 I llama_new_context_with_model: n_ubatch      = 512
0.00.937.802 I llama_new_context_with_model: flash_attn    = 0
0.00.937.804 I llama_new_context_with_model: freq_base     = 10000.0
0.00.937.805 I llama_new_context_with_model: freq_scale    = 1
0.00.937.805 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.952.977 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.953.016 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.953.141 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.955.705 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.955.709 I llama_new_context_with_model: graph nodes  = 601
0.00.955.709 I llama_new_context_with_model: graph splits = 1
0.00.955.732 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.564.141 I main: llama threadpool init, n_threads = 4
0.01.564.156 I 
0.01.564.276 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.564.281 I 
0.01.564.519 I sampler seed: 3324821933
0.01.564.533 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.564.546 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.564.546 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.564.547 I 
 increasels, a large and diverse group of bacteria, are ubiquitously present in various environments.

**a) Describe the significance of these bacteria in the environment

0.15.132.646 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.16 tokens per second)
0.15.132.651 I llama_perf_context_print:        load time =    1563.19 ms
0.15.132.653 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.132.654 I llama_perf_context_print:        eval time =   13479.93 ms /    32 runs   (  421.25 ms per token,     2.37 tokens per second)
0.15.132.656 I llama_perf_context_print:       total time =   13568.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.431s
user	3m3.874s
sys	0m9.378s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4290 (e52522b8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185890.57 ms
main:    total time = 185890.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.000.821 I main: load the model and apply lora adapter, if any
0.00.023.138 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.148 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.238 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.250 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.252 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.258 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.260 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.261 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.262 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.265 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.273 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.275 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.277 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.278 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.079 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.218 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.222 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.232 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.233 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.235 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.236 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.237 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.239 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.243 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.244 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.246 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.247 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.348.248 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.258 I llama_model_loader: - type  f32:   37 tensors
0.00.348.260 I llama_model_loader: - type q4_K:  108 tensors
0.00.348.261 I llama_model_loader: - type q6_K:   19 tensors
0.00.576.248 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.137 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.020 I llm_load_vocab: special tokens cache size = 5
0.00.832.957 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.833.024 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.833.025 I llm_load_print_meta: arch             = gemma
0.00.833.026 I llm_load_print_meta: vocab type       = SPM
0.00.833.027 I llm_load_print_meta: n_vocab          = 256000
0.00.833.029 I llm_load_print_meta: n_merges         = 0
0.00.833.029 I llm_load_print_meta: vocab_only       = 0
0.00.833.030 I llm_load_print_meta: n_ctx_train      = 8192
0.00.833.030 I llm_load_print_meta: n_embd           = 2048
0.00.833.030 I llm_load_print_meta: n_layer          = 18
0.00.833.097 I llm_load_print_meta: n_head           = 8
0.00.833.104 I llm_load_print_meta: n_head_kv        = 1
0.00.833.105 I llm_load_print_meta: n_rot            = 256
0.00.833.105 I llm_load_print_meta: n_swa            = 0
0.00.833.105 I llm_load_print_meta: n_embd_head_k    = 256
0.00.833.106 I llm_load_print_meta: n_embd_head_v    = 256
0.00.833.111 I llm_load_print_meta: n_gqa            = 8
0.00.833.115 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.833.120 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.833.121 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.833.123 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.833.124 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.833.124 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.833.124 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.833.129 I llm_load_print_meta: n_ff             = 16384
0.00.833.130 I llm_load_print_meta: n_expert         = 0
0.00.833.132 I llm_load_print_meta: n_expert_used    = 0
0.00.833.132 I llm_load_print_meta: causal attn      = 1
0.00.833.135 I llm_load_print_meta: pooling type     = 0
0.00.833.136 I llm_load_print_meta: rope type        = 2
0.00.833.146 I llm_load_print_meta: rope scaling     = linear
0.00.833.148 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.833.149 I llm_load_print_meta: freq_scale_train = 1
0.00.833.149 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.833.150 I llm_load_print_meta: rope_finetuned   = unknown
0.00.833.150 I llm_load_print_meta: ssm_d_conv       = 0
0.00.833.163 I llm_load_print_meta: ssm_d_inner      = 0
0.00.833.164 I llm_load_print_meta: ssm_d_state      = 0
0.00.833.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.833.165 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.833.166 I llm_load_print_meta: model type       = 2B
0.00.833.175 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.833.177 I llm_load_print_meta: model params     = 2.51 B
0.00.833.184 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.833.185 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.833.186 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.833.187 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.187 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.187 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.188 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.189 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.195 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.196 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.197 I llm_load_print_meta: max token length = 93
0.00.896.444 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.896.453 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.896.454 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.896.455 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.896.456 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.896.456 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.902.186 I llama_new_context_with_model: n_seq_max     = 1
0.00.902.192 I llama_new_context_with_model: n_ctx         = 4096
0.00.902.192 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.902.193 I llama_new_context_with_model: n_batch       = 2048
0.00.902.193 I llama_new_context_with_model: n_ubatch      = 512
0.00.902.194 I llama_new_context_with_model: flash_attn    = 0
0.00.902.196 I llama_new_context_with_model: freq_base     = 10000.0
0.00.902.196 I llama_new_context_with_model: freq_scale    = 1
0.00.902.197 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.916.759 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.916.799 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.916.912 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.919.599 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.919.603 I llama_new_context_with_model: graph nodes  = 601
0.00.919.603 I llama_new_context_with_model: graph splits = 1
0.00.919.625 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.502.075 I main: llama threadpool init, n_threads = 4
0.01.502.091 I 
0.01.502.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.502.215 I 
0.01.502.459 I sampler seed: 3027025439
0.01.502.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.502.482 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.502.485 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.502.486 I 
 seconally. [end of text]


0.02.891.254 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.41 tokens per second)
0.02.891.256 I llama_perf_context_print:        load time =    1501.16 ms
0.02.891.258 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.891.274 I llama_perf_context_print:        eval time =    1376.28 ms /     4 runs   (  344.07 ms per token,     2.91 tokens per second)
0.02.891.276 I llama_perf_context_print:       total time =    1389.19 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4290 (e52522b8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185842.55 ms
main:    total time = 185842.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4290 (e52522b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.000.839 I main: load the model and apply lora adapter, if any
0.00.023.116 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.214 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.227 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.229 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.235 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.239 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.240 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.241 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.243 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.244 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.253 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.254 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.255 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.257 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.258 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.670 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.638 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.520 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.527 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.529 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.530 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.531 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.534 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.535 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.539 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.540 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.549 I llama_model_loader: - type  f32:   37 tensors
0.00.352.551 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.552 I llama_model_loader: - type q6_K:   19 tensors
0.00.563.815 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.621.940 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.622.912 I llm_load_vocab: special tokens cache size = 5
0.00.830.452 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.522 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.526 I llm_load_print_meta: arch             = gemma
0.00.830.527 I llm_load_print_meta: vocab type       = SPM
0.00.830.528 I llm_load_print_meta: n_vocab          = 256000
0.00.830.530 I llm_load_print_meta: n_merges         = 0
0.00.830.531 I llm_load_print_meta: vocab_only       = 0
0.00.830.531 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.532 I llm_load_print_meta: n_embd           = 2048
0.00.830.533 I llm_load_print_meta: n_layer          = 18
0.00.830.598 I llm_load_print_meta: n_head           = 8
0.00.830.608 I llm_load_print_meta: n_head_kv        = 1
0.00.830.610 I llm_load_print_meta: n_rot            = 256
0.00.830.610 I llm_load_print_meta: n_swa            = 0
0.00.830.611 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.611 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.616 I llm_load_print_meta: n_gqa            = 8
0.00.830.622 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.627 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.628 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.630 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.631 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.632 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.632 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.637 I llm_load_print_meta: n_ff             = 16384
0.00.830.645 I llm_load_print_meta: n_expert         = 0
0.00.830.646 I llm_load_print_meta: n_expert_used    = 0
0.00.830.646 I llm_load_print_meta: causal attn      = 1
0.00.830.647 I llm_load_print_meta: pooling type     = 0
0.00.830.647 I llm_load_print_meta: rope type        = 2
0.00.830.647 I llm_load_print_meta: rope scaling     = linear
0.00.830.649 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.650 I llm_load_print_meta: freq_scale_train = 1
0.00.830.650 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.650 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.652 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.652 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.652 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.653 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.653 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.654 I llm_load_print_meta: model type       = 2B
0.00.830.655 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.830.656 I llm_load_print_meta: model params     = 2.51 B
0.00.830.656 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.830.659 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.671 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.700 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.702 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.702 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.703 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.704 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.710 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.712 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.712 I llm_load_print_meta: max token length = 93
0.00.890.120 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.896.049 I llama_new_context_with_model: n_seq_max     = 1
0.00.896.055 I llama_new_context_with_model: n_ctx         = 4096
0.00.896.056 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.896.056 I llama_new_context_with_model: n_batch       = 2048
0.00.896.057 I llama_new_context_with_model: n_ubatch      = 512
0.00.896.057 I llama_new_context_with_model: flash_attn    = 0
0.00.896.059 I llama_new_context_with_model: freq_base     = 10000.0
0.00.896.060 I llama_new_context_with_model: freq_scale    = 1
0.00.896.061 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.911.913 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.911.957 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.912.079 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.914.646 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.914.650 I llama_new_context_with_model: graph nodes  = 601
0.00.914.651 I llama_new_context_with_model: graph splits = 1
0.00.914.675 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.494.805 I main: llama threadpool init, n_threads = 4
0.01.494.821 I 
0.01.494.946 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.494.950 I 
0.01.495.187 I sampler seed: 874101757
0.01.495.201 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.495.211 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.495.213 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.495.213 I 
 fufilling as a means of engaging in creative expression.

## Using Self-Expression as a Means of Creative Expression

Self-expression is a powerful tool for

0.12.628.001 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.65 tokens per second)
0.12.628.004 I llama_perf_context_print:        load time =    1493.87 ms
0.12.628.006 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.628.008 I llama_perf_context_print:        eval time =   11045.17 ms /    32 runs   (  345.16 ms per token,     2.90 tokens per second)
0.12.628.010 I llama_perf_context_print:       total time =   11133.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m30.119s
user	46m4.810s
sys	0m6.355s
