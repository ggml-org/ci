+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 3913 (e5f74fe8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.025.135 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.370 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.466 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.480 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.484 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.486 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.487 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.488 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.489 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.490 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.499 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.502 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.503 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.504 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.626 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.224 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.493 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.502 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.503 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.504 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.505 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.507 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.520 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.527 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.528 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.529 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.530 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.531 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.540 I llama_model_loader: - type  f32:   37 tensors
0.00.270.545 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.082 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.592 I llm_load_vocab: special tokens cache size = 5
0.00.619.896 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.971 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.972 I llm_load_print_meta: arch             = gemma
0.00.619.973 I llm_load_print_meta: vocab type       = SPM
0.00.619.973 I llm_load_print_meta: n_vocab          = 256000
0.00.619.976 I llm_load_print_meta: n_merges         = 0
0.00.619.976 I llm_load_print_meta: vocab_only       = 0
0.00.619.977 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.977 I llm_load_print_meta: n_embd           = 2048
0.00.619.978 I llm_load_print_meta: n_layer          = 18
0.00.620.041 I llm_load_print_meta: n_head           = 8
0.00.620.049 I llm_load_print_meta: n_head_kv        = 1
0.00.620.050 I llm_load_print_meta: n_rot            = 256
0.00.620.051 I llm_load_print_meta: n_swa            = 0
0.00.620.051 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.056 I llm_load_print_meta: n_gqa            = 8
0.00.620.061 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.066 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.067 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.069 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.069 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.070 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.075 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.080 I llm_load_print_meta: n_ff             = 16384
0.00.620.081 I llm_load_print_meta: n_expert         = 0
0.00.620.081 I llm_load_print_meta: n_expert_used    = 0
0.00.620.081 I llm_load_print_meta: causal attn      = 1
0.00.620.082 I llm_load_print_meta: pooling type     = 0
0.00.620.082 I llm_load_print_meta: rope type        = 2
0.00.620.083 I llm_load_print_meta: rope scaling     = linear
0.00.620.085 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.086 I llm_load_print_meta: freq_scale_train = 1
0.00.620.086 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.086 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.087 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.088 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.088 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.089 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.090 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.091 I llm_load_print_meta: model type       = 2B
0.00.620.092 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.092 I llm_load_print_meta: model params     = 2.51 B
0.00.620.094 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.094 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.095 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.096 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.096 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.097 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.098 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.104 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.105 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.106 I llm_load_print_meta: max token length = 93
0.00.620.275 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.721.949 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.721.956 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.721.957 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.721.958 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.721.958 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.721.959 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.727.687 I llama_new_context_with_model: n_ctx      = 8192
0.00.727.695 I llama_new_context_with_model: n_batch    = 2048
0.00.727.696 I llama_new_context_with_model: n_ubatch   = 512
0.00.727.696 I llama_new_context_with_model: flash_attn = 0
0.00.727.699 I llama_new_context_with_model: freq_base  = 10000.0
0.00.727.700 I llama_new_context_with_model: freq_scale = 1
0.00.756.544 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.756.587 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.756.709 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.758.153 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.758.158 I llama_new_context_with_model: graph nodes  = 601
0.00.758.158 I llama_new_context_with_model: graph splits = 1
0.00.758.174 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.373.040 I main: llama threadpool init, n_threads = 4
0.01.373.051 I 
0.01.373.155 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.373.159 I 
0.01.373.335 I sampler seed: 437634785
0.01.373.346 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.373.352 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.373.353 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.373.354 I 
 increasities with the audacity of a seasoned gambler.

This passage is describing:
a) A person's personality
b) A specific situation
c

0.14.881.934 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.13 tokens per second)
0.14.881.937 I llama_perf_context_print:        load time =    1370.12 ms
0.14.881.938 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.881.939 I llama_perf_context_print:        eval time =   13426.99 ms /    32 runs   (  419.59 ms per token,     2.38 tokens per second)
0.14.881.963 I llama_perf_context_print:       total time =   13508.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3913 (e5f74fe8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.782 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.876 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.890 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.891 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.895 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.896 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.897 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.898 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.899 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.900 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.909 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.910 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.911 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.096 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.199 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.440 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.448 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.449 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.450 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.451 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.453 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.454 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.457 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.458 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.460 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.461 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.462 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.470 I llama_model_loader: - type  f32:   37 tensors
0.00.269.474 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.258 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.920 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.913 I llm_load_vocab: special tokens cache size = 5
0.00.586.960 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.032 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.036 I llm_load_print_meta: arch             = gemma
0.00.587.037 I llm_load_print_meta: vocab type       = SPM
0.00.587.038 I llm_load_print_meta: n_vocab          = 256000
0.00.587.040 I llm_load_print_meta: n_merges         = 0
0.00.587.040 I llm_load_print_meta: vocab_only       = 0
0.00.587.041 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.041 I llm_load_print_meta: n_embd           = 2048
0.00.587.041 I llm_load_print_meta: n_layer          = 18
0.00.587.106 I llm_load_print_meta: n_head           = 8
0.00.587.116 I llm_load_print_meta: n_head_kv        = 1
0.00.587.117 I llm_load_print_meta: n_rot            = 256
0.00.587.117 I llm_load_print_meta: n_swa            = 0
0.00.587.118 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.118 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.123 I llm_load_print_meta: n_gqa            = 8
0.00.587.128 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.133 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.134 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.135 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.136 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.136 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.136 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.141 I llm_load_print_meta: n_ff             = 16384
0.00.587.142 I llm_load_print_meta: n_expert         = 0
0.00.587.143 I llm_load_print_meta: n_expert_used    = 0
0.00.587.143 I llm_load_print_meta: causal attn      = 1
0.00.587.144 I llm_load_print_meta: pooling type     = 0
0.00.587.144 I llm_load_print_meta: rope type        = 2
0.00.587.144 I llm_load_print_meta: rope scaling     = linear
0.00.587.146 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.146 I llm_load_print_meta: freq_scale_train = 1
0.00.587.147 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.147 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.148 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.148 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.149 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.150 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.150 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.151 I llm_load_print_meta: model type       = 2B
0.00.587.152 I llm_load_print_meta: model ftype      = Q8_0
0.00.587.152 I llm_load_print_meta: model params     = 2.51 B
0.00.587.153 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.587.154 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.155 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.155 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.157 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.157 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.158 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.158 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.166 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.167 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.168 I llm_load_print_meta: max token length = 93
0.00.587.330 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.682.836 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.688.458 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.465 I llama_new_context_with_model: n_batch    = 2048
0.00.688.465 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.466 I llama_new_context_with_model: flash_attn = 0
0.00.688.468 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.469 I llama_new_context_with_model: freq_scale = 1
0.00.717.607 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.652 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.767 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.719.153 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.719.158 I llama_new_context_with_model: graph nodes  = 601
0.00.719.158 I llama_new_context_with_model: graph splits = 1
0.00.719.174 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.186 I main: llama threadpool init, n_threads = 4
0.01.339.196 I 
0.01.339.303 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.306 I 
0.01.339.472 I sampler seed: 2115179880
0.01.339.482 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.488 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.339.489 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.489 I 
 maneuvring?

I am not sure what you mean by "annivring". Could you please explain what you are trying to ask? [end of text]


0.14.169.636 I llama_perf_sampler_print:    sampling time =      46.10 ms /    31 runs   (    1.49 ms per token,   672.51 tokens per second)
0.14.169.639 I llama_perf_context_print:        load time =    1336.30 ms
0.14.169.653 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.169.655 I llama_perf_context_print:        eval time =   12753.82 ms /    30 runs   (  425.13 ms per token,     2.35 tokens per second)
0.14.169.656 I llama_perf_context_print:       total time =   12830.46 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 3913 (e5f74fe8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.024.629 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.840 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.933 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.944 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.945 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.953 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.955 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.959 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.961 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.969 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.975 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.976 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.978 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.979 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.808 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.100 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.354 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.365 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.366 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.367 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.368 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.370 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.371 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.375 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.376 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.377 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.378 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.379 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.388 I llama_model_loader: - type  f32:   37 tensors
0.00.269.391 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.093 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.321 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.355 I llm_load_vocab: special tokens cache size = 5
0.00.608.522 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.600 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.601 I llm_load_print_meta: arch             = gemma
0.00.608.602 I llm_load_print_meta: vocab type       = SPM
0.00.608.603 I llm_load_print_meta: n_vocab          = 256000
0.00.608.605 I llm_load_print_meta: n_merges         = 0
0.00.608.606 I llm_load_print_meta: vocab_only       = 0
0.00.608.606 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.607 I llm_load_print_meta: n_embd           = 2048
0.00.608.607 I llm_load_print_meta: n_layer          = 18
0.00.608.671 I llm_load_print_meta: n_head           = 8
0.00.608.678 I llm_load_print_meta: n_head_kv        = 1
0.00.608.678 I llm_load_print_meta: n_rot            = 256
0.00.608.679 I llm_load_print_meta: n_swa            = 0
0.00.608.679 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.680 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.684 I llm_load_print_meta: n_gqa            = 8
0.00.608.689 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.694 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.695 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.696 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.696 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.697 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.697 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.702 I llm_load_print_meta: n_ff             = 16384
0.00.608.702 I llm_load_print_meta: n_expert         = 0
0.00.608.702 I llm_load_print_meta: n_expert_used    = 0
0.00.608.703 I llm_load_print_meta: causal attn      = 1
0.00.608.703 I llm_load_print_meta: pooling type     = 0
0.00.608.703 I llm_load_print_meta: rope type        = 2
0.00.608.704 I llm_load_print_meta: rope scaling     = linear
0.00.608.705 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.706 I llm_load_print_meta: freq_scale_train = 1
0.00.608.706 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.707 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.707 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.707 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.708 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.708 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.708 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.709 I llm_load_print_meta: model type       = 2B
0.00.608.709 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.710 I llm_load_print_meta: model params     = 2.51 B
0.00.608.711 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.711 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.712 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.713 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.713 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.715 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.730 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.731 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.737 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.739 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.739 I llm_load_print_meta: max token length = 93
0.00.608.912 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.686.801 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.686.812 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.686.813 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.686.813 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.686.814 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.686.815 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.692.592 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.600 I llama_new_context_with_model: n_batch    = 2048
0.00.692.600 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.601 I llama_new_context_with_model: flash_attn = 0
0.00.692.605 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.605 I llama_new_context_with_model: freq_scale = 1
0.00.721.801 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.845 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.314 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.320 I llama_new_context_with_model: graph nodes  = 601
0.00.723.320 I llama_new_context_with_model: graph splits = 1
0.00.723.335 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.572 I main: llama threadpool init, n_threads = 4
0.01.336.584 I 
0.01.336.702 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.707 I 
0.01.336.879 I sampler seed: 3471628098
0.01.336.891 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.898 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.336.899 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.899 I 
 increably, and with a joyous spirit.

Is there a synonym for "incredibly" in this context?

* Incredibly joyous
* Incredibly

0.14.947.654 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.27 tokens per second)
0.14.947.678 I llama_perf_context_print:        load time =    1333.66 ms
0.14.947.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.947.681 I llama_perf_context_print:        eval time =   13529.02 ms /    32 runs   (  422.78 ms per token,     2.37 tokens per second)
0.14.947.682 I llama_perf_context_print:       total time =   13611.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 3913 (e5f74fe8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.800 I main: load the model and apply lora adapter, if any
0.00.024.578 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.793 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.884 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.896 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.897 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.902 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.903 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.904 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.905 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.906 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.908 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.916 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.918 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.921 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.923 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.925 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.045 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.278 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.536 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.548 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.549 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.550 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.551 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.553 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.554 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.557 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.573 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.576 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.577 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.579 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.588 I llama_model_loader: - type  f32:   37 tensors
0.00.269.592 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.930 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.997 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.039 I llm_load_vocab: special tokens cache size = 5
0.00.603.904 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.979 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.981 I llm_load_print_meta: arch             = gemma
0.00.603.981 I llm_load_print_meta: vocab type       = SPM
0.00.603.982 I llm_load_print_meta: n_vocab          = 256000
0.00.603.984 I llm_load_print_meta: n_merges         = 0
0.00.603.985 I llm_load_print_meta: vocab_only       = 0
0.00.603.985 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.986 I llm_load_print_meta: n_embd           = 2048
0.00.603.986 I llm_load_print_meta: n_layer          = 18
0.00.604.048 I llm_load_print_meta: n_head           = 8
0.00.604.055 I llm_load_print_meta: n_head_kv        = 1
0.00.604.056 I llm_load_print_meta: n_rot            = 256
0.00.604.056 I llm_load_print_meta: n_swa            = 0
0.00.604.056 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.057 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.061 I llm_load_print_meta: n_gqa            = 8
0.00.604.066 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.071 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.072 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.073 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.074 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.074 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.074 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.079 I llm_load_print_meta: n_ff             = 16384
0.00.604.080 I llm_load_print_meta: n_expert         = 0
0.00.604.080 I llm_load_print_meta: n_expert_used    = 0
0.00.604.082 I llm_load_print_meta: causal attn      = 1
0.00.604.082 I llm_load_print_meta: pooling type     = 0
0.00.604.082 I llm_load_print_meta: rope type        = 2
0.00.604.083 I llm_load_print_meta: rope scaling     = linear
0.00.604.084 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.085 I llm_load_print_meta: freq_scale_train = 1
0.00.604.085 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.086 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.086 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.086 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.087 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.093 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.094 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.094 I llm_load_print_meta: model type       = 2B
0.00.604.095 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.096 I llm_load_print_meta: model params     = 2.51 B
0.00.604.096 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.097 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.097 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.098 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.098 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.111 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.112 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.113 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.121 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.123 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.123 I llm_load_print_meta: max token length = 93
0.00.604.310 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.675.865 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.675.876 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.681.715 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.720 I llama_new_context_with_model: n_batch    = 2048
0.00.681.721 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.722 I llama_new_context_with_model: flash_attn = 0
0.00.681.725 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.726 I llama_new_context_with_model: freq_scale = 1
0.00.710.630 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.710.672 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.710.801 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.161 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.166 I llama_new_context_with_model: graph nodes  = 601
0.00.712.166 I llama_new_context_with_model: graph splits = 1
0.00.712.182 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.325.254 I main: llama threadpool init, n_threads = 4
0.01.325.268 I 
0.01.325.388 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.392 I 
0.01.325.577 I sampler seed: 3715315679
0.01.325.589 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.596 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.325.597 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.597 I 
 increasities. [end of text]


0.03.026.562 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   796.94 tokens per second)
0.03.026.565 I llama_perf_context_print:        load time =    1322.36 ms
0.03.026.566 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.026.568 I llama_perf_context_print:        eval time =    1689.66 ms /     4 runs   (  422.41 ms per token,     2.37 tokens per second)
0.03.026.583 I llama_perf_context_print:       total time =    1701.32 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.673s
user	2m59.346s
sys	0m9.407s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3913 (e5f74fe8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198312.12 ms
main:    total time = 198312.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.705 I build: 3913 (e5f74fe8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.024.696 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.893 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.979 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.989 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.991 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.995 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.996 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.997 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.998 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.999 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.000 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.005 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.006 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.008 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.009 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.167 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.940 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.133 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.145 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.148 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.150 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.153 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.154 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.155 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.156 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.158 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.168 I llama_model_loader: - type  f32:   37 tensors
0.00.270.172 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.173 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.225 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.380 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.385 I llm_load_vocab: special tokens cache size = 5
0.00.591.290 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.362 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.363 I llm_load_print_meta: arch             = gemma
0.00.591.364 I llm_load_print_meta: vocab type       = SPM
0.00.591.364 I llm_load_print_meta: n_vocab          = 256000
0.00.591.367 I llm_load_print_meta: n_merges         = 0
0.00.591.367 I llm_load_print_meta: vocab_only       = 0
0.00.591.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.368 I llm_load_print_meta: n_embd           = 2048
0.00.591.368 I llm_load_print_meta: n_layer          = 18
0.00.591.431 I llm_load_print_meta: n_head           = 8
0.00.591.453 I llm_load_print_meta: n_head_kv        = 1
0.00.591.454 I llm_load_print_meta: n_rot            = 256
0.00.591.455 I llm_load_print_meta: n_swa            = 0
0.00.591.456 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.462 I llm_load_print_meta: n_gqa            = 8
0.00.591.467 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.479 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.480 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.481 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.481 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.486 I llm_load_print_meta: n_ff             = 16384
0.00.591.487 I llm_load_print_meta: n_expert         = 0
0.00.591.488 I llm_load_print_meta: n_expert_used    = 0
0.00.591.488 I llm_load_print_meta: causal attn      = 1
0.00.591.488 I llm_load_print_meta: pooling type     = 0
0.00.591.489 I llm_load_print_meta: rope type        = 2
0.00.591.501 I llm_load_print_meta: rope scaling     = linear
0.00.591.503 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.504 I llm_load_print_meta: freq_scale_train = 1
0.00.591.504 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.505 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.506 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.512 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.513 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.514 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.514 I llm_load_print_meta: model type       = 2B
0.00.591.515 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.516 I llm_load_print_meta: model params     = 2.51 B
0.00.591.517 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.517 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.518 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.518 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.519 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.519 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.520 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.520 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.526 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.528 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.528 I llm_load_print_meta: max token length = 93
0.00.591.697 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.650.720 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.650.730 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.650.731 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.650.732 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.650.732 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.650.733 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.656.404 I llama_new_context_with_model: n_ctx      = 8192
0.00.656.411 I llama_new_context_with_model: n_batch    = 2048
0.00.656.411 I llama_new_context_with_model: n_ubatch   = 512
0.00.656.412 I llama_new_context_with_model: flash_attn = 0
0.00.656.415 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.416 I llama_new_context_with_model: freq_scale = 1
0.00.685.970 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.014 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.687.568 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.574 I llama_new_context_with_model: graph nodes  = 601
0.00.687.574 I llama_new_context_with_model: graph splits = 1
0.00.687.589 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.776 I main: llama threadpool init, n_threads = 4
0.01.266.787 I 
0.01.266.894 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.266.898 I 
0.01.267.063 I sampler seed: 2318123440
0.01.267.073 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.080 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.267.081 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.267.081 I 
 seconals.

I am unable to answer the question as it contains sexually suggestive language and content that is not appropriate for me to provide. [end of text]


0.11.138.195 I llama_perf_sampler_print:    sampling time =      44.48 ms /    30 runs   (    1.48 ms per token,   674.41 tokens per second)
0.11.138.198 I llama_perf_context_print:        load time =    1263.84 ms
0.11.138.200 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.138.202 I llama_perf_context_print:        eval time =    9797.20 ms /    29 runs   (  337.83 ms per token,     2.96 tokens per second)
0.11.138.203 I llama_perf_context_print:       total time =    9871.43 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3913 (e5f74fe8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198272.80 ms
main:    total time = 198272.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 3913 (e5f74fe8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.024.741 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.830 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.842 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.844 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.848 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.849 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.851 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.852 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.853 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.860 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.861 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.862 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.862 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.352 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.340 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.484 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.491 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.493 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.494 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.495 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.496 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.497 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.501 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.502 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.510 I llama_model_loader: - type  f32:   37 tensors
0.00.268.513 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.514 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.296 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.960 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.009 I llm_load_vocab: special tokens cache size = 5
0.00.594.917 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.984 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.985 I llm_load_print_meta: arch             = gemma
0.00.594.986 I llm_load_print_meta: vocab type       = SPM
0.00.594.987 I llm_load_print_meta: n_vocab          = 256000
0.00.594.989 I llm_load_print_meta: n_merges         = 0
0.00.594.990 I llm_load_print_meta: vocab_only       = 0
0.00.594.990 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.990 I llm_load_print_meta: n_embd           = 2048
0.00.594.991 I llm_load_print_meta: n_layer          = 18
0.00.595.056 I llm_load_print_meta: n_head           = 8
0.00.595.062 I llm_load_print_meta: n_head_kv        = 1
0.00.595.063 I llm_load_print_meta: n_rot            = 256
0.00.595.063 I llm_load_print_meta: n_swa            = 0
0.00.595.064 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.068 I llm_load_print_meta: n_gqa            = 8
0.00.595.073 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.079 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.080 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.086 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.087 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.087 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.087 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.092 I llm_load_print_meta: n_ff             = 16384
0.00.595.093 I llm_load_print_meta: n_expert         = 0
0.00.595.093 I llm_load_print_meta: n_expert_used    = 0
0.00.595.093 I llm_load_print_meta: causal attn      = 1
0.00.595.094 I llm_load_print_meta: pooling type     = 0
0.00.595.095 I llm_load_print_meta: rope type        = 2
0.00.595.095 I llm_load_print_meta: rope scaling     = linear
0.00.595.097 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.098 I llm_load_print_meta: freq_scale_train = 1
0.00.595.098 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.099 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.100 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.100 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.112 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.116 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.117 I llm_load_print_meta: model type       = 2B
0.00.595.119 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.120 I llm_load_print_meta: model params     = 2.51 B
0.00.595.120 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.121 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.122 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.122 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.123 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.123 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.137 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.144 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.146 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.146 I llm_load_print_meta: max token length = 93
0.00.595.314 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.654.259 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.659.918 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.925 I llama_new_context_with_model: n_batch    = 2048
0.00.659.925 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.926 I llama_new_context_with_model: flash_attn = 0
0.00.659.929 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.930 I llama_new_context_with_model: freq_scale = 1
0.00.690.224 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.690.270 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.690.384 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.691.733 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.691.738 I llama_new_context_with_model: graph nodes  = 601
0.00.691.739 I llama_new_context_with_model: graph splits = 1
0.00.691.754 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.052 I main: llama threadpool init, n_threads = 4
0.01.275.063 I 
0.01.275.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.177 I 
0.01.275.341 I sampler seed: 2837205458
0.01.275.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.358 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.359 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.275.373 I 
 encompassing the features of a comprehensive software development lifecycle.

**Phase 1: Planning and Requirements Gathering**

* Define project scope and objectives.
*

0.12.270.898 I llama_perf_sampler_print:    sampling time =      48.99 ms /    33 runs   (    1.48 ms per token,   673.66 tokens per second)
0.12.270.901 I llama_perf_context_print:        load time =    1272.14 ms
0.12.270.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.270.918 I llama_perf_context_print:        eval time =   10914.88 ms /    32 runs   (  341.09 ms per token,     2.93 tokens per second)
0.12.270.919 I llama_perf_context_print:       total time =   10995.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m2.870s
user	50m1.740s
sys	0m6.478s
