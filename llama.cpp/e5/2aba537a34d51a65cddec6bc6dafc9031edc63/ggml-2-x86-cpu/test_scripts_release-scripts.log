+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4328 (e52aba53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.757 I main: load the model and apply lora adapter, if any
0.00.020.731 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.738 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.749 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.757 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.760 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.764 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.765 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.765 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.767 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.767 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.768 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.771 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.772 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.773 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.773 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.773 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.709 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.497 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.503 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.504 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.505 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.505 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.506 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.507 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.509 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.510 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.510 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.511 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.512 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.514 I llama_model_loader: - type  f32:   37 tensors
0.00.130.516 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.737 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.729 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.316 I llm_load_vocab: special tokens cache size = 5
0.00.265.065 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.080 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.081 I llm_load_print_meta: arch             = gemma
0.00.265.081 I llm_load_print_meta: vocab type       = SPM
0.00.265.082 I llm_load_print_meta: n_vocab          = 256000
0.00.265.082 I llm_load_print_meta: n_merges         = 0
0.00.265.083 I llm_load_print_meta: vocab_only       = 0
0.00.265.083 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.083 I llm_load_print_meta: n_embd           = 2048
0.00.265.084 I llm_load_print_meta: n_layer          = 18
0.00.265.094 I llm_load_print_meta: n_head           = 8
0.00.265.095 I llm_load_print_meta: n_head_kv        = 1
0.00.265.095 I llm_load_print_meta: n_rot            = 256
0.00.265.096 I llm_load_print_meta: n_swa            = 0
0.00.265.096 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.096 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.097 I llm_load_print_meta: n_gqa            = 8
0.00.265.098 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.099 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.100 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.101 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.101 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.102 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.102 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.103 I llm_load_print_meta: n_ff             = 16384
0.00.265.103 I llm_load_print_meta: n_expert         = 0
0.00.265.104 I llm_load_print_meta: n_expert_used    = 0
0.00.265.104 I llm_load_print_meta: causal attn      = 1
0.00.265.104 I llm_load_print_meta: pooling type     = 0
0.00.265.104 I llm_load_print_meta: rope type        = 2
0.00.265.105 I llm_load_print_meta: rope scaling     = linear
0.00.265.107 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.107 I llm_load_print_meta: freq_scale_train = 1
0.00.265.107 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.108 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.108 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.108 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.109 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.109 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.109 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.110 I llm_load_print_meta: model type       = 2B
0.00.265.110 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.111 I llm_load_print_meta: model params     = 2.51 B
0.00.265.112 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.112 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.113 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.113 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.113 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.114 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.114 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.114 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.114 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.115 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.115 I llm_load_print_meta: max token length = 93
0.00.367.599 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.367.607 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.367.608 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.367.609 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.367.609 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.367.610 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.372.756 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.761 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.762 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.762 I llama_new_context_with_model: n_batch       = 2048
0.00.372.763 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.763 I llama_new_context_with_model: flash_attn    = 0
0.00.372.765 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.766 I llama_new_context_with_model: freq_scale    = 1
0.00.372.767 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.010 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.025 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.115 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.389 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.393 I llama_new_context_with_model: graph nodes  = 601
0.00.388.393 I llama_new_context_with_model: graph splits = 1
0.00.388.396 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.673 I main: llama threadpool init, n_threads = 4
0.00.473.689 I 
0.00.473.761 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.764 I 
0.00.473.809 I sampler seed: 2334778613
0.00.473.821 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.824 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.825 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.825 I 
 increamically.

I'm unable to process this request as it contains potentially harmful or sensitive information. I am unable to facilitate or provide information that may put

0.02.726.733 I llama_perf_sampler_print:    sampling time =       4.67 ms /    33 runs   (    0.14 ms per token,  7064.87 tokens per second)
0.02.726.736 I llama_perf_context_print:        load time =     472.90 ms
0.02.726.738 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.726.739 I llama_perf_context_print:        eval time =    2233.82 ms /    32 runs   (   69.81 ms per token,    14.33 tokens per second)
0.02.726.741 I llama_perf_context_print:       total time =    2253.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.570 I build: 4328 (e52aba53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.022 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.036 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.046 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.047 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.052 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.052 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.053 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.055 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.056 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.060 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.061 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.061 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.062 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.062 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.826 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.227 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.043 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.049 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.050 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.051 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.052 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.053 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.053 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.056 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.056 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.057 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.057 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.058 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.061 I llama_model_loader: - type  f32:   37 tensors
0.00.131.061 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.370 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.578 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.197 I llm_load_vocab: special tokens cache size = 5
0.00.267.807 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.822 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.822 I llm_load_print_meta: arch             = gemma
0.00.267.823 I llm_load_print_meta: vocab type       = SPM
0.00.267.823 I llm_load_print_meta: n_vocab          = 256000
0.00.267.824 I llm_load_print_meta: n_merges         = 0
0.00.267.824 I llm_load_print_meta: vocab_only       = 0
0.00.267.824 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.825 I llm_load_print_meta: n_embd           = 2048
0.00.267.825 I llm_load_print_meta: n_layer          = 18
0.00.267.837 I llm_load_print_meta: n_head           = 8
0.00.267.838 I llm_load_print_meta: n_head_kv        = 1
0.00.267.838 I llm_load_print_meta: n_rot            = 256
0.00.267.838 I llm_load_print_meta: n_swa            = 0
0.00.267.839 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.839 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.840 I llm_load_print_meta: n_gqa            = 8
0.00.267.841 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.842 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.842 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.844 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.844 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.844 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.845 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.846 I llm_load_print_meta: n_ff             = 16384
0.00.267.846 I llm_load_print_meta: n_expert         = 0
0.00.267.846 I llm_load_print_meta: n_expert_used    = 0
0.00.267.847 I llm_load_print_meta: causal attn      = 1
0.00.267.847 I llm_load_print_meta: pooling type     = 0
0.00.267.847 I llm_load_print_meta: rope type        = 2
0.00.267.847 I llm_load_print_meta: rope scaling     = linear
0.00.267.849 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.849 I llm_load_print_meta: freq_scale_train = 1
0.00.267.849 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.850 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.850 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.850 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.851 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.851 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.851 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.852 I llm_load_print_meta: model type       = 2B
0.00.267.852 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.853 I llm_load_print_meta: model params     = 2.51 B
0.00.267.854 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.854 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.855 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.855 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.855 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.856 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.856 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.856 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.856 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.857 I llm_load_print_meta: max token length = 93
0.00.361.663 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.788 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.795 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.795 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.795 I llama_new_context_with_model: n_batch       = 2048
0.00.366.796 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.796 I llama_new_context_with_model: flash_attn    = 0
0.00.366.799 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.799 I llama_new_context_with_model: freq_scale    = 1
0.00.366.800 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.171 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.185 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.276 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.535 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.542 I llama_new_context_with_model: graph nodes  = 601
0.00.382.542 I llama_new_context_with_model: graph splits = 1
0.00.382.544 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.954 I main: llama threadpool init, n_threads = 4
0.00.462.968 I 
0.00.463.041 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.044 I 
0.00.463.087 I sampler seed: 2853778362
0.00.463.097 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.112 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.115 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.116 I 
 increasities!

I am unable to answer this question as it contains inappropriate language and sexual innuendos that are not appropriate for me to discuss. [end of text]


0.02.571.007 I llama_perf_sampler_print:    sampling time =       4.76 ms /    32 runs   (    0.15 ms per token,  6728.34 tokens per second)
0.02.571.010 I llama_perf_context_print:        load time =     462.16 ms
0.02.571.011 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.571.013 I llama_perf_context_print:        eval time =    2089.27 ms /    31 runs   (   67.40 ms per token,    14.84 tokens per second)
0.02.571.014 I llama_perf_context_print:       total time =    2108.06 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.598 I build: 4328 (e52aba53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.798 I main: llama backend init
0.00.000.804 I main: load the model and apply lora adapter, if any
0.00.021.419 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.430 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.446 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.450 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.454 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.455 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.456 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.461 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.462 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.462 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.463 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.463 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.826 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.038 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.965 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.972 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.973 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.973 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.974 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.975 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.976 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.979 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.979 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.980 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.980 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.981 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.985 I llama_model_loader: - type  f32:   37 tensors
0.00.131.985 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.774 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.386 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.947 I llm_load_vocab: special tokens cache size = 5
0.00.285.664 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.683 I llm_load_print_meta: arch             = gemma
0.00.285.684 I llm_load_print_meta: vocab type       = SPM
0.00.285.685 I llm_load_print_meta: n_vocab          = 256000
0.00.285.686 I llm_load_print_meta: n_merges         = 0
0.00.285.686 I llm_load_print_meta: vocab_only       = 0
0.00.285.686 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.686 I llm_load_print_meta: n_embd           = 2048
0.00.285.687 I llm_load_print_meta: n_layer          = 18
0.00.285.697 I llm_load_print_meta: n_head           = 8
0.00.285.698 I llm_load_print_meta: n_head_kv        = 1
0.00.285.699 I llm_load_print_meta: n_rot            = 256
0.00.285.699 I llm_load_print_meta: n_swa            = 0
0.00.285.699 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.700 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.701 I llm_load_print_meta: n_gqa            = 8
0.00.285.702 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.703 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.704 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.705 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.706 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.706 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.707 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.708 I llm_load_print_meta: n_ff             = 16384
0.00.285.709 I llm_load_print_meta: n_expert         = 0
0.00.285.712 I llm_load_print_meta: n_expert_used    = 0
0.00.285.712 I llm_load_print_meta: causal attn      = 1
0.00.285.712 I llm_load_print_meta: pooling type     = 0
0.00.285.713 I llm_load_print_meta: rope type        = 2
0.00.285.713 I llm_load_print_meta: rope scaling     = linear
0.00.285.715 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.715 I llm_load_print_meta: freq_scale_train = 1
0.00.285.716 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.716 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.716 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.717 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.717 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.717 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.718 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.718 I llm_load_print_meta: model type       = 2B
0.00.285.719 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.720 I llm_load_print_meta: model params     = 2.51 B
0.00.285.721 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.721 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.722 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.722 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.723 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.723 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.724 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.724 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.725 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.725 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.726 I llm_load_print_meta: max token length = 93
0.00.362.269 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.362.274 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.275 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.362.276 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.362.276 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.277 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.367.496 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.502 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.503 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.503 I llama_new_context_with_model: n_batch       = 2048
0.00.367.504 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.504 I llama_new_context_with_model: flash_attn    = 0
0.00.367.507 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.508 I llama_new_context_with_model: freq_scale    = 1
0.00.367.509 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.396 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.410 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.505 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.816 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.823 I llama_new_context_with_model: graph nodes  = 601
0.00.383.823 I llama_new_context_with_model: graph splits = 1
0.00.383.825 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.883 I main: llama threadpool init, n_threads = 4
0.00.469.898 I 
0.00.469.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.988 I 
0.00.470.032 I sampler seed: 2328780627
0.00.470.043 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.056 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.060 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.061 I 
 increasities, and a demonstrably unfair advantage.

**What is the term?**

The provided text does not specify the term, so I am unable

0.02.779.485 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6908.10 tokens per second)
0.02.779.488 I llama_perf_context_print:        load time =     469.06 ms
0.02.779.490 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.779.492 I llama_perf_context_print:        eval time =    2290.57 ms /    32 runs   (   71.58 ms per token,    13.97 tokens per second)
0.02.779.493 I llama_perf_context_print:       total time =    2309.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.532 I build: 4328 (e52aba53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.728 I main: load the model and apply lora adapter, if any
0.00.021.321 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.331 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.339 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.345 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.346 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.351 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.352 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.353 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.355 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.360 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.361 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.362 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.362 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.363 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.932 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.161 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.053 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.059 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.060 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.060 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.061 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.062 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.062 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.065 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.065 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.066 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.067 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.068 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.071 I llama_model_loader: - type  f32:   37 tensors
0.00.132.072 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.516 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.889 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.610 I llm_load_vocab: special tokens cache size = 5
0.00.285.620 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.641 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.642 I llm_load_print_meta: arch             = gemma
0.00.285.642 I llm_load_print_meta: vocab type       = SPM
0.00.285.643 I llm_load_print_meta: n_vocab          = 256000
0.00.285.644 I llm_load_print_meta: n_merges         = 0
0.00.285.644 I llm_load_print_meta: vocab_only       = 0
0.00.285.644 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.645 I llm_load_print_meta: n_embd           = 2048
0.00.285.645 I llm_load_print_meta: n_layer          = 18
0.00.285.658 I llm_load_print_meta: n_head           = 8
0.00.285.659 I llm_load_print_meta: n_head_kv        = 1
0.00.285.660 I llm_load_print_meta: n_rot            = 256
0.00.285.660 I llm_load_print_meta: n_swa            = 0
0.00.285.660 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.660 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.661 I llm_load_print_meta: n_gqa            = 8
0.00.285.662 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.663 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.664 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.665 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.666 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.666 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.666 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.667 I llm_load_print_meta: n_ff             = 16384
0.00.285.668 I llm_load_print_meta: n_expert         = 0
0.00.285.668 I llm_load_print_meta: n_expert_used    = 0
0.00.285.668 I llm_load_print_meta: causal attn      = 1
0.00.285.669 I llm_load_print_meta: pooling type     = 0
0.00.285.669 I llm_load_print_meta: rope type        = 2
0.00.285.669 I llm_load_print_meta: rope scaling     = linear
0.00.285.671 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.671 I llm_load_print_meta: freq_scale_train = 1
0.00.285.671 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.672 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.672 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.672 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.672 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.673 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.673 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.674 I llm_load_print_meta: model type       = 2B
0.00.285.674 I llm_load_print_meta: model ftype      = Q8_0
0.00.285.675 I llm_load_print_meta: model params     = 2.51 B
0.00.285.676 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.285.676 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.677 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.677 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.677 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.678 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.678 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.679 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.680 I llm_load_print_meta: max token length = 93
0.00.356.826 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.356.832 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.362.111 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.118 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.119 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.119 I llama_new_context_with_model: n_batch       = 2048
0.00.362.120 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.120 I llama_new_context_with_model: flash_attn    = 0
0.00.362.123 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.124 I llama_new_context_with_model: freq_scale    = 1
0.00.362.125 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.763 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.778 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.877 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.119 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.125 I llama_new_context_with_model: graph nodes  = 601
0.00.379.126 I llama_new_context_with_model: graph splits = 1
0.00.379.128 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.447 I main: llama threadpool init, n_threads = 4
0.00.471.464 I 
0.00.471.540 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.543 I 
0.00.471.590 I sampler seed: 347223000
0.00.471.602 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.605 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.606 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.606 I 
 increasities in their quest for a more equitable world.

The question is about the nature of historical narratives and how they shape our understanding of the past and present

0.02.866.620 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7018.29 tokens per second)
0.02.866.623 I llama_perf_context_print:        load time =     470.70 ms
0.02.866.624 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.866.625 I llama_perf_context_print:        eval time =    2376.70 ms /    32 runs   (   74.27 ms per token,    13.46 tokens per second)
0.02.866.626 I llama_perf_context_print:       total time =    2395.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.442s
user	0m39.127s
sys	0m9.404s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4328 (e52aba53)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40204.03 ms
main:    total time = 40204.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4328 (e52aba53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.728 I main: load the model and apply lora adapter, if any
0.00.021.358 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.369 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.377 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.386 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.389 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.394 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.395 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.395 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.396 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.396 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.397 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.402 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.403 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.605 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.981 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.878 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.883 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.884 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.885 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.885 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.887 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.888 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.890 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.892 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.892 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.895 I llama_model_loader: - type  f32:   37 tensors
0.00.130.896 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.897 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.588 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.324 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.887 I llm_load_vocab: special tokens cache size = 5
0.00.265.483 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.497 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.497 I llm_load_print_meta: arch             = gemma
0.00.265.498 I llm_load_print_meta: vocab type       = SPM
0.00.265.498 I llm_load_print_meta: n_vocab          = 256000
0.00.265.499 I llm_load_print_meta: n_merges         = 0
0.00.265.499 I llm_load_print_meta: vocab_only       = 0
0.00.265.499 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.500 I llm_load_print_meta: n_embd           = 2048
0.00.265.500 I llm_load_print_meta: n_layer          = 18
0.00.265.510 I llm_load_print_meta: n_head           = 8
0.00.265.512 I llm_load_print_meta: n_head_kv        = 1
0.00.265.512 I llm_load_print_meta: n_rot            = 256
0.00.265.512 I llm_load_print_meta: n_swa            = 0
0.00.265.513 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.513 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.514 I llm_load_print_meta: n_gqa            = 8
0.00.265.515 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.516 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.517 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.518 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.518 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.519 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.519 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.520 I llm_load_print_meta: n_ff             = 16384
0.00.265.520 I llm_load_print_meta: n_expert         = 0
0.00.265.521 I llm_load_print_meta: n_expert_used    = 0
0.00.265.521 I llm_load_print_meta: causal attn      = 1
0.00.265.521 I llm_load_print_meta: pooling type     = 0
0.00.265.522 I llm_load_print_meta: rope type        = 2
0.00.265.522 I llm_load_print_meta: rope scaling     = linear
0.00.265.523 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.524 I llm_load_print_meta: freq_scale_train = 1
0.00.265.524 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.524 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.525 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.525 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.525 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.526 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.526 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.526 I llm_load_print_meta: model type       = 2B
0.00.265.527 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.528 I llm_load_print_meta: model params     = 2.51 B
0.00.265.529 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.529 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.529 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.530 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.530 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.530 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.530 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.531 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.531 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.532 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.532 I llm_load_print_meta: max token length = 93
0.00.326.050 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.057 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.058 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.058 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.059 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.059 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.379 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.386 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.386 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.387 I llama_new_context_with_model: n_batch       = 2048
0.00.331.387 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.388 I llama_new_context_with_model: flash_attn    = 0
0.00.331.391 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.392 I llama_new_context_with_model: freq_scale    = 1
0.00.331.393 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.761 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.775 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.868 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.158 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.164 I llama_new_context_with_model: graph nodes  = 601
0.00.348.165 I llama_new_context_with_model: graph splits = 1
0.00.348.167 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.035 I main: llama threadpool init, n_threads = 4
0.00.426.052 I 
0.00.426.129 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.426.132 I 
0.00.426.174 I sampler seed: 2261588123
0.00.426.185 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.188 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.189 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.191 I 
 encompassing all the elements, including the body, mind, and spirit.

**Body:**

* Muscles and bones
* Nervous system
* Circulatory

0.02.039.955 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6539.83 tokens per second)
0.02.039.957 I llama_perf_context_print:        load time =     425.29 ms
0.02.039.959 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.039.960 I llama_perf_context_print:        eval time =    1594.23 ms /    32 runs   (   49.82 ms per token,    20.07 tokens per second)
0.02.039.961 I llama_perf_context_print:       total time =    1613.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4328 (e52aba53)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40183.61 ms
main:    total time = 40183.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.540 I build: 4328 (e52aba53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.291 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.312 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.318 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.319 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.324 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.328 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.328 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.329 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.329 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.333 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.334 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.334 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.335 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.335 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.719 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.100 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.935 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.941 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.942 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.944 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.945 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.946 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.949 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.950 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.953 I llama_model_loader: - type  f32:   37 tensors
0.00.130.955 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.955 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.042 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.663 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.175 I llm_load_vocab: special tokens cache size = 5
0.00.261.701 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.717 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.717 I llm_load_print_meta: arch             = gemma
0.00.261.718 I llm_load_print_meta: vocab type       = SPM
0.00.261.719 I llm_load_print_meta: n_vocab          = 256000
0.00.261.719 I llm_load_print_meta: n_merges         = 0
0.00.261.719 I llm_load_print_meta: vocab_only       = 0
0.00.261.720 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.720 I llm_load_print_meta: n_embd           = 2048
0.00.261.720 I llm_load_print_meta: n_layer          = 18
0.00.261.732 I llm_load_print_meta: n_head           = 8
0.00.261.733 I llm_load_print_meta: n_head_kv        = 1
0.00.261.734 I llm_load_print_meta: n_rot            = 256
0.00.261.734 I llm_load_print_meta: n_swa            = 0
0.00.261.734 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.734 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.735 I llm_load_print_meta: n_gqa            = 8
0.00.261.737 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.737 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.738 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.739 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.740 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.740 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.740 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.741 I llm_load_print_meta: n_ff             = 16384
0.00.261.742 I llm_load_print_meta: n_expert         = 0
0.00.261.742 I llm_load_print_meta: n_expert_used    = 0
0.00.261.742 I llm_load_print_meta: causal attn      = 1
0.00.261.743 I llm_load_print_meta: pooling type     = 0
0.00.261.743 I llm_load_print_meta: rope type        = 2
0.00.261.744 I llm_load_print_meta: rope scaling     = linear
0.00.261.745 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.745 I llm_load_print_meta: freq_scale_train = 1
0.00.261.746 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.746 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.746 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.746 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.747 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.747 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.747 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.748 I llm_load_print_meta: model type       = 2B
0.00.261.749 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.749 I llm_load_print_meta: model params     = 2.51 B
0.00.261.750 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.751 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.751 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.751 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.752 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.752 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.752 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.753 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.753 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.753 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.753 I llm_load_print_meta: max token length = 93
0.00.318.934 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.017 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.022 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.022 I llama_new_context_with_model: n_batch       = 2048
0.00.324.023 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.023 I llama_new_context_with_model: flash_attn    = 0
0.00.324.026 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.027 I llama_new_context_with_model: freq_scale    = 1
0.00.324.028 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.538 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.550 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.338.638 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.821 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.339.826 I llama_new_context_with_model: graph nodes  = 601
0.00.339.826 I llama_new_context_with_model: graph splits = 1
0.00.339.828 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.835 I main: llama threadpool init, n_threads = 4
0.00.416.851 I 
0.00.416.927 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.416.930 I 
0.00.416.978 I sampler seed: 4291051872
0.00.416.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.001 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.004 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.004 I 
 seconded.

**Explanation:**

The provided text contains an error. The word "seconded" should be "second." [end of text]


0.01.735.119 I llama_perf_sampler_print:    sampling time =       4.22 ms /    28 runs   (    0.15 ms per token,  6630.36 tokens per second)
0.01.735.122 I llama_perf_context_print:        load time =     416.08 ms
0.01.735.123 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.735.124 I llama_perf_context_print:        eval time =    1302.84 ms /    27 runs   (   48.25 ms per token,    20.72 tokens per second)
0.01.735.125 I llama_perf_context_print:       total time =    1318.29 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.928s
user	10m23.102s
sys	0m6.930s
