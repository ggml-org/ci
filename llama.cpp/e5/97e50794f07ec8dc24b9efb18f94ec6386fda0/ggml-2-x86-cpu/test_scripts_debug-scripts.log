+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 4003 (e597e507) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.025.469 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.480 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.580 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.594 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.596 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.601 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.609 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.610 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.613 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.620 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.621 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.636 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.638 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.639 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.247 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.370 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.193 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.201 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.202 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.203 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.204 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.205 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.206 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.210 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.211 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.212 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.213 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.214 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.222 I llama_model_loader: - type  f32:   37 tensors
0.00.264.224 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.652 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.244 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.118 I llm_load_vocab: special tokens cache size = 5
0.00.594.357 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.420 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.421 I llm_load_print_meta: arch             = gemma
0.00.594.422 I llm_load_print_meta: vocab type       = SPM
0.00.594.422 I llm_load_print_meta: n_vocab          = 256000
0.00.594.424 I llm_load_print_meta: n_merges         = 0
0.00.594.424 I llm_load_print_meta: vocab_only       = 0
0.00.594.425 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.433 I llm_load_print_meta: n_embd           = 2048
0.00.594.433 I llm_load_print_meta: n_layer          = 18
0.00.594.496 I llm_load_print_meta: n_head           = 8
0.00.594.503 I llm_load_print_meta: n_head_kv        = 1
0.00.594.503 I llm_load_print_meta: n_rot            = 256
0.00.594.504 I llm_load_print_meta: n_swa            = 0
0.00.594.504 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.504 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.509 I llm_load_print_meta: n_gqa            = 8
0.00.594.526 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.533 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.535 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.537 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.537 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.538 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.538 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.543 I llm_load_print_meta: n_ff             = 16384
0.00.594.544 I llm_load_print_meta: n_expert         = 0
0.00.594.545 I llm_load_print_meta: n_expert_used    = 0
0.00.594.546 I llm_load_print_meta: causal attn      = 1
0.00.594.546 I llm_load_print_meta: pooling type     = 0
0.00.594.547 I llm_load_print_meta: rope type        = 2
0.00.594.547 I llm_load_print_meta: rope scaling     = linear
0.00.594.548 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.549 I llm_load_print_meta: freq_scale_train = 1
0.00.594.550 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.550 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.551 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.551 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.551 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.552 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.552 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.553 I llm_load_print_meta: model type       = 2B
0.00.594.554 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.555 I llm_load_print_meta: model params     = 2.51 B
0.00.594.555 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.556 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.557 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.557 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.558 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.559 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.563 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.563 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.569 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.571 I llm_load_print_meta: max token length = 93
0.00.704.745 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.704.753 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.704.754 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.704.754 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.704.755 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.704.756 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.710.537 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.544 I llama_new_context_with_model: n_batch    = 2048
0.00.710.545 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.545 I llama_new_context_with_model: flash_attn = 0
0.00.710.547 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.548 I llama_new_context_with_model: freq_scale = 1
0.00.739.050 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.088 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.211 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.728 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.741.732 I llama_new_context_with_model: graph nodes  = 601
0.00.741.732 I llama_new_context_with_model: graph splits = 1
0.00.741.748 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.104 I main: llama threadpool init, n_threads = 4
0.01.356.117 I 
0.01.356.223 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.356.227 I 
0.01.356.456 I sampler seed: 549825740
0.01.356.468 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.356.490 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.356.491 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.356.491 I 
 increasities in the 18th century. These increasities were a significant part of the Enlightenment, and they had a profound impact on the development of modern

0.14.825.205 I llama_perf_sampler_print:    sampling time =      48.20 ms /    33 runs   (    1.46 ms per token,   684.60 tokens per second)
0.14.825.208 I llama_perf_context_print:        load time =    1353.17 ms
0.14.825.209 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.825.211 I llama_perf_context_print:        eval time =   13375.36 ms /    32 runs   (  417.98 ms per token,     2.39 tokens per second)
0.14.825.212 I llama_perf_context_print:       total time =   13469.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4003 (e597e507) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.766 I main: load the model and apply lora adapter, if any
0.00.025.088 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.188 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.203 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.207 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.208 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.210 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.211 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.219 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.221 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.227 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.229 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.238 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.242 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.239 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.780 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.623 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.631 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.632 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.633 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.634 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.636 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.637 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.641 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.642 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.643 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.644 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.645 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.653 I llama_model_loader: - type  f32:   37 tensors
0.00.264.655 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.185 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.027 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.959 I llm_load_vocab: special tokens cache size = 5
0.00.596.623 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.692 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.693 I llm_load_print_meta: arch             = gemma
0.00.596.694 I llm_load_print_meta: vocab type       = SPM
0.00.596.695 I llm_load_print_meta: n_vocab          = 256000
0.00.596.697 I llm_load_print_meta: n_merges         = 0
0.00.596.697 I llm_load_print_meta: vocab_only       = 0
0.00.596.698 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.707 I llm_load_print_meta: n_embd           = 2048
0.00.596.707 I llm_load_print_meta: n_layer          = 18
0.00.596.773 I llm_load_print_meta: n_head           = 8
0.00.596.780 I llm_load_print_meta: n_head_kv        = 1
0.00.596.781 I llm_load_print_meta: n_rot            = 256
0.00.596.781 I llm_load_print_meta: n_swa            = 0
0.00.596.782 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.783 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.787 I llm_load_print_meta: n_gqa            = 8
0.00.596.792 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.797 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.799 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.800 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.800 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.801 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.806 I llm_load_print_meta: n_ff             = 16384
0.00.596.806 I llm_load_print_meta: n_expert         = 0
0.00.596.807 I llm_load_print_meta: n_expert_used    = 0
0.00.596.807 I llm_load_print_meta: causal attn      = 1
0.00.596.807 I llm_load_print_meta: pooling type     = 0
0.00.596.808 I llm_load_print_meta: rope type        = 2
0.00.596.809 I llm_load_print_meta: rope scaling     = linear
0.00.596.820 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.825 I llm_load_print_meta: freq_scale_train = 1
0.00.596.826 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.826 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.827 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.827 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.827 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.827 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.828 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.836 I llm_load_print_meta: model type       = 2B
0.00.596.837 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.838 I llm_load_print_meta: model params     = 2.51 B
0.00.596.839 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.839 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.839 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.840 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.840 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.841 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.850 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.858 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.860 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.860 I llm_load_print_meta: max token length = 93
0.00.697.909 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.703.711 I llama_new_context_with_model: n_ctx      = 8192
0.00.703.718 I llama_new_context_with_model: n_batch    = 2048
0.00.703.718 I llama_new_context_with_model: n_ubatch   = 512
0.00.703.719 I llama_new_context_with_model: flash_attn = 0
0.00.703.721 I llama_new_context_with_model: freq_base  = 10000.0
0.00.703.722 I llama_new_context_with_model: freq_scale = 1
0.00.733.301 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.342 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.733.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.955 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.735.959 I llama_new_context_with_model: graph nodes  = 601
0.00.735.959 I llama_new_context_with_model: graph splits = 1
0.00.735.975 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.701 I main: llama threadpool init, n_threads = 4
0.01.345.715 I 
0.01.345.822 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.825 I 
0.01.346.057 I sampler seed: 2254740853
0.01.346.070 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.077 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.346.077 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.077 I 
 seconary term is the term used to describe the product of the marginal product of a good or service and the total variation in the good or service.

a

0.14.886.980 I llama_perf_sampler_print:    sampling time =      48.40 ms /    33 runs   (    1.47 ms per token,   681.76 tokens per second)
0.14.886.983 I llama_perf_context_print:        load time =    1342.84 ms
0.14.886.984 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.887.004 I llama_perf_context_print:        eval time =   13446.58 ms /    32 runs   (  420.21 ms per token,     2.38 tokens per second)
0.14.887.006 I llama_perf_context_print:       total time =   13541.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4003 (e597e507) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.858 I main: load the model and apply lora adapter, if any
0.00.025.336 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.346 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.435 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.447 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.448 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.455 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.456 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.458 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.459 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.459 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.495 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.504 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.505 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.506 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.340 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.580 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.470 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.477 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.478 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.479 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.480 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.482 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.483 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.486 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.488 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.489 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.490 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.498 I llama_model_loader: - type  f32:   37 tensors
0.00.266.500 I llama_model_loader: - type q8_0:  127 tensors
0.00.432.178 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.234 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.149 I llm_load_vocab: special tokens cache size = 5
0.00.598.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.342 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.343 I llm_load_print_meta: arch             = gemma
0.00.598.344 I llm_load_print_meta: vocab type       = SPM
0.00.598.345 I llm_load_print_meta: n_vocab          = 256000
0.00.598.347 I llm_load_print_meta: n_merges         = 0
0.00.598.347 I llm_load_print_meta: vocab_only       = 0
0.00.598.348 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.355 I llm_load_print_meta: n_embd           = 2048
0.00.598.356 I llm_load_print_meta: n_layer          = 18
0.00.598.431 I llm_load_print_meta: n_head           = 8
0.00.598.440 I llm_load_print_meta: n_head_kv        = 1
0.00.598.440 I llm_load_print_meta: n_rot            = 256
0.00.598.440 I llm_load_print_meta: n_swa            = 0
0.00.598.441 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.441 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.446 I llm_load_print_meta: n_gqa            = 8
0.00.598.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.457 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.459 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.460 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.461 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.461 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.462 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.467 I llm_load_print_meta: n_ff             = 16384
0.00.598.475 I llm_load_print_meta: n_expert         = 0
0.00.598.476 I llm_load_print_meta: n_expert_used    = 0
0.00.598.476 I llm_load_print_meta: causal attn      = 1
0.00.598.477 I llm_load_print_meta: pooling type     = 0
0.00.598.477 I llm_load_print_meta: rope type        = 2
0.00.598.487 I llm_load_print_meta: rope scaling     = linear
0.00.598.496 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.503 I llm_load_print_meta: freq_scale_train = 1
0.00.598.504 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.505 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.509 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.510 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.510 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.510 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.511 I llm_load_print_meta: model type       = 2B
0.00.598.519 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.520 I llm_load_print_meta: model params     = 2.51 B
0.00.598.521 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.521 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.522 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.522 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.523 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.523 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.524 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.524 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.531 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.532 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.532 I llm_load_print_meta: max token length = 93
0.00.695.933 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.695.941 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.695.942 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.695.942 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.695.943 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.695.943 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.701.749 I llama_new_context_with_model: n_ctx      = 8192
0.00.701.757 I llama_new_context_with_model: n_batch    = 2048
0.00.701.757 I llama_new_context_with_model: n_ubatch   = 512
0.00.701.758 I llama_new_context_with_model: flash_attn = 0
0.00.701.761 I llama_new_context_with_model: freq_base  = 10000.0
0.00.701.761 I llama_new_context_with_model: freq_scale = 1
0.00.730.730 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.730.768 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.889 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.493 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.498 I llama_new_context_with_model: graph nodes  = 601
0.00.733.498 I llama_new_context_with_model: graph splits = 1
0.00.733.513 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.985 I main: llama threadpool init, n_threads = 4
0.01.344.999 I 
0.01.345.105 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.109 I 
0.01.345.339 I sampler seed: 4013855025
0.01.345.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.358 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.358 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.359 I 
 increably.

I cannot answer this question as it contains inappropriate content. [end of text]


0.08.076.610 I llama_perf_sampler_print:    sampling time =      24.19 ms /    17 runs   (    1.42 ms per token,   702.89 tokens per second)
0.08.076.614 I llama_perf_context_print:        load time =    1342.03 ms
0.08.076.616 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.076.618 I llama_perf_context_print:        eval time =    6684.07 ms /    16 runs   (  417.75 ms per token,     2.39 tokens per second)
0.08.076.618 I llama_perf_context_print:       total time =    6731.63 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.710 I build: 4003 (e597e507) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.916 I main: llama backend init
0.00.002.873 I main: load the model and apply lora adapter, if any
0.00.025.702 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.712 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.805 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.817 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.819 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.823 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.827 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.828 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.829 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.830 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.831 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.838 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.851 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.854 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.855 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.856 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.403 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.209 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.098 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.107 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.108 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.109 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.111 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.112 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.113 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.117 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.118 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.119 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.120 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.121 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.129 I llama_model_loader: - type  f32:   37 tensors
0.00.268.131 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.592 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.917 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.868 I llm_load_vocab: special tokens cache size = 5
0.00.604.799 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.869 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.870 I llm_load_print_meta: arch             = gemma
0.00.604.871 I llm_load_print_meta: vocab type       = SPM
0.00.604.872 I llm_load_print_meta: n_vocab          = 256000
0.00.604.874 I llm_load_print_meta: n_merges         = 0
0.00.604.874 I llm_load_print_meta: vocab_only       = 0
0.00.604.875 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.883 I llm_load_print_meta: n_embd           = 2048
0.00.604.883 I llm_load_print_meta: n_layer          = 18
0.00.604.947 I llm_load_print_meta: n_head           = 8
0.00.604.956 I llm_load_print_meta: n_head_kv        = 1
0.00.604.958 I llm_load_print_meta: n_rot            = 256
0.00.604.958 I llm_load_print_meta: n_swa            = 0
0.00.604.958 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.958 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.963 I llm_load_print_meta: n_gqa            = 8
0.00.604.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.973 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.976 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.976 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.982 I llm_load_print_meta: n_ff             = 16384
0.00.604.982 I llm_load_print_meta: n_expert         = 0
0.00.604.983 I llm_load_print_meta: n_expert_used    = 0
0.00.604.984 I llm_load_print_meta: causal attn      = 1
0.00.604.984 I llm_load_print_meta: pooling type     = 0
0.00.604.984 I llm_load_print_meta: rope type        = 2
0.00.604.985 I llm_load_print_meta: rope scaling     = linear
0.00.604.987 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.988 I llm_load_print_meta: freq_scale_train = 1
0.00.604.988 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.988 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.997 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.997 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.998 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.998 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.998 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.000 I llm_load_print_meta: model type       = 2B
0.00.605.001 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.001 I llm_load_print_meta: model params     = 2.51 B
0.00.605.002 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.005 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.006 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.019 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.019 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.020 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.021 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.034 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.036 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.042 I llm_load_print_meta: max token length = 93
0.00.690.586 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.690.595 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.696.500 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.506 I llama_new_context_with_model: n_batch    = 2048
0.00.696.506 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.507 I llama_new_context_with_model: flash_attn = 0
0.00.696.510 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.511 I llama_new_context_with_model: freq_scale = 1
0.00.725.512 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.553 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.678 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.116 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.120 I llama_new_context_with_model: graph nodes  = 601
0.00.728.120 I llama_new_context_with_model: graph splits = 1
0.00.728.135 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.744 I main: llama threadpool init, n_threads = 4
0.01.338.757 I 
0.01.338.858 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.862 I 
0.01.339.089 I sampler seed: 4180936172
0.01.339.102 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.109 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.110 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.110 I 
 increasively.

I am sorry, but I am unable to generate responses that are sexually suggestive or inappropriate in nature. [end of text]


0.12.011.413 I llama_perf_sampler_print:    sampling time =      37.84 ms /    26 runs   (    1.46 ms per token,   687.18 tokens per second)
0.12.011.417 I llama_perf_context_print:        load time =    1335.78 ms
0.12.011.419 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.011.421 I llama_perf_context_print:        eval time =   10598.77 ms /    25 runs   (  423.95 ms per token,     2.36 tokens per second)
0.12.011.422 I llama_perf_context_print:       total time =   10672.68 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.684s
user	3m10.270s
sys	0m9.554s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4003 (e597e507)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199080.55 ms
main:    total time = 199080.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.722 I build: 4003 (e597e507) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.947 I main: llama backend init
0.00.002.894 I main: load the model and apply lora adapter, if any
0.00.025.632 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.643 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.743 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.755 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.757 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.761 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.765 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.766 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.768 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.769 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.770 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.776 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.778 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.779 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.780 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.782 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.300 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.720 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.522 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.529 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.530 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.531 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.532 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.534 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.535 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.538 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.539 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.540 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.541 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.542 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.550 I llama_model_loader: - type  f32:   37 tensors
0.00.265.552 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.552 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.980 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.471 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.449 I llm_load_vocab: special tokens cache size = 5
0.00.596.326 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.401 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.403 I llm_load_print_meta: arch             = gemma
0.00.596.403 I llm_load_print_meta: vocab type       = SPM
0.00.596.404 I llm_load_print_meta: n_vocab          = 256000
0.00.596.406 I llm_load_print_meta: n_merges         = 0
0.00.596.407 I llm_load_print_meta: vocab_only       = 0
0.00.596.407 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.416 I llm_load_print_meta: n_embd           = 2048
0.00.596.416 I llm_load_print_meta: n_layer          = 18
0.00.596.479 I llm_load_print_meta: n_head           = 8
0.00.596.486 I llm_load_print_meta: n_head_kv        = 1
0.00.596.487 I llm_load_print_meta: n_rot            = 256
0.00.596.488 I llm_load_print_meta: n_swa            = 0
0.00.596.489 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.489 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.494 I llm_load_print_meta: n_gqa            = 8
0.00.596.503 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.508 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.509 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.511 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.512 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.512 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.513 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.521 I llm_load_print_meta: n_ff             = 16384
0.00.596.521 I llm_load_print_meta: n_expert         = 0
0.00.596.522 I llm_load_print_meta: n_expert_used    = 0
0.00.596.522 I llm_load_print_meta: causal attn      = 1
0.00.596.522 I llm_load_print_meta: pooling type     = 0
0.00.596.523 I llm_load_print_meta: rope type        = 2
0.00.596.523 I llm_load_print_meta: rope scaling     = linear
0.00.596.525 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.525 I llm_load_print_meta: freq_scale_train = 1
0.00.596.526 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.527 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.527 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.527 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.527 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.528 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.529 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.529 I llm_load_print_meta: model type       = 2B
0.00.596.531 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.596.532 I llm_load_print_meta: model params     = 2.51 B
0.00.596.535 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.596.535 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.536 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.536 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.537 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.538 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.538 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.539 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.544 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.546 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.546 I llm_load_print_meta: max token length = 93
0.00.659.780 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.659.790 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.659.791 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.659.792 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.659.793 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.659.793 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.665.641 I llama_new_context_with_model: n_ctx      = 8192
0.00.665.648 I llama_new_context_with_model: n_batch    = 2048
0.00.665.649 I llama_new_context_with_model: n_ubatch   = 512
0.00.665.649 I llama_new_context_with_model: flash_attn = 0
0.00.665.651 I llama_new_context_with_model: freq_base  = 10000.0
0.00.665.652 I llama_new_context_with_model: freq_scale = 1
0.00.694.758 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.694.798 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.694.916 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.419 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.697.423 I llama_new_context_with_model: graph nodes  = 601
0.00.697.423 I llama_new_context_with_model: graph splits = 1
0.00.697.439 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.376 I main: llama threadpool init, n_threads = 4
0.01.274.388 I 
0.01.274.496 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.500 I 
0.01.274.732 I sampler seed: 3216033018
0.01.274.746 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.754 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.274.756 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.757 I 
 squaRED!

I am unable to generate the requested text because it contains inappropriate content. As an AI language model, I am programmed to adhere to ethical guidelines

0.12.146.044 I llama_perf_sampler_print:    sampling time =      47.84 ms /    33 runs   (    1.45 ms per token,   689.80 tokens per second)
0.12.146.047 I llama_perf_context_print:        load time =    1271.38 ms
0.12.146.058 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.146.061 I llama_perf_context_print:        eval time =   10778.94 ms /    32 runs   (  336.84 ms per token,     2.97 tokens per second)
0.12.146.062 I llama_perf_context_print:       total time =   10871.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4003 (e597e507)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199033.44 ms
main:    total time = 199033.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4003 (e597e507) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.826 I main: load the model and apply lora adapter, if any
0.00.024.956 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.067 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.093 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.094 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.097 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.105 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.107 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.109 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.111 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.113 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.852 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.308 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.318 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.319 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.320 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.321 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.323 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.333 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.351 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.362 I llama_model_loader: - type  f32:   37 tensors
0.00.265.369 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.370 I llama_model_loader: - type q6_K:   19 tensors
0.00.456.706 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.147 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.083 I llm_load_vocab: special tokens cache size = 5
0.00.616.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.827 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.828 I llm_load_print_meta: arch             = gemma
0.00.616.828 I llm_load_print_meta: vocab type       = SPM
0.00.616.829 I llm_load_print_meta: n_vocab          = 256000
0.00.616.832 I llm_load_print_meta: n_merges         = 0
0.00.616.832 I llm_load_print_meta: vocab_only       = 0
0.00.616.832 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.840 I llm_load_print_meta: n_embd           = 2048
0.00.616.841 I llm_load_print_meta: n_layer          = 18
0.00.616.901 I llm_load_print_meta: n_head           = 8
0.00.616.908 I llm_load_print_meta: n_head_kv        = 1
0.00.616.908 I llm_load_print_meta: n_rot            = 256
0.00.616.909 I llm_load_print_meta: n_swa            = 0
0.00.616.909 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.910 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.915 I llm_load_print_meta: n_gqa            = 8
0.00.616.919 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.925 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.926 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.928 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.929 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.939 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.946 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.952 I llm_load_print_meta: n_ff             = 16384
0.00.616.954 I llm_load_print_meta: n_expert         = 0
0.00.616.954 I llm_load_print_meta: n_expert_used    = 0
0.00.616.955 I llm_load_print_meta: causal attn      = 1
0.00.616.955 I llm_load_print_meta: pooling type     = 0
0.00.616.955 I llm_load_print_meta: rope type        = 2
0.00.616.968 I llm_load_print_meta: rope scaling     = linear
0.00.616.971 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.972 I llm_load_print_meta: freq_scale_train = 1
0.00.616.972 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.972 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.973 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.973 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.973 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.974 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.974 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.975 I llm_load_print_meta: model type       = 2B
0.00.616.976 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.976 I llm_load_print_meta: model params     = 2.51 B
0.00.616.977 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.986 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.987 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.988 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.990 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.991 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.991 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.991 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.998 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.999 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.002 I llm_load_print_meta: max token length = 93
0.00.677.916 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.684.002 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.012 I llama_new_context_with_model: n_batch    = 2048
0.00.684.013 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.013 I llama_new_context_with_model: flash_attn = 0
0.00.684.017 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.018 I llama_new_context_with_model: freq_scale = 1
0.00.713.944 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.713.986 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.104 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.622 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.626 I llama_new_context_with_model: graph nodes  = 601
0.00.716.626 I llama_new_context_with_model: graph splits = 1
0.00.716.641 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.868 I main: llama threadpool init, n_threads = 4
0.01.291.881 I 
0.01.292.000 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.006 I 
0.01.292.253 I sampler seed: 379626324
0.01.292.266 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.272 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.292.274 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.274 I 
 seconally in a sentence.

The man's insatiable curiosity led him to explore the hidden chambers beneath the castle. [end of text]


0.09.759.770 I llama_perf_sampler_print:    sampling time =      37.85 ms /    26 runs   (    1.46 ms per token,   686.99 tokens per second)
0.09.759.774 I llama_perf_context_print:        load time =    1288.94 ms
0.09.759.787 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.759.790 I llama_perf_context_print:        eval time =    8393.79 ms /    25 runs   (  335.75 ms per token,     2.98 tokens per second)
0.09.759.791 I llama_perf_context_print:       total time =    8467.91 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.628s
user	49m57.996s
sys	0m6.484s
