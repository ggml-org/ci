+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.187 I build: 4241 (677ee9ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.379 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.021.003 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.012 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.020 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.031 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.036 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.037 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.037 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.038 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.039 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.040 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.045 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.046 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.047 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.047 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.048 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.814 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.843 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.795 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.801 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.802 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.803 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.803 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.805 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.805 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.808 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.809 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.809 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.810 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.811 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.816 I llama_model_loader: - type  f32:   37 tensors
0.00.131.817 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.246 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.279 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.894 I llm_load_vocab: special tokens cache size = 5
0.00.276.799 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.815 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.816 I llm_load_print_meta: arch             = gemma
0.00.276.816 I llm_load_print_meta: vocab type       = SPM
0.00.276.817 I llm_load_print_meta: n_vocab          = 256000
0.00.276.817 I llm_load_print_meta: n_merges         = 0
0.00.276.817 I llm_load_print_meta: vocab_only       = 0
0.00.276.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.818 I llm_load_print_meta: n_embd           = 2048
0.00.276.818 I llm_load_print_meta: n_layer          = 18
0.00.276.829 I llm_load_print_meta: n_head           = 8
0.00.276.830 I llm_load_print_meta: n_head_kv        = 1
0.00.276.830 I llm_load_print_meta: n_rot            = 256
0.00.276.830 I llm_load_print_meta: n_swa            = 0
0.00.276.831 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.832 I llm_load_print_meta: n_gqa            = 8
0.00.276.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.835 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.836 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.836 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.837 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.838 I llm_load_print_meta: n_ff             = 16384
0.00.276.838 I llm_load_print_meta: n_expert         = 0
0.00.276.838 I llm_load_print_meta: n_expert_used    = 0
0.00.276.839 I llm_load_print_meta: causal attn      = 1
0.00.276.839 I llm_load_print_meta: pooling type     = 0
0.00.276.839 I llm_load_print_meta: rope type        = 2
0.00.276.840 I llm_load_print_meta: rope scaling     = linear
0.00.276.841 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.842 I llm_load_print_meta: freq_scale_train = 1
0.00.276.842 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.843 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.843 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.843 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.844 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.844 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.844 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.845 I llm_load_print_meta: model type       = 2B
0.00.276.845 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.846 I llm_load_print_meta: model params     = 2.51 B
0.00.276.847 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.847 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.848 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.848 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.848 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.849 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.850 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.850 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.851 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.851 I llm_load_print_meta: max token length = 93
0.00.376.683 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.376.691 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.376.692 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.376.692 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.376.693 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.376.694 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.381.919 I llama_new_context_with_model: n_seq_max     = 1
0.00.381.926 I llama_new_context_with_model: n_ctx         = 4096
0.00.381.926 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.381.926 I llama_new_context_with_model: n_batch       = 2048
0.00.381.927 I llama_new_context_with_model: n_ubatch      = 512
0.00.381.927 I llama_new_context_with_model: flash_attn    = 0
0.00.381.930 I llama_new_context_with_model: freq_base     = 10000.0
0.00.381.930 I llama_new_context_with_model: freq_scale    = 1
0.00.381.931 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.740 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.753 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.848 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.083 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.089 I llama_new_context_with_model: graph nodes  = 601
0.00.398.090 I llama_new_context_with_model: graph splits = 1
0.00.398.091 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.181 I main: llama threadpool init, n_threads = 4
0.00.483.197 I 
0.00.483.271 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.483.274 I 
0.00.483.313 I sampler seed: 2918359520
0.00.483.324 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.328 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.328 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.329 I 
 increadibly long.

I have a long, arduous journey ahead of me. I must tread carefully, for every step could hold the key to my salvation or

0.02.768.185 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6783.14 tokens per second)
0.02.768.188 I llama_perf_context_print:        load time =     482.77 ms
0.02.768.189 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.768.191 I llama_perf_context_print:        eval time =    2266.21 ms /    32 runs   (   70.82 ms per token,    14.12 tokens per second)
0.02.768.192 I llama_perf_context_print:       total time =    2285.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.538 I build: 4241 (677ee9ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.020.867 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.881 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.892 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.895 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.900 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.901 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.902 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.903 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.903 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.904 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.908 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.910 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.911 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.911 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.638 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.638 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.552 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.558 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.559 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.560 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.561 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.561 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.562 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.565 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.566 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.567 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.568 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.568 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.572 I llama_model_loader: - type  f32:   37 tensors
0.00.131.573 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.553 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.044 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.666 I llm_load_vocab: special tokens cache size = 5
0.00.270.603 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.621 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.622 I llm_load_print_meta: arch             = gemma
0.00.270.623 I llm_load_print_meta: vocab type       = SPM
0.00.270.623 I llm_load_print_meta: n_vocab          = 256000
0.00.270.624 I llm_load_print_meta: n_merges         = 0
0.00.270.624 I llm_load_print_meta: vocab_only       = 0
0.00.270.625 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.625 I llm_load_print_meta: n_embd           = 2048
0.00.270.626 I llm_load_print_meta: n_layer          = 18
0.00.270.639 I llm_load_print_meta: n_head           = 8
0.00.270.640 I llm_load_print_meta: n_head_kv        = 1
0.00.270.641 I llm_load_print_meta: n_rot            = 256
0.00.270.641 I llm_load_print_meta: n_swa            = 0
0.00.270.641 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.641 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.642 I llm_load_print_meta: n_gqa            = 8
0.00.270.643 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.644 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.645 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.647 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.647 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.647 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.648 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.649 I llm_load_print_meta: n_ff             = 16384
0.00.270.649 I llm_load_print_meta: n_expert         = 0
0.00.270.649 I llm_load_print_meta: n_expert_used    = 0
0.00.270.649 I llm_load_print_meta: causal attn      = 1
0.00.270.650 I llm_load_print_meta: pooling type     = 0
0.00.270.650 I llm_load_print_meta: rope type        = 2
0.00.270.650 I llm_load_print_meta: rope scaling     = linear
0.00.270.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.652 I llm_load_print_meta: freq_scale_train = 1
0.00.270.652 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.653 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.653 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.653 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.653 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.654 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.654 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.654 I llm_load_print_meta: model type       = 2B
0.00.270.655 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.656 I llm_load_print_meta: model params     = 2.51 B
0.00.270.657 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.657 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.657 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.658 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.658 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.658 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.659 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.660 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.660 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.662 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.662 I llm_load_print_meta: max token length = 93
0.00.364.501 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.650 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.656 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.656 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.656 I llama_new_context_with_model: n_batch       = 2048
0.00.369.657 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.657 I llama_new_context_with_model: flash_attn    = 0
0.00.369.659 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.661 I llama_new_context_with_model: freq_scale    = 1
0.00.369.662 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.705 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.722 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.824 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.147 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.153 I llama_new_context_with_model: graph nodes  = 601
0.00.386.153 I llama_new_context_with_model: graph splits = 1
0.00.386.155 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.779 I main: llama threadpool init, n_threads = 4
0.00.467.795 I 
0.00.467.867 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.467.870 I 
0.00.467.913 I sampler seed: 2182662705
0.00.467.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.929 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.930 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.930 I 
 maneupherously.

I cannot answer this question as it contains inappropriate and sexually suggestive language. [end of text]


0.01.845.979 I llama_perf_sampler_print:    sampling time =       2.92 ms /    21 runs   (    0.14 ms per token,  7196.71 tokens per second)
0.01.845.982 I llama_perf_context_print:        load time =     467.02 ms
0.01.845.983 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.845.985 I llama_perf_context_print:        eval time =    1365.72 ms /    20 runs   (   68.29 ms per token,    14.64 tokens per second)
0.01.845.985 I llama_perf_context_print:       total time =    1378.21 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.553 I build: 4241 (677ee9ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.020.945 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.957 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.965 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.969 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.971 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.975 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.068 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.072 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.072 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.073 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.073 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.078 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.079 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.080 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.081 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.082 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.400 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.827 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.744 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.751 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.752 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.752 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.753 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.754 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.754 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.757 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.758 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.759 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.759 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.760 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.765 I llama_model_loader: - type  f32:   37 tensors
0.00.132.767 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.666 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.197 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.972 I llm_load_vocab: special tokens cache size = 5
0.00.291.116 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.135 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.135 I llm_load_print_meta: arch             = gemma
0.00.291.136 I llm_load_print_meta: vocab type       = SPM
0.00.291.138 I llm_load_print_meta: n_vocab          = 256000
0.00.291.138 I llm_load_print_meta: n_merges         = 0
0.00.291.139 I llm_load_print_meta: vocab_only       = 0
0.00.291.139 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.139 I llm_load_print_meta: n_embd           = 2048
0.00.291.140 I llm_load_print_meta: n_layer          = 18
0.00.291.154 I llm_load_print_meta: n_head           = 8
0.00.291.155 I llm_load_print_meta: n_head_kv        = 1
0.00.291.155 I llm_load_print_meta: n_rot            = 256
0.00.291.155 I llm_load_print_meta: n_swa            = 0
0.00.291.156 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.156 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.157 I llm_load_print_meta: n_gqa            = 8
0.00.291.158 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.159 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.161 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.162 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.163 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.163 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.164 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.166 I llm_load_print_meta: n_ff             = 16384
0.00.291.166 I llm_load_print_meta: n_expert         = 0
0.00.291.167 I llm_load_print_meta: n_expert_used    = 0
0.00.291.168 I llm_load_print_meta: causal attn      = 1
0.00.291.170 I llm_load_print_meta: pooling type     = 0
0.00.291.170 I llm_load_print_meta: rope type        = 2
0.00.291.171 I llm_load_print_meta: rope scaling     = linear
0.00.291.173 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.174 I llm_load_print_meta: freq_scale_train = 1
0.00.291.175 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.176 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.177 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.178 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.179 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.179 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.181 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.181 I llm_load_print_meta: model type       = 2B
0.00.291.185 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.186 I llm_load_print_meta: model params     = 2.51 B
0.00.291.187 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.188 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.188 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.189 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.190 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.190 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.191 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.192 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.193 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.194 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.195 I llm_load_print_meta: max token length = 93
0.00.367.334 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.367.342 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.367.342 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.367.343 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.367.344 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.367.344 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.372.601 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.608 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.609 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.609 I llama_new_context_with_model: n_batch       = 2048
0.00.372.610 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.611 I llama_new_context_with_model: flash_attn    = 0
0.00.372.615 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.616 I llama_new_context_with_model: freq_scale    = 1
0.00.372.617 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.470 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.483 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.585 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.894 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.900 I llama_new_context_with_model: graph nodes  = 601
0.00.389.900 I llama_new_context_with_model: graph splits = 1
0.00.389.902 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.361 I main: llama threadpool init, n_threads = 4
0.00.475.376 I 
0.00.475.470 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.475.473 I 
0.00.475.528 I sampler seed: 309337234
0.00.475.539 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.542 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.543 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.543 I 
 increably.

I am unable to locate the requested information. Please provide details or context to assist me in locating it. [end of text]


0.02.374.219 I llama_perf_sampler_print:    sampling time =       3.85 ms /    27 runs   (    0.14 ms per token,  7018.46 tokens per second)
0.02.374.221 I llama_perf_context_print:        load time =     474.56 ms
0.02.374.222 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.374.223 I llama_perf_context_print:        eval time =    1883.24 ms /    26 runs   (   72.43 ms per token,    13.81 tokens per second)
0.02.374.224 I llama_perf_context_print:       total time =    1898.87 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.645 I build: 4241 (677ee9ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.877 I main: llama backend init
0.00.000.885 I main: load the model and apply lora adapter, if any
0.00.021.674 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.686 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.695 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.701 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.702 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.713 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.717 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.718 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.719 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.720 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.721 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.729 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.730 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.731 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.731 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.732 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.326 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.707 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.650 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.657 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.658 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.658 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.659 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.660 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.660 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.663 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.663 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.664 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.665 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.666 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.670 I llama_model_loader: - type  f32:   37 tensors
0.00.133.672 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.123 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.457 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.142 I llm_load_vocab: special tokens cache size = 5
0.00.288.264 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.286 I llm_load_print_meta: arch             = gemma
0.00.288.286 I llm_load_print_meta: vocab type       = SPM
0.00.288.287 I llm_load_print_meta: n_vocab          = 256000
0.00.288.287 I llm_load_print_meta: n_merges         = 0
0.00.288.288 I llm_load_print_meta: vocab_only       = 0
0.00.288.288 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.289 I llm_load_print_meta: n_embd           = 2048
0.00.288.289 I llm_load_print_meta: n_layer          = 18
0.00.288.313 I llm_load_print_meta: n_head           = 8
0.00.288.315 I llm_load_print_meta: n_head_kv        = 1
0.00.288.315 I llm_load_print_meta: n_rot            = 256
0.00.288.315 I llm_load_print_meta: n_swa            = 0
0.00.288.316 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.317 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.318 I llm_load_print_meta: n_gqa            = 8
0.00.288.320 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.321 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.323 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.325 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.325 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.328 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.329 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.330 I llm_load_print_meta: n_ff             = 16384
0.00.288.331 I llm_load_print_meta: n_expert         = 0
0.00.288.331 I llm_load_print_meta: n_expert_used    = 0
0.00.288.332 I llm_load_print_meta: causal attn      = 1
0.00.288.333 I llm_load_print_meta: pooling type     = 0
0.00.288.334 I llm_load_print_meta: rope type        = 2
0.00.288.334 I llm_load_print_meta: rope scaling     = linear
0.00.288.336 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.337 I llm_load_print_meta: freq_scale_train = 1
0.00.288.338 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.339 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.339 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.340 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.340 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.341 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.341 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.342 I llm_load_print_meta: model type       = 2B
0.00.288.344 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.345 I llm_load_print_meta: model params     = 2.51 B
0.00.288.346 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.347 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.347 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.348 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.349 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.349 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.350 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.350 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.351 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.355 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.355 I llm_load_print_meta: max token length = 93
0.00.359.504 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.359.511 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.364.864 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.869 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.869 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.870 I llama_new_context_with_model: n_batch       = 2048
0.00.364.870 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.871 I llama_new_context_with_model: flash_attn    = 0
0.00.364.873 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.874 I llama_new_context_with_model: freq_scale    = 1
0.00.364.875 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.242 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.257 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.674 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.678 I llama_new_context_with_model: graph nodes  = 601
0.00.380.678 I llama_new_context_with_model: graph splits = 1
0.00.380.680 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.611 I main: llama threadpool init, n_threads = 4
0.00.471.628 I 
0.00.471.716 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.719 I 
0.00.471.776 I sampler seed: 1264897432
0.00.471.787 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.798 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.802 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.802 I 
 increasities.

I cannot find the requested information in the provided context. Therefore, I am unable to answer this question. [end of text]


0.02.466.285 I llama_perf_sampler_print:    sampling time =       3.86 ms /    27 runs   (    0.14 ms per token,  6991.20 tokens per second)
0.02.466.288 I llama_perf_context_print:        load time =     470.70 ms
0.02.466.289 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.466.291 I llama_perf_context_print:        eval time =    1978.67 ms /    26 runs   (   76.10 ms per token,    13.14 tokens per second)
0.02.466.292 I llama_perf_context_print:       total time =    1994.68 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.160s
user	0m33.225s
sys	0m9.433s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4241 (677ee9ff)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40237.36 ms
main:    total time = 40237.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.521 I build: 4241 (677ee9ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.721 I main: llama backend init
0.00.000.728 I main: load the model and apply lora adapter, if any
0.00.021.126 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.136 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.145 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.154 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.158 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.159 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.160 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.161 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.161 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.162 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.165 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.166 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.166 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.167 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.167 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.927 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.916 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.820 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.827 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.828 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.829 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.829 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.830 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.831 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.834 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.835 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.836 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.836 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.838 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.850 I llama_model_loader: - type  f32:   37 tensors
0.00.131.851 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.852 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.594 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.278 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.854 I llm_load_vocab: special tokens cache size = 5
0.00.266.774 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.791 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.791 I llm_load_print_meta: arch             = gemma
0.00.266.792 I llm_load_print_meta: vocab type       = SPM
0.00.266.793 I llm_load_print_meta: n_vocab          = 256000
0.00.266.793 I llm_load_print_meta: n_merges         = 0
0.00.266.794 I llm_load_print_meta: vocab_only       = 0
0.00.266.794 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.794 I llm_load_print_meta: n_embd           = 2048
0.00.266.795 I llm_load_print_meta: n_layer          = 18
0.00.266.806 I llm_load_print_meta: n_head           = 8
0.00.266.807 I llm_load_print_meta: n_head_kv        = 1
0.00.266.807 I llm_load_print_meta: n_rot            = 256
0.00.266.807 I llm_load_print_meta: n_swa            = 0
0.00.266.808 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.808 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.809 I llm_load_print_meta: n_gqa            = 8
0.00.266.810 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.811 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.812 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.813 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.813 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.814 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.814 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.815 I llm_load_print_meta: n_ff             = 16384
0.00.266.815 I llm_load_print_meta: n_expert         = 0
0.00.266.815 I llm_load_print_meta: n_expert_used    = 0
0.00.266.815 I llm_load_print_meta: causal attn      = 1
0.00.266.816 I llm_load_print_meta: pooling type     = 0
0.00.266.816 I llm_load_print_meta: rope type        = 2
0.00.266.816 I llm_load_print_meta: rope scaling     = linear
0.00.266.818 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.818 I llm_load_print_meta: freq_scale_train = 1
0.00.266.819 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.819 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.819 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.820 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.820 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.820 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.820 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.821 I llm_load_print_meta: model type       = 2B
0.00.266.822 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.822 I llm_load_print_meta: model params     = 2.51 B
0.00.266.823 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.823 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.824 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.824 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.824 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.825 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.825 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.826 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.826 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.826 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.827 I llm_load_print_meta: max token length = 93
0.00.326.455 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.463 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.464 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.464 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.465 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.466 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.561 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.566 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.566 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.567 I llama_new_context_with_model: n_batch       = 2048
0.00.331.567 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.568 I llama_new_context_with_model: flash_attn    = 0
0.00.331.570 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.571 I llama_new_context_with_model: freq_scale    = 1
0.00.331.572 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.966 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.979 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.077 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.312 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.317 I llama_new_context_with_model: graph nodes  = 601
0.00.347.318 I llama_new_context_with_model: graph splits = 1
0.00.347.319 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.483 I main: llama threadpool init, n_threads = 4
0.00.423.500 I 
0.00.423.579 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.423.582 I 
0.00.423.627 I sampler seed: 466125881
0.00.423.640 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.643 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.644 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.644 I 
 secon.

I am unable to access the requested file.

I am unable to access the requested file.

I am unable to access the requested file.

0.02.054.467 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6830.88 tokens per second)
0.02.054.469 I llama_perf_context_print:        load time =     422.74 ms
0.02.054.470 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.054.471 I llama_perf_context_print:        eval time =    1612.26 ms /    32 runs   (   50.38 ms per token,    19.85 tokens per second)
0.02.054.472 I llama_perf_context_print:       total time =    1630.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4241 (677ee9ff)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40239.53 ms
main:    total time = 40239.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.527 I build: 4241 (677ee9ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.716 I main: llama backend init
0.00.000.723 I main: load the model and apply lora adapter, if any
0.00.020.903 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.919 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.927 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.928 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.933 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.933 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.934 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.935 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.935 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.936 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.941 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.942 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.942 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.943 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.040 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.168 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.056 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.063 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.063 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.064 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.065 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.066 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.066 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.068 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.069 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.073 I llama_model_loader: - type  f32:   37 tensors
0.00.132.074 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.075 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.766 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.350 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.975 I llm_load_vocab: special tokens cache size = 5
0.00.289.735 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.754 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.755 I llm_load_print_meta: arch             = gemma
0.00.289.755 I llm_load_print_meta: vocab type       = SPM
0.00.289.756 I llm_load_print_meta: n_vocab          = 256000
0.00.289.756 I llm_load_print_meta: n_merges         = 0
0.00.289.757 I llm_load_print_meta: vocab_only       = 0
0.00.289.757 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.757 I llm_load_print_meta: n_embd           = 2048
0.00.289.758 I llm_load_print_meta: n_layer          = 18
0.00.289.769 I llm_load_print_meta: n_head           = 8
0.00.289.770 I llm_load_print_meta: n_head_kv        = 1
0.00.289.770 I llm_load_print_meta: n_rot            = 256
0.00.289.770 I llm_load_print_meta: n_swa            = 0
0.00.289.771 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.771 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.772 I llm_load_print_meta: n_gqa            = 8
0.00.289.773 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.774 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.775 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.777 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.777 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.777 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.778 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.779 I llm_load_print_meta: n_ff             = 16384
0.00.289.779 I llm_load_print_meta: n_expert         = 0
0.00.289.779 I llm_load_print_meta: n_expert_used    = 0
0.00.289.779 I llm_load_print_meta: causal attn      = 1
0.00.289.780 I llm_load_print_meta: pooling type     = 0
0.00.289.780 I llm_load_print_meta: rope type        = 2
0.00.289.780 I llm_load_print_meta: rope scaling     = linear
0.00.289.782 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.782 I llm_load_print_meta: freq_scale_train = 1
0.00.289.782 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.783 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.783 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.783 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.783 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.784 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.784 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.784 I llm_load_print_meta: model type       = 2B
0.00.289.785 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.289.786 I llm_load_print_meta: model params     = 2.51 B
0.00.289.786 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.289.787 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.787 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.787 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.788 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.788 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.788 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.789 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.789 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.790 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.790 I llm_load_print_meta: max token length = 93
0.00.346.099 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.351.181 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.188 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.188 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.188 I llama_new_context_with_model: n_batch       = 2048
0.00.351.189 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.189 I llama_new_context_with_model: flash_attn    = 0
0.00.351.192 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.193 I llama_new_context_with_model: freq_scale    = 1
0.00.351.194 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.360 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.374 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.762 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.769 I llama_new_context_with_model: graph nodes  = 601
0.00.367.769 I llama_new_context_with_model: graph splits = 1
0.00.367.771 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.500 I main: llama threadpool init, n_threads = 4
0.00.443.516 I 
0.00.443.592 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.595 I 
0.00.443.641 I sampler seed: 4157790223
0.00.443.652 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.660 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.663 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.663 I 
 encompassing all the facets of the topic, from the historical perspective to the contemporary challenges and potential solutions.

**Title: Navigating the Crossroads: Exploring Historical

0.02.056.852 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6736.07 tokens per second)
0.02.056.854 I llama_perf_context_print:        load time =     442.76 ms
0.02.056.855 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.056.857 I llama_perf_context_print:        eval time =    1594.16 ms /    32 runs   (   49.82 ms per token,    20.07 tokens per second)
0.02.056.857 I llama_perf_context_print:       total time =    1613.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.432s
user	10m24.764s
sys	0m7.288s
