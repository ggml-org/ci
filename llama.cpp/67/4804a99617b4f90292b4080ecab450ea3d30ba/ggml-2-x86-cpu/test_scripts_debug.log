+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3956 (674804a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.733 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.941 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.031 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.042 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.043 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.048 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.050 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.051 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.052 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.054 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.055 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.062 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.063 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.064 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.066 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.201 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.744 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.106 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.113 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.115 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.116 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.117 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.118 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.119 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.123 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.124 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.125 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.126 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.127 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.136 I llama_model_loader: - type  f32:   37 tensors
0.00.275.140 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.959 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.607 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.540 I llm_load_vocab: special tokens cache size = 5
0.00.612.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.571 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.572 I llm_load_print_meta: arch             = gemma
0.00.612.572 I llm_load_print_meta: vocab type       = SPM
0.00.612.573 I llm_load_print_meta: n_vocab          = 256000
0.00.612.576 I llm_load_print_meta: n_merges         = 0
0.00.612.576 I llm_load_print_meta: vocab_only       = 0
0.00.612.577 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.577 I llm_load_print_meta: n_embd           = 2048
0.00.612.577 I llm_load_print_meta: n_layer          = 18
0.00.612.641 I llm_load_print_meta: n_head           = 8
0.00.612.649 I llm_load_print_meta: n_head_kv        = 1
0.00.612.650 I llm_load_print_meta: n_rot            = 256
0.00.612.651 I llm_load_print_meta: n_swa            = 0
0.00.612.652 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.652 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.657 I llm_load_print_meta: n_gqa            = 8
0.00.612.661 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.667 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.668 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.674 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.674 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.674 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.700 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.708 I llm_load_print_meta: n_ff             = 16384
0.00.612.709 I llm_load_print_meta: n_expert         = 0
0.00.612.716 I llm_load_print_meta: n_expert_used    = 0
0.00.612.717 I llm_load_print_meta: causal attn      = 1
0.00.612.718 I llm_load_print_meta: pooling type     = 0
0.00.612.718 I llm_load_print_meta: rope type        = 2
0.00.612.718 I llm_load_print_meta: rope scaling     = linear
0.00.612.720 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.721 I llm_load_print_meta: freq_scale_train = 1
0.00.612.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.737 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.741 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.742 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.742 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.743 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.743 I llm_load_print_meta: model type       = 2B
0.00.612.744 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.745 I llm_load_print_meta: model params     = 2.51 B
0.00.612.746 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.746 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.747 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.748 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.748 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.749 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.750 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.750 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.756 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.758 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.759 I llm_load_print_meta: max token length = 93
0.00.612.928 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.712.887 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.712.898 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.712.899 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.712.899 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.712.900 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.712.901 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.718.498 I llama_new_context_with_model: n_ctx      = 8192
0.00.718.504 I llama_new_context_with_model: n_batch    = 2048
0.00.718.504 I llama_new_context_with_model: n_ubatch   = 512
0.00.718.505 I llama_new_context_with_model: flash_attn = 0
0.00.718.507 I llama_new_context_with_model: freq_base  = 10000.0
0.00.718.508 I llama_new_context_with_model: freq_scale = 1
0.00.746.868 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.911 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.021 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.418 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.423 I llama_new_context_with_model: graph nodes  = 601
0.00.748.424 I llama_new_context_with_model: graph splits = 1
0.00.748.440 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.553 I main: llama threadpool init, n_threads = 4
0.01.360.567 I 
0.01.360.677 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.677 I 
0.01.360.854 I sampler seed: 3750509660
0.01.360.867 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.874 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.360.875 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.878 I 
 increadibly, with a flamboyant flair that defied categorization. He was a creature of contradictions, a paradox of grace and fury, of beauty and monstrosity.



0.14.834.234 I llama_perf_sampler_print:    sampling time =      50.20 ms /    33 runs   (    1.52 ms per token,   657.31 tokens per second)
0.14.834.237 I llama_perf_context_print:        load time =    1357.69 ms
0.14.834.238 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.834.240 I llama_perf_context_print:        eval time =   13378.17 ms /    32 runs   (  418.07 ms per token,     2.39 tokens per second)
0.14.834.240 I llama_perf_context_print:       total time =   13473.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 3956 (674804a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.793 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.894 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.907 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.908 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.912 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.914 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.916 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.917 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.918 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.919 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.926 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.929 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.930 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.931 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.932 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.629 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.161 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.502 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.510 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.511 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.512 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.513 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.514 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.515 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.519 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.520 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.521 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.522 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.274.523 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.531 I llama_model_loader: - type  f32:   37 tensors
0.00.274.535 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.259 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.799 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.746 I llm_load_vocab: special tokens cache size = 5
0.00.618.925 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.995 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.996 I llm_load_print_meta: arch             = gemma
0.00.618.996 I llm_load_print_meta: vocab type       = SPM
0.00.618.997 I llm_load_print_meta: n_vocab          = 256000
0.00.618.999 I llm_load_print_meta: n_merges         = 0
0.00.619.000 I llm_load_print_meta: vocab_only       = 0
0.00.619.000 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.001 I llm_load_print_meta: n_embd           = 2048
0.00.619.001 I llm_load_print_meta: n_layer          = 18
0.00.619.067 I llm_load_print_meta: n_head           = 8
0.00.619.073 I llm_load_print_meta: n_head_kv        = 1
0.00.619.074 I llm_load_print_meta: n_rot            = 256
0.00.619.075 I llm_load_print_meta: n_swa            = 0
0.00.619.075 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.075 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.080 I llm_load_print_meta: n_gqa            = 8
0.00.619.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.089 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.091 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.092 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.092 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.093 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.093 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.099 I llm_load_print_meta: n_ff             = 16384
0.00.619.099 I llm_load_print_meta: n_expert         = 0
0.00.619.100 I llm_load_print_meta: n_expert_used    = 0
0.00.619.100 I llm_load_print_meta: causal attn      = 1
0.00.619.101 I llm_load_print_meta: pooling type     = 0
0.00.619.101 I llm_load_print_meta: rope type        = 2
0.00.619.102 I llm_load_print_meta: rope scaling     = linear
0.00.619.104 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.116 I llm_load_print_meta: freq_scale_train = 1
0.00.619.117 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.118 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.123 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.123 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.123 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.124 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.124 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.125 I llm_load_print_meta: model type       = 2B
0.00.619.126 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.127 I llm_load_print_meta: model params     = 2.51 B
0.00.619.128 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.128 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.129 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.129 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.129 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.130 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.130 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.130 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.137 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.138 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.150 I llm_load_print_meta: max token length = 93
0.00.619.323 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.489 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.721.140 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.147 I llama_new_context_with_model: n_batch    = 2048
0.00.721.147 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.148 I llama_new_context_with_model: flash_attn = 0
0.00.721.151 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.151 I llama_new_context_with_model: freq_scale = 1
0.00.749.940 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.749.985 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.750.096 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.470 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.751.475 I llama_new_context_with_model: graph nodes  = 601
0.00.751.475 I llama_new_context_with_model: graph splits = 1
0.00.751.491 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.405 I main: llama threadpool init, n_threads = 4
0.01.362.418 I 
0.01.362.533 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.362.537 I 
0.01.362.715 I sampler seed: 2344176259
0.01.362.727 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.735 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.362.736 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.737 I 
 increasities. 

The correct answer is: Scandal.

A scandal is a public disclosure of private or embarrassing facts, particularly one that is likely to cause

0.14.954.251 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.36 tokens per second)
0.14.954.254 I llama_perf_context_print:        load time =    1359.56 ms
0.14.954.267 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.954.269 I llama_perf_context_print:        eval time =   13497.42 ms /    32 runs   (  421.79 ms per token,     2.37 tokens per second)
0.14.954.270 I llama_perf_context_print:       total time =   13591.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.705 I build: 3956 (674804a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.911 I main: llama backend init
0.00.002.889 I main: load the model and apply lora adapter, if any
0.00.025.007 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.239 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.335 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.347 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.349 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.354 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.355 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.357 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.358 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.359 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.361 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.370 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.380 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.382 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.392 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.807 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.529 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.895 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.904 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.905 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.907 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.908 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.909 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.910 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.914 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.915 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.916 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.917 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.275.918 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.926 I llama_model_loader: - type  f32:   37 tensors
0.00.275.930 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.726 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.717 I llm_load_vocab: special tokens cache size = 5
0.00.631.367 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.631.437 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.631.441 I llm_load_print_meta: arch             = gemma
0.00.631.441 I llm_load_print_meta: vocab type       = SPM
0.00.631.442 I llm_load_print_meta: n_vocab          = 256000
0.00.631.445 I llm_load_print_meta: n_merges         = 0
0.00.631.445 I llm_load_print_meta: vocab_only       = 0
0.00.631.446 I llm_load_print_meta: n_ctx_train      = 8192
0.00.631.446 I llm_load_print_meta: n_embd           = 2048
0.00.631.446 I llm_load_print_meta: n_layer          = 18
0.00.631.526 I llm_load_print_meta: n_head           = 8
0.00.631.538 I llm_load_print_meta: n_head_kv        = 1
0.00.631.539 I llm_load_print_meta: n_rot            = 256
0.00.631.539 I llm_load_print_meta: n_swa            = 0
0.00.631.540 I llm_load_print_meta: n_embd_head_k    = 256
0.00.631.540 I llm_load_print_meta: n_embd_head_v    = 256
0.00.631.545 I llm_load_print_meta: n_gqa            = 8
0.00.631.550 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.631.556 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.631.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.631.560 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.631.563 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.631.564 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.631.565 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.631.574 I llm_load_print_meta: n_ff             = 16384
0.00.631.575 I llm_load_print_meta: n_expert         = 0
0.00.631.575 I llm_load_print_meta: n_expert_used    = 0
0.00.631.576 I llm_load_print_meta: causal attn      = 1
0.00.631.577 I llm_load_print_meta: pooling type     = 0
0.00.631.577 I llm_load_print_meta: rope type        = 2
0.00.631.578 I llm_load_print_meta: rope scaling     = linear
0.00.631.579 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.631.580 I llm_load_print_meta: freq_scale_train = 1
0.00.631.581 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.631.581 I llm_load_print_meta: rope_finetuned   = unknown
0.00.631.594 I llm_load_print_meta: ssm_d_conv       = 0
0.00.631.598 I llm_load_print_meta: ssm_d_inner      = 0
0.00.631.599 I llm_load_print_meta: ssm_d_state      = 0
0.00.631.599 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.631.600 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.631.601 I llm_load_print_meta: model type       = 2B
0.00.631.602 I llm_load_print_meta: model ftype      = Q8_0
0.00.631.604 I llm_load_print_meta: model params     = 2.51 B
0.00.631.605 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.631.625 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.631.627 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.631.628 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.631.629 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.631.630 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.631.631 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.631.632 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.631.640 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.631.642 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.631.643 I llm_load_print_meta: max token length = 93
0.00.631.830 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.709.763 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.709.773 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.709.773 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.709.774 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.709.775 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.709.776 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.715.675 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.684 I llama_new_context_with_model: n_batch    = 2048
0.00.715.684 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.685 I llama_new_context_with_model: flash_attn = 0
0.00.715.687 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.688 I llama_new_context_with_model: freq_scale = 1
0.00.745.181 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.224 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.347 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.761 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.766 I llama_new_context_with_model: graph nodes  = 601
0.00.746.767 I llama_new_context_with_model: graph splits = 1
0.00.746.782 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.458 I main: llama threadpool init, n_threads = 4
0.01.359.471 I 
0.01.359.593 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.598 I 
0.01.359.791 I sampler seed: 4051403110
0.01.359.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.810 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.359.811 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.811 I 
 increably and fearlessly. 

This is the dialogue of a character in a video game.

I can't tell if they're talking about

0.14.858.138 I llama_perf_sampler_print:    sampling time =      49.54 ms /    33 runs   (    1.50 ms per token,   666.09 tokens per second)
0.14.858.141 I llama_perf_context_print:        load time =    1356.47 ms
0.14.858.143 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.858.155 I llama_perf_context_print:        eval time =   13404.14 ms /    32 runs   (  418.88 ms per token,     2.39 tokens per second)
0.14.858.157 I llama_perf_context_print:       total time =   13498.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 3956 (674804a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.002.842 I main: load the model and apply lora adapter, if any
0.00.024.912 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.120 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.206 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.217 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.219 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.223 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.225 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.226 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.227 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.228 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.229 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.237 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.238 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.239 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.240 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.160.373 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.261.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.280.114 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.280.121 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.280.122 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.280.123 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.280.124 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.280.125 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.280.127 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.280.130 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.280.131 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.280.133 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.280.134 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.280.135 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.280.143 I llama_model_loader: - type  f32:   37 tensors
0.00.280.147 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.650 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.605 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.629 I llm_load_vocab: special tokens cache size = 5
0.00.611.789 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.859 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.863 I llm_load_print_meta: arch             = gemma
0.00.611.864 I llm_load_print_meta: vocab type       = SPM
0.00.611.865 I llm_load_print_meta: n_vocab          = 256000
0.00.611.867 I llm_load_print_meta: n_merges         = 0
0.00.611.867 I llm_load_print_meta: vocab_only       = 0
0.00.611.868 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.868 I llm_load_print_meta: n_embd           = 2048
0.00.611.869 I llm_load_print_meta: n_layer          = 18
0.00.611.934 I llm_load_print_meta: n_head           = 8
0.00.611.944 I llm_load_print_meta: n_head_kv        = 1
0.00.611.945 I llm_load_print_meta: n_rot            = 256
0.00.611.946 I llm_load_print_meta: n_swa            = 0
0.00.611.947 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.947 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.952 I llm_load_print_meta: n_gqa            = 8
0.00.611.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.966 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.967 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.968 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.969 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.974 I llm_load_print_meta: n_ff             = 16384
0.00.611.975 I llm_load_print_meta: n_expert         = 0
0.00.611.975 I llm_load_print_meta: n_expert_used    = 0
0.00.611.976 I llm_load_print_meta: causal attn      = 1
0.00.611.977 I llm_load_print_meta: pooling type     = 0
0.00.611.977 I llm_load_print_meta: rope type        = 2
0.00.611.977 I llm_load_print_meta: rope scaling     = linear
0.00.611.979 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.980 I llm_load_print_meta: freq_scale_train = 1
0.00.611.980 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.981 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.981 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.981 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.982 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.982 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.983 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.983 I llm_load_print_meta: model type       = 2B
0.00.611.985 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.985 I llm_load_print_meta: model params     = 2.51 B
0.00.611.986 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.987 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.988 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.991 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.991 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.992 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.993 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.998 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.000 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.000 I llm_load_print_meta: max token length = 93
0.00.612.166 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.351 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.683.362 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.689.014 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.022 I llama_new_context_with_model: n_batch    = 2048
0.00.689.022 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.023 I llama_new_context_with_model: flash_attn = 0
0.00.689.025 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.026 I llama_new_context_with_model: freq_scale = 1
0.00.718.307 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.349 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.459 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.719.815 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.719.820 I llama_new_context_with_model: graph nodes  = 601
0.00.719.821 I llama_new_context_with_model: graph splits = 1
0.00.719.837 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.154 I main: llama threadpool init, n_threads = 4
0.01.330.168 I 
0.01.330.275 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.279 I 
0.01.330.460 I sampler seed: 1672883791
0.01.330.471 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.478 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.330.478 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.487 I 
 increasities, it can be challenging to determine the cause of the discomfort.

**Answer the following questions about the provided context.**

1. What is the

0.14.869.439 I llama_perf_sampler_print:    sampling time =      50.19 ms /    33 runs   (    1.52 ms per token,   657.54 tokens per second)
0.14.869.443 I llama_perf_context_print:        load time =    1327.22 ms
0.14.869.445 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.869.455 I llama_perf_context_print:        eval time =   13443.09 ms /    32 runs   (  420.10 ms per token,     2.38 tokens per second)
0.14.869.459 I llama_perf_context_print:       total time =   13539.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.023s
user	3m49.083s
sys	0m9.453s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3956 (674804a9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200064.17 ms
main:    total time = 200064.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 3956 (674804a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.024.758 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.962 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.053 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.065 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.067 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.072 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.075 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.076 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.077 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.078 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.079 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.086 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.087 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.089 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.090 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.091 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.562 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.969 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.332 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.340 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.341 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.342 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.343 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.344 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.345 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.351 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.352 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.353 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.361 I llama_model_loader: - type  f32:   37 tensors
0.00.275.365 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.366 I llama_model_loader: - type q6_K:   19 tensors
0.00.451.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.094 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.133 I llm_load_vocab: special tokens cache size = 5
0.00.614.040 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.111 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.112 I llm_load_print_meta: arch             = gemma
0.00.614.112 I llm_load_print_meta: vocab type       = SPM
0.00.614.113 I llm_load_print_meta: n_vocab          = 256000
0.00.614.115 I llm_load_print_meta: n_merges         = 0
0.00.614.116 I llm_load_print_meta: vocab_only       = 0
0.00.614.117 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.117 I llm_load_print_meta: n_embd           = 2048
0.00.614.118 I llm_load_print_meta: n_layer          = 18
0.00.614.180 I llm_load_print_meta: n_head           = 8
0.00.614.186 I llm_load_print_meta: n_head_kv        = 1
0.00.614.187 I llm_load_print_meta: n_rot            = 256
0.00.614.187 I llm_load_print_meta: n_swa            = 0
0.00.614.188 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.188 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.193 I llm_load_print_meta: n_gqa            = 8
0.00.614.197 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.224 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.226 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.228 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.228 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.228 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.229 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.234 I llm_load_print_meta: n_ff             = 16384
0.00.614.235 I llm_load_print_meta: n_expert         = 0
0.00.614.235 I llm_load_print_meta: n_expert_used    = 0
0.00.614.243 I llm_load_print_meta: causal attn      = 1
0.00.614.252 I llm_load_print_meta: pooling type     = 0
0.00.614.253 I llm_load_print_meta: rope type        = 2
0.00.614.254 I llm_load_print_meta: rope scaling     = linear
0.00.614.260 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.260 I llm_load_print_meta: freq_scale_train = 1
0.00.614.268 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.269 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.269 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.269 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.270 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.271 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.271 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.272 I llm_load_print_meta: model type       = 2B
0.00.614.273 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.614.274 I llm_load_print_meta: model params     = 2.51 B
0.00.614.275 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.614.275 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.275 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.276 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.276 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.277 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.277 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.277 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.298 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.300 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.300 I llm_load_print_meta: max token length = 93
0.00.614.467 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.928 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.674.938 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.674.939 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.674.939 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.674.940 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.674.941 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.680.600 I llama_new_context_with_model: n_ctx      = 8192
0.00.680.607 I llama_new_context_with_model: n_batch    = 2048
0.00.680.608 I llama_new_context_with_model: n_ubatch   = 512
0.00.680.609 I llama_new_context_with_model: flash_attn = 0
0.00.680.611 I llama_new_context_with_model: freq_base  = 10000.0
0.00.680.612 I llama_new_context_with_model: freq_scale = 1
0.00.709.748 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.791 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.902 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.330 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.334 I llama_new_context_with_model: graph nodes  = 601
0.00.711.334 I llama_new_context_with_model: graph splits = 1
0.00.711.350 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.293.065 I main: llama threadpool init, n_threads = 4
0.01.293.077 I 
0.01.293.182 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.293.186 I 
0.01.293.361 I sampler seed: 1886263823
0.01.293.373 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.293.379 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.293.381 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.293.381 I 
 seconally.

**Assistant**

I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.09.161.977 I llama_perf_sampler_print:    sampling time =      35.28 ms /    24 runs   (    1.47 ms per token,   680.23 tokens per second)
0.09.161.980 I llama_perf_context_print:        load time =    1290.17 ms
0.09.161.981 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.161.994 I llama_perf_context_print:        eval time =    7800.72 ms /    23 runs   (  339.16 ms per token,     2.95 tokens per second)
0.09.161.995 I llama_perf_context_print:       total time =    7868.92 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3956 (674804a9)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199704.00 ms
main:    total time = 199704.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.608 I build: 3956 (674804a9) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.812 I main: llama backend init
0.00.002.745 I main: load the model and apply lora adapter, if any
0.00.024.886 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.976 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.989 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.990 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.994 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.999 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.000 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.001 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.002 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.003 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.008 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.009 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.010 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.011 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.012 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.538 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.860 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.477 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.486 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.487 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.489 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.490 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.491 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.493 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.498 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.499 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.506 I llama_model_loader: - type  f32:   37 tensors
0.00.275.510 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.511 I llama_model_loader: - type q6_K:   19 tensors
0.00.437.319 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.755 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.721 I llm_load_vocab: special tokens cache size = 5
0.00.598.950 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.016 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.017 I llm_load_print_meta: arch             = gemma
0.00.599.018 I llm_load_print_meta: vocab type       = SPM
0.00.599.018 I llm_load_print_meta: n_vocab          = 256000
0.00.599.021 I llm_load_print_meta: n_merges         = 0
0.00.599.021 I llm_load_print_meta: vocab_only       = 0
0.00.599.022 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.022 I llm_load_print_meta: n_embd           = 2048
0.00.599.022 I llm_load_print_meta: n_layer          = 18
0.00.599.087 I llm_load_print_meta: n_head           = 8
0.00.599.094 I llm_load_print_meta: n_head_kv        = 1
0.00.599.094 I llm_load_print_meta: n_rot            = 256
0.00.599.095 I llm_load_print_meta: n_swa            = 0
0.00.599.095 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.095 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.100 I llm_load_print_meta: n_gqa            = 8
0.00.599.105 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.110 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.111 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.112 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.113 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.113 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.113 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.118 I llm_load_print_meta: n_ff             = 16384
0.00.599.120 I llm_load_print_meta: n_expert         = 0
0.00.599.141 I llm_load_print_meta: n_expert_used    = 0
0.00.599.142 I llm_load_print_meta: causal attn      = 1
0.00.599.143 I llm_load_print_meta: pooling type     = 0
0.00.599.143 I llm_load_print_meta: rope type        = 2
0.00.599.144 I llm_load_print_meta: rope scaling     = linear
0.00.599.145 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.146 I llm_load_print_meta: freq_scale_train = 1
0.00.599.147 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.147 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.147 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.148 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.148 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.148 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.150 I llm_load_print_meta: model type       = 2B
0.00.599.151 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.599.161 I llm_load_print_meta: model params     = 2.51 B
0.00.599.169 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.599.177 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.178 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.186 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.187 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.188 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.188 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.189 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.195 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.196 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.197 I llm_load_print_meta: max token length = 93
0.00.599.365 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.657.422 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.662.960 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.967 I llama_new_context_with_model: n_batch    = 2048
0.00.662.968 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.968 I llama_new_context_with_model: flash_attn = 0
0.00.662.971 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.972 I llama_new_context_with_model: freq_scale = 1
0.00.691.849 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.691.892 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.006 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.693.343 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.348 I llama_new_context_with_model: graph nodes  = 601
0.00.693.348 I llama_new_context_with_model: graph splits = 1
0.00.693.364 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.583 I main: llama threadpool init, n_threads = 4
0.01.275.595 I 
0.01.275.704 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.708 I 
0.01.275.899 I sampler seed: 632412746
0.01.275.911 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.918 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.275.919 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.275.919 I 
 increasities and anxieties that can be triggered by the loss of a loved one.

**Answer:**

**Grief is a complex and multifaceted experience that can trigger

0.12.223.247 I llama_perf_sampler_print:    sampling time =      50.16 ms /    33 runs   (    1.52 ms per token,   657.88 tokens per second)
0.12.223.258 I llama_perf_context_print:        load time =    1272.75 ms
0.12.223.260 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.223.263 I llama_perf_context_print:        eval time =   10851.91 ms /    32 runs   (  339.12 ms per token,     2.95 tokens per second)
0.12.223.264 I llama_perf_context_print:       total time =   10947.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.101s
user	50m4.892s
sys	0m6.398s
