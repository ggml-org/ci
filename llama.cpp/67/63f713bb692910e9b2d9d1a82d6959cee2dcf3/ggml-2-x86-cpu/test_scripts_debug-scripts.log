+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 3993 (6763f713) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.764 I main: load the model and apply lora adapter, if any
0.00.024.871 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.078 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.171 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.182 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.184 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.188 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.189 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.190 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.192 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.194 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.195 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.204 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.206 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.207 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.208 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.209 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.970 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.838 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.229 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.238 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.239 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.240 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.241 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.242 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.243 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.247 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.248 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.249 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.250 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.251 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.260 I llama_model_loader: - type  f32:   37 tensors
0.00.268.264 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.741 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.517 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.522 I llm_load_vocab: special tokens cache size = 5
0.00.609.512 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.580 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.581 I llm_load_print_meta: arch             = gemma
0.00.609.581 I llm_load_print_meta: vocab type       = SPM
0.00.609.582 I llm_load_print_meta: n_vocab          = 256000
0.00.609.585 I llm_load_print_meta: n_merges         = 0
0.00.609.585 I llm_load_print_meta: vocab_only       = 0
0.00.609.586 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.586 I llm_load_print_meta: n_embd           = 2048
0.00.609.586 I llm_load_print_meta: n_layer          = 18
0.00.609.665 I llm_load_print_meta: n_head           = 8
0.00.609.674 I llm_load_print_meta: n_head_kv        = 1
0.00.609.675 I llm_load_print_meta: n_rot            = 256
0.00.609.676 I llm_load_print_meta: n_swa            = 0
0.00.609.676 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.676 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.681 I llm_load_print_meta: n_gqa            = 8
0.00.609.686 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.691 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.693 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.694 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.695 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.696 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.697 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.702 I llm_load_print_meta: n_ff             = 16384
0.00.609.702 I llm_load_print_meta: n_expert         = 0
0.00.609.703 I llm_load_print_meta: n_expert_used    = 0
0.00.609.704 I llm_load_print_meta: causal attn      = 1
0.00.609.704 I llm_load_print_meta: pooling type     = 0
0.00.609.705 I llm_load_print_meta: rope type        = 2
0.00.609.705 I llm_load_print_meta: rope scaling     = linear
0.00.609.707 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.707 I llm_load_print_meta: freq_scale_train = 1
0.00.609.712 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.712 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.713 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.713 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.713 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.713 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.714 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.715 I llm_load_print_meta: model type       = 2B
0.00.609.716 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.717 I llm_load_print_meta: model params     = 2.51 B
0.00.609.718 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.719 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.723 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.723 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.724 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.724 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.725 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.725 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.732 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.733 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.734 I llm_load_print_meta: max token length = 93
0.00.720.013 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.720.022 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.720.023 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.720.023 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.720.024 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.720.025 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.725.767 I llama_new_context_with_model: n_ctx      = 8192
0.00.725.774 I llama_new_context_with_model: n_batch    = 2048
0.00.725.775 I llama_new_context_with_model: n_ubatch   = 512
0.00.725.776 I llama_new_context_with_model: flash_attn = 0
0.00.725.778 I llama_new_context_with_model: freq_base  = 10000.0
0.00.725.779 I llama_new_context_with_model: freq_scale = 1
0.00.755.593 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.755.631 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.755.743 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.758.830 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.758.834 I llama_new_context_with_model: graph nodes  = 601
0.00.758.835 I llama_new_context_with_model: graph splits = 1
0.00.758.852 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.406 I main: llama threadpool init, n_threads = 4
0.01.371.420 I 
0.01.371.526 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.530 I 
0.01.371.758 I sampler seed: 3899581104
0.01.371.771 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.779 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.371.780 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.780 I 
 increasities that can be addressed through software.

**Example:**

* **Outdated software:** Replacing outdated software with compatible and secure solutions.
* **System

0.14.837.956 I llama_perf_sampler_print:    sampling time =      47.55 ms /    33 runs   (    1.44 ms per token,   693.93 tokens per second)
0.14.837.960 I llama_perf_context_print:        load time =    1368.55 ms
0.14.837.962 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.837.964 I llama_perf_context_print:        eval time =   13373.08 ms /    32 runs   (  417.91 ms per token,     2.39 tokens per second)
0.14.837.975 I llama_perf_context_print:       total time =   13466.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 3993 (6763f713) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.002.857 I main: load the model and apply lora adapter, if any
0.00.024.722 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.831 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.845 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.848 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.856 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.859 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.861 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.863 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.878 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.883 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.885 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.888 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.303 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.726 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.130 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.139 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.140 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.141 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.142 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.143 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.144 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.149 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.150 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.151 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.152 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.160 I llama_model_loader: - type  f32:   37 tensors
0.00.265.165 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.334 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.697 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.620 I llm_load_vocab: special tokens cache size = 5
0.00.590.740 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.813 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.814 I llm_load_print_meta: arch             = gemma
0.00.590.814 I llm_load_print_meta: vocab type       = SPM
0.00.590.815 I llm_load_print_meta: n_vocab          = 256000
0.00.590.817 I llm_load_print_meta: n_merges         = 0
0.00.590.818 I llm_load_print_meta: vocab_only       = 0
0.00.590.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.818 I llm_load_print_meta: n_embd           = 2048
0.00.590.819 I llm_load_print_meta: n_layer          = 18
0.00.590.885 I llm_load_print_meta: n_head           = 8
0.00.590.891 I llm_load_print_meta: n_head_kv        = 1
0.00.590.892 I llm_load_print_meta: n_rot            = 256
0.00.590.892 I llm_load_print_meta: n_swa            = 0
0.00.590.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.893 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.898 I llm_load_print_meta: n_gqa            = 8
0.00.590.904 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.911 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.913 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.914 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.915 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.917 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.918 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.925 I llm_load_print_meta: n_ff             = 16384
0.00.590.930 I llm_load_print_meta: n_expert         = 0
0.00.590.931 I llm_load_print_meta: n_expert_used    = 0
0.00.590.931 I llm_load_print_meta: causal attn      = 1
0.00.590.935 I llm_load_print_meta: pooling type     = 0
0.00.590.935 I llm_load_print_meta: rope type        = 2
0.00.590.936 I llm_load_print_meta: rope scaling     = linear
0.00.590.937 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.939 I llm_load_print_meta: freq_scale_train = 1
0.00.590.939 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.940 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.941 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.941 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.942 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.942 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.944 I llm_load_print_meta: model type       = 2B
0.00.590.945 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.947 I llm_load_print_meta: model params     = 2.51 B
0.00.590.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.950 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.950 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.951 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.952 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.952 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.954 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.955 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.963 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.965 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.966 I llm_load_print_meta: max token length = 93
0.00.690.281 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.696.331 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.340 I llama_new_context_with_model: n_batch    = 2048
0.00.696.340 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.341 I llama_new_context_with_model: flash_attn = 0
0.00.696.344 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.345 I llama_new_context_with_model: freq_scale = 1
0.00.725.940 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.980 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.726.092 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.297 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.301 I llama_new_context_with_model: graph nodes  = 601
0.00.729.302 I llama_new_context_with_model: graph splits = 1
0.00.729.318 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.921 I main: llama threadpool init, n_threads = 4
0.01.338.932 I 
0.01.339.045 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.049 I 
0.01.339.294 I sampler seed: 3905401000
0.01.339.306 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.326 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.339.327 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.329 I 
 increasities?

I am unable to access the text provided, therefore I am unable to extract the requested information. [end of text]


0.11.528.750 I llama_perf_sampler_print:    sampling time =      35.78 ms /    25 runs   (    1.43 ms per token,   698.64 tokens per second)
0.11.528.763 I llama_perf_context_print:        load time =    1335.96 ms
0.11.528.765 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.528.767 I llama_perf_context_print:        eval time =   10119.33 ms /    24 runs   (  421.64 ms per token,     2.37 tokens per second)
0.11.528.768 I llama_perf_context_print:       total time =   10189.84 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 3993 (6763f713) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.025.243 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.454 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.553 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.567 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.569 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.574 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.578 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.579 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.580 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.581 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.583 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.594 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.598 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.599 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.600 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.601 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.008 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.400 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.777 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.785 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.786 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.787 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.788 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.789 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.790 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.809 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.812 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.816 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.817 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.825 I llama_model_loader: - type  f32:   37 tensors
0.00.266.828 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.659 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.857 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.864 I llm_load_vocab: special tokens cache size = 5
0.00.599.382 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.446 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.447 I llm_load_print_meta: arch             = gemma
0.00.599.448 I llm_load_print_meta: vocab type       = SPM
0.00.599.449 I llm_load_print_meta: n_vocab          = 256000
0.00.599.452 I llm_load_print_meta: n_merges         = 0
0.00.599.452 I llm_load_print_meta: vocab_only       = 0
0.00.599.453 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.453 I llm_load_print_meta: n_embd           = 2048
0.00.599.453 I llm_load_print_meta: n_layer          = 18
0.00.599.517 I llm_load_print_meta: n_head           = 8
0.00.599.524 I llm_load_print_meta: n_head_kv        = 1
0.00.599.525 I llm_load_print_meta: n_rot            = 256
0.00.599.525 I llm_load_print_meta: n_swa            = 0
0.00.599.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.526 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.531 I llm_load_print_meta: n_gqa            = 8
0.00.599.536 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.541 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.542 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.544 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.544 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.545 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.545 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.550 I llm_load_print_meta: n_ff             = 16384
0.00.599.550 I llm_load_print_meta: n_expert         = 0
0.00.599.551 I llm_load_print_meta: n_expert_used    = 0
0.00.599.551 I llm_load_print_meta: causal attn      = 1
0.00.599.552 I llm_load_print_meta: pooling type     = 0
0.00.599.552 I llm_load_print_meta: rope type        = 2
0.00.599.552 I llm_load_print_meta: rope scaling     = linear
0.00.599.554 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.555 I llm_load_print_meta: freq_scale_train = 1
0.00.599.556 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.556 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.557 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.557 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.557 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.558 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.558 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.559 I llm_load_print_meta: model type       = 2B
0.00.599.560 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.561 I llm_load_print_meta: model params     = 2.51 B
0.00.599.562 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.572 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.573 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.573 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.574 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.575 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.575 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.581 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.583 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.584 I llm_load_print_meta: max token length = 93
0.00.698.426 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.698.435 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.698.437 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.698.437 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.698.438 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.698.438 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.703.997 I llama_new_context_with_model: n_ctx      = 8192
0.00.704.004 I llama_new_context_with_model: n_batch    = 2048
0.00.704.004 I llama_new_context_with_model: n_ubatch   = 512
0.00.704.005 I llama_new_context_with_model: flash_attn = 0
0.00.704.007 I llama_new_context_with_model: freq_base  = 10000.0
0.00.704.008 I llama_new_context_with_model: freq_scale = 1
0.00.732.695 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.732.732 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.732.851 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.736.023 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.736.027 I llama_new_context_with_model: graph nodes  = 601
0.00.736.028 I llama_new_context_with_model: graph splits = 1
0.00.736.044 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.151 I main: llama threadpool init, n_threads = 4
0.01.348.165 I 
0.01.348.273 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.277 I 
0.01.348.499 I sampler seed: 2807947249
0.01.348.511 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.519 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.520 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.520 I 
 seconally.

I'm sorry, but I am unable to provide assistance with generating responses that contain sexually suggestive or inappropriate content. [end of text]


0.13.212.511 I llama_perf_sampler_print:    sampling time =      41.90 ms /    29 runs   (    1.44 ms per token,   692.21 tokens per second)
0.13.212.514 I llama_perf_context_print:        load time =    1345.25 ms
0.13.212.516 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.212.528 I llama_perf_context_print:        eval time =   11780.90 ms /    28 runs   (  420.75 ms per token,     2.38 tokens per second)
0.13.212.530 I llama_perf_context_print:       total time =   11864.37 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 3993 (6763f713) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.305 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.511 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.599 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.610 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.612 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.616 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.620 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.621 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.622 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.624 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.624 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.635 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.636 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.637 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.638 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.090 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.616 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.967 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.974 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.975 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.976 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.980 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.984 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.985 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.986 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.986 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.988 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.995 I llama_model_loader: - type  f32:   37 tensors
0.00.266.000 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.086 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.738 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.692 I llm_load_vocab: special tokens cache size = 5
0.00.612.537 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.611 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.612 I llm_load_print_meta: arch             = gemma
0.00.612.612 I llm_load_print_meta: vocab type       = SPM
0.00.612.613 I llm_load_print_meta: n_vocab          = 256000
0.00.612.616 I llm_load_print_meta: n_merges         = 0
0.00.612.617 I llm_load_print_meta: vocab_only       = 0
0.00.612.617 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.618 I llm_load_print_meta: n_embd           = 2048
0.00.612.618 I llm_load_print_meta: n_layer          = 18
0.00.612.684 I llm_load_print_meta: n_head           = 8
0.00.612.692 I llm_load_print_meta: n_head_kv        = 1
0.00.612.692 I llm_load_print_meta: n_rot            = 256
0.00.612.693 I llm_load_print_meta: n_swa            = 0
0.00.612.694 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.695 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.700 I llm_load_print_meta: n_gqa            = 8
0.00.612.717 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.724 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.730 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.731 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.732 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.732 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.737 I llm_load_print_meta: n_ff             = 16384
0.00.612.740 I llm_load_print_meta: n_expert         = 0
0.00.612.740 I llm_load_print_meta: n_expert_used    = 0
0.00.612.741 I llm_load_print_meta: causal attn      = 1
0.00.612.741 I llm_load_print_meta: pooling type     = 0
0.00.612.742 I llm_load_print_meta: rope type        = 2
0.00.612.742 I llm_load_print_meta: rope scaling     = linear
0.00.612.743 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.744 I llm_load_print_meta: freq_scale_train = 1
0.00.612.744 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.745 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.745 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.745 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.746 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.746 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.746 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.747 I llm_load_print_meta: model type       = 2B
0.00.612.748 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.748 I llm_load_print_meta: model params     = 2.51 B
0.00.612.749 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.749 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.750 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.751 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.752 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.752 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.753 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.754 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.762 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.762 I llm_load_print_meta: max token length = 93
0.00.703.750 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.703.760 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.709.268 I llama_new_context_with_model: n_ctx      = 8192
0.00.709.276 I llama_new_context_with_model: n_batch    = 2048
0.00.709.276 I llama_new_context_with_model: n_ubatch   = 512
0.00.709.277 I llama_new_context_with_model: flash_attn = 0
0.00.709.279 I llama_new_context_with_model: freq_base  = 10000.0
0.00.709.280 I llama_new_context_with_model: freq_scale = 1
0.00.738.283 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.738.323 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.738.437 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.554 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.741.558 I llama_new_context_with_model: graph nodes  = 601
0.00.741.558 I llama_new_context_with_model: graph splits = 1
0.00.741.574 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.912 I main: llama threadpool init, n_threads = 4
0.01.352.926 I 
0.01.353.032 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.035 I 
0.01.353.274 I sampler seed: 1510432639
0.01.353.291 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.297 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.300 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.301 I 
 increasities and pronouncements are expressions of what kind of ideology?

a) Fascism
b) Communism
c) Nationalism
d) Capitalism

The answer

0.14.959.206 I llama_perf_sampler_print:    sampling time =      48.08 ms /    33 runs   (    1.46 ms per token,   686.30 tokens per second)
0.14.959.209 I llama_perf_context_print:        load time =    1350.05 ms
0.14.959.211 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.959.212 I llama_perf_context_print:        eval time =   13513.26 ms /    32 runs   (  422.29 ms per token,     2.37 tokens per second)
0.14.959.214 I llama_perf_context_print:       total time =   13606.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.197s
user	3m29.197s
sys	0m9.679s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3993 (6763f713)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199706.82 ms
main:    total time = 199706.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 3993 (6763f713) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.879 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.111 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.205 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.217 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.219 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.224 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.228 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.230 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.231 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.231 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.232 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.242 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.243 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.244 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.246 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.247 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.858 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.541 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.980 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.989 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.990 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.991 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.992 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.993 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.994 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.998 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.999 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.000 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.001 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.002 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.011 I llama_model_loader: - type  f32:   37 tensors
0.00.271.015 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.016 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.531 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.146 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.116 I llm_load_vocab: special tokens cache size = 5
0.00.619.627 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.698 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.699 I llm_load_print_meta: arch             = gemma
0.00.619.700 I llm_load_print_meta: vocab type       = SPM
0.00.619.701 I llm_load_print_meta: n_vocab          = 256000
0.00.619.703 I llm_load_print_meta: n_merges         = 0
0.00.619.704 I llm_load_print_meta: vocab_only       = 0
0.00.619.705 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.705 I llm_load_print_meta: n_embd           = 2048
0.00.619.705 I llm_load_print_meta: n_layer          = 18
0.00.619.770 I llm_load_print_meta: n_head           = 8
0.00.619.777 I llm_load_print_meta: n_head_kv        = 1
0.00.619.777 I llm_load_print_meta: n_rot            = 256
0.00.619.778 I llm_load_print_meta: n_swa            = 0
0.00.619.779 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.783 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.788 I llm_load_print_meta: n_gqa            = 8
0.00.619.793 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.799 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.800 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.805 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.805 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.806 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.811 I llm_load_print_meta: n_ff             = 16384
0.00.619.812 I llm_load_print_meta: n_expert         = 0
0.00.619.812 I llm_load_print_meta: n_expert_used    = 0
0.00.619.813 I llm_load_print_meta: causal attn      = 1
0.00.619.814 I llm_load_print_meta: pooling type     = 0
0.00.619.814 I llm_load_print_meta: rope type        = 2
0.00.619.814 I llm_load_print_meta: rope scaling     = linear
0.00.619.818 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.819 I llm_load_print_meta: freq_scale_train = 1
0.00.619.819 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.819 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.820 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.820 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.820 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.821 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.821 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.822 I llm_load_print_meta: model type       = 2B
0.00.619.823 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.619.843 I llm_load_print_meta: model params     = 2.51 B
0.00.619.844 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.619.845 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.848 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.849 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.849 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.850 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.850 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.851 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.858 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.859 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.861 I llm_load_print_meta: max token length = 93
0.00.683.054 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.683.063 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.683.064 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.683.064 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.683.065 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.683.066 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.688.666 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.673 I llama_new_context_with_model: n_batch    = 2048
0.00.688.674 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.674 I llama_new_context_with_model: flash_attn = 0
0.00.688.676 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.677 I llama_new_context_with_model: freq_scale = 1
0.00.718.689 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.727 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.836 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.921 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.721.925 I llama_new_context_with_model: graph nodes  = 601
0.00.721.925 I llama_new_context_with_model: graph splits = 1
0.00.721.943 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.676 I main: llama threadpool init, n_threads = 4
0.01.297.689 I 
0.01.297.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.799 I 
0.01.298.030 I sampler seed: 1566924043
0.01.298.043 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.049 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.298.052 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.298.053 I 
 squaRE, a small town in the Swiss Alps.

The sun dipped below the horizon, casting long shadows across the quaint village. A warm summer breeze whispered

0.12.157.249 I llama_perf_sampler_print:    sampling time =      48.44 ms /    33 runs   (    1.47 ms per token,   681.28 tokens per second)
0.12.157.253 I llama_perf_context_print:        load time =    1294.81 ms
0.12.157.255 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.157.257 I llama_perf_context_print:        eval time =   10765.77 ms /    32 runs   (  336.43 ms per token,     2.97 tokens per second)
0.12.157.258 I llama_perf_context_print:       total time =   10859.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3993 (6763f713)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199661.57 ms
main:    total time = 199661.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 3993 (6763f713) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.984 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.104 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.121 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.125 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.132 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.136 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.140 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.141 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.143 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.157 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.165 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.167 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.168 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.169 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.179 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.021 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.525 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.534 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.535 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.537 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.538 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.539 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.540 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.556 I llama_model_loader: - type  f32:   37 tensors
0.00.267.560 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.561 I llama_model_loader: - type q6_K:   19 tensors
0.00.470.782 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.535.532 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.536.464 I llm_load_vocab: special tokens cache size = 5
0.00.643.256 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.643.323 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.643.324 I llm_load_print_meta: arch             = gemma
0.00.643.324 I llm_load_print_meta: vocab type       = SPM
0.00.643.325 I llm_load_print_meta: n_vocab          = 256000
0.00.643.327 I llm_load_print_meta: n_merges         = 0
0.00.643.328 I llm_load_print_meta: vocab_only       = 0
0.00.643.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.643.328 I llm_load_print_meta: n_embd           = 2048
0.00.643.329 I llm_load_print_meta: n_layer          = 18
0.00.643.393 I llm_load_print_meta: n_head           = 8
0.00.643.400 I llm_load_print_meta: n_head_kv        = 1
0.00.643.401 I llm_load_print_meta: n_rot            = 256
0.00.643.401 I llm_load_print_meta: n_swa            = 0
0.00.643.403 I llm_load_print_meta: n_embd_head_k    = 256
0.00.643.404 I llm_load_print_meta: n_embd_head_v    = 256
0.00.643.409 I llm_load_print_meta: n_gqa            = 8
0.00.643.413 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.643.418 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.643.420 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.643.422 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.643.423 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.643.433 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.643.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.643.454 I llm_load_print_meta: n_ff             = 16384
0.00.643.458 I llm_load_print_meta: n_expert         = 0
0.00.643.458 I llm_load_print_meta: n_expert_used    = 0
0.00.643.459 I llm_load_print_meta: causal attn      = 1
0.00.643.459 I llm_load_print_meta: pooling type     = 0
0.00.643.460 I llm_load_print_meta: rope type        = 2
0.00.643.460 I llm_load_print_meta: rope scaling     = linear
0.00.643.462 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.643.462 I llm_load_print_meta: freq_scale_train = 1
0.00.643.463 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.643.464 I llm_load_print_meta: rope_finetuned   = unknown
0.00.643.464 I llm_load_print_meta: ssm_d_conv       = 0
0.00.643.465 I llm_load_print_meta: ssm_d_inner      = 0
0.00.643.465 I llm_load_print_meta: ssm_d_state      = 0
0.00.643.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.643.475 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.643.483 I llm_load_print_meta: model type       = 2B
0.00.643.485 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.643.486 I llm_load_print_meta: model params     = 2.51 B
0.00.643.487 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.643.487 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.643.488 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.643.489 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.643.492 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.643.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.643.493 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.643.493 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.643.500 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.643.502 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.643.502 I llm_load_print_meta: max token length = 93
0.00.705.700 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.711.522 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.529 I llama_new_context_with_model: n_batch    = 2048
0.00.711.530 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.530 I llama_new_context_with_model: flash_attn = 0
0.00.711.532 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.533 I llama_new_context_with_model: freq_scale = 1
0.00.741.676 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.741.717 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.741.840 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.021 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.745.026 I llama_new_context_with_model: graph nodes  = 601
0.00.745.026 I llama_new_context_with_model: graph splits = 1
0.00.745.043 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.366 I main: llama threadpool init, n_threads = 4
0.01.324.379 I 
0.01.324.495 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.500 I 
0.01.324.731 I sampler seed: 102856168
0.01.324.744 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.750 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.324.752 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.753 I 
 seconally.

A. Choose the correct question to answer.
B. Identify the type of question.
C. Formulate a hypothesis.
D

0.12.262.943 I llama_perf_sampler_print:    sampling time =      47.68 ms /    33 runs   (    1.44 ms per token,   692.14 tokens per second)
0.12.262.946 I llama_perf_context_print:        load time =    1321.43 ms
0.12.262.948 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.262.949 I llama_perf_context_print:        eval time =   10845.58 ms /    32 runs   (  338.92 ms per token,     2.95 tokens per second)
0.12.262.950 I llama_perf_context_print:       total time =   10938.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.807s
user	50m13.604s
sys	0m6.546s
