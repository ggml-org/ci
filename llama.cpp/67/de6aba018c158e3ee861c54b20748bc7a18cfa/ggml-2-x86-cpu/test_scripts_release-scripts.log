+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.001.817 I main: load the model and apply lora adapter, if any
0.00.021.913 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.961 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.969 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.975 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.975 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.979 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.979 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.981 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.982 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.982 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.983 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.986 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.987 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.987 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.988 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.988 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.871 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.544 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.551 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.552 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.553 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.554 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.555 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.556 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.560 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.560 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.561 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.562 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.563 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.567 I llama_model_loader: - type  f32:   37 tensors
0.00.132.570 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.509 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.901 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.682 I llm_load_vocab: special tokens cache size = 5
0.00.272.580 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.597 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.597 I llm_load_print_meta: arch             = gemma
0.00.272.598 I llm_load_print_meta: vocab type       = SPM
0.00.272.599 I llm_load_print_meta: n_vocab          = 256000
0.00.272.599 I llm_load_print_meta: n_merges         = 0
0.00.272.600 I llm_load_print_meta: vocab_only       = 0
0.00.272.600 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.601 I llm_load_print_meta: n_embd           = 2048
0.00.272.601 I llm_load_print_meta: n_layer          = 18
0.00.272.613 I llm_load_print_meta: n_head           = 8
0.00.272.614 I llm_load_print_meta: n_head_kv        = 1
0.00.272.614 I llm_load_print_meta: n_rot            = 256
0.00.272.615 I llm_load_print_meta: n_swa            = 0
0.00.272.615 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.615 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.616 I llm_load_print_meta: n_gqa            = 8
0.00.272.617 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.618 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.619 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.620 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.621 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.621 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.621 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.622 I llm_load_print_meta: n_ff             = 16384
0.00.272.622 I llm_load_print_meta: n_expert         = 0
0.00.272.623 I llm_load_print_meta: n_expert_used    = 0
0.00.272.623 I llm_load_print_meta: causal attn      = 1
0.00.272.623 I llm_load_print_meta: pooling type     = 0
0.00.272.624 I llm_load_print_meta: rope type        = 2
0.00.272.624 I llm_load_print_meta: rope scaling     = linear
0.00.272.626 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.626 I llm_load_print_meta: freq_scale_train = 1
0.00.272.627 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.627 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.627 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.628 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.628 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.628 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.628 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.629 I llm_load_print_meta: model type       = 2B
0.00.272.629 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.630 I llm_load_print_meta: model params     = 2.51 B
0.00.272.631 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.631 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.632 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.632 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.633 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.633 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.633 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.634 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.634 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.635 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.635 I llm_load_print_meta: max token length = 93
0.00.272.653 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.370.731 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.370.742 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.370.743 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.370.743 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.370.744 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.370.744 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.375.657 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.662 I llama_new_context_with_model: n_batch    = 2048
0.00.375.663 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.663 I llama_new_context_with_model: flash_attn = 0
0.00.375.666 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.667 I llama_new_context_with_model: freq_scale = 1
0.00.404.359 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.374 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.328 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.405.335 I llama_new_context_with_model: graph nodes  = 601
0.00.405.336 I llama_new_context_with_model: graph splits = 1
0.00.405.337 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.446 I main: llama threadpool init, n_threads = 4
0.00.496.458 I 
0.00.496.536 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.539 I 
0.00.496.574 I sampler seed: 342378941
0.00.496.584 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.587 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.496.588 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.588 I 
 increasively. 

I'm curious about the potential for artificial intelligence to revolutionize healthcare.

**Potential Benefits of AI in Healthcare:**

* **

0.02.734.422 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7012.32 tokens per second)
0.02.734.424 I llama_perf_context_print:        load time =     494.61 ms
0.02.734.425 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.734.427 I llama_perf_context_print:        eval time =    2220.41 ms /    32 runs   (   69.39 ms per token,    14.41 tokens per second)
0.02.734.427 I llama_perf_context_print:       total time =    2237.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.563 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.832 I main: load the model and apply lora adapter, if any
0.00.021.879 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.893 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.900 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.903 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.907 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.907 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.908 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.908 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.909 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.909 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.913 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.914 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.915 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.915 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.916 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.337 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.406 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.412 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.413 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.413 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.414 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.415 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.415 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.418 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.420 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.420 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.421 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.421 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.424 I llama_model_loader: - type  f32:   37 tensors
0.00.131.426 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.426 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.323 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.201 I llm_load_vocab: special tokens cache size = 5
0.00.267.126 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.143 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.144 I llm_load_print_meta: arch             = gemma
0.00.267.144 I llm_load_print_meta: vocab type       = SPM
0.00.267.145 I llm_load_print_meta: n_vocab          = 256000
0.00.267.145 I llm_load_print_meta: n_merges         = 0
0.00.267.146 I llm_load_print_meta: vocab_only       = 0
0.00.267.146 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.146 I llm_load_print_meta: n_embd           = 2048
0.00.267.147 I llm_load_print_meta: n_layer          = 18
0.00.267.160 I llm_load_print_meta: n_head           = 8
0.00.267.160 I llm_load_print_meta: n_head_kv        = 1
0.00.267.161 I llm_load_print_meta: n_rot            = 256
0.00.267.161 I llm_load_print_meta: n_swa            = 0
0.00.267.161 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.162 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.163 I llm_load_print_meta: n_gqa            = 8
0.00.267.164 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.165 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.165 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.167 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.167 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.167 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.168 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.168 I llm_load_print_meta: n_ff             = 16384
0.00.267.169 I llm_load_print_meta: n_expert         = 0
0.00.267.169 I llm_load_print_meta: n_expert_used    = 0
0.00.267.169 I llm_load_print_meta: causal attn      = 1
0.00.267.169 I llm_load_print_meta: pooling type     = 0
0.00.267.170 I llm_load_print_meta: rope type        = 2
0.00.267.170 I llm_load_print_meta: rope scaling     = linear
0.00.267.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.172 I llm_load_print_meta: freq_scale_train = 1
0.00.267.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.173 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.174 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.174 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.174 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.174 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.175 I llm_load_print_meta: model type       = 2B
0.00.267.175 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.176 I llm_load_print_meta: model params     = 2.51 B
0.00.267.177 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.177 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.178 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.178 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.179 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.179 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.180 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.181 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.181 I llm_load_print_meta: max token length = 93
0.00.267.202 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.362.499 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.367.547 I llama_new_context_with_model: n_ctx      = 8192
0.00.367.553 I llama_new_context_with_model: n_batch    = 2048
0.00.367.554 I llama_new_context_with_model: n_ubatch   = 512
0.00.367.554 I llama_new_context_with_model: flash_attn = 0
0.00.367.557 I llama_new_context_with_model: freq_base  = 10000.0
0.00.367.557 I llama_new_context_with_model: freq_scale = 1
0.00.396.479 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.396.495 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.396.599 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.445 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.453 I llama_new_context_with_model: graph nodes  = 601
0.00.397.453 I llama_new_context_with_model: graph splits = 1
0.00.397.455 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.798 I main: llama threadpool init, n_threads = 4
0.00.483.809 I 
0.00.483.886 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.483.889 I 
0.00.483.924 I sampler seed: 1613147981
0.00.483.934 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.941 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.483.941 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.942 I 
 increadibly. I have a good feeling about this. 🙏🏼✨ [end of text]


0.01.498.274 I llama_perf_sampler_print:    sampling time =       2.22 ms /    16 runs   (    0.14 ms per token,  7203.96 tokens per second)
0.01.498.277 I llama_perf_context_print:        load time =     481.94 ms
0.01.498.278 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.498.279 I llama_perf_context_print:        eval time =    1005.75 ms /    15 runs   (   67.05 ms per token,    14.91 tokens per second)
0.01.498.280 I llama_perf_context_print:       total time =    1014.48 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.498 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.690 I main: llama backend init
0.00.001.789 I main: load the model and apply lora adapter, if any
0.00.021.755 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.802 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.810 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.815 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.816 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.820 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.820 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.822 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.822 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.823 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.823 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.827 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.827 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.828 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.828 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.829 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.242 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.963 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.825 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.830 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.831 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.832 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.832 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.833 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.834 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.836 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.837 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.837 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.838 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.839 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.843 I llama_model_loader: - type  f32:   37 tensors
0.00.131.845 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.734 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.590 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.304 I llm_load_vocab: special tokens cache size = 5
0.00.265.120 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.134 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.134 I llm_load_print_meta: arch             = gemma
0.00.265.135 I llm_load_print_meta: vocab type       = SPM
0.00.265.135 I llm_load_print_meta: n_vocab          = 256000
0.00.265.136 I llm_load_print_meta: n_merges         = 0
0.00.265.136 I llm_load_print_meta: vocab_only       = 0
0.00.265.136 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.137 I llm_load_print_meta: n_embd           = 2048
0.00.265.137 I llm_load_print_meta: n_layer          = 18
0.00.265.148 I llm_load_print_meta: n_head           = 8
0.00.265.149 I llm_load_print_meta: n_head_kv        = 1
0.00.265.150 I llm_load_print_meta: n_rot            = 256
0.00.265.150 I llm_load_print_meta: n_swa            = 0
0.00.265.150 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.150 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.151 I llm_load_print_meta: n_gqa            = 8
0.00.265.152 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.153 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.154 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.155 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.156 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.156 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.156 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.157 I llm_load_print_meta: n_ff             = 16384
0.00.265.157 I llm_load_print_meta: n_expert         = 0
0.00.265.158 I llm_load_print_meta: n_expert_used    = 0
0.00.265.158 I llm_load_print_meta: causal attn      = 1
0.00.265.158 I llm_load_print_meta: pooling type     = 0
0.00.265.158 I llm_load_print_meta: rope type        = 2
0.00.265.159 I llm_load_print_meta: rope scaling     = linear
0.00.265.160 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.161 I llm_load_print_meta: freq_scale_train = 1
0.00.265.161 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.161 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.162 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.162 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.162 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.162 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.163 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.163 I llm_load_print_meta: model type       = 2B
0.00.265.164 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.164 I llm_load_print_meta: model params     = 2.51 B
0.00.265.165 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.165 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.166 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.166 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.167 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.167 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.167 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.168 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.168 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.168 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.169 I llm_load_print_meta: max token length = 93
0.00.265.194 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.342.241 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.342.248 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.342.249 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.342.250 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.342.250 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.342.251 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.347.247 I llama_new_context_with_model: n_ctx      = 8192
0.00.347.253 I llama_new_context_with_model: n_batch    = 2048
0.00.347.254 I llama_new_context_with_model: n_ubatch   = 512
0.00.347.254 I llama_new_context_with_model: flash_attn = 0
0.00.347.256 I llama_new_context_with_model: freq_base  = 10000.0
0.00.347.257 I llama_new_context_with_model: freq_scale = 1
0.00.375.303 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.375.317 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.375.408 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.249 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.376.257 I llama_new_context_with_model: graph nodes  = 601
0.00.376.258 I llama_new_context_with_model: graph splits = 1
0.00.376.259 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.741 I main: llama threadpool init, n_threads = 4
0.00.468.753 I 
0.00.468.830 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.833 I 
0.00.468.870 I sampler seed: 3947195488
0.00.468.879 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.882 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.468.882 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.883 I 
 increasities, and the development of a unique cultural identity.

**Cultural Identity Formation**

**1. Encounter with Different Cultures:**

- Exposure to diverse

0.02.718.930 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6701.87 tokens per second)
0.02.718.933 I llama_perf_context_print:        load time =     466.93 ms
0.02.718.934 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.718.935 I llama_perf_context_print:        eval time =    2232.38 ms /    32 runs   (   69.76 ms per token,    14.33 tokens per second)
0.02.718.936 I llama_perf_context_print:       total time =    2250.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.551 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.001.899 I main: load the model and apply lora adapter, if any
0.00.022.699 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.848 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.858 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.863 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.864 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.868 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.872 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.874 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.875 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.875 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.876 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.881 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.882 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.882 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.883 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.884 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.383 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.858 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.559 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.565 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.566 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.567 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.567 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.568 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.569 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.572 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.572 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.573 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.573 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.574 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.577 I llama_model_loader: - type  f32:   37 tensors
0.00.137.580 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.906 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.276 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.067 I llm_load_vocab: special tokens cache size = 5
0.00.282.989 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.005 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.006 I llm_load_print_meta: arch             = gemma
0.00.283.007 I llm_load_print_meta: vocab type       = SPM
0.00.283.007 I llm_load_print_meta: n_vocab          = 256000
0.00.283.008 I llm_load_print_meta: n_merges         = 0
0.00.283.008 I llm_load_print_meta: vocab_only       = 0
0.00.283.009 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.009 I llm_load_print_meta: n_embd           = 2048
0.00.283.009 I llm_load_print_meta: n_layer          = 18
0.00.283.020 I llm_load_print_meta: n_head           = 8
0.00.283.021 I llm_load_print_meta: n_head_kv        = 1
0.00.283.022 I llm_load_print_meta: n_rot            = 256
0.00.283.022 I llm_load_print_meta: n_swa            = 0
0.00.283.022 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.023 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.024 I llm_load_print_meta: n_gqa            = 8
0.00.283.025 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.026 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.027 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.028 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.029 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.029 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.030 I llm_load_print_meta: n_ff             = 16384
0.00.283.030 I llm_load_print_meta: n_expert         = 0
0.00.283.031 I llm_load_print_meta: n_expert_used    = 0
0.00.283.031 I llm_load_print_meta: causal attn      = 1
0.00.283.031 I llm_load_print_meta: pooling type     = 0
0.00.283.031 I llm_load_print_meta: rope type        = 2
0.00.283.032 I llm_load_print_meta: rope scaling     = linear
0.00.283.033 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.034 I llm_load_print_meta: freq_scale_train = 1
0.00.283.034 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.034 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.035 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.035 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.036 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.036 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.036 I llm_load_print_meta: model type       = 2B
0.00.283.037 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.037 I llm_load_print_meta: model params     = 2.51 B
0.00.283.038 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.039 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.040 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.040 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.041 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.041 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.042 I llm_load_print_meta: max token length = 93
0.00.283.070 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.353.714 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.353.722 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.358.661 I llama_new_context_with_model: n_ctx      = 8192
0.00.358.667 I llama_new_context_with_model: n_batch    = 2048
0.00.358.668 I llama_new_context_with_model: n_ubatch   = 512
0.00.358.669 I llama_new_context_with_model: flash_attn = 0
0.00.358.671 I llama_new_context_with_model: freq_base  = 10000.0
0.00.358.673 I llama_new_context_with_model: freq_scale = 1
0.00.387.576 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.387.591 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.387.684 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.565 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.388.572 I llama_new_context_with_model: graph nodes  = 601
0.00.388.572 I llama_new_context_with_model: graph splits = 1
0.00.388.574 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.684 I main: llama threadpool init, n_threads = 4
0.00.488.695 I 
0.00.488.770 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.774 I 
0.00.488.810 I sampler seed: 4194446754
0.00.488.819 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.822 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.488.823 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.823 I 
 increasities in the human papillomavirus (HPV) vaccine landscape.

**Abstract**

The HPV vaccine landscape has witnessed significant changes in recent years, including

0.02.909.161 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6395.35 tokens per second)
0.02.909.164 I llama_perf_context_print:        load time =     486.76 ms
0.02.909.165 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.909.167 I llama_perf_context_print:        eval time =    2401.57 ms /    32 runs   (   75.05 ms per token,    13.32 tokens per second)
0.02.909.168 I llama_perf_context_print:       total time =    2420.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.560s
user	0m34.653s
sys	0m9.308s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3914 (67de6aba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31988.82 ms
main:    total time = 31988.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.001.854 I main: load the model and apply lora adapter, if any
0.00.022.194 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.244 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.252 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.258 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.262 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.263 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.263 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.265 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.265 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.266 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.271 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.272 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.273 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.274 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.645 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.254 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.152 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.158 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.159 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.159 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.160 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.161 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.162 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.164 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.166 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.166 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.167 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.135.168 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.171 I llama_model_loader: - type  f32:   37 tensors
0.00.135.174 I llama_model_loader: - type q4_K:  108 tensors
0.00.135.175 I llama_model_loader: - type q6_K:   19 tensors
0.00.214.672 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.274 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.993 I llm_load_vocab: special tokens cache size = 5
0.00.269.848 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.864 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.864 I llm_load_print_meta: arch             = gemma
0.00.269.865 I llm_load_print_meta: vocab type       = SPM
0.00.269.865 I llm_load_print_meta: n_vocab          = 256000
0.00.269.866 I llm_load_print_meta: n_merges         = 0
0.00.269.866 I llm_load_print_meta: vocab_only       = 0
0.00.269.867 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.867 I llm_load_print_meta: n_embd           = 2048
0.00.269.867 I llm_load_print_meta: n_layer          = 18
0.00.269.879 I llm_load_print_meta: n_head           = 8
0.00.269.879 I llm_load_print_meta: n_head_kv        = 1
0.00.269.880 I llm_load_print_meta: n_rot            = 256
0.00.269.880 I llm_load_print_meta: n_swa            = 0
0.00.269.881 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.881 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.882 I llm_load_print_meta: n_gqa            = 8
0.00.269.883 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.884 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.885 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.886 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.886 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.886 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.887 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.888 I llm_load_print_meta: n_ff             = 16384
0.00.269.888 I llm_load_print_meta: n_expert         = 0
0.00.269.888 I llm_load_print_meta: n_expert_used    = 0
0.00.269.888 I llm_load_print_meta: causal attn      = 1
0.00.269.889 I llm_load_print_meta: pooling type     = 0
0.00.269.889 I llm_load_print_meta: rope type        = 2
0.00.269.889 I llm_load_print_meta: rope scaling     = linear
0.00.269.891 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.892 I llm_load_print_meta: freq_scale_train = 1
0.00.269.892 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.893 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.893 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.894 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.894 I llm_load_print_meta: model type       = 2B
0.00.269.895 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.896 I llm_load_print_meta: model params     = 2.51 B
0.00.269.896 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.897 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.898 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.899 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.899 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.899 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.900 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.900 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.900 I llm_load_print_meta: max token length = 93
0.00.269.917 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.328.616 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.328.622 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.328.622 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.328.623 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.328.623 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.328.624 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.333.498 I llama_new_context_with_model: n_ctx      = 8192
0.00.333.504 I llama_new_context_with_model: n_batch    = 2048
0.00.333.504 I llama_new_context_with_model: n_ubatch   = 512
0.00.333.505 I llama_new_context_with_model: flash_attn = 0
0.00.333.507 I llama_new_context_with_model: freq_base  = 10000.0
0.00.333.508 I llama_new_context_with_model: freq_scale = 1
0.00.362.548 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.561 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.362.653 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.531 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.537 I llama_new_context_with_model: graph nodes  = 601
0.00.363.537 I llama_new_context_with_model: graph splits = 1
0.00.363.539 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.534 I main: llama threadpool init, n_threads = 4
0.00.445.547 I 
0.00.445.623 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.627 I 
0.00.445.664 I sampler seed: 2816232525
0.00.445.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.676 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.445.677 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.678 I 
 seconde,
I have a question about the pronunciation of the word "delicate".

Is there a difference in pronunciation between "delicate" and "

0.02.053.857 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6483.30 tokens per second)
0.02.053.859 I llama_perf_context_print:        load time =     443.66 ms
0.02.053.862 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.053.863 I llama_perf_context_print:        eval time =    1589.89 ms /    32 runs   (   49.68 ms per token,    20.13 tokens per second)
0.02.053.864 I llama_perf_context_print:       total time =    1608.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3914 (67de6aba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32085.26 ms
main:    total time = 32085.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.514 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.712 I main: llama backend init
0.00.001.834 I main: load the model and apply lora adapter, if any
0.00.021.777 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.790 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.797 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.798 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.802 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.803 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.803 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.804 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.807 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.808 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.808 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.809 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.809 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.808 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.330 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.214 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.220 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.221 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.222 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.223 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.223 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.227 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.227 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.231 I llama_model_loader: - type  f32:   37 tensors
0.00.132.234 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.235 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.248 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.265 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.013 I llm_load_vocab: special tokens cache size = 5
0.00.268.862 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.879 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.880 I llm_load_print_meta: arch             = gemma
0.00.268.881 I llm_load_print_meta: vocab type       = SPM
0.00.268.881 I llm_load_print_meta: n_vocab          = 256000
0.00.268.882 I llm_load_print_meta: n_merges         = 0
0.00.268.882 I llm_load_print_meta: vocab_only       = 0
0.00.268.883 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.883 I llm_load_print_meta: n_embd           = 2048
0.00.268.883 I llm_load_print_meta: n_layer          = 18
0.00.268.895 I llm_load_print_meta: n_head           = 8
0.00.268.896 I llm_load_print_meta: n_head_kv        = 1
0.00.268.896 I llm_load_print_meta: n_rot            = 256
0.00.268.896 I llm_load_print_meta: n_swa            = 0
0.00.268.896 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.897 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.898 I llm_load_print_meta: n_gqa            = 8
0.00.268.899 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.900 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.901 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.902 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.902 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.903 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.903 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.904 I llm_load_print_meta: n_ff             = 16384
0.00.268.904 I llm_load_print_meta: n_expert         = 0
0.00.268.904 I llm_load_print_meta: n_expert_used    = 0
0.00.268.905 I llm_load_print_meta: causal attn      = 1
0.00.268.905 I llm_load_print_meta: pooling type     = 0
0.00.268.905 I llm_load_print_meta: rope type        = 2
0.00.268.905 I llm_load_print_meta: rope scaling     = linear
0.00.268.907 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.908 I llm_load_print_meta: freq_scale_train = 1
0.00.268.908 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.909 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.909 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.909 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.910 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.910 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.910 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.911 I llm_load_print_meta: model type       = 2B
0.00.268.911 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.912 I llm_load_print_meta: model params     = 2.51 B
0.00.268.912 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.913 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.913 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.914 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.914 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.914 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.915 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.916 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.916 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.917 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.917 I llm_load_print_meta: max token length = 93
0.00.268.937 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.326.130 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.331.096 I llama_new_context_with_model: n_ctx      = 8192
0.00.331.101 I llama_new_context_with_model: n_batch    = 2048
0.00.331.102 I llama_new_context_with_model: n_ubatch   = 512
0.00.331.102 I llama_new_context_with_model: flash_attn = 0
0.00.331.105 I llama_new_context_with_model: freq_base  = 10000.0
0.00.331.106 I llama_new_context_with_model: freq_scale = 1
0.00.360.013 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.360.030 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.360.122 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.973 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.360.981 I llama_new_context_with_model: graph nodes  = 601
0.00.360.981 I llama_new_context_with_model: graph splits = 1
0.00.360.983 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.811 I main: llama threadpool init, n_threads = 4
0.00.441.826 I 
0.00.441.904 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.908 I 
0.00.441.946 I sampler seed: 3833410239
0.00.441.955 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.963 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.964 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.964 I 
 seconading the question. 

**Q**: What are the factors that contribute to the formation of the ozone layer?

**A**: The ozone layer is

0.02.052.427 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7093.72 tokens per second)
0.02.052.429 I llama_perf_context_print:        load time =     439.96 ms
0.02.052.430 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.052.432 I llama_perf_context_print:        eval time =    1592.37 ms /    32 runs   (   49.76 ms per token,    20.10 tokens per second)
0.02.052.432 I llama_perf_context_print:       total time =    1610.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.129s
user	8m15.006s
sys	0m6.883s
