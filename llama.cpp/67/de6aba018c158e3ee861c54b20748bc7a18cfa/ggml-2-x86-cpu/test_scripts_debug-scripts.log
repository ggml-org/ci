+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.024.625 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.823 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.912 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.923 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.925 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.929 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.930 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.931 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.932 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.934 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.935 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.941 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.943 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.944 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.945 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.946 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.571 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.670 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.810 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.817 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.818 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.819 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.825 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.827 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.828 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.836 I llama_model_loader: - type  f32:   37 tensors
0.00.268.840 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.308 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.704 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.736 I llm_load_vocab: special tokens cache size = 5
0.00.596.500 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.565 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.566 I llm_load_print_meta: arch             = gemma
0.00.596.567 I llm_load_print_meta: vocab type       = SPM
0.00.596.567 I llm_load_print_meta: n_vocab          = 256000
0.00.596.570 I llm_load_print_meta: n_merges         = 0
0.00.596.570 I llm_load_print_meta: vocab_only       = 0
0.00.596.571 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.571 I llm_load_print_meta: n_embd           = 2048
0.00.596.572 I llm_load_print_meta: n_layer          = 18
0.00.596.634 I llm_load_print_meta: n_head           = 8
0.00.596.641 I llm_load_print_meta: n_head_kv        = 1
0.00.596.642 I llm_load_print_meta: n_rot            = 256
0.00.596.643 I llm_load_print_meta: n_swa            = 0
0.00.596.643 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.644 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.649 I llm_load_print_meta: n_gqa            = 8
0.00.596.654 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.665 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.666 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.670 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.682 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.683 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.690 I llm_load_print_meta: n_ff             = 16384
0.00.596.691 I llm_load_print_meta: n_expert         = 0
0.00.596.691 I llm_load_print_meta: n_expert_used    = 0
0.00.596.692 I llm_load_print_meta: causal attn      = 1
0.00.596.693 I llm_load_print_meta: pooling type     = 0
0.00.596.693 I llm_load_print_meta: rope type        = 2
0.00.596.694 I llm_load_print_meta: rope scaling     = linear
0.00.596.698 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.698 I llm_load_print_meta: freq_scale_train = 1
0.00.596.699 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.699 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.699 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.700 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.700 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.700 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.701 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.701 I llm_load_print_meta: model type       = 2B
0.00.596.702 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.703 I llm_load_print_meta: model params     = 2.51 B
0.00.596.704 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.705 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.705 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.706 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.707 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.707 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.708 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.709 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.715 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.717 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.717 I llm_load_print_meta: max token length = 93
0.00.596.884 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.698.828 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.698.836 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.698.836 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.698.837 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.698.838 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.698.839 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.704.473 I llama_new_context_with_model: n_ctx      = 8192
0.00.704.480 I llama_new_context_with_model: n_batch    = 2048
0.00.704.481 I llama_new_context_with_model: n_ubatch   = 512
0.00.704.481 I llama_new_context_with_model: flash_attn = 0
0.00.704.484 I llama_new_context_with_model: freq_base  = 10000.0
0.00.704.485 I llama_new_context_with_model: freq_scale = 1
0.00.733.678 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.724 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.733.846 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.295 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.735.300 I llama_new_context_with_model: graph nodes  = 601
0.00.735.300 I llama_new_context_with_model: graph splits = 1
0.00.735.317 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.349.290 I main: llama threadpool init, n_threads = 4
0.01.349.303 I 
0.01.349.407 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.349.411 I 
0.01.349.579 I sampler seed: 1281207559
0.01.349.590 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.595 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.349.596 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.597 I 
 increasities for their ongoing efforts to exploit natural resources and degrade the environment.

The given text contains biased and inflammatory language. It is important to remain objective and

0.14.888.980 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.82 tokens per second)
0.14.888.983 I llama_perf_context_print:        load time =    1346.41 ms
0.14.888.984 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.888.986 I llama_perf_context_print:        eval time =   13458.53 ms /    32 runs   (  420.58 ms per token,     2.38 tokens per second)
0.14.888.999 I llama_perf_context_print:       total time =   13539.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.025.155 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.258 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.274 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.276 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.281 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.285 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.286 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.287 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.287 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.288 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.296 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.298 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.299 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.300 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.301 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.135 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.013 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.256 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.264 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.265 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.266 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.267 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.268 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.269 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.273 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.274 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.275 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.276 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.277 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.285 I llama_model_loader: - type  f32:   37 tensors
0.00.269.288 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.806 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.976 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.487.979 I llm_load_vocab: special tokens cache size = 5
0.00.582.856 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.582.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.582.926 I llm_load_print_meta: arch             = gemma
0.00.582.927 I llm_load_print_meta: vocab type       = SPM
0.00.582.928 I llm_load_print_meta: n_vocab          = 256000
0.00.582.930 I llm_load_print_meta: n_merges         = 0
0.00.582.931 I llm_load_print_meta: vocab_only       = 0
0.00.582.931 I llm_load_print_meta: n_ctx_train      = 8192
0.00.582.931 I llm_load_print_meta: n_embd           = 2048
0.00.582.932 I llm_load_print_meta: n_layer          = 18
0.00.582.997 I llm_load_print_meta: n_head           = 8
0.00.583.007 I llm_load_print_meta: n_head_kv        = 1
0.00.583.008 I llm_load_print_meta: n_rot            = 256
0.00.583.009 I llm_load_print_meta: n_swa            = 0
0.00.583.009 I llm_load_print_meta: n_embd_head_k    = 256
0.00.583.009 I llm_load_print_meta: n_embd_head_v    = 256
0.00.583.015 I llm_load_print_meta: n_gqa            = 8
0.00.583.019 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.583.024 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.583.028 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.583.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.583.030 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.583.030 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.583.030 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.583.035 I llm_load_print_meta: n_ff             = 16384
0.00.583.036 I llm_load_print_meta: n_expert         = 0
0.00.583.036 I llm_load_print_meta: n_expert_used    = 0
0.00.583.037 I llm_load_print_meta: causal attn      = 1
0.00.583.038 I llm_load_print_meta: pooling type     = 0
0.00.583.039 I llm_load_print_meta: rope type        = 2
0.00.583.040 I llm_load_print_meta: rope scaling     = linear
0.00.583.042 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.583.043 I llm_load_print_meta: freq_scale_train = 1
0.00.583.043 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.583.043 I llm_load_print_meta: rope_finetuned   = unknown
0.00.583.044 I llm_load_print_meta: ssm_d_conv       = 0
0.00.583.045 I llm_load_print_meta: ssm_d_inner      = 0
0.00.583.046 I llm_load_print_meta: ssm_d_state      = 0
0.00.583.046 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.583.047 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.583.048 I llm_load_print_meta: model type       = 2B
0.00.583.048 I llm_load_print_meta: model ftype      = Q8_0
0.00.583.049 I llm_load_print_meta: model params     = 2.51 B
0.00.583.050 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.583.051 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.583.052 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.583.055 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.583.055 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.583.056 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.583.056 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.583.057 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.583.062 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.583.064 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.583.065 I llm_load_print_meta: max token length = 93
0.00.583.230 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.232 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.684.855 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.863 I llama_new_context_with_model: n_batch    = 2048
0.00.684.863 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.864 I llama_new_context_with_model: flash_attn = 0
0.00.684.866 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.867 I llama_new_context_with_model: freq_scale = 1
0.00.714.409 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.454 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.570 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.715.965 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.715.970 I llama_new_context_with_model: graph nodes  = 601
0.00.715.970 I llama_new_context_with_model: graph splits = 1
0.00.715.987 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.954 I main: llama threadpool init, n_threads = 4
0.01.356.965 I 
0.01.357.069 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.073 I 
0.01.357.235 I sampler seed: 147725000
0.01.357.245 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.252 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.357.253 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.253 I 
 increasities with the goal of revealing a hidden truth.

**Example:**

A detective investigating a missing person case discovers clues suggesting a serial killer is operating in

0.14.889.613 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.75 tokens per second)
0.14.889.620 I llama_perf_context_print:        load time =    1354.04 ms
0.14.889.621 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.889.623 I llama_perf_context_print:        eval time =   13451.26 ms /    32 runs   (  420.35 ms per token,     2.38 tokens per second)
0.14.889.624 I llama_perf_context_print:       total time =   13532.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.728 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.943 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.038 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.050 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.051 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.056 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.057 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.058 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.060 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.061 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.062 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.069 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.070 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.071 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.072 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.073 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.844 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.050 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.327 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.333 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.334 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.335 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.336 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.338 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.339 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.342 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.343 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.345 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.345 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.347 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.355 I llama_model_loader: - type  f32:   37 tensors
0.00.268.359 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.323 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.003 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.009 I llm_load_vocab: special tokens cache size = 5
0.00.587.698 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.766 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.767 I llm_load_print_meta: arch             = gemma
0.00.587.768 I llm_load_print_meta: vocab type       = SPM
0.00.587.769 I llm_load_print_meta: n_vocab          = 256000
0.00.587.771 I llm_load_print_meta: n_merges         = 0
0.00.587.771 I llm_load_print_meta: vocab_only       = 0
0.00.587.772 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.772 I llm_load_print_meta: n_embd           = 2048
0.00.587.773 I llm_load_print_meta: n_layer          = 18
0.00.587.835 I llm_load_print_meta: n_head           = 8
0.00.587.843 I llm_load_print_meta: n_head_kv        = 1
0.00.587.844 I llm_load_print_meta: n_rot            = 256
0.00.587.845 I llm_load_print_meta: n_swa            = 0
0.00.587.846 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.846 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.851 I llm_load_print_meta: n_gqa            = 8
0.00.587.856 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.860 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.861 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.862 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.863 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.863 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.875 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.880 I llm_load_print_meta: n_ff             = 16384
0.00.587.895 I llm_load_print_meta: n_expert         = 0
0.00.587.898 I llm_load_print_meta: n_expert_used    = 0
0.00.587.899 I llm_load_print_meta: causal attn      = 1
0.00.587.899 I llm_load_print_meta: pooling type     = 0
0.00.587.900 I llm_load_print_meta: rope type        = 2
0.00.587.900 I llm_load_print_meta: rope scaling     = linear
0.00.587.902 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.903 I llm_load_print_meta: freq_scale_train = 1
0.00.587.903 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.903 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.904 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.904 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.904 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.905 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.905 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.906 I llm_load_print_meta: model type       = 2B
0.00.587.907 I llm_load_print_meta: model ftype      = Q8_0
0.00.587.908 I llm_load_print_meta: model params     = 2.51 B
0.00.587.909 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.587.909 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.910 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.910 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.911 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.911 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.921 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.921 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.932 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.934 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.934 I llm_load_print_meta: max token length = 93
0.00.588.101 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.666 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.665.676 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.665.677 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.665.678 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.665.678 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.665.679 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.672.553 I llama_new_context_with_model: n_ctx      = 8192
0.00.672.562 I llama_new_context_with_model: n_batch    = 2048
0.00.672.562 I llama_new_context_with_model: n_ubatch   = 512
0.00.672.563 I llama_new_context_with_model: flash_attn = 0
0.00.672.566 I llama_new_context_with_model: freq_base  = 10000.0
0.00.672.567 I llama_new_context_with_model: freq_scale = 1
0.00.704.755 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.803 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.330 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.335 I llama_new_context_with_model: graph nodes  = 601
0.00.706.335 I llama_new_context_with_model: graph splits = 1
0.00.706.351 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.943 I main: llama threadpool init, n_threads = 4
0.01.319.955 I 
0.01.320.061 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.320.065 I 
0.01.320.233 I sampler seed: 3982588075
0.01.320.244 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.252 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.320.264 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.267 I 
 increasities, but does not have the ability to reciprocate such actions. [end of text]


0.08.081.485 I llama_perf_sampler_print:    sampling time =      24.68 ms /    17 runs   (    1.45 ms per token,   688.82 tokens per second)
0.08.081.488 I llama_perf_context_print:        load time =    1317.06 ms
0.08.081.490 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.081.491 I llama_perf_context_print:        eval time =    6719.38 ms /    16 runs   (  419.96 ms per token,     2.38 tokens per second)
0.08.081.492 I llama_perf_context_print:       total time =    6761.55 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.703 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.930 I main: llama backend init
0.00.002.904 I main: load the model and apply lora adapter, if any
0.00.028.312 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.028.549 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.028.655 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.668 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.669 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.674 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.678 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.680 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.681 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.683 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.685 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.695 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.698 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.703 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.705 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.707 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.592 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.851 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.975 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.983 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.984 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.985 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.986 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.988 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.989 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.993 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.994 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.995 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.996 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.998 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.007 I llama_model_loader: - type  f32:   37 tensors
0.00.273.011 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.622 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.973 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.490.218 I llm_load_vocab: special tokens cache size = 5
0.00.587.239 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.308 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.309 I llm_load_print_meta: arch             = gemma
0.00.587.310 I llm_load_print_meta: vocab type       = SPM
0.00.587.311 I llm_load_print_meta: n_vocab          = 256000
0.00.587.313 I llm_load_print_meta: n_merges         = 0
0.00.587.314 I llm_load_print_meta: vocab_only       = 0
0.00.587.314 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.315 I llm_load_print_meta: n_embd           = 2048
0.00.587.315 I llm_load_print_meta: n_layer          = 18
0.00.587.378 I llm_load_print_meta: n_head           = 8
0.00.587.385 I llm_load_print_meta: n_head_kv        = 1
0.00.587.386 I llm_load_print_meta: n_rot            = 256
0.00.587.386 I llm_load_print_meta: n_swa            = 0
0.00.587.386 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.387 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.391 I llm_load_print_meta: n_gqa            = 8
0.00.587.396 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.401 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.405 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.406 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.408 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.408 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.422 I llm_load_print_meta: n_ff             = 16384
0.00.587.423 I llm_load_print_meta: n_expert         = 0
0.00.587.424 I llm_load_print_meta: n_expert_used    = 0
0.00.587.424 I llm_load_print_meta: causal attn      = 1
0.00.587.424 I llm_load_print_meta: pooling type     = 0
0.00.587.425 I llm_load_print_meta: rope type        = 2
0.00.587.425 I llm_load_print_meta: rope scaling     = linear
0.00.587.427 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.439 I llm_load_print_meta: freq_scale_train = 1
0.00.587.440 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.441 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.441 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.442 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.450 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.451 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.451 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.452 I llm_load_print_meta: model type       = 2B
0.00.587.453 I llm_load_print_meta: model ftype      = Q8_0
0.00.587.454 I llm_load_print_meta: model params     = 2.51 B
0.00.587.455 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.587.458 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.459 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.460 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.460 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.461 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.461 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.461 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.467 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.469 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.469 I llm_load_print_meta: max token length = 93
0.00.587.645 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.945 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.658.953 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.664.864 I llama_new_context_with_model: n_ctx      = 8192
0.00.664.870 I llama_new_context_with_model: n_batch    = 2048
0.00.664.870 I llama_new_context_with_model: n_ubatch   = 512
0.00.664.871 I llama_new_context_with_model: flash_attn = 0
0.00.664.874 I llama_new_context_with_model: freq_base  = 10000.0
0.00.664.875 I llama_new_context_with_model: freq_scale = 1
0.00.693.480 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.523 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.639 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.065 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.070 I llama_new_context_with_model: graph nodes  = 601
0.00.695.071 I llama_new_context_with_model: graph splits = 1
0.00.695.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.695 I main: llama threadpool init, n_threads = 4
0.01.355.706 I 
0.01.355.813 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.814 I 
0.01.355.980 I sampler seed: 1151870071
0.01.355.992 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.998 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.356.007 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.356.010 I 
 increasities.

The correct answer is: Oracy.

Oracy is the study and skill of spoken language. It includes the ability to produce fluent and

0.15.016.886 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.25 tokens per second)
0.15.016.889 I llama_perf_context_print:        load time =    1352.69 ms
0.15.016.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.016.892 I llama_perf_context_print:        eval time =   13579.67 ms /    32 runs   (  424.36 ms per token,     2.36 tokens per second)
0.15.016.893 I llama_perf_context_print:       total time =   13661.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.385s
user	3m22.873s
sys	0m9.297s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3914 (67de6aba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198328.95 ms
main:    total time = 198328.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.025.097 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.292 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.375 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.384 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.390 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.391 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.392 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.400 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.401 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.402 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.403 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.404 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.230 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.545 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.740 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.750 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.751 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.752 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.753 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.754 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.756 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.759 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.760 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.761 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.762 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.764 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.772 I llama_model_loader: - type  f32:   37 tensors
0.00.269.777 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.778 I llama_model_loader: - type q6_K:   19 tensors
0.00.443.757 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.328 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.339 I llm_load_vocab: special tokens cache size = 5
0.00.591.160 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.225 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.226 I llm_load_print_meta: arch             = gemma
0.00.591.227 I llm_load_print_meta: vocab type       = SPM
0.00.591.228 I llm_load_print_meta: n_vocab          = 256000
0.00.591.231 I llm_load_print_meta: n_merges         = 0
0.00.591.231 I llm_load_print_meta: vocab_only       = 0
0.00.591.231 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.232 I llm_load_print_meta: n_embd           = 2048
0.00.591.232 I llm_load_print_meta: n_layer          = 18
0.00.591.296 I llm_load_print_meta: n_head           = 8
0.00.591.303 I llm_load_print_meta: n_head_kv        = 1
0.00.591.303 I llm_load_print_meta: n_rot            = 256
0.00.591.304 I llm_load_print_meta: n_swa            = 0
0.00.591.304 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.305 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.310 I llm_load_print_meta: n_gqa            = 8
0.00.591.315 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.320 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.321 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.323 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.324 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.325 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.325 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.330 I llm_load_print_meta: n_ff             = 16384
0.00.591.330 I llm_load_print_meta: n_expert         = 0
0.00.591.330 I llm_load_print_meta: n_expert_used    = 0
0.00.591.331 I llm_load_print_meta: causal attn      = 1
0.00.591.332 I llm_load_print_meta: pooling type     = 0
0.00.591.333 I llm_load_print_meta: rope type        = 2
0.00.591.343 I llm_load_print_meta: rope scaling     = linear
0.00.591.345 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.346 I llm_load_print_meta: freq_scale_train = 1
0.00.591.347 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.348 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.348 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.349 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.349 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.350 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.350 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.351 I llm_load_print_meta: model type       = 2B
0.00.591.356 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.357 I llm_load_print_meta: model params     = 2.51 B
0.00.591.357 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.358 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.359 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.359 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.360 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.360 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.361 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.362 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.368 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.369 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.370 I llm_load_print_meta: max token length = 93
0.00.591.536 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.646 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.651.656 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.651.657 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.651.658 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.651.658 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.651.659 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.657.195 I llama_new_context_with_model: n_ctx      = 8192
0.00.657.201 I llama_new_context_with_model: n_batch    = 2048
0.00.657.202 I llama_new_context_with_model: n_ubatch   = 512
0.00.657.203 I llama_new_context_with_model: flash_attn = 0
0.00.657.205 I llama_new_context_with_model: freq_base  = 10000.0
0.00.657.206 I llama_new_context_with_model: freq_scale = 1
0.00.686.802 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.686.844 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.955 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.688.358 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.688.363 I llama_new_context_with_model: graph nodes  = 601
0.00.688.363 I llama_new_context_with_model: graph splits = 1
0.00.688.379 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.270.380 I main: llama threadpool init, n_threads = 4
0.01.270.392 I 
0.01.270.501 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.270.505 I 
0.01.270.674 I sampler seed: 1697859966
0.01.270.684 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.270.691 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.270.691 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.270.692 I 
 seconally after a brief introduction to the speaker and their expertise.

**Speaker:** My name is Dr. [your name] and I am a [your

0.12.205.443 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.65 tokens per second)
0.12.205.446 I llama_perf_context_print:        load time =    1267.52 ms
0.12.205.458 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.205.460 I llama_perf_context_print:        eval time =   10854.27 ms /    32 runs   (  339.20 ms per token,     2.95 tokens per second)
0.12.205.461 I llama_perf_context_print:       total time =   10935.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3914 (67de6aba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198651.73 ms
main:    total time = 198651.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3914 (67de6aba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.664 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.771 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.775 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.779 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.780 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.782 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.783 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.784 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.785 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.790 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.792 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.793 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.794 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.795 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.907 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.497 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.656 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.663 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.664 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.665 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.666 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.668 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.669 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.672 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.673 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.681 I llama_model_loader: - type  f32:   37 tensors
0.00.268.685 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.686 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.249 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.359 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.354 I llm_load_vocab: special tokens cache size = 5
0.00.605.538 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.612 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.613 I llm_load_print_meta: arch             = gemma
0.00.605.614 I llm_load_print_meta: vocab type       = SPM
0.00.605.615 I llm_load_print_meta: n_vocab          = 256000
0.00.605.617 I llm_load_print_meta: n_merges         = 0
0.00.605.618 I llm_load_print_meta: vocab_only       = 0
0.00.605.618 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.618 I llm_load_print_meta: n_embd           = 2048
0.00.605.619 I llm_load_print_meta: n_layer          = 18
0.00.605.681 I llm_load_print_meta: n_head           = 8
0.00.605.689 I llm_load_print_meta: n_head_kv        = 1
0.00.605.689 I llm_load_print_meta: n_rot            = 256
0.00.605.690 I llm_load_print_meta: n_swa            = 0
0.00.605.690 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.690 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.695 I llm_load_print_meta: n_gqa            = 8
0.00.605.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.705 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.705 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.708 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.708 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.708 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.709 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.713 I llm_load_print_meta: n_ff             = 16384
0.00.605.714 I llm_load_print_meta: n_expert         = 0
0.00.605.714 I llm_load_print_meta: n_expert_used    = 0
0.00.605.714 I llm_load_print_meta: causal attn      = 1
0.00.605.715 I llm_load_print_meta: pooling type     = 0
0.00.605.715 I llm_load_print_meta: rope type        = 2
0.00.605.715 I llm_load_print_meta: rope scaling     = linear
0.00.605.717 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.718 I llm_load_print_meta: freq_scale_train = 1
0.00.605.718 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.718 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.719 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.719 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.720 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.720 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.721 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.721 I llm_load_print_meta: model type       = 2B
0.00.605.722 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.723 I llm_load_print_meta: model params     = 2.51 B
0.00.605.723 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.724 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.724 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.725 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.725 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.725 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.726 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.726 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.732 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.734 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.734 I llm_load_print_meta: max token length = 93
0.00.605.901 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.663.795 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.669.353 I llama_new_context_with_model: n_ctx      = 8192
0.00.669.359 I llama_new_context_with_model: n_batch    = 2048
0.00.669.359 I llama_new_context_with_model: n_ubatch   = 512
0.00.669.360 I llama_new_context_with_model: flash_attn = 0
0.00.669.362 I llama_new_context_with_model: freq_base  = 10000.0
0.00.669.363 I llama_new_context_with_model: freq_scale = 1
0.00.698.575 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.698.620 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.698.737 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.700.149 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.154 I llama_new_context_with_model: graph nodes  = 601
0.00.700.154 I llama_new_context_with_model: graph splits = 1
0.00.700.169 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.191 I main: llama threadpool init, n_threads = 4
0.01.280.202 I 
0.01.280.304 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.304 I 
0.01.280.475 I sampler seed: 3963905919
0.01.280.486 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.493 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.280.504 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.505 I 
 strickly.

**Instructions:**
- Write a short story of about 500 words.
- Use the instructions provided.

**Story:**

0.12.227.886 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.50 tokens per second)
0.12.227.890 I llama_perf_context_print:        load time =    1277.34 ms
0.12.227.892 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.227.893 I llama_perf_context_print:        eval time =   10866.84 ms /    32 runs   (  339.59 ms per token,     2.94 tokens per second)
0.12.227.894 I llama_perf_context_print:       total time =   10947.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.280s
user	50m9.821s
sys	0m6.249s
