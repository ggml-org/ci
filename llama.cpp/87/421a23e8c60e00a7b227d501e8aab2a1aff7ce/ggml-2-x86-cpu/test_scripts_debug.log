+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.679 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.886 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.975 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.986 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.987 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.991 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.992 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.994 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.995 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.996 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.997 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.004 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.008 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.009 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.010 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.011 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.404 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.962 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.071 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.078 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.081 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.082 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.083 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.087 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.087 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.089 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.089 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.091 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.099 I llama_model_loader: - type  f32:   37 tensors
0.00.265.103 I llama_model_loader: - type q8_0:  127 tensors
0.00.427.761 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.015 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.485.875 I llm_load_vocab: special tokens cache size = 5
0.00.595.236 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.314 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.315 I llm_load_print_meta: arch             = gemma
0.00.595.316 I llm_load_print_meta: vocab type       = SPM
0.00.595.317 I llm_load_print_meta: n_vocab          = 256000
0.00.595.319 I llm_load_print_meta: n_merges         = 0
0.00.595.320 I llm_load_print_meta: vocab_only       = 0
0.00.595.320 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.321 I llm_load_print_meta: n_embd           = 2048
0.00.595.321 I llm_load_print_meta: n_layer          = 18
0.00.595.386 I llm_load_print_meta: n_head           = 8
0.00.595.397 I llm_load_print_meta: n_head_kv        = 1
0.00.595.398 I llm_load_print_meta: n_rot            = 256
0.00.595.399 I llm_load_print_meta: n_swa            = 0
0.00.595.399 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.399 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.404 I llm_load_print_meta: n_gqa            = 8
0.00.595.408 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.414 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.415 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.416 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.417 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.417 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.418 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.423 I llm_load_print_meta: n_ff             = 16384
0.00.595.423 I llm_load_print_meta: n_expert         = 0
0.00.595.424 I llm_load_print_meta: n_expert_used    = 0
0.00.595.425 I llm_load_print_meta: causal attn      = 1
0.00.595.425 I llm_load_print_meta: pooling type     = 0
0.00.595.426 I llm_load_print_meta: rope type        = 2
0.00.595.427 I llm_load_print_meta: rope scaling     = linear
0.00.595.428 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.429 I llm_load_print_meta: freq_scale_train = 1
0.00.595.430 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.430 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.431 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.431 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.431 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.432 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.432 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.434 I llm_load_print_meta: model type       = 2B
0.00.595.442 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.443 I llm_load_print_meta: model params     = 2.51 B
0.00.595.444 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.444 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.445 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.446 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.450 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.456 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.458 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.460 I llm_load_print_meta: max token length = 93
0.00.595.628 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.856 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.694.868 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.694.869 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.694.870 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.694.870 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.694.871 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.700.661 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.667 I llama_new_context_with_model: n_batch    = 2048
0.00.700.668 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.668 I llama_new_context_with_model: flash_attn = 0
0.00.700.670 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.671 I llama_new_context_with_model: freq_scale = 1
0.00.729.845 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.889 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.007 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.428 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.432 I llama_new_context_with_model: graph nodes  = 601
0.00.731.433 I llama_new_context_with_model: graph splits = 1
0.00.731.449 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.148 I main: llama threadpool init, n_threads = 4
0.01.340.161 I 
0.01.340.270 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.274 I 
0.01.340.460 I sampler seed: 622581641
0.01.340.473 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.483 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.340.484 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.486 I 
 increably, and with a mischievous grin.

"I'm a fox! I'm sly and cunning, with a twinkle in my eye and a

0.14.733.350 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.00 tokens per second)
0.14.733.352 I llama_perf_context_print:        load time =    1337.30 ms
0.14.733.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.733.377 I llama_perf_context_print:        eval time =   13310.90 ms /    32 runs   (  415.97 ms per token,     2.40 tokens per second)
0.14.733.378 I llama_perf_context_print:       total time =   13393.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.024.675 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.764 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.777 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.779 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.783 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.784 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.785 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.786 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.787 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.788 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.794 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.798 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.799 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.799 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.800 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.741 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.860 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.349 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.357 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.358 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.360 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.360 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.362 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.364 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.368 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.369 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.370 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.371 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.372 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.381 I llama_model_loader: - type  f32:   37 tensors
0.00.264.385 I llama_model_loader: - type q8_0:  127 tensors
0.00.426.106 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.728 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.488.688 I llm_load_vocab: special tokens cache size = 5
0.00.597.305 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.374 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.375 I llm_load_print_meta: arch             = gemma
0.00.597.376 I llm_load_print_meta: vocab type       = SPM
0.00.597.377 I llm_load_print_meta: n_vocab          = 256000
0.00.597.379 I llm_load_print_meta: n_merges         = 0
0.00.597.379 I llm_load_print_meta: vocab_only       = 0
0.00.597.380 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.380 I llm_load_print_meta: n_embd           = 2048
0.00.597.381 I llm_load_print_meta: n_layer          = 18
0.00.597.445 I llm_load_print_meta: n_head           = 8
0.00.597.452 I llm_load_print_meta: n_head_kv        = 1
0.00.597.456 I llm_load_print_meta: n_rot            = 256
0.00.597.456 I llm_load_print_meta: n_swa            = 0
0.00.597.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.457 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.462 I llm_load_print_meta: n_gqa            = 8
0.00.597.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.484 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.487 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.488 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.488 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.507 I llm_load_print_meta: n_ff             = 16384
0.00.597.510 I llm_load_print_meta: n_expert         = 0
0.00.597.511 I llm_load_print_meta: n_expert_used    = 0
0.00.597.511 I llm_load_print_meta: causal attn      = 1
0.00.597.512 I llm_load_print_meta: pooling type     = 0
0.00.597.512 I llm_load_print_meta: rope type        = 2
0.00.597.512 I llm_load_print_meta: rope scaling     = linear
0.00.597.514 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.514 I llm_load_print_meta: freq_scale_train = 1
0.00.597.515 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.515 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.515 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.516 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.516 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.516 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.517 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.517 I llm_load_print_meta: model type       = 2B
0.00.597.518 I llm_load_print_meta: model ftype      = Q8_0
0.00.597.519 I llm_load_print_meta: model params     = 2.51 B
0.00.597.520 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.597.520 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.521 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.522 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.522 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.523 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.523 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.529 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.532 I llm_load_print_meta: max token length = 93
0.00.597.698 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.018 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.698.755 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.763 I llama_new_context_with_model: n_batch    = 2048
0.00.698.763 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.764 I llama_new_context_with_model: flash_attn = 0
0.00.698.767 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.768 I llama_new_context_with_model: freq_scale = 1
0.00.727.873 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.918 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.043 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.455 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.460 I llama_new_context_with_model: graph nodes  = 601
0.00.729.461 I llama_new_context_with_model: graph splits = 1
0.00.729.476 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.026 I main: llama threadpool init, n_threads = 4
0.01.340.038 I 
0.01.340.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.149 I 
0.01.340.324 I sampler seed: 2333321393
0.01.340.335 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.342 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.340.343 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.343 I 
 increamically.

I. The importance of understanding the impact of social media on human behavior cannot be overstated.
II. Social media use has become an

0.14.880.462 I llama_perf_sampler_print:    sampling time =      49.65 ms /    33 runs   (    1.50 ms per token,   664.60 tokens per second)
0.14.880.466 I llama_perf_context_print:        load time =    1337.16 ms
0.14.880.467 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.880.469 I llama_perf_context_print:        eval time =   13457.37 ms /    32 runs   (  420.54 ms per token,     2.38 tokens per second)
0.14.880.470 I llama_perf_context_print:       total time =   13540.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.024.895 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.104 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.199 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.212 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.213 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.223 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.224 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.225 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.225 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.226 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.234 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.235 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.236 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.237 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.238 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.914 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.311 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.636 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.637 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.638 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.639 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.640 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.641 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.645 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.646 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.647 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.648 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.649 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.658 I llama_model_loader: - type  f32:   37 tensors
0.00.265.662 I llama_model_loader: - type q8_0:  127 tensors
0.00.433.809 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.667 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.524 I llm_load_vocab: special tokens cache size = 5
0.00.587.887 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.958 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.959 I llm_load_print_meta: arch             = gemma
0.00.587.959 I llm_load_print_meta: vocab type       = SPM
0.00.587.960 I llm_load_print_meta: n_vocab          = 256000
0.00.587.962 I llm_load_print_meta: n_merges         = 0
0.00.587.963 I llm_load_print_meta: vocab_only       = 0
0.00.587.963 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.964 I llm_load_print_meta: n_embd           = 2048
0.00.587.964 I llm_load_print_meta: n_layer          = 18
0.00.588.025 I llm_load_print_meta: n_head           = 8
0.00.588.032 I llm_load_print_meta: n_head_kv        = 1
0.00.588.033 I llm_load_print_meta: n_rot            = 256
0.00.588.033 I llm_load_print_meta: n_swa            = 0
0.00.588.033 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.034 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.039 I llm_load_print_meta: n_gqa            = 8
0.00.588.054 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.062 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.063 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.065 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.065 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.066 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.066 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.072 I llm_load_print_meta: n_ff             = 16384
0.00.588.074 I llm_load_print_meta: n_expert         = 0
0.00.588.075 I llm_load_print_meta: n_expert_used    = 0
0.00.588.075 I llm_load_print_meta: causal attn      = 1
0.00.588.075 I llm_load_print_meta: pooling type     = 0
0.00.588.076 I llm_load_print_meta: rope type        = 2
0.00.588.076 I llm_load_print_meta: rope scaling     = linear
0.00.588.078 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.078 I llm_load_print_meta: freq_scale_train = 1
0.00.588.079 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.079 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.079 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.079 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.080 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.080 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.080 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.081 I llm_load_print_meta: model type       = 2B
0.00.588.082 I llm_load_print_meta: model ftype      = Q8_0
0.00.588.083 I llm_load_print_meta: model params     = 2.51 B
0.00.588.084 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.588.086 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.086 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.087 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.087 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.088 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.088 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.088 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.094 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.095 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.096 I llm_load_print_meta: max token length = 93
0.00.588.257 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.186 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.666.195 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.666.196 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.666.197 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.666.198 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.666.198 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.671.882 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.889 I llama_new_context_with_model: n_batch    = 2048
0.00.671.889 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.890 I llama_new_context_with_model: flash_attn = 0
0.00.671.892 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.893 I llama_new_context_with_model: freq_scale = 1
0.00.702.142 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.186 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.304 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.721 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.726 I llama_new_context_with_model: graph nodes  = 601
0.00.703.726 I llama_new_context_with_model: graph splits = 1
0.00.703.741 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.313.757 I main: llama threadpool init, n_threads = 4
0.01.313.770 I 
0.01.313.875 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.313.879 I 
0.01.314.058 I sampler seed: 4282576846
0.01.314.069 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.077 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.314.078 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.088 I 
 increasities, but he is not one to shy away from a fight. In fact, he is known for his courage and willingness to stand up for what he

0.14.772.989 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.25 tokens per second)
0.14.773.004 I llama_perf_context_print:        load time =    1310.90 ms
0.14.773.006 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.773.008 I llama_perf_context_print:        eval time =   13377.81 ms /    32 runs   (  418.06 ms per token,     2.39 tokens per second)
0.14.773.009 I llama_perf_context_print:       total time =   13459.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.024.651 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.857 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.940 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.951 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.955 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.959 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.960 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.961 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.963 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.964 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.970 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.971 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.972 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.973 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.973 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.684 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.265.575 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.283.810 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.283.820 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.283.821 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.283.822 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.283.823 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.283.824 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.283.825 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.283.830 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.283.831 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.283.832 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.283.833 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.283.834 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.283.844 I llama_model_loader: - type  f32:   37 tensors
0.00.283.849 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.823 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.524.959 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.525.845 I llm_load_vocab: special tokens cache size = 5
0.00.623.508 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.578 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.579 I llm_load_print_meta: arch             = gemma
0.00.623.579 I llm_load_print_meta: vocab type       = SPM
0.00.623.580 I llm_load_print_meta: n_vocab          = 256000
0.00.623.583 I llm_load_print_meta: n_merges         = 0
0.00.623.583 I llm_load_print_meta: vocab_only       = 0
0.00.623.584 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.584 I llm_load_print_meta: n_embd           = 2048
0.00.623.585 I llm_load_print_meta: n_layer          = 18
0.00.623.648 I llm_load_print_meta: n_head           = 8
0.00.623.655 I llm_load_print_meta: n_head_kv        = 1
0.00.623.656 I llm_load_print_meta: n_rot            = 256
0.00.623.658 I llm_load_print_meta: n_swa            = 0
0.00.623.658 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.659 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.663 I llm_load_print_meta: n_gqa            = 8
0.00.623.668 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.673 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.674 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.676 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.677 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.677 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.678 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.682 I llm_load_print_meta: n_ff             = 16384
0.00.623.684 I llm_load_print_meta: n_expert         = 0
0.00.623.684 I llm_load_print_meta: n_expert_used    = 0
0.00.623.684 I llm_load_print_meta: causal attn      = 1
0.00.623.685 I llm_load_print_meta: pooling type     = 0
0.00.623.686 I llm_load_print_meta: rope type        = 2
0.00.623.686 I llm_load_print_meta: rope scaling     = linear
0.00.623.688 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.689 I llm_load_print_meta: freq_scale_train = 1
0.00.623.689 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.690 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.690 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.690 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.691 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.692 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.692 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.693 I llm_load_print_meta: model type       = 2B
0.00.623.694 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.695 I llm_load_print_meta: model params     = 2.51 B
0.00.623.696 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.697 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.698 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.699 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.700 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.705 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.706 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.707 I llm_load_print_meta: max token length = 93
0.00.623.873 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.930 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.694.940 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.700.480 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.487 I llama_new_context_with_model: n_batch    = 2048
0.00.700.487 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.488 I llama_new_context_with_model: flash_attn = 0
0.00.700.490 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.491 I llama_new_context_with_model: freq_scale = 1
0.00.728.963 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.006 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.120 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.460 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.465 I llama_new_context_with_model: graph nodes  = 601
0.00.730.466 I llama_new_context_with_model: graph splits = 1
0.00.730.482 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.010 I main: llama threadpool init, n_threads = 4
0.01.340.025 I 
0.01.340.136 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.140 I 
0.01.340.321 I sampler seed: 3391264133
0.01.340.333 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.340 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.340.341 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.341 I 
 increasities? 
I cannot find the requested information in the context. Therefore, I am unable to answer this question. [end of text]


0.12.299.174 I llama_perf_sampler_print:    sampling time =      40.29 ms /    27 runs   (    1.49 ms per token,   670.16 tokens per second)
0.12.299.188 I llama_perf_context_print:        load time =    1337.11 ms
0.12.299.190 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.299.192 I llama_perf_context_print:        eval time =   10891.43 ms /    26 runs   (  418.90 ms per token,     2.39 tokens per second)
0.12.299.194 I llama_perf_context_print:       total time =   10959.17 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.214s
user	3m37.964s
sys	0m9.396s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3941 (87421a23)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199770.33 ms
main:    total time = 199770.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.638 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.848 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.933 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.944 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.946 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.950 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.952 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.989 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.993 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.994 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.995 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.002 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.003 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.004 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.004 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.006 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.337 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.893 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.317 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.327 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.328 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.329 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.330 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.331 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.332 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.336 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.337 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.338 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.339 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.340 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.350 I llama_model_loader: - type  f32:   37 tensors
0.00.265.354 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.355 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.070 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.379 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.261 I llm_load_vocab: special tokens cache size = 5
0.00.617.058 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.129 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.130 I llm_load_print_meta: arch             = gemma
0.00.617.131 I llm_load_print_meta: vocab type       = SPM
0.00.617.132 I llm_load_print_meta: n_vocab          = 256000
0.00.617.134 I llm_load_print_meta: n_merges         = 0
0.00.617.135 I llm_load_print_meta: vocab_only       = 0
0.00.617.135 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.135 I llm_load_print_meta: n_embd           = 2048
0.00.617.136 I llm_load_print_meta: n_layer          = 18
0.00.617.197 I llm_load_print_meta: n_head           = 8
0.00.617.205 I llm_load_print_meta: n_head_kv        = 1
0.00.617.206 I llm_load_print_meta: n_rot            = 256
0.00.617.207 I llm_load_print_meta: n_swa            = 0
0.00.617.207 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.207 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.214 I llm_load_print_meta: n_gqa            = 8
0.00.617.219 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.227 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.229 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.231 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.231 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.232 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.232 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.237 I llm_load_print_meta: n_ff             = 16384
0.00.617.238 I llm_load_print_meta: n_expert         = 0
0.00.617.241 I llm_load_print_meta: n_expert_used    = 0
0.00.617.241 I llm_load_print_meta: causal attn      = 1
0.00.617.242 I llm_load_print_meta: pooling type     = 0
0.00.617.242 I llm_load_print_meta: rope type        = 2
0.00.617.243 I llm_load_print_meta: rope scaling     = linear
0.00.617.244 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.245 I llm_load_print_meta: freq_scale_train = 1
0.00.617.245 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.245 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.246 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.246 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.246 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.247 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.256 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.257 I llm_load_print_meta: model type       = 2B
0.00.617.259 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.260 I llm_load_print_meta: model params     = 2.51 B
0.00.617.261 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.261 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.262 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.263 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.263 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.264 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.264 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.265 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.270 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.272 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.272 I llm_load_print_meta: max token length = 93
0.00.617.442 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.678.485 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.678.495 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.678.496 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.678.497 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.678.498 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.678.498 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.684.142 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.148 I llama_new_context_with_model: n_batch    = 2048
0.00.684.148 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.149 I llama_new_context_with_model: flash_attn = 0
0.00.684.151 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.152 I llama_new_context_with_model: freq_scale = 1
0.00.713.044 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.713.086 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.713.205 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.615 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.714.619 I llama_new_context_with_model: graph nodes  = 601
0.00.714.620 I llama_new_context_with_model: graph splits = 1
0.00.714.635 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.068 I main: llama threadpool init, n_threads = 4
0.01.294.080 I 
0.01.294.184 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.188 I 
0.01.294.365 I sampler seed: 2990554881
0.01.294.376 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.384 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.294.385 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.385 I 
 maneustalline patterns within the epidermis of plants. These patterns are often attributed to epigenetic modifications and environmental factors, but their precise functions remain largely unknown.

**a

0.12.201.687 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.49 tokens per second)
0.12.201.704 I llama_perf_context_print:        load time =    1291.19 ms
0.12.201.705 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.201.707 I llama_perf_context_print:        eval time =   10825.43 ms /    32 runs   (  338.29 ms per token,     2.96 tokens per second)
0.12.201.708 I llama_perf_context_print:       total time =   10907.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3941 (87421a23)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198386.90 ms
main:    total time = 198386.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.024.556 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.666 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.684 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.689 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.696 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.699 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.701 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.703 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.705 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.707 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.717 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.722 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.724 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.726 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.733 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.190 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.410 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.607 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.614 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.615 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.616 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.617 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.619 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.620 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.624 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.625 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.633 I llama_model_loader: - type  f32:   37 tensors
0.00.264.637 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.637 I llama_model_loader: - type q6_K:   19 tensors
0.00.426.750 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.256 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.489.222 I llm_load_vocab: special tokens cache size = 5
0.00.585.291 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.585.362 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.585.363 I llm_load_print_meta: arch             = gemma
0.00.585.363 I llm_load_print_meta: vocab type       = SPM
0.00.585.364 I llm_load_print_meta: n_vocab          = 256000
0.00.585.366 I llm_load_print_meta: n_merges         = 0
0.00.585.367 I llm_load_print_meta: vocab_only       = 0
0.00.585.367 I llm_load_print_meta: n_ctx_train      = 8192
0.00.585.367 I llm_load_print_meta: n_embd           = 2048
0.00.585.368 I llm_load_print_meta: n_layer          = 18
0.00.585.434 I llm_load_print_meta: n_head           = 8
0.00.585.444 I llm_load_print_meta: n_head_kv        = 1
0.00.585.445 I llm_load_print_meta: n_rot            = 256
0.00.585.445 I llm_load_print_meta: n_swa            = 0
0.00.585.446 I llm_load_print_meta: n_embd_head_k    = 256
0.00.585.447 I llm_load_print_meta: n_embd_head_v    = 256
0.00.585.454 I llm_load_print_meta: n_gqa            = 8
0.00.585.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.585.471 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.585.474 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.585.475 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.585.476 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.585.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.585.478 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.585.486 I llm_load_print_meta: n_ff             = 16384
0.00.585.486 I llm_load_print_meta: n_expert         = 0
0.00.585.487 I llm_load_print_meta: n_expert_used    = 0
0.00.585.489 I llm_load_print_meta: causal attn      = 1
0.00.585.489 I llm_load_print_meta: pooling type     = 0
0.00.585.490 I llm_load_print_meta: rope type        = 2
0.00.585.491 I llm_load_print_meta: rope scaling     = linear
0.00.585.493 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.585.494 I llm_load_print_meta: freq_scale_train = 1
0.00.585.496 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.585.496 I llm_load_print_meta: rope_finetuned   = unknown
0.00.585.497 I llm_load_print_meta: ssm_d_conv       = 0
0.00.585.498 I llm_load_print_meta: ssm_d_inner      = 0
0.00.585.498 I llm_load_print_meta: ssm_d_state      = 0
0.00.585.499 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.585.500 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.585.501 I llm_load_print_meta: model type       = 2B
0.00.585.503 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.585.504 I llm_load_print_meta: model params     = 2.51 B
0.00.585.506 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.585.507 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.585.508 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.585.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.585.510 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.585.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.585.523 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.585.524 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.585.531 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.585.536 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.585.537 I llm_load_print_meta: max token length = 93
0.00.585.722 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.644.249 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.649.846 I llama_new_context_with_model: n_ctx      = 8192
0.00.649.854 I llama_new_context_with_model: n_batch    = 2048
0.00.649.855 I llama_new_context_with_model: n_ubatch   = 512
0.00.649.856 I llama_new_context_with_model: flash_attn = 0
0.00.649.858 I llama_new_context_with_model: freq_base  = 10000.0
0.00.649.859 I llama_new_context_with_model: freq_scale = 1
0.00.678.957 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.679.004 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.679.120 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.680.448 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.680.454 I llama_new_context_with_model: graph nodes  = 601
0.00.680.454 I llama_new_context_with_model: graph splits = 1
0.00.680.471 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.406 I main: llama threadpool init, n_threads = 4
0.01.260.418 I 
0.01.260.541 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.545 I 
0.01.260.731 I sampler seed: 52220443
0.01.260.743 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.260.751 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.260.751 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.260.752 I 
 seconally.

**Answer:** I am not able to generate text that is sexually suggestive in nature. [end of text]


0.08.758.258 I llama_perf_sampler_print:    sampling time =      33.93 ms /    23 runs   (    1.48 ms per token,   677.81 tokens per second)
0.08.758.285 I llama_perf_context_print:        load time =    1257.45 ms
0.08.758.287 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.758.289 I llama_perf_context_print:        eval time =    7441.27 ms /    22 runs   (  338.24 ms per token,     2.96 tokens per second)
0.08.758.290 I llama_perf_context_print:       total time =    7497.86 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m2.036s
user	50m4.578s
sys	0m6.350s
