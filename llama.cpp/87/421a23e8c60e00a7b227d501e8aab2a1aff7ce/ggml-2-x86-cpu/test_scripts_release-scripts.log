+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.599 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.001.895 I main: load the model and apply lora adapter, if any
0.00.022.049 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.098 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.105 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.111 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.115 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.118 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.119 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.120 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.120 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.125 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.126 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.127 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.127 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.128 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.661 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.069 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.897 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.903 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.904 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.904 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.905 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.906 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.906 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.909 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.910 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.910 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.911 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.911 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.914 I llama_model_loader: - type  f32:   37 tensors
0.00.131.917 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.926 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.367 I llm_load_vocab: special tokens cache size = 5
0.00.269.522 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.536 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.537 I llm_load_print_meta: arch             = gemma
0.00.269.538 I llm_load_print_meta: vocab type       = SPM
0.00.269.538 I llm_load_print_meta: n_vocab          = 256000
0.00.269.539 I llm_load_print_meta: n_merges         = 0
0.00.269.539 I llm_load_print_meta: vocab_only       = 0
0.00.269.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.540 I llm_load_print_meta: n_embd           = 2048
0.00.269.540 I llm_load_print_meta: n_layer          = 18
0.00.269.551 I llm_load_print_meta: n_head           = 8
0.00.269.552 I llm_load_print_meta: n_head_kv        = 1
0.00.269.553 I llm_load_print_meta: n_rot            = 256
0.00.269.553 I llm_load_print_meta: n_swa            = 0
0.00.269.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.554 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.555 I llm_load_print_meta: n_gqa            = 8
0.00.269.556 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.557 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.557 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.558 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.559 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.559 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.560 I llm_load_print_meta: n_ff             = 16384
0.00.269.561 I llm_load_print_meta: n_expert         = 0
0.00.269.561 I llm_load_print_meta: n_expert_used    = 0
0.00.269.561 I llm_load_print_meta: causal attn      = 1
0.00.269.562 I llm_load_print_meta: pooling type     = 0
0.00.269.563 I llm_load_print_meta: rope type        = 2
0.00.269.563 I llm_load_print_meta: rope scaling     = linear
0.00.269.564 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.565 I llm_load_print_meta: freq_scale_train = 1
0.00.269.565 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.566 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.566 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.567 I llm_load_print_meta: model type       = 2B
0.00.269.567 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.569 I llm_load_print_meta: model params     = 2.51 B
0.00.269.569 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.570 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.570 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.571 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.571 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.572 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.572 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.572 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.573 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.573 I llm_load_print_meta: max token length = 93
0.00.269.597 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.370.184 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.370.193 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.370.194 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.370.195 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.370.195 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.370.196 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.375.376 I llama_new_context_with_model: n_ctx      = 8192
0.00.375.382 I llama_new_context_with_model: n_batch    = 2048
0.00.375.383 I llama_new_context_with_model: n_ubatch   = 512
0.00.375.383 I llama_new_context_with_model: flash_attn = 0
0.00.375.385 I llama_new_context_with_model: freq_base  = 10000.0
0.00.375.386 I llama_new_context_with_model: freq_scale = 1
0.00.404.229 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.404.243 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.404.336 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.405.281 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.405.289 I llama_new_context_with_model: graph nodes  = 601
0.00.405.290 I llama_new_context_with_model: graph splits = 1
0.00.405.292 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.513 I main: llama threadpool init, n_threads = 4
0.00.496.527 I 
0.00.496.617 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.620 I 
0.00.496.659 I sampler seed: 3445781516
0.00.496.669 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.672 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.496.673 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.673 I 
 increasities in the workplace?

**Answer:**

**Workplace Crescendos and Challenges**

**1. Unrealistic Expectations and Stress:**

- Employees may

0.02.731.121 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6473.13 tokens per second)
0.02.731.123 I llama_perf_context_print:        load time =     494.59 ms
0.02.731.124 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.731.126 I llama_perf_context_print:        eval time =    2216.79 ms /    32 runs   (   69.27 ms per token,    14.44 tokens per second)
0.02.731.127 I llama_perf_context_print:       total time =    2234.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.544 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.839 I main: load the model and apply lora adapter, if any
0.00.021.985 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.000 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.007 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.008 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.012 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.012 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.013 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.014 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.014 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.015 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.019 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.020 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.020 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.021 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.021 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.616 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.405 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.267 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.274 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.275 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.276 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.277 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.278 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.279 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.282 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.283 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.284 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.284 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.285 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.288 I llama_model_loader: - type  f32:   37 tensors
0.00.132.291 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.945 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.419 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.913 I llm_load_vocab: special tokens cache size = 5
0.00.268.022 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.038 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.039 I llm_load_print_meta: arch             = gemma
0.00.268.039 I llm_load_print_meta: vocab type       = SPM
0.00.268.040 I llm_load_print_meta: n_vocab          = 256000
0.00.268.040 I llm_load_print_meta: n_merges         = 0
0.00.268.041 I llm_load_print_meta: vocab_only       = 0
0.00.268.041 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.041 I llm_load_print_meta: n_embd           = 2048
0.00.268.041 I llm_load_print_meta: n_layer          = 18
0.00.268.052 I llm_load_print_meta: n_head           = 8
0.00.268.053 I llm_load_print_meta: n_head_kv        = 1
0.00.268.054 I llm_load_print_meta: n_rot            = 256
0.00.268.054 I llm_load_print_meta: n_swa            = 0
0.00.268.054 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.055 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.055 I llm_load_print_meta: n_gqa            = 8
0.00.268.056 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.057 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.058 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.059 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.060 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.060 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.060 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.061 I llm_load_print_meta: n_ff             = 16384
0.00.268.061 I llm_load_print_meta: n_expert         = 0
0.00.268.062 I llm_load_print_meta: n_expert_used    = 0
0.00.268.062 I llm_load_print_meta: causal attn      = 1
0.00.268.062 I llm_load_print_meta: pooling type     = 0
0.00.268.063 I llm_load_print_meta: rope type        = 2
0.00.268.063 I llm_load_print_meta: rope scaling     = linear
0.00.268.064 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.065 I llm_load_print_meta: freq_scale_train = 1
0.00.268.065 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.066 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.066 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.066 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.066 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.067 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.067 I llm_load_print_meta: model type       = 2B
0.00.268.067 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.068 I llm_load_print_meta: model params     = 2.51 B
0.00.268.069 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.069 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.070 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.070 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.071 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.071 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.071 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.072 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.072 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.072 I llm_load_print_meta: max token length = 93
0.00.268.090 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.361.650 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.366.706 I llama_new_context_with_model: n_ctx      = 8192
0.00.366.713 I llama_new_context_with_model: n_batch    = 2048
0.00.366.713 I llama_new_context_with_model: n_ubatch   = 512
0.00.366.714 I llama_new_context_with_model: flash_attn = 0
0.00.366.716 I llama_new_context_with_model: freq_base  = 10000.0
0.00.366.717 I llama_new_context_with_model: freq_scale = 1
0.00.395.686 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.700 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.395.794 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.655 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.396.663 I llama_new_context_with_model: graph nodes  = 601
0.00.396.663 I llama_new_context_with_model: graph splits = 1
0.00.396.665 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.390 I main: llama threadpool init, n_threads = 4
0.00.484.405 I 
0.00.484.481 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.484.485 I 
0.00.484.524 I sampler seed: 949270633
0.00.484.535 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.541 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.484.542 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.542 I 
 increasels, and the like, are all referred to as what?
A) Protozoa
B) Microorganisms
C) Fungi
D) Paras

0.02.649.676 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.02.649.678 I llama_perf_context_print:        load time =     482.53 ms
0.02.649.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.649.680 I llama_perf_context_print:        eval time =    2147.21 ms /    32 runs   (   67.10 ms per token,    14.90 tokens per second)
0.02.649.681 I llama_perf_context_print:       total time =    2165.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.528 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.022.029 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.091 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.104 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.110 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.111 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.115 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.115 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.116 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.116 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.117 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.117 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.122 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.123 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.124 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.126 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.127 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.851 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.898 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.771 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.778 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.779 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.780 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.780 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.782 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.782 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.786 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.787 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.787 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.788 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.792 I llama_model_loader: - type  f32:   37 tensors
0.00.131.795 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.130 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.599 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.150 I llm_load_vocab: special tokens cache size = 5
0.00.270.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.325 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.325 I llm_load_print_meta: arch             = gemma
0.00.270.326 I llm_load_print_meta: vocab type       = SPM
0.00.270.326 I llm_load_print_meta: n_vocab          = 256000
0.00.270.327 I llm_load_print_meta: n_merges         = 0
0.00.270.327 I llm_load_print_meta: vocab_only       = 0
0.00.270.327 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.328 I llm_load_print_meta: n_embd           = 2048
0.00.270.329 I llm_load_print_meta: n_layer          = 18
0.00.270.340 I llm_load_print_meta: n_head           = 8
0.00.270.342 I llm_load_print_meta: n_head_kv        = 1
0.00.270.342 I llm_load_print_meta: n_rot            = 256
0.00.270.343 I llm_load_print_meta: n_swa            = 0
0.00.270.343 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.344 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.346 I llm_load_print_meta: n_gqa            = 8
0.00.270.347 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.349 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.351 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.353 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.354 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.355 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.355 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.360 I llm_load_print_meta: n_ff             = 16384
0.00.270.360 I llm_load_print_meta: n_expert         = 0
0.00.270.361 I llm_load_print_meta: n_expert_used    = 0
0.00.270.362 I llm_load_print_meta: causal attn      = 1
0.00.270.362 I llm_load_print_meta: pooling type     = 0
0.00.270.363 I llm_load_print_meta: rope type        = 2
0.00.270.363 I llm_load_print_meta: rope scaling     = linear
0.00.270.366 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.367 I llm_load_print_meta: freq_scale_train = 1
0.00.270.367 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.368 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.370 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.370 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.371 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.371 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.372 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.373 I llm_load_print_meta: model type       = 2B
0.00.270.373 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.375 I llm_load_print_meta: model params     = 2.51 B
0.00.270.376 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.377 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.378 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.378 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.380 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.380 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.381 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.381 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.382 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.383 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.383 I llm_load_print_meta: max token length = 93
0.00.270.408 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.346.706 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.346.713 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.346.714 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.346.714 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.346.715 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.346.716 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.351.840 I llama_new_context_with_model: n_ctx      = 8192
0.00.351.847 I llama_new_context_with_model: n_batch    = 2048
0.00.351.847 I llama_new_context_with_model: n_ubatch   = 512
0.00.351.848 I llama_new_context_with_model: flash_attn = 0
0.00.351.850 I llama_new_context_with_model: freq_base  = 10000.0
0.00.351.850 I llama_new_context_with_model: freq_scale = 1
0.00.381.534 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.381.549 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.381.661 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.556 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.382.564 I llama_new_context_with_model: graph nodes  = 601
0.00.382.564 I llama_new_context_with_model: graph splits = 1
0.00.382.566 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.696 I main: llama threadpool init, n_threads = 4
0.00.474.709 I 
0.00.474.798 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.802 I 
0.00.474.853 I sampler seed: 2004858691
0.00.474.863 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.866 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.474.866 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.867 I 
 increasities, but I am unable to reproduce this.

I am unable to reproduce this issue because I am unable to access personal information or sensitive data. [end of text]


0.02.733.733 I llama_perf_sampler_print:    sampling time =       4.94 ms /    33 runs   (    0.15 ms per token,  6678.81 tokens per second)
0.02.733.736 I llama_perf_context_print:        load time =     472.80 ms
0.02.733.737 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.733.740 I llama_perf_context_print:        eval time =    2240.91 ms /    32 runs   (   70.03 ms per token,    14.28 tokens per second)
0.02.733.742 I llama_perf_context_print:       total time =    2259.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.539 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.001.859 I main: load the model and apply lora adapter, if any
0.00.028.038 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.028.086 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.028.093 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.099 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.100 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.104 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.105 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.106 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.106 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.106 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.107 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.111 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.112 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.113 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.114 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.471 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.136.864 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.143.821 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.143.830 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.143.831 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.143.832 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.143.833 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.143.834 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.143.835 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.143.839 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.143.841 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.143.842 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.143.843 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.143.845 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.143.850 I llama_model_loader: - type  f32:   37 tensors
0.00.143.852 I llama_model_loader: - type q8_0:  127 tensors
0.00.236.769 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.289.006 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.289.553 I llm_load_vocab: special tokens cache size = 5
0.00.310.838 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.310.859 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.310.859 I llm_load_print_meta: arch             = gemma
0.00.310.860 I llm_load_print_meta: vocab type       = SPM
0.00.310.861 I llm_load_print_meta: n_vocab          = 256000
0.00.310.861 I llm_load_print_meta: n_merges         = 0
0.00.310.861 I llm_load_print_meta: vocab_only       = 0
0.00.310.862 I llm_load_print_meta: n_ctx_train      = 8192
0.00.310.862 I llm_load_print_meta: n_embd           = 2048
0.00.310.862 I llm_load_print_meta: n_layer          = 18
0.00.310.875 I llm_load_print_meta: n_head           = 8
0.00.310.877 I llm_load_print_meta: n_head_kv        = 1
0.00.310.877 I llm_load_print_meta: n_rot            = 256
0.00.310.877 I llm_load_print_meta: n_swa            = 0
0.00.310.878 I llm_load_print_meta: n_embd_head_k    = 256
0.00.310.878 I llm_load_print_meta: n_embd_head_v    = 256
0.00.310.879 I llm_load_print_meta: n_gqa            = 8
0.00.310.880 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.310.881 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.310.882 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.310.883 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.310.884 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.310.884 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.310.884 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.310.886 I llm_load_print_meta: n_ff             = 16384
0.00.310.886 I llm_load_print_meta: n_expert         = 0
0.00.310.886 I llm_load_print_meta: n_expert_used    = 0
0.00.310.887 I llm_load_print_meta: causal attn      = 1
0.00.310.887 I llm_load_print_meta: pooling type     = 0
0.00.310.887 I llm_load_print_meta: rope type        = 2
0.00.310.888 I llm_load_print_meta: rope scaling     = linear
0.00.310.889 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.310.890 I llm_load_print_meta: freq_scale_train = 1
0.00.310.890 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.310.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.310.891 I llm_load_print_meta: ssm_d_conv       = 0
0.00.310.892 I llm_load_print_meta: ssm_d_inner      = 0
0.00.310.895 I llm_load_print_meta: ssm_d_state      = 0
0.00.310.895 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.310.895 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.310.896 I llm_load_print_meta: model type       = 2B
0.00.310.896 I llm_load_print_meta: model ftype      = Q8_0
0.00.310.897 I llm_load_print_meta: model params     = 2.51 B
0.00.310.898 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.310.899 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.310.899 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.310.900 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.310.900 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.310.901 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.310.901 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.310.902 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.310.902 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.310.902 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.310.903 I llm_load_print_meta: max token length = 93
0.00.310.932 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.381.382 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.381.391 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.386.468 I llama_new_context_with_model: n_ctx      = 8192
0.00.386.476 I llama_new_context_with_model: n_batch    = 2048
0.00.386.477 I llama_new_context_with_model: n_ubatch   = 512
0.00.386.477 I llama_new_context_with_model: flash_attn = 0
0.00.386.480 I llama_new_context_with_model: freq_base  = 10000.0
0.00.386.481 I llama_new_context_with_model: freq_scale = 1
0.00.415.419 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.415.436 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.415.545 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.416.437 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.416.445 I llama_new_context_with_model: graph nodes  = 601
0.00.416.446 I llama_new_context_with_model: graph splits = 1
0.00.416.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.523.683 I main: llama threadpool init, n_threads = 4
0.00.523.695 I 
0.00.523.772 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.523.776 I 
0.00.523.813 I sampler seed: 1509765105
0.00.523.824 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.523.828 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.523.829 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.523.829 I 
 increamically in the presence of a hungry cat. [end of text]


0.01.354.892 I llama_perf_sampler_print:    sampling time =       1.78 ms /    12 runs   (    0.15 ms per token,  6760.56 tokens per second)
0.01.354.895 I llama_perf_context_print:        load time =     521.80 ms
0.01.354.896 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.354.897 I llama_perf_context_print:        eval time =     824.35 ms /    11 runs   (   74.94 ms per token,    13.34 tokens per second)
0.01.354.898 I llama_perf_context_print:       total time =     831.22 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.950s
user	0m32.993s
sys	0m9.341s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3941 (87421a23)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32006.40 ms
main:    total time = 32006.40 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.564 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.001.895 I main: load the model and apply lora adapter, if any
0.00.022.200 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.247 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.255 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.260 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.261 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.264 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.265 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.266 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.266 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.269 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.270 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.270 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.270 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.271 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.208 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.454 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.244 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.250 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.250 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.251 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.253 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.254 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.257 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.258 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.259 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.259 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.260 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.263 I llama_model_loader: - type  f32:   37 tensors
0.00.131.266 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.267 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.557 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.767 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.234 I llm_load_vocab: special tokens cache size = 5
0.00.269.286 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.304 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.304 I llm_load_print_meta: arch             = gemma
0.00.269.305 I llm_load_print_meta: vocab type       = SPM
0.00.269.306 I llm_load_print_meta: n_vocab          = 256000
0.00.269.306 I llm_load_print_meta: n_merges         = 0
0.00.269.306 I llm_load_print_meta: vocab_only       = 0
0.00.269.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.307 I llm_load_print_meta: n_embd           = 2048
0.00.269.308 I llm_load_print_meta: n_layer          = 18
0.00.269.320 I llm_load_print_meta: n_head           = 8
0.00.269.321 I llm_load_print_meta: n_head_kv        = 1
0.00.269.322 I llm_load_print_meta: n_rot            = 256
0.00.269.322 I llm_load_print_meta: n_swa            = 0
0.00.269.322 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.322 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.323 I llm_load_print_meta: n_gqa            = 8
0.00.269.324 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.325 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.326 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.327 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.328 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.329 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.329 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.330 I llm_load_print_meta: n_ff             = 16384
0.00.269.330 I llm_load_print_meta: n_expert         = 0
0.00.269.334 I llm_load_print_meta: n_expert_used    = 0
0.00.269.334 I llm_load_print_meta: causal attn      = 1
0.00.269.335 I llm_load_print_meta: pooling type     = 0
0.00.269.335 I llm_load_print_meta: rope type        = 2
0.00.269.335 I llm_load_print_meta: rope scaling     = linear
0.00.269.337 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.337 I llm_load_print_meta: freq_scale_train = 1
0.00.269.337 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.338 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.338 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.338 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.338 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.339 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.340 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.340 I llm_load_print_meta: model type       = 2B
0.00.269.341 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.342 I llm_load_print_meta: model params     = 2.51 B
0.00.269.343 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.344 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.345 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.345 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.345 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.345 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.346 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.347 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.347 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.348 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.348 I llm_load_print_meta: max token length = 93
0.00.269.375 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.328.928 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.328.935 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.328.936 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.328.936 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.328.937 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.328.938 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.334.041 I llama_new_context_with_model: n_ctx      = 8192
0.00.334.048 I llama_new_context_with_model: n_batch    = 2048
0.00.334.048 I llama_new_context_with_model: n_ubatch   = 512
0.00.334.048 I llama_new_context_with_model: flash_attn = 0
0.00.334.050 I llama_new_context_with_model: freq_base  = 10000.0
0.00.334.051 I llama_new_context_with_model: freq_scale = 1
0.00.362.523 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.536 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.362.626 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.528 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.535 I llama_new_context_with_model: graph nodes  = 601
0.00.363.535 I llama_new_context_with_model: graph splits = 1
0.00.363.537 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.698 I main: llama threadpool init, n_threads = 4
0.00.444.710 I 
0.00.444.786 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.790 I 
0.00.444.830 I sampler seed: 3090522037
0.00.444.840 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.843 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.444.844 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.844 I 
 maneuvously.

I apologize for my lack of clarity. I am still learning to express myself effectively. Please forgive my grammatical errors and misspellings.

0.02.062.174 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7024.27 tokens per second)
0.02.062.176 I llama_perf_context_print:        load time =     442.78 ms
0.02.062.177 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.062.179 I llama_perf_context_print:        eval time =    1599.93 ms /    32 runs   (   50.00 ms per token,    20.00 tokens per second)
0.02.062.179 I llama_perf_context_print:       total time =    1617.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3941 (87421a23)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32074.78 ms
main:    total time = 32074.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.538 I build: 3941 (87421a23) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.839 I main: load the model and apply lora adapter, if any
0.00.022.072 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.084 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.094 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.095 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.098 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.099 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.100 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.100 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.101 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.101 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.105 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.106 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.107 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.107 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.025 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.509 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.406 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.413 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.413 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.414 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.415 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.416 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.417 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.419 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.420 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.425 I llama_model_loader: - type  f32:   37 tensors
0.00.132.427 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.428 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.634 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.291 I llm_load_vocab: special tokens cache size = 5
0.00.286.705 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.723 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.724 I llm_load_print_meta: arch             = gemma
0.00.286.724 I llm_load_print_meta: vocab type       = SPM
0.00.286.725 I llm_load_print_meta: n_vocab          = 256000
0.00.286.725 I llm_load_print_meta: n_merges         = 0
0.00.286.726 I llm_load_print_meta: vocab_only       = 0
0.00.286.726 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.726 I llm_load_print_meta: n_embd           = 2048
0.00.286.726 I llm_load_print_meta: n_layer          = 18
0.00.286.738 I llm_load_print_meta: n_head           = 8
0.00.286.739 I llm_load_print_meta: n_head_kv        = 1
0.00.286.739 I llm_load_print_meta: n_rot            = 256
0.00.286.740 I llm_load_print_meta: n_swa            = 0
0.00.286.740 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.740 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.741 I llm_load_print_meta: n_gqa            = 8
0.00.286.742 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.743 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.744 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.745 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.746 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.746 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.746 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.747 I llm_load_print_meta: n_ff             = 16384
0.00.286.747 I llm_load_print_meta: n_expert         = 0
0.00.286.748 I llm_load_print_meta: n_expert_used    = 0
0.00.286.748 I llm_load_print_meta: causal attn      = 1
0.00.286.748 I llm_load_print_meta: pooling type     = 0
0.00.286.749 I llm_load_print_meta: rope type        = 2
0.00.286.749 I llm_load_print_meta: rope scaling     = linear
0.00.286.751 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.752 I llm_load_print_meta: freq_scale_train = 1
0.00.286.752 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.753 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.753 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.754 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.754 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.754 I llm_load_print_meta: model type       = 2B
0.00.286.755 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.756 I llm_load_print_meta: model params     = 2.51 B
0.00.286.756 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.757 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.757 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.758 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.758 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.758 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.759 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.759 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.760 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.760 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.760 I llm_load_print_meta: max token length = 93
0.00.286.780 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.438.532 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.443.654 I llama_new_context_with_model: n_ctx      = 8192
0.00.443.660 I llama_new_context_with_model: n_batch    = 2048
0.00.443.661 I llama_new_context_with_model: n_ubatch   = 512
0.00.443.662 I llama_new_context_with_model: flash_attn = 0
0.00.443.665 I llama_new_context_with_model: freq_base  = 10000.0
0.00.443.666 I llama_new_context_with_model: freq_scale = 1
0.00.472.675 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.472.690 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.472.776 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.473.632 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.473.640 I llama_new_context_with_model: graph nodes  = 601
0.00.473.640 I llama_new_context_with_model: graph splits = 1
0.00.473.642 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.555.557 I main: llama threadpool init, n_threads = 4
0.00.555.571 I 
0.00.555.650 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.555.654 I 
0.00.555.693 I sampler seed: 2856717543
0.00.555.703 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.555.707 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.555.707 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.555.708 I 
 maneuvously.

I apologize, but I am unable to provide humorous or inappropriate responses that could potentially violate our community guidelines. [end of text]


0.01.896.550 I llama_perf_sampler_print:    sampling time =       4.01 ms /    28 runs   (    0.14 ms per token,  6986.03 tokens per second)
0.01.896.552 I llama_perf_context_print:        load time =     553.69 ms
0.01.896.554 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.896.556 I llama_perf_context_print:        eval time =    1325.81 ms /    27 runs   (   49.10 ms per token,    20.36 tokens per second)
0.01.896.557 I llama_perf_context_print:       total time =    1341.00 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.817s
user	8m13.547s
sys	0m6.987s
