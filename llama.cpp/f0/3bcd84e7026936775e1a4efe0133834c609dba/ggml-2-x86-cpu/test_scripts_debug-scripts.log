+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.638 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.543 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.735 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.823 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.835 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.836 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.840 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.841 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.842 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.843 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.844 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.845 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.850 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.851 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.852 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.853 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.854 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.663 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.988 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.387 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.394 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.395 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.396 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.397 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.398 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.399 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.402 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.403 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.404 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.404 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.405 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.412 I llama_model_loader: - type  f32:   37 tensors
0.00.195.416 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.217 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.467.220 I llm_load_vocab: special tokens cache size = 5
0.00.524.316 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.524.370 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.524.374 I llm_load_print_meta: arch             = gemma
0.00.524.375 I llm_load_print_meta: vocab type       = SPM
0.00.524.375 I llm_load_print_meta: n_vocab          = 256000
0.00.524.378 I llm_load_print_meta: n_merges         = 0
0.00.524.378 I llm_load_print_meta: vocab_only       = 0
0.00.524.379 I llm_load_print_meta: n_ctx_train      = 8192
0.00.524.379 I llm_load_print_meta: n_embd           = 2048
0.00.524.380 I llm_load_print_meta: n_layer          = 18
0.00.524.414 I llm_load_print_meta: n_head           = 8
0.00.524.424 I llm_load_print_meta: n_head_kv        = 1
0.00.524.425 I llm_load_print_meta: n_rot            = 256
0.00.524.426 I llm_load_print_meta: n_swa            = 0
0.00.524.426 I llm_load_print_meta: n_embd_head_k    = 256
0.00.524.428 I llm_load_print_meta: n_embd_head_v    = 256
0.00.524.433 I llm_load_print_meta: n_gqa            = 8
0.00.524.437 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.524.443 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.524.444 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.524.446 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.524.447 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.524.447 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.524.448 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.524.453 I llm_load_print_meta: n_ff             = 16384
0.00.524.453 I llm_load_print_meta: n_expert         = 0
0.00.524.454 I llm_load_print_meta: n_expert_used    = 0
0.00.524.455 I llm_load_print_meta: causal attn      = 1
0.00.524.455 I llm_load_print_meta: pooling type     = 0
0.00.524.455 I llm_load_print_meta: rope type        = 2
0.00.524.458 I llm_load_print_meta: rope scaling     = linear
0.00.524.460 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.524.460 I llm_load_print_meta: freq_scale_train = 1
0.00.524.461 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.524.461 I llm_load_print_meta: rope_finetuned   = unknown
0.00.524.462 I llm_load_print_meta: ssm_d_conv       = 0
0.00.524.462 I llm_load_print_meta: ssm_d_inner      = 0
0.00.524.462 I llm_load_print_meta: ssm_d_state      = 0
0.00.524.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.524.463 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.524.463 I llm_load_print_meta: model type       = 2B
0.00.524.464 I llm_load_print_meta: model ftype      = Q8_0
0.00.524.466 I llm_load_print_meta: model params     = 2.51 B
0.00.524.467 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.524.476 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.524.477 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.524.477 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.524.491 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.524.492 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.524.493 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.524.493 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.524.494 I llm_load_print_meta: max token length = 93
0.00.524.658 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.624.153 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.624.161 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.624.162 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.624.163 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.624.164 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.624.164 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.629.774 I llama_new_context_with_model: n_ctx      = 8192
0.00.629.782 I llama_new_context_with_model: n_batch    = 2048
0.00.629.783 I llama_new_context_with_model: n_ubatch   = 512
0.00.629.783 I llama_new_context_with_model: flash_attn = 0
0.00.629.786 I llama_new_context_with_model: freq_base  = 10000.0
0.00.629.786 I llama_new_context_with_model: freq_scale = 1
0.00.659.724 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.659.769 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.888 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.661.287 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.661.293 I llama_new_context_with_model: graph nodes  = 601
0.00.661.294 I llama_new_context_with_model: graph splits = 1
0.00.661.310 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.698 I main: llama threadpool init, n_threads = 4
0.01.271.710 I 
0.01.271.799 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.803 I 
0.01.271.959 I sampler seed: 1341966182
0.01.271.970 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.974 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.976 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly. [end of text]


0.02.954.183 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.51 tokens per second)
0.02.954.186 I llama_perf_context_print:        load time =    1268.84 ms
0.02.954.187 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.954.188 I llama_perf_context_print:        eval time =    1670.90 ms /     4 runs   (  417.73 ms per token,     2.39 tokens per second)
0.02.954.189 I llama_perf_context_print:       total time =    1682.50 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.628 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.025.052 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.147 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.162 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.163 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.167 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.171 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.171 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.172 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.173 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.174 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.183 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.185 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.186 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.187 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.295 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.754 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.211 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.219 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.220 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.221 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.222 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.223 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.227 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.229 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.230 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.195.230 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.238 I llama_model_loader: - type  f32:   37 tensors
0.00.195.243 I llama_model_loader: - type q8_0:  127 tensors
0.00.478.529 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.520 I llm_load_vocab: special tokens cache size = 5
0.00.536.694 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.536.750 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.536.751 I llm_load_print_meta: arch             = gemma
0.00.536.751 I llm_load_print_meta: vocab type       = SPM
0.00.536.752 I llm_load_print_meta: n_vocab          = 256000
0.00.536.755 I llm_load_print_meta: n_merges         = 0
0.00.536.755 I llm_load_print_meta: vocab_only       = 0
0.00.536.756 I llm_load_print_meta: n_ctx_train      = 8192
0.00.536.756 I llm_load_print_meta: n_embd           = 2048
0.00.536.756 I llm_load_print_meta: n_layer          = 18
0.00.536.792 I llm_load_print_meta: n_head           = 8
0.00.536.798 I llm_load_print_meta: n_head_kv        = 1
0.00.536.799 I llm_load_print_meta: n_rot            = 256
0.00.536.799 I llm_load_print_meta: n_swa            = 0
0.00.536.799 I llm_load_print_meta: n_embd_head_k    = 256
0.00.536.800 I llm_load_print_meta: n_embd_head_v    = 256
0.00.536.805 I llm_load_print_meta: n_gqa            = 8
0.00.536.809 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.536.815 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.536.816 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.536.818 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.536.818 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.536.818 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.536.819 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.536.823 I llm_load_print_meta: n_ff             = 16384
0.00.536.824 I llm_load_print_meta: n_expert         = 0
0.00.536.824 I llm_load_print_meta: n_expert_used    = 0
0.00.536.824 I llm_load_print_meta: causal attn      = 1
0.00.536.825 I llm_load_print_meta: pooling type     = 0
0.00.536.825 I llm_load_print_meta: rope type        = 2
0.00.536.825 I llm_load_print_meta: rope scaling     = linear
0.00.536.827 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.536.828 I llm_load_print_meta: freq_scale_train = 1
0.00.536.828 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.536.829 I llm_load_print_meta: rope_finetuned   = unknown
0.00.536.829 I llm_load_print_meta: ssm_d_conv       = 0
0.00.536.829 I llm_load_print_meta: ssm_d_inner      = 0
0.00.536.830 I llm_load_print_meta: ssm_d_state      = 0
0.00.536.830 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.536.830 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.536.831 I llm_load_print_meta: model type       = 2B
0.00.536.831 I llm_load_print_meta: model ftype      = Q8_0
0.00.536.833 I llm_load_print_meta: model params     = 2.51 B
0.00.536.834 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.536.835 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.536.839 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.536.840 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.536.840 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.536.841 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.536.851 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.536.852 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.536.853 I llm_load_print_meta: max token length = 93
0.00.537.032 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.631.595 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.637.250 I llama_new_context_with_model: n_ctx      = 8192
0.00.637.257 I llama_new_context_with_model: n_batch    = 2048
0.00.637.257 I llama_new_context_with_model: n_ubatch   = 512
0.00.637.258 I llama_new_context_with_model: flash_attn = 0
0.00.637.260 I llama_new_context_with_model: freq_base  = 10000.0
0.00.637.261 I llama_new_context_with_model: freq_scale = 1
0.00.666.423 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.666.471 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.666.597 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.667.953 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.667.960 I llama_new_context_with_model: graph nodes  = 601
0.00.667.960 I llama_new_context_with_model: graph splits = 1
0.00.667.977 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.282 I main: llama threadpool init, n_threads = 4
0.01.279.294 I 
0.01.279.386 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.390 I 
0.01.279.549 I sampler seed: 1534106511
0.01.279.559 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.565 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.279.566 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably. I am a language model, and I am not capable of experiencing physical sensations, emotions, or personal opinions. [end of text]


0.12.270.146 I llama_perf_sampler_print:    sampling time =      40.07 ms /    27 runs   (    1.48 ms per token,   673.75 tokens per second)
0.12.270.149 I llama_perf_context_print:        load time =    1276.42 ms
0.12.270.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.270.152 I llama_perf_context_print:        eval time =   10924.41 ms /    26 runs   (  420.17 ms per token,     2.38 tokens per second)
0.12.270.153 I llama_perf_context_print:       total time =   10990.87 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.620 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.026.508 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.713 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.804 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.816 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.818 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.823 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.827 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.828 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.830 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.831 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.832 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.841 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.853 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.858 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.859 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.861 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.356 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.262 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.668 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.679 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.680 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.681 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.684 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.685 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.686 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.686 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.687 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.695 I llama_model_loader: - type  f32:   37 tensors
0.00.197.699 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.958 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.461.963 I llm_load_vocab: special tokens cache size = 5
0.00.519.494 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.519.558 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.519.562 I llm_load_print_meta: arch             = gemma
0.00.519.563 I llm_load_print_meta: vocab type       = SPM
0.00.519.563 I llm_load_print_meta: n_vocab          = 256000
0.00.519.566 I llm_load_print_meta: n_merges         = 0
0.00.519.566 I llm_load_print_meta: vocab_only       = 0
0.00.519.567 I llm_load_print_meta: n_ctx_train      = 8192
0.00.519.567 I llm_load_print_meta: n_embd           = 2048
0.00.519.568 I llm_load_print_meta: n_layer          = 18
0.00.519.602 I llm_load_print_meta: n_head           = 8
0.00.519.611 I llm_load_print_meta: n_head_kv        = 1
0.00.519.611 I llm_load_print_meta: n_rot            = 256
0.00.519.612 I llm_load_print_meta: n_swa            = 0
0.00.519.613 I llm_load_print_meta: n_embd_head_k    = 256
0.00.519.613 I llm_load_print_meta: n_embd_head_v    = 256
0.00.519.618 I llm_load_print_meta: n_gqa            = 8
0.00.519.623 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.519.627 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.519.631 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.519.632 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.519.633 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.519.633 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.519.633 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.519.638 I llm_load_print_meta: n_ff             = 16384
0.00.519.638 I llm_load_print_meta: n_expert         = 0
0.00.519.639 I llm_load_print_meta: n_expert_used    = 0
0.00.519.641 I llm_load_print_meta: causal attn      = 1
0.00.519.642 I llm_load_print_meta: pooling type     = 0
0.00.519.642 I llm_load_print_meta: rope type        = 2
0.00.519.642 I llm_load_print_meta: rope scaling     = linear
0.00.519.644 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.519.645 I llm_load_print_meta: freq_scale_train = 1
0.00.519.645 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.519.645 I llm_load_print_meta: rope_finetuned   = unknown
0.00.519.646 I llm_load_print_meta: ssm_d_conv       = 0
0.00.519.646 I llm_load_print_meta: ssm_d_inner      = 0
0.00.519.648 I llm_load_print_meta: ssm_d_state      = 0
0.00.519.648 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.519.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.519.658 I llm_load_print_meta: model type       = 2B
0.00.519.659 I llm_load_print_meta: model ftype      = Q8_0
0.00.519.660 I llm_load_print_meta: model params     = 2.51 B
0.00.519.661 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.519.662 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.519.663 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.519.663 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.519.664 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.519.664 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.519.665 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.519.678 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.519.678 I llm_load_print_meta: max token length = 93
0.00.519.866 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.596.571 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.596.578 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.596.579 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.596.580 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.596.580 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.596.581 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.602.320 I llama_new_context_with_model: n_ctx      = 8192
0.00.602.327 I llama_new_context_with_model: n_batch    = 2048
0.00.602.328 I llama_new_context_with_model: n_ubatch   = 512
0.00.602.328 I llama_new_context_with_model: flash_attn = 0
0.00.602.331 I llama_new_context_with_model: freq_base  = 10000.0
0.00.602.332 I llama_new_context_with_model: freq_scale = 1
0.00.631.515 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.631.557 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.631.674 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.633.102 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.633.110 I llama_new_context_with_model: graph nodes  = 601
0.00.633.111 I llama_new_context_with_model: graph splits = 1
0.00.633.130 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.250.706 I main: llama threadpool init, n_threads = 4
0.01.250.719 I 
0.01.250.810 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.250.811 I 
0.01.250.979 I sampler seed: 2061340345
0.01.250.995 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.002 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.251.003 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, and the like.

I am unable to access the requested content. As a language model, I am unable to access external websites or specific files

0.14.824.026 I llama_perf_sampler_print:    sampling time =      49.66 ms /    33 runs   (    1.50 ms per token,   664.47 tokens per second)
0.14.824.029 I llama_perf_context_print:        load time =    1247.83 ms
0.14.824.031 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.824.032 I llama_perf_context_print:        eval time =   13491.52 ms /    32 runs   (  421.61 ms per token,     2.37 tokens per second)
0.14.824.033 I llama_perf_context_print:       total time =   13573.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.636 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.024.798 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.020 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.120 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.132 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.134 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.140 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.142 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.143 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.144 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.147 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.159 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.160 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.162 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.163 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.167 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.363 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.879 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.287 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.298 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.299 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.300 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.301 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.302 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.303 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.307 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.308 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.309 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.310 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.311 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.322 I llama_model_loader: - type  f32:   37 tensors
0.00.196.327 I llama_model_loader: - type q8_0:  127 tensors
0.00.482.300 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.483.347 I llm_load_vocab: special tokens cache size = 5
0.00.540.514 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.540.580 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.540.581 I llm_load_print_meta: arch             = gemma
0.00.540.582 I llm_load_print_meta: vocab type       = SPM
0.00.540.583 I llm_load_print_meta: n_vocab          = 256000
0.00.540.585 I llm_load_print_meta: n_merges         = 0
0.00.540.586 I llm_load_print_meta: vocab_only       = 0
0.00.540.586 I llm_load_print_meta: n_ctx_train      = 8192
0.00.540.587 I llm_load_print_meta: n_embd           = 2048
0.00.540.587 I llm_load_print_meta: n_layer          = 18
0.00.540.622 I llm_load_print_meta: n_head           = 8
0.00.540.628 I llm_load_print_meta: n_head_kv        = 1
0.00.540.628 I llm_load_print_meta: n_rot            = 256
0.00.540.629 I llm_load_print_meta: n_swa            = 0
0.00.540.629 I llm_load_print_meta: n_embd_head_k    = 256
0.00.540.630 I llm_load_print_meta: n_embd_head_v    = 256
0.00.540.634 I llm_load_print_meta: n_gqa            = 8
0.00.540.659 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.540.667 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.540.669 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.540.671 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.540.672 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.540.673 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.540.674 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.540.680 I llm_load_print_meta: n_ff             = 16384
0.00.540.681 I llm_load_print_meta: n_expert         = 0
0.00.540.682 I llm_load_print_meta: n_expert_used    = 0
0.00.540.683 I llm_load_print_meta: causal attn      = 1
0.00.540.684 I llm_load_print_meta: pooling type     = 0
0.00.540.689 I llm_load_print_meta: rope type        = 2
0.00.540.689 I llm_load_print_meta: rope scaling     = linear
0.00.540.691 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.540.692 I llm_load_print_meta: freq_scale_train = 1
0.00.540.693 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.540.696 I llm_load_print_meta: rope_finetuned   = unknown
0.00.540.697 I llm_load_print_meta: ssm_d_conv       = 0
0.00.540.697 I llm_load_print_meta: ssm_d_inner      = 0
0.00.540.698 I llm_load_print_meta: ssm_d_state      = 0
0.00.540.698 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.540.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.540.700 I llm_load_print_meta: model type       = 2B
0.00.540.701 I llm_load_print_meta: model ftype      = Q8_0
0.00.540.702 I llm_load_print_meta: model params     = 2.51 B
0.00.540.703 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.540.705 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.540.705 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.540.706 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.540.707 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.540.708 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.540.711 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.540.712 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.540.712 I llm_load_print_meta: max token length = 93
0.00.540.923 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.612.389 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.612.400 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.618.245 I llama_new_context_with_model: n_ctx      = 8192
0.00.618.253 I llama_new_context_with_model: n_batch    = 2048
0.00.618.253 I llama_new_context_with_model: n_ubatch   = 512
0.00.618.254 I llama_new_context_with_model: flash_attn = 0
0.00.618.257 I llama_new_context_with_model: freq_base  = 10000.0
0.00.618.258 I llama_new_context_with_model: freq_scale = 1
0.00.647.861 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.647.908 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.648.030 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.649.458 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.649.465 I llama_new_context_with_model: graph nodes  = 601
0.00.649.466 I llama_new_context_with_model: graph splits = 1
0.00.649.485 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.188 I main: llama threadpool init, n_threads = 4
0.01.260.200 I 
0.01.260.304 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.308 I 
0.01.260.475 I sampler seed: 2228081965
0.01.260.486 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.260.492 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.260.493 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in a way that the user can understand them.

Imagine you're explaining these ideas to someone who has never heard of them before.

**

0.14.743.300 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.26 tokens per second)
0.14.743.303 I llama_perf_context_print:        load time =    1257.26 ms
0.14.743.305 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.743.306 I llama_perf_context_print:        eval time =   13400.88 ms /    32 runs   (  418.78 ms per token,     2.39 tokens per second)
0.14.743.307 I llama_perf_context_print:       total time =   13483.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.474s
user	2m51.152s
sys	0m9.494s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3777 (f03bcd84)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198999.53 ms
main:    total time = 198999.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.678 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.024.720 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.912 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.006 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.017 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.018 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.023 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.036 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.038 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.040 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.040 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.041 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.836 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.999 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.437 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.444 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.445 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.446 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.447 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.447 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.448 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.452 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.453 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.454 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.454 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.455 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.463 I llama_model_loader: - type  f32:   37 tensors
0.00.195.466 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.467 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.685 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.731 I llm_load_vocab: special tokens cache size = 5
0.00.535.982 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.536.041 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.536.042 I llm_load_print_meta: arch             = gemma
0.00.536.043 I llm_load_print_meta: vocab type       = SPM
0.00.536.044 I llm_load_print_meta: n_vocab          = 256000
0.00.536.046 I llm_load_print_meta: n_merges         = 0
0.00.536.046 I llm_load_print_meta: vocab_only       = 0
0.00.536.047 I llm_load_print_meta: n_ctx_train      = 8192
0.00.536.047 I llm_load_print_meta: n_embd           = 2048
0.00.536.047 I llm_load_print_meta: n_layer          = 18
0.00.536.084 I llm_load_print_meta: n_head           = 8
0.00.536.090 I llm_load_print_meta: n_head_kv        = 1
0.00.536.091 I llm_load_print_meta: n_rot            = 256
0.00.536.091 I llm_load_print_meta: n_swa            = 0
0.00.536.092 I llm_load_print_meta: n_embd_head_k    = 256
0.00.536.092 I llm_load_print_meta: n_embd_head_v    = 256
0.00.536.097 I llm_load_print_meta: n_gqa            = 8
0.00.536.103 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.536.108 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.536.109 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.536.110 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.536.111 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.536.111 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.536.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.536.116 I llm_load_print_meta: n_ff             = 16384
0.00.536.117 I llm_load_print_meta: n_expert         = 0
0.00.536.117 I llm_load_print_meta: n_expert_used    = 0
0.00.536.117 I llm_load_print_meta: causal attn      = 1
0.00.536.118 I llm_load_print_meta: pooling type     = 0
0.00.536.118 I llm_load_print_meta: rope type        = 2
0.00.536.118 I llm_load_print_meta: rope scaling     = linear
0.00.536.120 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.536.121 I llm_load_print_meta: freq_scale_train = 1
0.00.536.121 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.536.121 I llm_load_print_meta: rope_finetuned   = unknown
0.00.536.122 I llm_load_print_meta: ssm_d_conv       = 0
0.00.536.122 I llm_load_print_meta: ssm_d_inner      = 0
0.00.536.122 I llm_load_print_meta: ssm_d_state      = 0
0.00.536.122 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.536.123 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.536.123 I llm_load_print_meta: model type       = 2B
0.00.536.124 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.536.125 I llm_load_print_meta: model params     = 2.51 B
0.00.536.126 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.536.126 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.536.131 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.536.131 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.536.132 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.536.132 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.536.143 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.536.144 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.536.154 I llm_load_print_meta: max token length = 93
0.00.536.327 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.595.721 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.595.733 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.595.734 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.595.735 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.595.735 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.595.736 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.601.332 I llama_new_context_with_model: n_ctx      = 8192
0.00.601.339 I llama_new_context_with_model: n_batch    = 2048
0.00.601.340 I llama_new_context_with_model: n_ubatch   = 512
0.00.601.341 I llama_new_context_with_model: flash_attn = 0
0.00.601.344 I llama_new_context_with_model: freq_base  = 10000.0
0.00.601.344 I llama_new_context_with_model: freq_scale = 1
0.00.631.325 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.631.367 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.631.481 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.632.874 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.632.881 I llama_new_context_with_model: graph nodes  = 601
0.00.632.882 I llama_new_context_with_model: graph splits = 1
0.00.632.899 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.208.223 I main: llama threadpool init, n_threads = 4
0.01.208.234 I 
0.01.208.325 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.208.329 I 
0.01.208.522 I sampler seed: 3552673574
0.01.208.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.208.537 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.208.538 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously. [end of text]


0.02.913.693 I llama_perf_sampler_print:    sampling time =       7.73 ms /     6 runs   (    1.29 ms per token,   776.50 tokens per second)
0.02.913.697 I llama_perf_context_print:        load time =    1205.32 ms
0.02.913.699 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.913.712 I llama_perf_context_print:        eval time =    1691.19 ms /     5 runs   (  338.24 ms per token,     2.96 tokens per second)
0.02.913.714 I llama_perf_context_print:       total time =    1705.48 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3777 (f03bcd84)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198849.74 ms
main:    total time = 198849.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.653 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.024.868 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.959 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.975 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.978 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.982 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.983 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.984 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.985 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.986 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.987 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.998 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.999 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.999 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.000 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.001 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.210 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.079 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.566 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.573 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.574 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.575 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.576 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.577 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.578 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.581 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.582 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.590 I llama_model_loader: - type  f32:   37 tensors
0.00.195.593 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.594 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.598 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.587 I llm_load_vocab: special tokens cache size = 5
0.00.535.809 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.535.871 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.535.872 I llm_load_print_meta: arch             = gemma
0.00.535.873 I llm_load_print_meta: vocab type       = SPM
0.00.535.874 I llm_load_print_meta: n_vocab          = 256000
0.00.535.876 I llm_load_print_meta: n_merges         = 0
0.00.535.877 I llm_load_print_meta: vocab_only       = 0
0.00.535.877 I llm_load_print_meta: n_ctx_train      = 8192
0.00.535.877 I llm_load_print_meta: n_embd           = 2048
0.00.535.878 I llm_load_print_meta: n_layer          = 18
0.00.535.912 I llm_load_print_meta: n_head           = 8
0.00.535.919 I llm_load_print_meta: n_head_kv        = 1
0.00.535.920 I llm_load_print_meta: n_rot            = 256
0.00.535.920 I llm_load_print_meta: n_swa            = 0
0.00.535.920 I llm_load_print_meta: n_embd_head_k    = 256
0.00.535.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.535.925 I llm_load_print_meta: n_gqa            = 8
0.00.535.929 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.535.934 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.535.935 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.535.937 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.535.937 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.535.938 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.535.938 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.535.943 I llm_load_print_meta: n_ff             = 16384
0.00.535.943 I llm_load_print_meta: n_expert         = 0
0.00.535.943 I llm_load_print_meta: n_expert_used    = 0
0.00.535.944 I llm_load_print_meta: causal attn      = 1
0.00.535.944 I llm_load_print_meta: pooling type     = 0
0.00.535.944 I llm_load_print_meta: rope type        = 2
0.00.535.945 I llm_load_print_meta: rope scaling     = linear
0.00.535.946 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.535.947 I llm_load_print_meta: freq_scale_train = 1
0.00.535.947 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.535.947 I llm_load_print_meta: rope_finetuned   = unknown
0.00.535.948 I llm_load_print_meta: ssm_d_conv       = 0
0.00.535.948 I llm_load_print_meta: ssm_d_inner      = 0
0.00.535.948 I llm_load_print_meta: ssm_d_state      = 0
0.00.535.949 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.535.949 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.535.950 I llm_load_print_meta: model type       = 2B
0.00.535.951 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.535.952 I llm_load_print_meta: model params     = 2.51 B
0.00.535.952 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.535.953 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.535.953 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.535.954 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.535.954 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.535.955 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.535.955 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.535.956 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.535.956 I llm_load_print_meta: max token length = 93
0.00.536.129 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.592.557 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.598.099 I llama_new_context_with_model: n_ctx      = 8192
0.00.598.106 I llama_new_context_with_model: n_batch    = 2048
0.00.598.107 I llama_new_context_with_model: n_ubatch   = 512
0.00.598.107 I llama_new_context_with_model: flash_attn = 0
0.00.598.111 I llama_new_context_with_model: freq_base  = 10000.0
0.00.598.112 I llama_new_context_with_model: freq_scale = 1
0.00.627.938 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.627.980 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.628.091 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.629.503 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.629.510 I llama_new_context_with_model: graph nodes  = 601
0.00.629.510 I llama_new_context_with_model: graph splits = 1
0.00.629.526 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.206.306 I main: llama threadpool init, n_threads = 4
0.01.206.319 I 
0.01.206.410 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.206.413 I 
0.01.206.576 I sampler seed: 1166761067
0.01.206.587 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.206.592 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.206.593 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary to the primary school curriculum.

**Subject: Science**

**Topic: The Water Cycle**

**Learning Objectives:**

* Students will be

0.12.086.689 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.95 tokens per second)
0.12.086.692 I llama_perf_context_print:        load time =    1203.45 ms
0.12.086.693 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.086.695 I llama_perf_context_print:        eval time =   10799.16 ms /    32 runs   (  337.47 ms per token,     2.96 tokens per second)
0.12.086.696 I llama_perf_context_print:       total time =   10880.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m55.704s
user	49m30.250s
sys	0m6.416s
