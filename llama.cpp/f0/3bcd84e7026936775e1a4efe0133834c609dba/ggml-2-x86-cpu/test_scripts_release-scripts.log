+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.817 I main: load the model and apply lora adapter, if any
0.00.022.115 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.163 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.170 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.175 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.176 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.179 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.180 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.181 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.181 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.182 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.182 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.186 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.186 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.187 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.187 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.188 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.899 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.294 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.162 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.168 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.169 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.170 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.170 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.171 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.172 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.174 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.175 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.176 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.177 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.178 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.181 I llama_model_loader: - type  f32:   37 tensors
0.00.133.184 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.880 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.658 I llm_load_vocab: special tokens cache size = 5
0.00.218.142 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.157 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.157 I llm_load_print_meta: arch             = gemma
0.00.218.157 I llm_load_print_meta: vocab type       = SPM
0.00.218.159 I llm_load_print_meta: n_vocab          = 256000
0.00.218.160 I llm_load_print_meta: n_merges         = 0
0.00.218.160 I llm_load_print_meta: vocab_only       = 0
0.00.218.160 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.161 I llm_load_print_meta: n_embd           = 2048
0.00.218.161 I llm_load_print_meta: n_layer          = 18
0.00.218.175 I llm_load_print_meta: n_head           = 8
0.00.218.176 I llm_load_print_meta: n_head_kv        = 1
0.00.218.176 I llm_load_print_meta: n_rot            = 256
0.00.218.177 I llm_load_print_meta: n_swa            = 0
0.00.218.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.178 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.178 I llm_load_print_meta: n_gqa            = 8
0.00.218.179 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.180 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.181 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.183 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.186 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.186 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.187 I llm_load_print_meta: n_ff             = 16384
0.00.218.188 I llm_load_print_meta: n_expert         = 0
0.00.218.188 I llm_load_print_meta: n_expert_used    = 0
0.00.218.189 I llm_load_print_meta: causal attn      = 1
0.00.218.189 I llm_load_print_meta: pooling type     = 0
0.00.218.189 I llm_load_print_meta: rope type        = 2
0.00.218.190 I llm_load_print_meta: rope scaling     = linear
0.00.218.191 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.192 I llm_load_print_meta: freq_scale_train = 1
0.00.218.193 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.193 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.194 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.194 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.195 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.195 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.195 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.196 I llm_load_print_meta: model type       = 2B
0.00.218.196 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.197 I llm_load_print_meta: model params     = 2.51 B
0.00.218.198 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.199 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.200 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.200 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.200 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.201 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.201 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.202 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.202 I llm_load_print_meta: max token length = 93
0.00.218.219 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.318.121 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.318.132 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.318.133 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.318.133 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.318.134 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.318.135 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.323.401 I llama_new_context_with_model: n_ctx      = 8192
0.00.323.408 I llama_new_context_with_model: n_batch    = 2048
0.00.323.409 I llama_new_context_with_model: n_ubatch   = 512
0.00.323.409 I llama_new_context_with_model: flash_attn = 0
0.00.323.412 I llama_new_context_with_model: freq_base  = 10000.0
0.00.323.413 I llama_new_context_with_model: freq_scale = 1
0.00.352.120 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.352.136 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.352.230 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.107 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.353.114 I llama_new_context_with_model: graph nodes  = 601
0.00.353.114 I llama_new_context_with_model: graph splits = 1
0.00.353.116 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.637 I main: llama threadpool init, n_threads = 4
0.00.443.648 I 
0.00.443.721 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.724 I 
0.00.443.754 I sampler seed: 1297904958
0.00.443.764 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.768 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.443.769 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively in complexity, and the number of states grows exponentially in the number of dimensions.

**True or False?**

The statement is true. [end of text]


0.02.711.068 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7104.41 tokens per second)
0.02.711.070 I llama_perf_context_print:        load time =     441.80 ms
0.02.711.072 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.711.073 I llama_perf_context_print:        eval time =    2248.37 ms /    32 runs   (   70.26 ms per token,    14.23 tokens per second)
0.02.711.074 I llama_perf_context_print:       total time =    2267.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.561 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.808 I main: llama backend init
0.00.001.944 I main: load the model and apply lora adapter, if any
0.00.022.157 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.172 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.184 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.186 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.191 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.193 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.194 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.195 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.196 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.197 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.205 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.206 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.081 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.199 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.162 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.170 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.171 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.171 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.172 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.173 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.174 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.177 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.178 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.179 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.179 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.180 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.184 I llama_model_loader: - type  f32:   37 tensors
0.00.133.188 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.932 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.713 I llm_load_vocab: special tokens cache size = 5
0.00.220.939 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.954 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.955 I llm_load_print_meta: arch             = gemma
0.00.220.955 I llm_load_print_meta: vocab type       = SPM
0.00.220.956 I llm_load_print_meta: n_vocab          = 256000
0.00.220.957 I llm_load_print_meta: n_merges         = 0
0.00.220.957 I llm_load_print_meta: vocab_only       = 0
0.00.220.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.958 I llm_load_print_meta: n_embd           = 2048
0.00.220.958 I llm_load_print_meta: n_layer          = 18
0.00.220.972 I llm_load_print_meta: n_head           = 8
0.00.220.973 I llm_load_print_meta: n_head_kv        = 1
0.00.220.973 I llm_load_print_meta: n_rot            = 256
0.00.220.974 I llm_load_print_meta: n_swa            = 0
0.00.220.974 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.974 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.975 I llm_load_print_meta: n_gqa            = 8
0.00.220.976 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.977 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.978 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.979 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.980 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.980 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.980 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.981 I llm_load_print_meta: n_ff             = 16384
0.00.220.981 I llm_load_print_meta: n_expert         = 0
0.00.220.981 I llm_load_print_meta: n_expert_used    = 0
0.00.220.982 I llm_load_print_meta: causal attn      = 1
0.00.220.982 I llm_load_print_meta: pooling type     = 0
0.00.220.982 I llm_load_print_meta: rope type        = 2
0.00.220.983 I llm_load_print_meta: rope scaling     = linear
0.00.220.985 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.985 I llm_load_print_meta: freq_scale_train = 1
0.00.220.986 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.986 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.987 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.987 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.987 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.988 I llm_load_print_meta: model type       = 2B
0.00.220.988 I llm_load_print_meta: model ftype      = Q8_0
0.00.220.989 I llm_load_print_meta: model params     = 2.51 B
0.00.220.990 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.220.990 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.991 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.991 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.992 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.993 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.993 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.993 I llm_load_print_meta: max token length = 93
0.00.221.013 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.315.909 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.320.925 I llama_new_context_with_model: n_ctx      = 8192
0.00.320.932 I llama_new_context_with_model: n_batch    = 2048
0.00.320.932 I llama_new_context_with_model: n_ubatch   = 512
0.00.320.933 I llama_new_context_with_model: flash_attn = 0
0.00.320.935 I llama_new_context_with_model: freq_base  = 10000.0
0.00.320.936 I llama_new_context_with_model: freq_scale = 1
0.00.350.375 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.350.392 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.350.482 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.356 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.351.364 I llama_new_context_with_model: graph nodes  = 601
0.00.351.364 I llama_new_context_with_model: graph splits = 1
0.00.351.366 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.776 I main: llama threadpool init, n_threads = 4
0.00.438.789 I 
0.00.438.882 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.885 I 
0.00.438.950 I sampler seed: 4193884802
0.00.438.963 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.967 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.438.968 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities is a type of asexual reproduction that occurs in plants and some other organisms.

**a)** Explain the process of increasities.
**b)**

0.02.624.647 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7009.35 tokens per second)
0.02.624.649 I llama_perf_context_print:        load time =     436.81 ms
0.02.624.650 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.624.651 I llama_perf_context_print:        eval time =    2167.59 ms /    32 runs   (   67.74 ms per token,    14.76 tokens per second)
0.02.624.652 I llama_perf_context_print:       total time =    2185.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.532 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.021.735 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.784 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.791 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.797 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.798 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.801 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.802 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.803 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.803 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.804 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.808 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.809 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.809 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.810 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.810 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.481 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.486 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.351 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.357 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.358 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.359 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.359 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.360 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.361 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.364 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.364 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.365 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.365 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.367 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.370 I llama_model_loader: - type  f32:   37 tensors
0.00.132.373 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.542 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.279 I llm_load_vocab: special tokens cache size = 5
0.00.220.462 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.476 I llm_load_print_meta: arch             = gemma
0.00.220.476 I llm_load_print_meta: vocab type       = SPM
0.00.220.477 I llm_load_print_meta: n_vocab          = 256000
0.00.220.477 I llm_load_print_meta: n_merges         = 0
0.00.220.477 I llm_load_print_meta: vocab_only       = 0
0.00.220.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.478 I llm_load_print_meta: n_embd           = 2048
0.00.220.479 I llm_load_print_meta: n_layer          = 18
0.00.220.491 I llm_load_print_meta: n_head           = 8
0.00.220.492 I llm_load_print_meta: n_head_kv        = 1
0.00.220.492 I llm_load_print_meta: n_rot            = 256
0.00.220.493 I llm_load_print_meta: n_swa            = 0
0.00.220.493 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.493 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.494 I llm_load_print_meta: n_gqa            = 8
0.00.220.495 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.496 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.497 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.498 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.499 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.499 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.499 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.500 I llm_load_print_meta: n_ff             = 16384
0.00.220.500 I llm_load_print_meta: n_expert         = 0
0.00.220.501 I llm_load_print_meta: n_expert_used    = 0
0.00.220.502 I llm_load_print_meta: causal attn      = 1
0.00.220.502 I llm_load_print_meta: pooling type     = 0
0.00.220.502 I llm_load_print_meta: rope type        = 2
0.00.220.503 I llm_load_print_meta: rope scaling     = linear
0.00.220.504 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.505 I llm_load_print_meta: freq_scale_train = 1
0.00.220.505 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.505 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.506 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.506 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.506 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.506 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.507 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.507 I llm_load_print_meta: model type       = 2B
0.00.220.507 I llm_load_print_meta: model ftype      = Q8_0
0.00.220.509 I llm_load_print_meta: model params     = 2.51 B
0.00.220.509 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.220.510 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.510 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.511 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.511 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.512 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.512 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.513 I llm_load_print_meta: max token length = 93
0.00.220.530 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.295.420 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.295.427 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.295.428 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.295.429 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.295.429 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.295.430 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.300.514 I llama_new_context_with_model: n_ctx      = 8192
0.00.300.520 I llama_new_context_with_model: n_batch    = 2048
0.00.300.521 I llama_new_context_with_model: n_ubatch   = 512
0.00.300.521 I llama_new_context_with_model: flash_attn = 0
0.00.300.523 I llama_new_context_with_model: freq_base  = 10000.0
0.00.300.524 I llama_new_context_with_model: freq_scale = 1
0.00.329.351 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.329.367 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.329.459 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.330.339 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.330.347 I llama_new_context_with_model: graph nodes  = 601
0.00.330.348 I llama_new_context_with_model: graph splits = 1
0.00.330.350 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.407 I main: llama threadpool init, n_threads = 4
0.00.422.419 I 
0.00.422.490 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.422.494 I 
0.00.422.521 I sampler seed: 3452539097
0.00.422.530 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.532 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.422.533 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the media and online platforms. [end of text]


0.01.141.948 I llama_perf_sampler_print:    sampling time =       1.61 ms /    11 runs   (    0.15 ms per token,  6832.30 tokens per second)
0.01.141.951 I llama_perf_context_print:        load time =     420.55 ms
0.01.141.952 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.141.954 I llama_perf_context_print:        eval time =     712.83 ms /    10 runs   (   71.28 ms per token,    14.03 tokens per second)
0.01.141.955 I llama_perf_context_print:       total time =     719.55 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.640 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.864 I main: llama backend init
0.00.002.013 I main: load the model and apply lora adapter, if any
0.00.022.157 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.215 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.232 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.242 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.253 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.254 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.258 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.258 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.259 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.264 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.867 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.927 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.822 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.823 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.823 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.824 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.825 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.826 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.829 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.829 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.830 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.830 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.831 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.835 I llama_model_loader: - type  f32:   37 tensors
0.00.132.839 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.442 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.262 I llm_load_vocab: special tokens cache size = 5
0.00.217.538 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.552 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.553 I llm_load_print_meta: arch             = gemma
0.00.217.553 I llm_load_print_meta: vocab type       = SPM
0.00.217.554 I llm_load_print_meta: n_vocab          = 256000
0.00.217.554 I llm_load_print_meta: n_merges         = 0
0.00.217.555 I llm_load_print_meta: vocab_only       = 0
0.00.217.555 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.555 I llm_load_print_meta: n_embd           = 2048
0.00.217.556 I llm_load_print_meta: n_layer          = 18
0.00.217.568 I llm_load_print_meta: n_head           = 8
0.00.217.569 I llm_load_print_meta: n_head_kv        = 1
0.00.217.569 I llm_load_print_meta: n_rot            = 256
0.00.217.570 I llm_load_print_meta: n_swa            = 0
0.00.217.570 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.570 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.571 I llm_load_print_meta: n_gqa            = 8
0.00.217.572 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.573 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.573 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.575 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.575 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.576 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.576 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.577 I llm_load_print_meta: n_ff             = 16384
0.00.217.577 I llm_load_print_meta: n_expert         = 0
0.00.217.577 I llm_load_print_meta: n_expert_used    = 0
0.00.217.578 I llm_load_print_meta: causal attn      = 1
0.00.217.578 I llm_load_print_meta: pooling type     = 0
0.00.217.578 I llm_load_print_meta: rope type        = 2
0.00.217.579 I llm_load_print_meta: rope scaling     = linear
0.00.217.580 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.581 I llm_load_print_meta: freq_scale_train = 1
0.00.217.581 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.581 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.582 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.582 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.582 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.582 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.583 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.583 I llm_load_print_meta: model type       = 2B
0.00.217.584 I llm_load_print_meta: model ftype      = Q8_0
0.00.217.585 I llm_load_print_meta: model params     = 2.51 B
0.00.217.586 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.217.586 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.587 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.587 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.588 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.588 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.588 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.589 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.589 I llm_load_print_meta: max token length = 93
0.00.217.605 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.287.634 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.287.643 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.292.659 I llama_new_context_with_model: n_ctx      = 8192
0.00.292.666 I llama_new_context_with_model: n_batch    = 2048
0.00.292.667 I llama_new_context_with_model: n_ubatch   = 512
0.00.292.667 I llama_new_context_with_model: flash_attn = 0
0.00.292.670 I llama_new_context_with_model: freq_base  = 10000.0
0.00.292.671 I llama_new_context_with_model: freq_scale = 1
0.00.321.623 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.321.637 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.321.740 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.322.606 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.322.614 I llama_new_context_with_model: graph nodes  = 601
0.00.322.614 I llama_new_context_with_model: graph splits = 1
0.00.322.616 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.424.270 I main: llama threadpool init, n_threads = 4
0.00.424.283 I 
0.00.424.369 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.424.373 I 
0.00.424.417 I sampler seed: 2072554221
0.00.424.426 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.424.428 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.424.429 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities from the 19th century. [end of text]


0.01.261.491 I llama_perf_sampler_print:    sampling time =       1.74 ms /    12 runs   (    0.14 ms per token,  6916.43 tokens per second)
0.01.261.493 I llama_perf_context_print:        load time =     422.24 ms
0.01.261.494 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.261.495 I llama_perf_context_print:        eval time =     830.01 ms /    11 runs   (   75.46 ms per token,    13.25 tokens per second)
0.01.261.496 I llama_perf_context_print:       total time =     837.23 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.303s
user	0m26.721s
sys	0m9.522s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3777 (f03bcd84)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32270.46 ms
main:    total time = 32270.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.001.810 I main: load the model and apply lora adapter, if any
0.00.021.673 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.721 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.734 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.748 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.749 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.749 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.750 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.750 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.751 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.755 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.755 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.756 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.756 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.757 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.152 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.284 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.158 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.165 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.166 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.166 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.167 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.167 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.168 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.171 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.171 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.172 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.173 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.173 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.177 I llama_model_loader: - type  f32:   37 tensors
0.00.132.180 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.180 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.063 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.203.822 I llm_load_vocab: special tokens cache size = 5
0.00.222.301 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.316 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.316 I llm_load_print_meta: arch             = gemma
0.00.222.317 I llm_load_print_meta: vocab type       = SPM
0.00.222.318 I llm_load_print_meta: n_vocab          = 256000
0.00.222.318 I llm_load_print_meta: n_merges         = 0
0.00.222.318 I llm_load_print_meta: vocab_only       = 0
0.00.222.319 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.319 I llm_load_print_meta: n_embd           = 2048
0.00.222.319 I llm_load_print_meta: n_layer          = 18
0.00.222.332 I llm_load_print_meta: n_head           = 8
0.00.222.333 I llm_load_print_meta: n_head_kv        = 1
0.00.222.334 I llm_load_print_meta: n_rot            = 256
0.00.222.334 I llm_load_print_meta: n_swa            = 0
0.00.222.334 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.335 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.335 I llm_load_print_meta: n_gqa            = 8
0.00.222.337 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.337 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.338 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.340 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.340 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.341 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.341 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.342 I llm_load_print_meta: n_ff             = 16384
0.00.222.342 I llm_load_print_meta: n_expert         = 0
0.00.222.342 I llm_load_print_meta: n_expert_used    = 0
0.00.222.343 I llm_load_print_meta: causal attn      = 1
0.00.222.343 I llm_load_print_meta: pooling type     = 0
0.00.222.343 I llm_load_print_meta: rope type        = 2
0.00.222.344 I llm_load_print_meta: rope scaling     = linear
0.00.222.346 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.346 I llm_load_print_meta: freq_scale_train = 1
0.00.222.346 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.347 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.347 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.347 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.348 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.348 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.348 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.349 I llm_load_print_meta: model type       = 2B
0.00.222.349 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.222.350 I llm_load_print_meta: model params     = 2.51 B
0.00.222.351 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.222.351 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.352 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.352 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.352 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.352 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.353 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.353 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.353 I llm_load_print_meta: max token length = 93
0.00.222.372 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.279.571 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.279.580 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.279.580 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.279.581 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.279.582 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.279.582 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.284.579 I llama_new_context_with_model: n_ctx      = 8192
0.00.284.586 I llama_new_context_with_model: n_batch    = 2048
0.00.284.586 I llama_new_context_with_model: n_ubatch   = 512
0.00.284.587 I llama_new_context_with_model: flash_attn = 0
0.00.284.590 I llama_new_context_with_model: freq_base  = 10000.0
0.00.284.591 I llama_new_context_with_model: freq_scale = 1
0.00.313.511 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.313.527 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.313.614 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.314.499 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.314.506 I llama_new_context_with_model: graph nodes  = 601
0.00.314.507 I llama_new_context_with_model: graph splits = 1
0.00.314.508 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.395.447 I main: llama threadpool init, n_threads = 4
0.00.395.459 I 
0.00.395.532 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.395.535 I 
0.00.395.573 I sampler seed: 1099592923
0.00.395.582 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.395.584 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.395.585 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED SEPULVED FIGURE

This is an image of a carved sandstone figure. It is located in the Petra Museum in Jordan.

**Questions:**


0.02.028.596 I llama_perf_sampler_print:    sampling time =       4.69 ms /    33 runs   (    0.14 ms per token,  7037.75 tokens per second)
0.02.028.599 I llama_perf_context_print:        load time =     393.62 ms
0.02.028.601 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.028.603 I llama_perf_context_print:        eval time =    1614.93 ms /    32 runs   (   50.47 ms per token,    19.82 tokens per second)
0.02.028.605 I llama_perf_context_print:       total time =    1633.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3777 (f03bcd84)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32039.54 ms
main:    total time = 32039.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.568 I build: 3777 (f03bcd84) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.772 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.021.637 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.653 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.661 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.662 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.665 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.666 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.667 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.667 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.668 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.668 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.673 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.673 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.674 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.675 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.675 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.404 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.449 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.339 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.346 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.347 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.348 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.348 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.349 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.350 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.353 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.357 I llama_model_loader: - type  f32:   37 tensors
0.00.132.361 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.362 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.256 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.202.995 I llm_load_vocab: special tokens cache size = 5
0.00.221.386 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.402 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.403 I llm_load_print_meta: arch             = gemma
0.00.221.403 I llm_load_print_meta: vocab type       = SPM
0.00.221.404 I llm_load_print_meta: n_vocab          = 256000
0.00.221.404 I llm_load_print_meta: n_merges         = 0
0.00.221.405 I llm_load_print_meta: vocab_only       = 0
0.00.221.405 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.405 I llm_load_print_meta: n_embd           = 2048
0.00.221.406 I llm_load_print_meta: n_layer          = 18
0.00.221.419 I llm_load_print_meta: n_head           = 8
0.00.221.420 I llm_load_print_meta: n_head_kv        = 1
0.00.221.420 I llm_load_print_meta: n_rot            = 256
0.00.221.421 I llm_load_print_meta: n_swa            = 0
0.00.221.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.421 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.422 I llm_load_print_meta: n_gqa            = 8
0.00.221.423 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.425 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.425 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.427 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.428 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.429 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.429 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.430 I llm_load_print_meta: n_ff             = 16384
0.00.221.431 I llm_load_print_meta: n_expert         = 0
0.00.221.431 I llm_load_print_meta: n_expert_used    = 0
0.00.221.431 I llm_load_print_meta: causal attn      = 1
0.00.221.432 I llm_load_print_meta: pooling type     = 0
0.00.221.433 I llm_load_print_meta: rope type        = 2
0.00.221.433 I llm_load_print_meta: rope scaling     = linear
0.00.221.435 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.436 I llm_load_print_meta: freq_scale_train = 1
0.00.221.437 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.438 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.438 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.438 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.439 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.439 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.439 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.440 I llm_load_print_meta: model type       = 2B
0.00.221.440 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.221.441 I llm_load_print_meta: model params     = 2.51 B
0.00.221.442 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.221.443 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.443 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.444 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.444 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.445 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.446 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.446 I llm_load_print_meta: max token length = 93
0.00.221.464 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.277.018 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.282.053 I llama_new_context_with_model: n_ctx      = 8192
0.00.282.060 I llama_new_context_with_model: n_batch    = 2048
0.00.282.061 I llama_new_context_with_model: n_ubatch   = 512
0.00.282.061 I llama_new_context_with_model: flash_attn = 0
0.00.282.065 I llama_new_context_with_model: freq_base  = 10000.0
0.00.282.066 I llama_new_context_with_model: freq_scale = 1
0.00.312.031 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.312.048 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.312.136 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.312.996 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.313.005 I llama_new_context_with_model: graph nodes  = 601
0.00.313.005 I llama_new_context_with_model: graph splits = 1
0.00.313.007 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.393.575 I main: llama threadpool init, n_threads = 4
0.00.393.588 I 
0.00.393.661 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.393.664 I 
0.00.393.701 I sampler seed: 604357027
0.00.393.710 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.393.713 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.393.714 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded in the following sentence:

The woman who has been missing for days has finally been found.

The sentence is incomplete and needs additional information to be

0.02.037.780 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6770.62 tokens per second)
0.02.037.782 I llama_perf_context_print:        load time =     391.70 ms
0.02.037.783 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.037.785 I llama_perf_context_print:        eval time =    1625.42 ms /    32 runs   (   50.79 ms per token,    19.69 tokens per second)
0.02.037.786 I llama_perf_context_print:       total time =    1644.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.422s
user	8m14.961s
sys	0m6.881s
