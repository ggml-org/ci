+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.564 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.001.877 I main: load the model and apply lora adapter, if any
0.00.023.472 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.520 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.528 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.535 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.535 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.539 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.540 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.541 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.542 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.542 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.543 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.547 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.548 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.548 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.549 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.549 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.398 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.648 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.560 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.567 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.567 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.568 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.569 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.570 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.571 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.573 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.574 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.575 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.576 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.578 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.581 I llama_model_loader: - type  f32:   37 tensors
0.00.134.584 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.954 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.210.715 I llm_load_vocab: special tokens cache size = 5
0.00.229.017 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.229.033 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.229.033 I llm_load_print_meta: arch             = gemma
0.00.229.034 I llm_load_print_meta: vocab type       = SPM
0.00.229.035 I llm_load_print_meta: n_vocab          = 256000
0.00.229.035 I llm_load_print_meta: n_merges         = 0
0.00.229.036 I llm_load_print_meta: vocab_only       = 0
0.00.229.036 I llm_load_print_meta: n_ctx_train      = 8192
0.00.229.036 I llm_load_print_meta: n_embd           = 2048
0.00.229.037 I llm_load_print_meta: n_layer          = 18
0.00.229.049 I llm_load_print_meta: n_head           = 8
0.00.229.050 I llm_load_print_meta: n_head_kv        = 1
0.00.229.050 I llm_load_print_meta: n_rot            = 256
0.00.229.051 I llm_load_print_meta: n_swa            = 0
0.00.229.051 I llm_load_print_meta: n_embd_head_k    = 256
0.00.229.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.229.052 I llm_load_print_meta: n_gqa            = 8
0.00.229.053 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.229.054 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.229.055 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.229.056 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.229.057 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.229.057 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.229.058 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.229.059 I llm_load_print_meta: n_ff             = 16384
0.00.229.059 I llm_load_print_meta: n_expert         = 0
0.00.229.059 I llm_load_print_meta: n_expert_used    = 0
0.00.229.060 I llm_load_print_meta: causal attn      = 1
0.00.229.060 I llm_load_print_meta: pooling type     = 0
0.00.229.060 I llm_load_print_meta: rope type        = 2
0.00.229.060 I llm_load_print_meta: rope scaling     = linear
0.00.229.062 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.229.063 I llm_load_print_meta: freq_scale_train = 1
0.00.229.063 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.229.063 I llm_load_print_meta: rope_finetuned   = unknown
0.00.229.064 I llm_load_print_meta: ssm_d_conv       = 0
0.00.229.064 I llm_load_print_meta: ssm_d_inner      = 0
0.00.229.064 I llm_load_print_meta: ssm_d_state      = 0
0.00.229.064 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.229.065 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.229.065 I llm_load_print_meta: model type       = 2B
0.00.229.066 I llm_load_print_meta: model ftype      = Q8_0
0.00.229.066 I llm_load_print_meta: model params     = 2.51 B
0.00.229.067 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.229.068 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.229.068 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.229.069 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.229.069 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.229.069 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.229.080 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.229.080 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.229.080 I llm_load_print_meta: max token length = 93
0.00.229.106 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.327.001 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.327.010 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.327.011 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.327.012 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.327.013 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.327.013 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.332.313 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.320 I llama_new_context_with_model: n_batch    = 2048
0.00.332.321 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.321 I llama_new_context_with_model: flash_attn = 0
0.00.332.325 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.326 I llama_new_context_with_model: freq_scale = 1
0.00.362.745 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.760 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.362.856 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.758 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.766 I llama_new_context_with_model: graph nodes  = 601
0.00.363.767 I llama_new_context_with_model: graph splits = 1
0.00.363.769 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.126 I main: llama threadpool init, n_threads = 4
0.00.458.138 I 
0.00.458.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.458.214 I 
0.00.458.241 I sampler seed: 155547755
0.00.458.250 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.253 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.458.254 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, the ultimate test of a warrior's skill and endurance.

The warriors were clad in their finest armor, their faces lit by the flickering torches

0.02.718.811 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6600.00 tokens per second)
0.02.718.814 I llama_perf_context_print:        load time =     456.23 ms
0.02.718.815 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.718.816 I llama_perf_context_print:        eval time =    2242.32 ms /    32 runs   (   70.07 ms per token,    14.27 tokens per second)
0.02.718.817 I llama_perf_context_print:       total time =    2260.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.562 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.001.892 I main: load the model and apply lora adapter, if any
0.00.022.316 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.332 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.339 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.340 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.343 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.344 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.345 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.345 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.346 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.346 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.352 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.352 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.353 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.353 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.354 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.557 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.306 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.200 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.208 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.208 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.209 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.209 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.210 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.211 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.214 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.214 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.215 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.216 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.218 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.222 I llama_model_loader: - type  f32:   37 tensors
0.00.133.225 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.842 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.563 I llm_load_vocab: special tokens cache size = 5
0.00.219.761 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.774 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.774 I llm_load_print_meta: arch             = gemma
0.00.219.775 I llm_load_print_meta: vocab type       = SPM
0.00.219.776 I llm_load_print_meta: n_vocab          = 256000
0.00.219.776 I llm_load_print_meta: n_merges         = 0
0.00.219.777 I llm_load_print_meta: vocab_only       = 0
0.00.219.777 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.777 I llm_load_print_meta: n_embd           = 2048
0.00.219.777 I llm_load_print_meta: n_layer          = 18
0.00.219.790 I llm_load_print_meta: n_head           = 8
0.00.219.791 I llm_load_print_meta: n_head_kv        = 1
0.00.219.791 I llm_load_print_meta: n_rot            = 256
0.00.219.792 I llm_load_print_meta: n_swa            = 0
0.00.219.792 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.792 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.793 I llm_load_print_meta: n_gqa            = 8
0.00.219.794 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.795 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.796 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.797 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.798 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.798 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.798 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.799 I llm_load_print_meta: n_ff             = 16384
0.00.219.800 I llm_load_print_meta: n_expert         = 0
0.00.219.800 I llm_load_print_meta: n_expert_used    = 0
0.00.219.800 I llm_load_print_meta: causal attn      = 1
0.00.219.801 I llm_load_print_meta: pooling type     = 0
0.00.219.801 I llm_load_print_meta: rope type        = 2
0.00.219.801 I llm_load_print_meta: rope scaling     = linear
0.00.219.803 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.803 I llm_load_print_meta: freq_scale_train = 1
0.00.219.803 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.804 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.804 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.804 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.804 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.805 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.805 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.806 I llm_load_print_meta: model type       = 2B
0.00.219.806 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.807 I llm_load_print_meta: model params     = 2.51 B
0.00.219.808 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.809 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.809 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.810 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.811 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.811 I llm_load_print_meta: max token length = 93
0.00.219.827 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.314.036 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.319.215 I llama_new_context_with_model: n_ctx      = 8192
0.00.319.221 I llama_new_context_with_model: n_batch    = 2048
0.00.319.222 I llama_new_context_with_model: n_ubatch   = 512
0.00.319.222 I llama_new_context_with_model: flash_attn = 0
0.00.319.225 I llama_new_context_with_model: freq_base  = 10000.0
0.00.319.226 I llama_new_context_with_model: freq_scale = 1
0.00.349.752 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.349.766 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.349.857 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.712 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.350.721 I llama_new_context_with_model: graph nodes  = 601
0.00.350.721 I llama_new_context_with_model: graph splits = 1
0.00.350.723 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.159 I main: llama threadpool init, n_threads = 4
0.00.441.174 I 
0.00.441.252 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.255 I 
0.00.441.295 I sampler seed: 2146049281
0.00.441.304 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.307 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.441.307 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the 1980s and 1990s:

**1. Sexual harassment and discrimination**

- Increased awareness and

0.02.640.933 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6496.06 tokens per second)
0.02.640.936 I llama_perf_context_print:        load time =     439.25 ms
0.02.640.938 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.640.940 I llama_perf_context_print:        eval time =    2180.29 ms /    32 runs   (   68.13 ms per token,    14.68 tokens per second)
0.02.640.941 I llama_perf_context_print:       total time =    2199.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.592 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.824 I main: llama backend init
0.00.001.982 I main: load the model and apply lora adapter, if any
0.00.022.170 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.228 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.249 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.259 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.263 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.275 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.277 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.278 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.351 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.617 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.511 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.518 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.518 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.519 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.520 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.521 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.521 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.523 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.524 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.525 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.527 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.528 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.531 I llama_model_loader: - type  f32:   37 tensors
0.00.133.534 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.639 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.207.416 I llm_load_vocab: special tokens cache size = 5
0.00.225.899 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.225.914 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.225.915 I llm_load_print_meta: arch             = gemma
0.00.225.915 I llm_load_print_meta: vocab type       = SPM
0.00.225.916 I llm_load_print_meta: n_vocab          = 256000
0.00.225.917 I llm_load_print_meta: n_merges         = 0
0.00.225.917 I llm_load_print_meta: vocab_only       = 0
0.00.225.917 I llm_load_print_meta: n_ctx_train      = 8192
0.00.225.918 I llm_load_print_meta: n_embd           = 2048
0.00.225.918 I llm_load_print_meta: n_layer          = 18
0.00.225.931 I llm_load_print_meta: n_head           = 8
0.00.225.932 I llm_load_print_meta: n_head_kv        = 1
0.00.225.932 I llm_load_print_meta: n_rot            = 256
0.00.225.933 I llm_load_print_meta: n_swa            = 0
0.00.225.933 I llm_load_print_meta: n_embd_head_k    = 256
0.00.225.933 I llm_load_print_meta: n_embd_head_v    = 256
0.00.225.934 I llm_load_print_meta: n_gqa            = 8
0.00.225.935 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.225.936 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.225.937 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.225.938 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.225.938 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.225.939 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.225.939 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.225.940 I llm_load_print_meta: n_ff             = 16384
0.00.225.940 I llm_load_print_meta: n_expert         = 0
0.00.225.941 I llm_load_print_meta: n_expert_used    = 0
0.00.225.941 I llm_load_print_meta: causal attn      = 1
0.00.225.941 I llm_load_print_meta: pooling type     = 0
0.00.225.942 I llm_load_print_meta: rope type        = 2
0.00.225.942 I llm_load_print_meta: rope scaling     = linear
0.00.225.943 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.225.944 I llm_load_print_meta: freq_scale_train = 1
0.00.225.944 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.225.944 I llm_load_print_meta: rope_finetuned   = unknown
0.00.225.945 I llm_load_print_meta: ssm_d_conv       = 0
0.00.225.945 I llm_load_print_meta: ssm_d_inner      = 0
0.00.225.945 I llm_load_print_meta: ssm_d_state      = 0
0.00.225.945 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.225.946 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.225.946 I llm_load_print_meta: model type       = 2B
0.00.225.947 I llm_load_print_meta: model ftype      = Q8_0
0.00.225.947 I llm_load_print_meta: model params     = 2.51 B
0.00.225.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.225.949 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.225.949 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.225.950 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.225.950 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.225.950 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.225.951 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.225.951 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.225.951 I llm_load_print_meta: max token length = 93
0.00.225.971 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.302.412 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.302.419 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.302.419 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.302.420 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.302.420 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.302.421 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.307.716 I llama_new_context_with_model: n_ctx      = 8192
0.00.307.723 I llama_new_context_with_model: n_batch    = 2048
0.00.307.723 I llama_new_context_with_model: n_ubatch   = 512
0.00.307.724 I llama_new_context_with_model: flash_attn = 0
0.00.307.727 I llama_new_context_with_model: freq_base  = 10000.0
0.00.307.728 I llama_new_context_with_model: freq_scale = 1
0.00.337.662 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.337.679 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.337.787 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.338.710 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.338.717 I llama_new_context_with_model: graph nodes  = 601
0.00.338.718 I llama_new_context_with_model: graph splits = 1
0.00.338.720 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.220 I main: llama threadpool init, n_threads = 4
0.00.431.232 I 
0.00.431.311 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.315 I 
0.00.431.360 I sampler seed: 334802574
0.00.431.376 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.379 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.380 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.720.814 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8250.83 tokens per second)
0.00.720.815 I llama_perf_context_print:        load time =     429.22 ms
0.00.720.817 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.720.818 I llama_perf_context_print:        eval time =     286.18 ms /     4 runs   (   71.54 ms per token,    13.98 tokens per second)
0.00.720.819 I llama_perf_context_print:       total time =     289.60 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.567 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.001.864 I main: load the model and apply lora adapter, if any
0.00.022.551 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.635 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.642 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.649 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.650 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.654 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.654 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.655 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.656 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.656 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.657 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.662 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.663 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.663 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.664 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.665 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.839 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.024 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.915 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.922 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.923 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.923 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.924 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.925 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.926 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.929 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.929 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.930 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.931 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.932 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.936 I llama_model_loader: - type  f32:   37 tensors
0.00.133.939 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.559 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.203.317 I llm_load_vocab: special tokens cache size = 5
0.00.221.847 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.862 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.862 I llm_load_print_meta: arch             = gemma
0.00.221.863 I llm_load_print_meta: vocab type       = SPM
0.00.221.863 I llm_load_print_meta: n_vocab          = 256000
0.00.221.864 I llm_load_print_meta: n_merges         = 0
0.00.221.864 I llm_load_print_meta: vocab_only       = 0
0.00.221.864 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.865 I llm_load_print_meta: n_embd           = 2048
0.00.221.865 I llm_load_print_meta: n_layer          = 18
0.00.221.878 I llm_load_print_meta: n_head           = 8
0.00.221.879 I llm_load_print_meta: n_head_kv        = 1
0.00.221.879 I llm_load_print_meta: n_rot            = 256
0.00.221.879 I llm_load_print_meta: n_swa            = 0
0.00.221.880 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.880 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.881 I llm_load_print_meta: n_gqa            = 8
0.00.221.882 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.883 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.884 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.885 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.886 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.886 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.886 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.887 I llm_load_print_meta: n_ff             = 16384
0.00.221.888 I llm_load_print_meta: n_expert         = 0
0.00.221.888 I llm_load_print_meta: n_expert_used    = 0
0.00.221.889 I llm_load_print_meta: causal attn      = 1
0.00.221.889 I llm_load_print_meta: pooling type     = 0
0.00.221.889 I llm_load_print_meta: rope type        = 2
0.00.221.890 I llm_load_print_meta: rope scaling     = linear
0.00.221.891 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.892 I llm_load_print_meta: freq_scale_train = 1
0.00.221.892 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.892 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.892 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.893 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.893 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.893 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.894 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.894 I llm_load_print_meta: model type       = 2B
0.00.221.895 I llm_load_print_meta: model ftype      = Q8_0
0.00.221.895 I llm_load_print_meta: model params     = 2.51 B
0.00.221.896 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.221.897 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.897 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.898 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.898 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.898 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.898 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.899 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.899 I llm_load_print_meta: max token length = 93
0.00.221.923 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.291.907 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.291.915 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.297.994 I llama_new_context_with_model: n_ctx      = 8192
0.00.298.002 I llama_new_context_with_model: n_batch    = 2048
0.00.298.002 I llama_new_context_with_model: n_ubatch   = 512
0.00.298.003 I llama_new_context_with_model: flash_attn = 0
0.00.298.006 I llama_new_context_with_model: freq_base  = 10000.0
0.00.298.007 I llama_new_context_with_model: freq_scale = 1
0.00.328.677 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.328.692 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.328.787 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.329.624 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.329.633 I llama_new_context_with_model: graph nodes  = 601
0.00.329.633 I llama_new_context_with_model: graph splits = 1
0.00.329.636 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.803 I main: llama threadpool init, n_threads = 4
0.00.426.815 I 
0.00.426.895 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.426.899 I 
0.00.426.927 I sampler seed: 3358462680
0.00.426.935 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.938 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.426.939 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary to the first sentence in the paragraph.

The recent advancements in artificial intelligence have made it increasingly difficult to tell the difference between humans and machines. [end of text]


0.02.888.344 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6547.62 tokens per second)
0.02.888.347 I llama_perf_context_print:        load time =     424.92 ms
0.02.888.348 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.888.349 I llama_perf_context_print:        eval time =    2443.08 ms /    32 runs   (   76.35 ms per token,    13.10 tokens per second)
0.02.888.350 I llama_perf_context_print:       total time =    2461.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.597s
user	0m31.618s
sys	0m9.498s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3811 (f0c7b5ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32039.62 ms
main:    total time = 32039.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.022.487 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.536 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.547 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.551 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.552 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.556 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.559 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.560 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.560 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.561 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.561 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.564 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.565 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.566 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.567 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.567 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.380 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.358 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.179 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.186 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.187 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.187 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.188 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.189 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.189 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.192 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.192 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.194 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.195 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.196 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.199 I llama_model_loader: - type  f32:   37 tensors
0.00.133.202 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.203 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.380 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.207.111 I llm_load_vocab: special tokens cache size = 5
0.00.225.462 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.225.478 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.225.479 I llm_load_print_meta: arch             = gemma
0.00.225.480 I llm_load_print_meta: vocab type       = SPM
0.00.225.481 I llm_load_print_meta: n_vocab          = 256000
0.00.225.481 I llm_load_print_meta: n_merges         = 0
0.00.225.481 I llm_load_print_meta: vocab_only       = 0
0.00.225.482 I llm_load_print_meta: n_ctx_train      = 8192
0.00.225.482 I llm_load_print_meta: n_embd           = 2048
0.00.225.482 I llm_load_print_meta: n_layer          = 18
0.00.225.494 I llm_load_print_meta: n_head           = 8
0.00.225.495 I llm_load_print_meta: n_head_kv        = 1
0.00.225.496 I llm_load_print_meta: n_rot            = 256
0.00.225.496 I llm_load_print_meta: n_swa            = 0
0.00.225.496 I llm_load_print_meta: n_embd_head_k    = 256
0.00.225.496 I llm_load_print_meta: n_embd_head_v    = 256
0.00.225.497 I llm_load_print_meta: n_gqa            = 8
0.00.225.498 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.225.499 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.225.500 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.225.501 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.225.502 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.225.502 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.225.503 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.225.503 I llm_load_print_meta: n_ff             = 16384
0.00.225.504 I llm_load_print_meta: n_expert         = 0
0.00.225.504 I llm_load_print_meta: n_expert_used    = 0
0.00.225.504 I llm_load_print_meta: causal attn      = 1
0.00.225.505 I llm_load_print_meta: pooling type     = 0
0.00.225.505 I llm_load_print_meta: rope type        = 2
0.00.225.505 I llm_load_print_meta: rope scaling     = linear
0.00.225.507 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.225.508 I llm_load_print_meta: freq_scale_train = 1
0.00.225.508 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.225.509 I llm_load_print_meta: rope_finetuned   = unknown
0.00.225.509 I llm_load_print_meta: ssm_d_conv       = 0
0.00.225.509 I llm_load_print_meta: ssm_d_inner      = 0
0.00.225.510 I llm_load_print_meta: ssm_d_state      = 0
0.00.225.510 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.225.510 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.225.511 I llm_load_print_meta: model type       = 2B
0.00.225.512 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.225.513 I llm_load_print_meta: model params     = 2.51 B
0.00.225.513 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.225.514 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.225.514 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.225.514 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.225.515 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.225.515 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.225.515 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.225.516 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.225.516 I llm_load_print_meta: max token length = 93
0.00.225.536 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.283.975 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.283.982 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.283.983 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.283.984 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.283.984 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.283.985 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.289.177 I llama_new_context_with_model: n_ctx      = 8192
0.00.289.184 I llama_new_context_with_model: n_batch    = 2048
0.00.289.185 I llama_new_context_with_model: n_ubatch   = 512
0.00.289.185 I llama_new_context_with_model: flash_attn = 0
0.00.289.188 I llama_new_context_with_model: freq_base  = 10000.0
0.00.289.188 I llama_new_context_with_model: freq_scale = 1
0.00.319.803 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.319.817 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.319.912 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.320.755 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.320.763 I llama_new_context_with_model: graph nodes  = 601
0.00.320.764 I llama_new_context_with_model: graph splits = 1
0.00.320.765 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.404.045 I main: llama threadpool init, n_threads = 4
0.00.404.057 I 
0.00.404.131 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.404.134 I 
0.00.404.171 I sampler seed: 2351243135
0.00.404.179 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.404.182 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.404.183 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally. [end of text]


0.00.611.873 I llama_perf_sampler_print:    sampling time =       0.66 ms /     5 runs   (    0.13 ms per token,  7633.59 tokens per second)
0.00.611.875 I llama_perf_context_print:        load time =     402.16 ms
0.00.611.876 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.611.877 I llama_perf_context_print:        eval time =     204.34 ms /     4 runs   (   51.09 ms per token,    19.57 tokens per second)
0.00.611.879 I llama_perf_context_print:       total time =     207.84 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3811 (f0c7b5ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32444.03 ms
main:    total time = 32444.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.566 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.001.890 I main: load the model and apply lora adapter, if any
0.00.022.174 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.193 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.199 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.202 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.207 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.208 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.208 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.209 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.213 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.214 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.214 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.215 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.216 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.019 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.582 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.417 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.418 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.418 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.419 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.420 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.421 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.424 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.424 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.428 I llama_model_loader: - type  f32:   37 tensors
0.00.132.430 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.431 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.835 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.562 I llm_load_vocab: special tokens cache size = 5
0.00.217.760 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.774 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.775 I llm_load_print_meta: arch             = gemma
0.00.217.775 I llm_load_print_meta: vocab type       = SPM
0.00.217.776 I llm_load_print_meta: n_vocab          = 256000
0.00.217.776 I llm_load_print_meta: n_merges         = 0
0.00.217.777 I llm_load_print_meta: vocab_only       = 0
0.00.217.777 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.777 I llm_load_print_meta: n_embd           = 2048
0.00.217.777 I llm_load_print_meta: n_layer          = 18
0.00.217.789 I llm_load_print_meta: n_head           = 8
0.00.217.791 I llm_load_print_meta: n_head_kv        = 1
0.00.217.792 I llm_load_print_meta: n_rot            = 256
0.00.217.792 I llm_load_print_meta: n_swa            = 0
0.00.217.792 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.794 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.795 I llm_load_print_meta: n_gqa            = 8
0.00.217.796 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.797 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.798 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.800 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.800 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.800 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.801 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.801 I llm_load_print_meta: n_ff             = 16384
0.00.217.802 I llm_load_print_meta: n_expert         = 0
0.00.217.802 I llm_load_print_meta: n_expert_used    = 0
0.00.217.803 I llm_load_print_meta: causal attn      = 1
0.00.217.804 I llm_load_print_meta: pooling type     = 0
0.00.217.804 I llm_load_print_meta: rope type        = 2
0.00.217.805 I llm_load_print_meta: rope scaling     = linear
0.00.217.807 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.807 I llm_load_print_meta: freq_scale_train = 1
0.00.217.807 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.808 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.808 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.808 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.809 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.810 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.810 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.810 I llm_load_print_meta: model type       = 2B
0.00.217.811 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.217.812 I llm_load_print_meta: model params     = 2.51 B
0.00.217.813 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.217.813 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.814 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.815 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.815 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.815 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.815 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.816 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.816 I llm_load_print_meta: max token length = 93
0.00.217.832 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.274.854 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.280.084 I llama_new_context_with_model: n_ctx      = 8192
0.00.280.091 I llama_new_context_with_model: n_batch    = 2048
0.00.280.091 I llama_new_context_with_model: n_ubatch   = 512
0.00.280.092 I llama_new_context_with_model: flash_attn = 0
0.00.280.096 I llama_new_context_with_model: freq_base  = 10000.0
0.00.280.097 I llama_new_context_with_model: freq_scale = 1
0.00.311.244 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.311.260 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.311.350 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.312.210 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.312.216 I llama_new_context_with_model: graph nodes  = 601
0.00.312.216 I llama_new_context_with_model: graph splits = 1
0.00.312.219 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.394.596 I main: llama threadpool init, n_threads = 4
0.00.394.610 I 
0.00.394.683 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.394.686 I 
0.00.394.726 I sampler seed: 1903262119
0.00.394.736 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.394.738 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.394.739 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvled?

I am unable to answer this question as it contains inappropriate language. I am programmed to provide safe and appropriate responses. [end of text]


0.01.866.051 I llama_perf_sampler_print:    sampling time =       4.62 ms /    30 runs   (    0.15 ms per token,  6496.32 tokens per second)
0.01.866.053 I llama_perf_context_print:        load time =     392.69 ms
0.01.866.054 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.866.056 I llama_perf_context_print:        eval time =    1454.74 ms /    29 runs   (   50.16 ms per token,    19.93 tokens per second)
0.01.866.056 I llama_perf_context_print:       total time =    1471.46 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.222s
user	8m8.917s
sys	0m7.244s
