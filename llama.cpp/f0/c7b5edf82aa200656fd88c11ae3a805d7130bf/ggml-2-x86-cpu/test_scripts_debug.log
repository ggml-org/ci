+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.666 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
0.00.024.933 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.128 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.213 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.224 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.225 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.229 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.230 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.245 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.250 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.251 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.259 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.265 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.268 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.472 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.767 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.007 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.015 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.016 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.017 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.018 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.019 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.020 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.024 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.024 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.025 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.026 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.027 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.035 I llama_model_loader: - type  f32:   37 tensors
0.00.198.039 I llama_model_loader: - type q8_0:  127 tensors
0.00.490.624 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.753 I llm_load_vocab: special tokens cache size = 5
0.00.550.717 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.550.777 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.550.777 I llm_load_print_meta: arch             = gemma
0.00.550.778 I llm_load_print_meta: vocab type       = SPM
0.00.550.779 I llm_load_print_meta: n_vocab          = 256000
0.00.550.781 I llm_load_print_meta: n_merges         = 0
0.00.550.782 I llm_load_print_meta: vocab_only       = 0
0.00.550.783 I llm_load_print_meta: n_ctx_train      = 8192
0.00.550.783 I llm_load_print_meta: n_embd           = 2048
0.00.550.783 I llm_load_print_meta: n_layer          = 18
0.00.550.819 I llm_load_print_meta: n_head           = 8
0.00.550.826 I llm_load_print_meta: n_head_kv        = 1
0.00.550.827 I llm_load_print_meta: n_rot            = 256
0.00.550.827 I llm_load_print_meta: n_swa            = 0
0.00.550.828 I llm_load_print_meta: n_embd_head_k    = 256
0.00.550.828 I llm_load_print_meta: n_embd_head_v    = 256
0.00.550.833 I llm_load_print_meta: n_gqa            = 8
0.00.550.837 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.550.842 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.550.843 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.550.844 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.550.845 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.550.845 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.550.846 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.550.850 I llm_load_print_meta: n_ff             = 16384
0.00.550.851 I llm_load_print_meta: n_expert         = 0
0.00.550.851 I llm_load_print_meta: n_expert_used    = 0
0.00.550.852 I llm_load_print_meta: causal attn      = 1
0.00.550.852 I llm_load_print_meta: pooling type     = 0
0.00.550.853 I llm_load_print_meta: rope type        = 2
0.00.550.853 I llm_load_print_meta: rope scaling     = linear
0.00.550.854 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.550.855 I llm_load_print_meta: freq_scale_train = 1
0.00.550.855 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.550.856 I llm_load_print_meta: rope_finetuned   = unknown
0.00.550.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.550.856 I llm_load_print_meta: ssm_d_inner      = 0
0.00.550.856 I llm_load_print_meta: ssm_d_state      = 0
0.00.550.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.550.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.550.858 I llm_load_print_meta: model type       = 2B
0.00.550.859 I llm_load_print_meta: model ftype      = Q8_0
0.00.550.860 I llm_load_print_meta: model params     = 2.51 B
0.00.550.861 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.550.861 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.550.862 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.550.863 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.550.863 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.550.863 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.550.864 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.550.865 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.550.865 I llm_load_print_meta: max token length = 93
0.00.551.048 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.650.092 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.650.102 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.650.102 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.650.103 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.650.104 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.650.104 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.655.987 I llama_new_context_with_model: n_ctx      = 8192
0.00.655.996 I llama_new_context_with_model: n_batch    = 2048
0.00.655.996 I llama_new_context_with_model: n_ubatch   = 512
0.00.655.997 I llama_new_context_with_model: flash_attn = 0
0.00.656.001 I llama_new_context_with_model: freq_base  = 10000.0
0.00.656.001 I llama_new_context_with_model: freq_scale = 1
0.00.685.949 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.993 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.686.114 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.687.517 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.687.526 I llama_new_context_with_model: graph nodes  = 601
0.00.687.526 I llama_new_context_with_model: graph splits = 1
0.00.687.545 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.298.428 I main: llama threadpool init, n_threads = 4
0.01.298.439 I 
0.01.298.529 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.298.535 I 
0.01.298.700 I sampler seed: 2274325229
0.01.298.713 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.298.719 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.298.720 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am unable to provide a response as requested because I am unable to generate text that exaggerates or disparages any group of people. [end of text]


0.14.813.775 I llama_perf_sampler_print:    sampling time =      47.98 ms /    33 runs   (    1.45 ms per token,   687.76 tokens per second)
0.14.813.778 I llama_perf_context_print:        load time =    1295.54 ms
0.14.813.780 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.813.781 I llama_perf_context_print:        eval time =   13432.23 ms /    32 runs   (  419.76 ms per token,     2.38 tokens per second)
0.14.813.782 I llama_perf_context_print:       total time =   13515.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.633 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.028.188 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.028.283 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.297 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.299 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.303 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.304 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.305 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.306 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.308 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.315 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.316 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.317 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.318 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.319 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.864 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.189.410 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.201.655 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.201.665 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.201.666 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.201.667 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.201.667 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.201.669 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.201.669 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.201.673 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.201.674 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.201.675 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.201.676 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.201.677 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.201.685 I llama_model_loader: - type  f32:   37 tensors
0.00.201.690 I llama_model_loader: - type q8_0:  127 tensors
0.00.491.731 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.824 I llm_load_vocab: special tokens cache size = 5
0.00.551.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.783 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.784 I llm_load_print_meta: arch             = gemma
0.00.551.785 I llm_load_print_meta: vocab type       = SPM
0.00.551.786 I llm_load_print_meta: n_vocab          = 256000
0.00.551.789 I llm_load_print_meta: n_merges         = 0
0.00.551.790 I llm_load_print_meta: vocab_only       = 0
0.00.551.790 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.791 I llm_load_print_meta: n_embd           = 2048
0.00.551.791 I llm_load_print_meta: n_layer          = 18
0.00.551.826 I llm_load_print_meta: n_head           = 8
0.00.551.833 I llm_load_print_meta: n_head_kv        = 1
0.00.551.834 I llm_load_print_meta: n_rot            = 256
0.00.551.834 I llm_load_print_meta: n_swa            = 0
0.00.551.835 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.835 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.840 I llm_load_print_meta: n_gqa            = 8
0.00.551.844 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.849 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.850 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.851 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.852 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.852 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.853 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.857 I llm_load_print_meta: n_ff             = 16384
0.00.551.858 I llm_load_print_meta: n_expert         = 0
0.00.551.859 I llm_load_print_meta: n_expert_used    = 0
0.00.551.859 I llm_load_print_meta: causal attn      = 1
0.00.551.860 I llm_load_print_meta: pooling type     = 0
0.00.551.860 I llm_load_print_meta: rope type        = 2
0.00.551.861 I llm_load_print_meta: rope scaling     = linear
0.00.551.862 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.863 I llm_load_print_meta: freq_scale_train = 1
0.00.551.863 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.863 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.863 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.864 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.864 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.864 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.865 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.866 I llm_load_print_meta: model type       = 2B
0.00.551.867 I llm_load_print_meta: model ftype      = Q8_0
0.00.551.867 I llm_load_print_meta: model params     = 2.51 B
0.00.551.868 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.551.869 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.869 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.870 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.870 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.870 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.872 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.873 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.889 I llm_load_print_meta: max token length = 93
0.00.552.068 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.646.176 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.652.008 I llama_new_context_with_model: n_ctx      = 8192
0.00.652.017 I llama_new_context_with_model: n_batch    = 2048
0.00.652.018 I llama_new_context_with_model: n_ubatch   = 512
0.00.652.019 I llama_new_context_with_model: flash_attn = 0
0.00.652.022 I llama_new_context_with_model: freq_base  = 10000.0
0.00.652.023 I llama_new_context_with_model: freq_scale = 1
0.00.683.749 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.683.791 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.683.904 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.685.261 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.685.267 I llama_new_context_with_model: graph nodes  = 601
0.00.685.268 I llama_new_context_with_model: graph splits = 1
0.00.685.284 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.337.311 I main: llama threadpool init, n_threads = 4
0.01.337.321 I 
0.01.337.411 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.337.415 I 
0.01.337.575 I sampler seed: 1767791503
0.01.337.586 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.590 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.337.591 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

A researcher wants to test the hypothesis that the average monthly income of individuals in a particular country is more than $50,000

0.14.879.861 I llama_perf_sampler_print:    sampling time =      47.85 ms /    33 runs   (    1.45 ms per token,   689.71 tokens per second)
0.14.879.873 I llama_perf_context_print:        load time =    1334.46 ms
0.14.879.875 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.879.877 I llama_perf_context_print:        eval time =   13461.17 ms /    32 runs   (  420.66 ms per token,     2.38 tokens per second)
0.14.879.878 I llama_perf_context_print:       total time =   13542.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.655 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.002.806 I main: load the model and apply lora adapter, if any
0.00.024.864 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.062 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.154 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.167 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.168 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.173 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.175 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.177 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.190 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.194 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.195 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.202 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.205 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.206 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.538 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.649 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.809 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.817 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.818 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.819 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.821 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.825 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.827 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.829 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.829 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.831 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.839 I llama_model_loader: - type  f32:   37 tensors
0.00.197.844 I llama_model_loader: - type q8_0:  127 tensors
0.00.483.158 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.206 I llm_load_vocab: special tokens cache size = 5
0.00.542.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.542.803 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.542.804 I llm_load_print_meta: arch             = gemma
0.00.542.805 I llm_load_print_meta: vocab type       = SPM
0.00.542.806 I llm_load_print_meta: n_vocab          = 256000
0.00.542.808 I llm_load_print_meta: n_merges         = 0
0.00.542.808 I llm_load_print_meta: vocab_only       = 0
0.00.542.809 I llm_load_print_meta: n_ctx_train      = 8192
0.00.542.809 I llm_load_print_meta: n_embd           = 2048
0.00.542.809 I llm_load_print_meta: n_layer          = 18
0.00.542.845 I llm_load_print_meta: n_head           = 8
0.00.542.851 I llm_load_print_meta: n_head_kv        = 1
0.00.542.852 I llm_load_print_meta: n_rot            = 256
0.00.542.852 I llm_load_print_meta: n_swa            = 0
0.00.542.852 I llm_load_print_meta: n_embd_head_k    = 256
0.00.542.853 I llm_load_print_meta: n_embd_head_v    = 256
0.00.542.857 I llm_load_print_meta: n_gqa            = 8
0.00.542.862 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.542.866 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.542.867 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.542.869 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.542.869 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.542.870 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.542.870 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.542.903 I llm_load_print_meta: n_ff             = 16384
0.00.542.904 I llm_load_print_meta: n_expert         = 0
0.00.542.904 I llm_load_print_meta: n_expert_used    = 0
0.00.542.905 I llm_load_print_meta: causal attn      = 1
0.00.542.913 I llm_load_print_meta: pooling type     = 0
0.00.542.921 I llm_load_print_meta: rope type        = 2
0.00.542.925 I llm_load_print_meta: rope scaling     = linear
0.00.542.926 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.542.934 I llm_load_print_meta: freq_scale_train = 1
0.00.542.936 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.542.936 I llm_load_print_meta: rope_finetuned   = unknown
0.00.542.937 I llm_load_print_meta: ssm_d_conv       = 0
0.00.542.937 I llm_load_print_meta: ssm_d_inner      = 0
0.00.542.937 I llm_load_print_meta: ssm_d_state      = 0
0.00.542.945 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.542.946 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.542.947 I llm_load_print_meta: model type       = 2B
0.00.542.948 I llm_load_print_meta: model ftype      = Q8_0
0.00.542.949 I llm_load_print_meta: model params     = 2.51 B
0.00.542.950 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.542.950 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.542.951 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.542.959 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.542.959 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.542.964 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.542.964 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.542.965 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.542.965 I llm_load_print_meta: max token length = 93
0.00.543.153 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.620.483 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.620.491 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.620.492 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.620.492 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.620.493 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.620.494 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.626.253 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.262 I llama_new_context_with_model: n_batch    = 2048
0.00.626.263 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.263 I llama_new_context_with_model: flash_attn = 0
0.00.626.267 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.268 I llama_new_context_with_model: freq_scale = 1
0.00.657.861 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.657.904 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.658.021 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.659.468 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.659.475 I llama_new_context_with_model: graph nodes  = 601
0.00.659.475 I llama_new_context_with_model: graph splits = 1
0.00.659.491 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.186 I main: llama threadpool init, n_threads = 4
0.01.275.198 I 
0.01.275.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.295 I 
0.01.275.462 I sampler seed: 3266777708
0.01.275.475 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.480 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.480 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, the only surviving descendants of a legendary civilization.

**What is the setting of the story?** [end of text]


0.11.412.289 I llama_perf_sampler_print:    sampling time =      36.01 ms /    25 runs   (    1.44 ms per token,   694.33 tokens per second)
0.11.412.313 I llama_perf_context_print:        load time =    1272.30 ms
0.11.412.315 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.412.317 I llama_perf_context_print:        eval time =   10075.94 ms /    24 runs   (  419.83 ms per token,     2.38 tokens per second)
0.11.412.318 I llama_perf_context_print:       total time =   10137.11 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.642 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.650 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.913 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.007 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.020 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.021 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.031 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.032 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.033 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.034 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.036 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.043 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.060 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.061 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.062 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.568 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.935 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.215 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.224 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.225 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.226 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.227 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.228 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.229 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.233 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.234 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.235 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.235 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.198.237 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.246 I llama_model_loader: - type  f32:   37 tensors
0.00.198.250 I llama_model_loader: - type q8_0:  127 tensors
0.00.485.175 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.249 I llm_load_vocab: special tokens cache size = 5
0.00.544.648 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.544.703 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.544.703 I llm_load_print_meta: arch             = gemma
0.00.544.704 I llm_load_print_meta: vocab type       = SPM
0.00.544.705 I llm_load_print_meta: n_vocab          = 256000
0.00.544.707 I llm_load_print_meta: n_merges         = 0
0.00.544.707 I llm_load_print_meta: vocab_only       = 0
0.00.544.708 I llm_load_print_meta: n_ctx_train      = 8192
0.00.544.708 I llm_load_print_meta: n_embd           = 2048
0.00.544.709 I llm_load_print_meta: n_layer          = 18
0.00.544.741 I llm_load_print_meta: n_head           = 8
0.00.544.748 I llm_load_print_meta: n_head_kv        = 1
0.00.544.748 I llm_load_print_meta: n_rot            = 256
0.00.544.749 I llm_load_print_meta: n_swa            = 0
0.00.544.749 I llm_load_print_meta: n_embd_head_k    = 256
0.00.544.749 I llm_load_print_meta: n_embd_head_v    = 256
0.00.544.754 I llm_load_print_meta: n_gqa            = 8
0.00.544.758 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.544.763 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.544.764 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.544.766 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.544.766 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.544.767 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.544.767 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.544.772 I llm_load_print_meta: n_ff             = 16384
0.00.544.773 I llm_load_print_meta: n_expert         = 0
0.00.544.773 I llm_load_print_meta: n_expert_used    = 0
0.00.544.773 I llm_load_print_meta: causal attn      = 1
0.00.544.774 I llm_load_print_meta: pooling type     = 0
0.00.544.774 I llm_load_print_meta: rope type        = 2
0.00.544.774 I llm_load_print_meta: rope scaling     = linear
0.00.544.776 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.544.777 I llm_load_print_meta: freq_scale_train = 1
0.00.544.777 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.544.777 I llm_load_print_meta: rope_finetuned   = unknown
0.00.544.777 I llm_load_print_meta: ssm_d_conv       = 0
0.00.544.778 I llm_load_print_meta: ssm_d_inner      = 0
0.00.544.778 I llm_load_print_meta: ssm_d_state      = 0
0.00.544.778 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.544.779 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.544.779 I llm_load_print_meta: model type       = 2B
0.00.544.780 I llm_load_print_meta: model ftype      = Q8_0
0.00.544.781 I llm_load_print_meta: model params     = 2.51 B
0.00.544.782 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.544.783 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.544.783 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.544.784 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.544.784 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.544.795 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.544.796 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.544.796 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.544.797 I llm_load_print_meta: max token length = 93
0.00.544.978 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.616.638 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.616.650 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.622.216 I llama_new_context_with_model: n_ctx      = 8192
0.00.622.223 I llama_new_context_with_model: n_batch    = 2048
0.00.622.223 I llama_new_context_with_model: n_ubatch   = 512
0.00.622.224 I llama_new_context_with_model: flash_attn = 0
0.00.622.227 I llama_new_context_with_model: freq_base  = 10000.0
0.00.622.228 I llama_new_context_with_model: freq_scale = 1
0.00.652.506 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.652.550 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.652.669 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.654.072 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.654.078 I llama_new_context_with_model: graph nodes  = 601
0.00.654.078 I llama_new_context_with_model: graph splits = 1
0.00.654.096 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.900 I main: llama threadpool init, n_threads = 4
0.01.266.910 I 
0.01.267.002 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.006 I 
0.01.267.165 I sampler seed: 4167302074
0.01.267.175 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.180 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.267.181 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconded by the adverb 'just'

The students were just discussing the issue of school funding.

In this sentence, the adverb 'just' is used

0.14.807.327 I llama_perf_sampler_print:    sampling time =      48.10 ms /    33 runs   (    1.46 ms per token,   686.08 tokens per second)
0.14.807.330 I llama_perf_context_print:        load time =    1264.03 ms
0.14.807.342 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.807.344 I llama_perf_context_print:        eval time =   13459.61 ms /    32 runs   (  420.61 ms per token,     2.38 tokens per second)
0.14.807.345 I llama_perf_context_print:       total time =   13540.44 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.678s
user	3m35.599s
sys	0m9.460s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3811 (f0c7b5ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199686.41 ms
main:    total time = 199686.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.668 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.024.869 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.065 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.155 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.167 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.168 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.172 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.176 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.177 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.178 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.178 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.180 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.186 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.187 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.188 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.189 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.190 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.323 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.247 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.364 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.371 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.372 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.373 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.374 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.375 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.376 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.379 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.380 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.381 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.382 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.383 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.391 I llama_model_loader: - type  f32:   37 tensors
0.00.197.394 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.395 I llama_model_loader: - type q6_K:   19 tensors
0.00.481.805 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.482.902 I llm_load_vocab: special tokens cache size = 5
0.00.541.664 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.541.727 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.541.728 I llm_load_print_meta: arch             = gemma
0.00.541.729 I llm_load_print_meta: vocab type       = SPM
0.00.541.730 I llm_load_print_meta: n_vocab          = 256000
0.00.541.732 I llm_load_print_meta: n_merges         = 0
0.00.541.732 I llm_load_print_meta: vocab_only       = 0
0.00.541.733 I llm_load_print_meta: n_ctx_train      = 8192
0.00.541.733 I llm_load_print_meta: n_embd           = 2048
0.00.541.734 I llm_load_print_meta: n_layer          = 18
0.00.541.768 I llm_load_print_meta: n_head           = 8
0.00.541.775 I llm_load_print_meta: n_head_kv        = 1
0.00.541.776 I llm_load_print_meta: n_rot            = 256
0.00.541.776 I llm_load_print_meta: n_swa            = 0
0.00.541.777 I llm_load_print_meta: n_embd_head_k    = 256
0.00.541.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.541.782 I llm_load_print_meta: n_gqa            = 8
0.00.541.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.541.792 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.541.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.541.795 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.541.796 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.541.796 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.541.797 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.541.801 I llm_load_print_meta: n_ff             = 16384
0.00.541.802 I llm_load_print_meta: n_expert         = 0
0.00.541.802 I llm_load_print_meta: n_expert_used    = 0
0.00.541.803 I llm_load_print_meta: causal attn      = 1
0.00.541.803 I llm_load_print_meta: pooling type     = 0
0.00.541.803 I llm_load_print_meta: rope type        = 2
0.00.541.804 I llm_load_print_meta: rope scaling     = linear
0.00.541.805 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.541.806 I llm_load_print_meta: freq_scale_train = 1
0.00.541.806 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.541.806 I llm_load_print_meta: rope_finetuned   = unknown
0.00.541.806 I llm_load_print_meta: ssm_d_conv       = 0
0.00.541.807 I llm_load_print_meta: ssm_d_inner      = 0
0.00.541.807 I llm_load_print_meta: ssm_d_state      = 0
0.00.541.807 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.541.808 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.541.809 I llm_load_print_meta: model type       = 2B
0.00.541.810 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.541.811 I llm_load_print_meta: model params     = 2.51 B
0.00.541.811 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.541.812 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.541.812 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.541.813 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.541.813 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.541.813 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.541.814 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.541.814 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.541.815 I llm_load_print_meta: max token length = 93
0.00.542.000 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.600.686 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.600.697 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.600.697 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.600.698 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.600.699 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.600.699 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.606.336 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.344 I llama_new_context_with_model: n_batch    = 2048
0.00.606.345 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.345 I llama_new_context_with_model: flash_attn = 0
0.00.606.348 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.349 I llama_new_context_with_model: freq_scale = 1
0.00.636.903 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.636.946 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.637.056 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.638.461 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.638.469 I llama_new_context_with_model: graph nodes  = 601
0.00.638.470 I llama_new_context_with_model: graph splits = 1
0.00.638.489 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.219.532 I main: llama threadpool init, n_threads = 4
0.01.219.544 I 
0.01.219.640 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.219.644 I 
0.01.219.821 I sampler seed: 3223998857
0.01.219.832 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.219.837 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.219.838 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities!

I apologize for any inconvenience caused by this message.

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with

0.12.242.243 I llama_perf_sampler_print:    sampling time =      47.73 ms /    33 runs   (    1.45 ms per token,   691.46 tokens per second)
0.12.242.246 I llama_perf_context_print:        load time =    1216.62 ms
0.12.242.248 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.242.249 I llama_perf_context_print:        eval time =   10941.77 ms /    32 runs   (  341.93 ms per token,     2.92 tokens per second)
0.12.242.250 I llama_perf_context_print:       total time =   11022.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3811 (f0c7b5ed)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199761.51 ms
main:    total time = 199761.51 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.645 I build: 3811 (f0c7b5ed) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.024.858 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.954 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.969 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.973 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.977 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.978 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.980 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.981 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.981 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.983 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.996 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.997 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.998 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.999 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.249 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.560 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.807 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.816 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.817 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.818 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.819 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.820 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.821 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.848 I llama_model_loader: - type  f32:   37 tensors
0.00.197.856 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.857 I llama_model_loader: - type q6_K:   19 tensors
0.00.499.298 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.337 I llm_load_vocab: special tokens cache size = 5
0.00.558.915 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.558.977 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.558.978 I llm_load_print_meta: arch             = gemma
0.00.558.978 I llm_load_print_meta: vocab type       = SPM
0.00.558.979 I llm_load_print_meta: n_vocab          = 256000
0.00.558.982 I llm_load_print_meta: n_merges         = 0
0.00.558.982 I llm_load_print_meta: vocab_only       = 0
0.00.558.982 I llm_load_print_meta: n_ctx_train      = 8192
0.00.558.983 I llm_load_print_meta: n_embd           = 2048
0.00.558.983 I llm_load_print_meta: n_layer          = 18
0.00.559.019 I llm_load_print_meta: n_head           = 8
0.00.559.026 I llm_load_print_meta: n_head_kv        = 1
0.00.559.026 I llm_load_print_meta: n_rot            = 256
0.00.559.026 I llm_load_print_meta: n_swa            = 0
0.00.559.027 I llm_load_print_meta: n_embd_head_k    = 256
0.00.559.027 I llm_load_print_meta: n_embd_head_v    = 256
0.00.559.032 I llm_load_print_meta: n_gqa            = 8
0.00.559.036 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.559.055 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.559.056 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.559.058 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.559.058 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.559.059 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.559.059 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.559.064 I llm_load_print_meta: n_ff             = 16384
0.00.559.064 I llm_load_print_meta: n_expert         = 0
0.00.559.065 I llm_load_print_meta: n_expert_used    = 0
0.00.559.065 I llm_load_print_meta: causal attn      = 1
0.00.559.066 I llm_load_print_meta: pooling type     = 0
0.00.559.066 I llm_load_print_meta: rope type        = 2
0.00.559.066 I llm_load_print_meta: rope scaling     = linear
0.00.559.068 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.559.069 I llm_load_print_meta: freq_scale_train = 1
0.00.559.069 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.559.070 I llm_load_print_meta: rope_finetuned   = unknown
0.00.559.070 I llm_load_print_meta: ssm_d_conv       = 0
0.00.559.070 I llm_load_print_meta: ssm_d_inner      = 0
0.00.559.070 I llm_load_print_meta: ssm_d_state      = 0
0.00.559.071 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.559.071 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.559.073 I llm_load_print_meta: model type       = 2B
0.00.559.086 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.559.087 I llm_load_print_meta: model params     = 2.51 B
0.00.559.088 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.559.088 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.559.089 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.559.090 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.559.090 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.559.091 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.559.099 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.559.100 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.559.100 I llm_load_print_meta: max token length = 93
0.00.559.291 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.617.153 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.622.825 I llama_new_context_with_model: n_ctx      = 8192
0.00.622.833 I llama_new_context_with_model: n_batch    = 2048
0.00.622.833 I llama_new_context_with_model: n_ubatch   = 512
0.00.622.834 I llama_new_context_with_model: flash_attn = 0
0.00.622.837 I llama_new_context_with_model: freq_base  = 10000.0
0.00.622.838 I llama_new_context_with_model: freq_scale = 1
0.00.653.438 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.653.482 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.653.596 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.654.984 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.654.990 I llama_new_context_with_model: graph nodes  = 601
0.00.654.990 I llama_new_context_with_model: graph splits = 1
0.00.655.006 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.234.774 I main: llama threadpool init, n_threads = 4
0.01.234.788 I 
0.01.234.884 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.234.888 I 
0.01.235.054 I sampler seed: 2716962423
0.01.235.064 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.235.069 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.235.070 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

I'm so sorry, but I can't write a story about a sexually suggestive or inappropriate topic. My purpose is to help people

0.12.205.015 I llama_perf_sampler_print:    sampling time =      48.19 ms /    33 runs   (    1.46 ms per token,   684.86 tokens per second)
0.12.205.019 I llama_perf_context_print:        load time =    1231.87 ms
0.12.205.030 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.205.032 I llama_perf_context_print:        eval time =   10889.36 ms /    32 runs   (  340.29 ms per token,     2.94 tokens per second)
0.12.205.033 I llama_perf_context_print:       total time =   10970.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.875s
user	50m20.496s
sys	0m6.378s
