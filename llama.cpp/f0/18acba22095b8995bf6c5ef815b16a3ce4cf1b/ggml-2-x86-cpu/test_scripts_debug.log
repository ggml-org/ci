+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.663 I build: 4058 (f018acba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.001.123 I main: load the model and apply lora adapter, if any
0.00.023.896 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.908 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.006 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.019 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.021 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.027 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.031 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.032 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.033 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.034 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.035 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.044 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.046 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.047 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.048 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.049 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.158 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.677 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.703 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.711 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.712 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.713 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.714 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.716 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.717 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.720 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.721 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.723 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.723 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.725 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.734 I llama_model_loader: - type  f32:   37 tensors
0.00.265.736 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.002 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.187 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.184 I llm_load_vocab: special tokens cache size = 5
0.00.600.042 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.109 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.111 I llm_load_print_meta: arch             = gemma
0.00.600.112 I llm_load_print_meta: vocab type       = SPM
0.00.600.112 I llm_load_print_meta: n_vocab          = 256000
0.00.600.115 I llm_load_print_meta: n_merges         = 0
0.00.600.116 I llm_load_print_meta: vocab_only       = 0
0.00.600.116 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.116 I llm_load_print_meta: n_embd           = 2048
0.00.600.117 I llm_load_print_meta: n_layer          = 18
0.00.600.180 I llm_load_print_meta: n_head           = 8
0.00.600.187 I llm_load_print_meta: n_head_kv        = 1
0.00.600.191 I llm_load_print_meta: n_rot            = 256
0.00.600.191 I llm_load_print_meta: n_swa            = 0
0.00.600.191 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.192 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.196 I llm_load_print_meta: n_gqa            = 8
0.00.600.201 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.206 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.208 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.209 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.210 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.210 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.211 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.216 I llm_load_print_meta: n_ff             = 16384
0.00.600.216 I llm_load_print_meta: n_expert         = 0
0.00.600.217 I llm_load_print_meta: n_expert_used    = 0
0.00.600.218 I llm_load_print_meta: causal attn      = 1
0.00.600.218 I llm_load_print_meta: pooling type     = 0
0.00.600.218 I llm_load_print_meta: rope type        = 2
0.00.600.219 I llm_load_print_meta: rope scaling     = linear
0.00.600.221 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.221 I llm_load_print_meta: freq_scale_train = 1
0.00.600.222 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.223 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.223 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.223 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.223 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.224 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.226 I llm_load_print_meta: model type       = 2B
0.00.600.227 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.227 I llm_load_print_meta: model params     = 2.51 B
0.00.600.236 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.237 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.237 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.238 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.239 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.239 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.242 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.242 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.249 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.250 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.252 I llm_load_print_meta: max token length = 93
0.00.702.489 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.702.499 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.702.500 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.702.500 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.702.501 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.702.502 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.708.278 I llama_new_context_with_model: n_seq_max     = 1
0.00.708.285 I llama_new_context_with_model: n_ctx         = 4096
0.00.708.285 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.708.286 I llama_new_context_with_model: n_batch       = 2048
0.00.708.286 I llama_new_context_with_model: n_ubatch      = 512
0.00.708.287 I llama_new_context_with_model: flash_attn    = 0
0.00.708.289 I llama_new_context_with_model: freq_base     = 10000.0
0.00.708.290 I llama_new_context_with_model: freq_scale    = 1
0.00.708.290 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.724.585 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.724.626 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.744 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.279 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.727.283 I llama_new_context_with_model: graph nodes  = 601
0.00.727.283 I llama_new_context_with_model: graph splits = 1
0.00.727.308 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.765 I main: llama threadpool init, n_threads = 4
0.01.333.777 I 
0.01.333.882 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.885 I 
0.01.334.118 I sampler seed: 996102788
0.01.334.130 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.334.137 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.334.140 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.334.141 I 
 increasities in the 19th century.

Answer:

I am unable to provide information that promotes sexually suggestive or inappropriate content. My purpose is to

0.14.780.536 I llama_perf_sampler_print:    sampling time =      47.38 ms /    33 runs   (    1.44 ms per token,   696.51 tokens per second)
0.14.780.541 I llama_perf_context_print:        load time =    1332.54 ms
0.14.780.542 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.780.544 I llama_perf_context_print:        eval time =   13358.62 ms /    32 runs   (  417.46 ms per token,     2.40 tokens per second)
0.14.780.545 I llama_perf_context_print:       total time =   13446.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4058 (f018acba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.001.123 I main: load the model and apply lora adapter, if any
0.00.023.400 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.506 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.520 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.525 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.530 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.533 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.535 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.537 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.540 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.542 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.551 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.556 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.558 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.560 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.562 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.425 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.881 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.097 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.106 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.107 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.108 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.109 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.110 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.111 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.114 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.115 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.116 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.117 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.118 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.126 I llama_model_loader: - type  f32:   37 tensors
0.00.264.129 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.411 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.351 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.344 I llm_load_vocab: special tokens cache size = 5
0.00.598.948 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.018 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.019 I llm_load_print_meta: arch             = gemma
0.00.599.020 I llm_load_print_meta: vocab type       = SPM
0.00.599.020 I llm_load_print_meta: n_vocab          = 256000
0.00.599.023 I llm_load_print_meta: n_merges         = 0
0.00.599.023 I llm_load_print_meta: vocab_only       = 0
0.00.599.024 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.024 I llm_load_print_meta: n_embd           = 2048
0.00.599.024 I llm_load_print_meta: n_layer          = 18
0.00.599.087 I llm_load_print_meta: n_head           = 8
0.00.599.094 I llm_load_print_meta: n_head_kv        = 1
0.00.599.096 I llm_load_print_meta: n_rot            = 256
0.00.599.097 I llm_load_print_meta: n_swa            = 0
0.00.599.097 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.106 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.117 I llm_load_print_meta: n_gqa            = 8
0.00.599.122 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.127 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.128 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.130 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.130 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.131 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.131 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.136 I llm_load_print_meta: n_ff             = 16384
0.00.599.136 I llm_load_print_meta: n_expert         = 0
0.00.599.137 I llm_load_print_meta: n_expert_used    = 0
0.00.599.137 I llm_load_print_meta: causal attn      = 1
0.00.599.148 I llm_load_print_meta: pooling type     = 0
0.00.599.149 I llm_load_print_meta: rope type        = 2
0.00.599.149 I llm_load_print_meta: rope scaling     = linear
0.00.599.153 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.153 I llm_load_print_meta: freq_scale_train = 1
0.00.599.154 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.154 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.155 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.155 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.155 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.155 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.156 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.156 I llm_load_print_meta: model type       = 2B
0.00.599.157 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.159 I llm_load_print_meta: model params     = 2.51 B
0.00.599.168 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.168 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.168 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.177 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.178 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.178 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.179 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.186 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.187 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.188 I llm_load_print_meta: max token length = 93
0.00.697.611 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.703.684 I llama_new_context_with_model: n_seq_max     = 1
0.00.703.690 I llama_new_context_with_model: n_ctx         = 4096
0.00.703.691 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.703.691 I llama_new_context_with_model: n_batch       = 2048
0.00.703.691 I llama_new_context_with_model: n_ubatch      = 512
0.00.703.692 I llama_new_context_with_model: flash_attn    = 0
0.00.703.694 I llama_new_context_with_model: freq_base     = 10000.0
0.00.703.695 I llama_new_context_with_model: freq_scale    = 1
0.00.703.695 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.502 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.544 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.680 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.186 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.723.190 I llama_new_context_with_model: graph nodes  = 601
0.00.723.190 I llama_new_context_with_model: graph splits = 1
0.00.723.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.009 I main: llama threadpool init, n_threads = 4
0.01.330.022 I 
0.01.330.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.150 I 
0.01.330.384 I sampler seed: 3626263004
0.01.330.397 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.404 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.330.408 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.408 I 
 increasels, and a plethora of other whimsical characters. [end of text]


0.06.429.803 I llama_perf_sampler_print:    sampling time =      17.72 ms /    13 runs   (    1.36 ms per token,   733.68 tokens per second)
0.06.429.806 I llama_perf_context_print:        load time =    1328.78 ms
0.06.429.828 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.429.831 I llama_perf_context_print:        eval time =    5064.92 ms /    12 runs   (  422.08 ms per token,     2.37 tokens per second)
0.06.429.832 I llama_perf_context_print:       total time =    5099.80 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4058 (f018acba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.001.125 I main: load the model and apply lora adapter, if any
0.00.023.508 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.519 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.627 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.628 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.633 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.637 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.639 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.641 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.643 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.645 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.653 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.658 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.660 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.662 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.664 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.982 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.087 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.054 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.063 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.064 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.065 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.066 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.068 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.069 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.072 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.073 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.074 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.075 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.264.077 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.085 I llama_model_loader: - type  f32:   37 tensors
0.00.264.087 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.639 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.328 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.373 I llm_load_vocab: special tokens cache size = 5
0.00.604.482 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.552 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.553 I llm_load_print_meta: arch             = gemma
0.00.604.554 I llm_load_print_meta: vocab type       = SPM
0.00.604.555 I llm_load_print_meta: n_vocab          = 256000
0.00.604.557 I llm_load_print_meta: n_merges         = 0
0.00.604.557 I llm_load_print_meta: vocab_only       = 0
0.00.604.558 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.558 I llm_load_print_meta: n_embd           = 2048
0.00.604.558 I llm_load_print_meta: n_layer          = 18
0.00.604.623 I llm_load_print_meta: n_head           = 8
0.00.604.630 I llm_load_print_meta: n_head_kv        = 1
0.00.604.631 I llm_load_print_meta: n_rot            = 256
0.00.604.632 I llm_load_print_meta: n_swa            = 0
0.00.604.632 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.633 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.637 I llm_load_print_meta: n_gqa            = 8
0.00.604.643 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.649 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.651 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.652 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.657 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.657 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.658 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.663 I llm_load_print_meta: n_ff             = 16384
0.00.604.664 I llm_load_print_meta: n_expert         = 0
0.00.604.664 I llm_load_print_meta: n_expert_used    = 0
0.00.604.665 I llm_load_print_meta: causal attn      = 1
0.00.604.666 I llm_load_print_meta: pooling type     = 0
0.00.604.666 I llm_load_print_meta: rope type        = 2
0.00.604.667 I llm_load_print_meta: rope scaling     = linear
0.00.604.668 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.669 I llm_load_print_meta: freq_scale_train = 1
0.00.604.669 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.670 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.670 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.670 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.671 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.671 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.671 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.672 I llm_load_print_meta: model type       = 2B
0.00.604.673 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.674 I llm_load_print_meta: model params     = 2.51 B
0.00.604.683 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.683 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.684 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.684 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.685 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.685 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.686 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.686 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.701 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.706 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.706 I llm_load_print_meta: max token length = 93
0.00.692.579 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.692.588 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.692.589 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.692.590 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.692.590 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.692.591 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.698.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.698.867 I llama_new_context_with_model: n_ctx         = 4096
0.00.698.868 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.698.868 I llama_new_context_with_model: n_batch       = 2048
0.00.698.868 I llama_new_context_with_model: n_ubatch      = 512
0.00.698.869 I llama_new_context_with_model: flash_attn    = 0
0.00.698.872 I llama_new_context_with_model: freq_base     = 10000.0
0.00.698.873 I llama_new_context_with_model: freq_scale    = 1
0.00.698.874 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.716.562 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.716.601 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.716.739 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.719.370 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.719.374 I llama_new_context_with_model: graph nodes  = 601
0.00.719.374 I llama_new_context_with_model: graph splits = 1
0.00.719.400 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.791 I main: llama threadpool init, n_threads = 4
0.01.356.803 I 
0.01.356.916 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.356.921 I 
0.01.357.155 I sampler seed: 3462538670
0.01.357.168 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.175 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.357.179 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.179 I 
 increasities. 

What is the significance of the word "zipper"?

The provided text does not contain any information regarding the significance of the word "

0.14.795.399 I llama_perf_sampler_print:    sampling time =      46.94 ms /    33 runs   (    1.42 ms per token,   703.01 tokens per second)
0.14.795.404 I llama_perf_context_print:        load time =    1355.57 ms
0.14.795.405 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.795.421 I llama_perf_context_print:        eval time =   13349.65 ms /    32 runs   (  417.18 ms per token,     2.40 tokens per second)
0.14.795.425 I llama_perf_context_print:       total time =   13438.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.713 I build: 4058 (f018acba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.926 I main: llama backend init
0.00.001.195 I main: load the model and apply lora adapter, if any
0.00.023.965 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.979 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.074 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.089 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.093 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.097 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.098 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.099 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.101 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.101 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.109 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.110 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.115 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.995 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.303 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.397 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.406 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.408 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.409 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.410 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.411 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.412 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.416 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.417 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.418 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.419 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.420 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.428 I llama_model_loader: - type  f32:   37 tensors
0.00.271.430 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.660 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.256 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.238 I llm_load_vocab: special tokens cache size = 5
0.00.600.839 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.911 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.912 I llm_load_print_meta: arch             = gemma
0.00.600.912 I llm_load_print_meta: vocab type       = SPM
0.00.600.914 I llm_load_print_meta: n_vocab          = 256000
0.00.600.916 I llm_load_print_meta: n_merges         = 0
0.00.600.917 I llm_load_print_meta: vocab_only       = 0
0.00.600.917 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.917 I llm_load_print_meta: n_embd           = 2048
0.00.600.918 I llm_load_print_meta: n_layer          = 18
0.00.600.983 I llm_load_print_meta: n_head           = 8
0.00.600.990 I llm_load_print_meta: n_head_kv        = 1
0.00.600.992 I llm_load_print_meta: n_rot            = 256
0.00.600.992 I llm_load_print_meta: n_swa            = 0
0.00.600.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.993 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.997 I llm_load_print_meta: n_gqa            = 8
0.00.601.002 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.007 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.009 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.011 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.011 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.012 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.013 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.018 I llm_load_print_meta: n_ff             = 16384
0.00.601.020 I llm_load_print_meta: n_expert         = 0
0.00.601.020 I llm_load_print_meta: n_expert_used    = 0
0.00.601.021 I llm_load_print_meta: causal attn      = 1
0.00.601.021 I llm_load_print_meta: pooling type     = 0
0.00.601.022 I llm_load_print_meta: rope type        = 2
0.00.601.022 I llm_load_print_meta: rope scaling     = linear
0.00.601.024 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.025 I llm_load_print_meta: freq_scale_train = 1
0.00.601.026 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.029 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.029 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.030 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.030 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.030 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.031 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.032 I llm_load_print_meta: model type       = 2B
0.00.601.033 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.034 I llm_load_print_meta: model params     = 2.51 B
0.00.601.042 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.043 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.044 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.046 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.047 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.047 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.048 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.049 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.054 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.056 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.057 I llm_load_print_meta: max token length = 93
0.00.674.081 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.674.090 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.679.881 I llama_new_context_with_model: n_seq_max     = 1
0.00.679.888 I llama_new_context_with_model: n_ctx         = 4096
0.00.679.889 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.679.889 I llama_new_context_with_model: n_batch       = 2048
0.00.679.890 I llama_new_context_with_model: n_ubatch      = 512
0.00.679.890 I llama_new_context_with_model: flash_attn    = 0
0.00.679.892 I llama_new_context_with_model: freq_base     = 10000.0
0.00.679.893 I llama_new_context_with_model: freq_scale    = 1
0.00.679.894 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.696.293 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.696.333 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.696.465 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.989 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.698.993 I llama_new_context_with_model: graph nodes  = 601
0.00.698.994 I llama_new_context_with_model: graph splits = 1
0.00.699.018 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.775 I main: llama threadpool init, n_threads = 4
0.01.303.790 I 
0.01.303.897 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.903 I 
0.01.304.173 I sampler seed: 716929488
0.01.304.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.304.196 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.304.197 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.304.197 I 
 increasities and tragedies, a haunting melody echoing through the ruins of a forgotten city.

This melody is the soundtrack to the final episode of a television series that

0.14.743.967 I llama_perf_sampler_print:    sampling time =      47.21 ms /    33 runs   (    1.43 ms per token,   698.97 tokens per second)
0.14.743.970 I llama_perf_context_print:        load time =    1302.48 ms
0.14.743.972 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.743.974 I llama_perf_context_print:        eval time =   13350.77 ms /    32 runs   (  417.21 ms per token,     2.40 tokens per second)
0.14.743.976 I llama_perf_context_print:       total time =   13440.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.278s
user	3m14.446s
sys	0m9.329s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4058 (f018acba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198716.93 ms
main:    total time = 198716.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4058 (f018acba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.001.078 I main: load the model and apply lora adapter, if any
0.00.023.575 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.587 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.678 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.689 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.695 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.699 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.701 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.702 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.703 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.704 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.710 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.712 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.713 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.715 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.716 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.365 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.171 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.217 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.225 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.226 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.227 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.228 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.229 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.230 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.235 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.236 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.237 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.238 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.240 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.246 I llama_model_loader: - type  f32:   37 tensors
0.00.265.250 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.251 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.616 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.926 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.892 I llm_load_vocab: special tokens cache size = 5
0.00.595.918 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.989 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.990 I llm_load_print_meta: arch             = gemma
0.00.595.991 I llm_load_print_meta: vocab type       = SPM
0.00.595.992 I llm_load_print_meta: n_vocab          = 256000
0.00.595.994 I llm_load_print_meta: n_merges         = 0
0.00.595.995 I llm_load_print_meta: vocab_only       = 0
0.00.595.995 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.995 I llm_load_print_meta: n_embd           = 2048
0.00.595.996 I llm_load_print_meta: n_layer          = 18
0.00.596.061 I llm_load_print_meta: n_head           = 8
0.00.596.068 I llm_load_print_meta: n_head_kv        = 1
0.00.596.069 I llm_load_print_meta: n_rot            = 256
0.00.596.070 I llm_load_print_meta: n_swa            = 0
0.00.596.071 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.071 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.076 I llm_load_print_meta: n_gqa            = 8
0.00.596.080 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.085 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.086 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.088 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.088 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.088 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.089 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.094 I llm_load_print_meta: n_ff             = 16384
0.00.596.095 I llm_load_print_meta: n_expert         = 0
0.00.596.096 I llm_load_print_meta: n_expert_used    = 0
0.00.596.096 I llm_load_print_meta: causal attn      = 1
0.00.596.097 I llm_load_print_meta: pooling type     = 0
0.00.596.097 I llm_load_print_meta: rope type        = 2
0.00.596.102 I llm_load_print_meta: rope scaling     = linear
0.00.596.103 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.104 I llm_load_print_meta: freq_scale_train = 1
0.00.596.105 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.105 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.105 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.105 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.106 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.107 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.108 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.109 I llm_load_print_meta: model type       = 2B
0.00.596.110 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.596.111 I llm_load_print_meta: model params     = 2.51 B
0.00.596.120 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.596.121 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.124 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.124 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.125 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.125 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.126 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.126 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.131 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.133 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.133 I llm_load_print_meta: max token length = 93
0.00.658.891 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.658.900 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.658.901 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.658.902 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.658.902 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.658.903 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.664.775 I llama_new_context_with_model: n_seq_max     = 1
0.00.664.784 I llama_new_context_with_model: n_ctx         = 4096
0.00.664.784 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.664.785 I llama_new_context_with_model: n_batch       = 2048
0.00.664.785 I llama_new_context_with_model: n_ubatch      = 512
0.00.664.786 I llama_new_context_with_model: flash_attn    = 0
0.00.664.789 I llama_new_context_with_model: freq_base     = 10000.0
0.00.664.790 I llama_new_context_with_model: freq_scale    = 1
0.00.664.790 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.681.203 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.681.242 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.681.369 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.683.911 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.683.915 I llama_new_context_with_model: graph nodes  = 601
0.00.683.915 I llama_new_context_with_model: graph splits = 1
0.00.683.939 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.253.951 I main: llama threadpool init, n_threads = 4
0.01.253.963 I 
0.01.254.068 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.254.072 I 
0.01.254.300 I sampler seed: 2403322435
0.01.254.312 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.254.319 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.254.322 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.254.322 I 
 squaRE, and MICROSOFT.

Please explain the relationship between these companies and their potential impact on the IT industry.

**Square and MICROSOFT**

0.12.079.816 I llama_perf_sampler_print:    sampling time =      47.54 ms /    33 runs   (    1.44 ms per token,   694.18 tokens per second)
0.12.079.819 I llama_perf_context_print:        load time =    1252.78 ms
0.12.079.820 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.079.834 I llama_perf_context_print:        eval time =   10737.35 ms /    32 runs   (  335.54 ms per token,     2.98 tokens per second)
0.12.079.836 I llama_perf_context_print:       total time =   10825.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4058 (f018acba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198608.32 ms
main:    total time = 198608.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4058 (f018acba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.001.122 I main: load the model and apply lora adapter, if any
0.00.023.398 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.501 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.515 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.517 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.521 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.526 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.527 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.528 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.529 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.530 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.535 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.536 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.537 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.538 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.539 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.258 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.967 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.112 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.120 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.122 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.123 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.124 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.125 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.126 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.130 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.131 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.138 I llama_model_loader: - type  f32:   37 tensors
0.00.270.141 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.142 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.710 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.203 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.150 I llm_load_vocab: special tokens cache size = 5
0.00.610.936 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.005 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.009 I llm_load_print_meta: arch             = gemma
0.00.611.010 I llm_load_print_meta: vocab type       = SPM
0.00.611.011 I llm_load_print_meta: n_vocab          = 256000
0.00.611.013 I llm_load_print_meta: n_merges         = 0
0.00.611.013 I llm_load_print_meta: vocab_only       = 0
0.00.611.014 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.014 I llm_load_print_meta: n_embd           = 2048
0.00.611.015 I llm_load_print_meta: n_layer          = 18
0.00.611.081 I llm_load_print_meta: n_head           = 8
0.00.611.091 I llm_load_print_meta: n_head_kv        = 1
0.00.611.092 I llm_load_print_meta: n_rot            = 256
0.00.611.092 I llm_load_print_meta: n_swa            = 0
0.00.611.093 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.094 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.100 I llm_load_print_meta: n_gqa            = 8
0.00.611.104 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.110 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.114 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.115 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.116 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.116 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.117 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.121 I llm_load_print_meta: n_ff             = 16384
0.00.611.122 I llm_load_print_meta: n_expert         = 0
0.00.611.122 I llm_load_print_meta: n_expert_used    = 0
0.00.611.123 I llm_load_print_meta: causal attn      = 1
0.00.611.123 I llm_load_print_meta: pooling type     = 0
0.00.611.123 I llm_load_print_meta: rope type        = 2
0.00.611.124 I llm_load_print_meta: rope scaling     = linear
0.00.611.133 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.134 I llm_load_print_meta: freq_scale_train = 1
0.00.611.147 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.148 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.148 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.149 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.149 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.149 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.150 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.159 I llm_load_print_meta: model type       = 2B
0.00.611.161 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.161 I llm_load_print_meta: model params     = 2.51 B
0.00.611.172 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.173 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.173 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.174 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.174 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.174 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.175 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.175 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.182 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.184 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.203 I llm_load_print_meta: max token length = 93
0.00.670.624 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.676.278 I llama_new_context_with_model: n_seq_max     = 1
0.00.676.286 I llama_new_context_with_model: n_ctx         = 4096
0.00.676.286 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.676.287 I llama_new_context_with_model: n_batch       = 2048
0.00.676.287 I llama_new_context_with_model: n_ubatch      = 512
0.00.676.288 I llama_new_context_with_model: flash_attn    = 0
0.00.676.290 I llama_new_context_with_model: freq_base     = 10000.0
0.00.676.291 I llama_new_context_with_model: freq_scale    = 1
0.00.676.292 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.692.936 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.692.976 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.693.095 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.648 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.652 I llama_new_context_with_model: graph nodes  = 601
0.00.695.653 I llama_new_context_with_model: graph splits = 1
0.00.695.676 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.948 I main: llama threadpool init, n_threads = 4
0.01.267.961 I 
0.01.268.065 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.268.069 I 
0.01.268.300 I sampler seed: 3603563795
0.01.268.312 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.319 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.268.323 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.268.323 I 
 squade, France.

I am writing to inquire about the availability of a specific product.

**Subject: Inquiry about [Product Name]**

Dear [

0.12.129.112 I llama_perf_sampler_print:    sampling time =      47.13 ms /    33 runs   (    1.43 ms per token,   700.12 tokens per second)
0.12.129.117 I llama_perf_context_print:        load time =    1266.73 ms
0.12.129.119 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.129.121 I llama_perf_context_print:        eval time =   10772.94 ms /    32 runs   (  336.65 ms per token,     2.97 tokens per second)
0.12.129.121 I llama_perf_context_print:       total time =   10861.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.379s
user	50m7.803s
sys	0m6.388s
