+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.177 I build: 4222 (f0678c5f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.367 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.870 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.880 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.888 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.893 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.894 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.898 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.899 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.900 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.900 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.901 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.902 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.906 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.907 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.908 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.908 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.909 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.136 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.055 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.932 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.941 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.941 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.942 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.943 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.943 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.946 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.947 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.947 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.948 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.950 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.953 I llama_model_loader: - type  f32:   37 tensors
0.00.129.954 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.466 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.771 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.340 I llm_load_vocab: special tokens cache size = 5
0.00.271.349 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.364 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.364 I llm_load_print_meta: arch             = gemma
0.00.271.365 I llm_load_print_meta: vocab type       = SPM
0.00.271.366 I llm_load_print_meta: n_vocab          = 256000
0.00.271.366 I llm_load_print_meta: n_merges         = 0
0.00.271.366 I llm_load_print_meta: vocab_only       = 0
0.00.271.367 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.367 I llm_load_print_meta: n_embd           = 2048
0.00.271.367 I llm_load_print_meta: n_layer          = 18
0.00.271.379 I llm_load_print_meta: n_head           = 8
0.00.271.380 I llm_load_print_meta: n_head_kv        = 1
0.00.271.380 I llm_load_print_meta: n_rot            = 256
0.00.271.380 I llm_load_print_meta: n_swa            = 0
0.00.271.381 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.381 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.382 I llm_load_print_meta: n_gqa            = 8
0.00.271.383 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.384 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.385 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.386 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.387 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.387 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.389 I llm_load_print_meta: n_ff             = 16384
0.00.271.389 I llm_load_print_meta: n_expert         = 0
0.00.271.389 I llm_load_print_meta: n_expert_used    = 0
0.00.271.390 I llm_load_print_meta: causal attn      = 1
0.00.271.390 I llm_load_print_meta: pooling type     = 0
0.00.271.390 I llm_load_print_meta: rope type        = 2
0.00.271.391 I llm_load_print_meta: rope scaling     = linear
0.00.271.393 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.393 I llm_load_print_meta: freq_scale_train = 1
0.00.271.394 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.394 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.394 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.395 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.395 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.395 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.395 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.396 I llm_load_print_meta: model type       = 2B
0.00.271.396 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.397 I llm_load_print_meta: model params     = 2.51 B
0.00.271.398 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.398 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.399 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.399 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.400 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.400 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.400 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.401 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.401 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.401 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.402 I llm_load_print_meta: max token length = 93
0.00.376.553 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.376.562 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.376.563 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.376.564 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.376.564 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.376.565 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.317 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.322 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.323 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.323 I llama_new_context_with_model: n_batch       = 2048
0.00.382.323 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.324 I llama_new_context_with_model: flash_attn    = 0
0.00.382.327 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.328 I llama_new_context_with_model: freq_scale    = 1
0.00.382.329 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.397.131 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.145 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.547 I llama_new_context_with_model: graph nodes  = 601
0.00.398.547 I llama_new_context_with_model: graph splits = 1
0.00.398.549 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.568 I main: llama threadpool init, n_threads = 4
0.00.483.585 I 
0.00.483.668 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.483.673 I 
0.00.483.735 I sampler seed: 3360786380
0.00.483.746 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.757 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.761 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.761 I 
 increasities and anxieties, and ultimately encourages personal growth through adversity. [end of text]


0.01.473.762 I llama_perf_sampler_print:    sampling time =       2.09 ms /    15 runs   (    0.14 ms per token,  7187.35 tokens per second)
0.01.473.764 I llama_perf_context_print:        load time =     483.18 ms
0.01.473.765 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.473.767 I llama_perf_context_print:        eval time =     981.40 ms /    14 runs   (   70.10 ms per token,    14.27 tokens per second)
0.01.473.767 I llama_perf_context_print:       total time =     990.20 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.581 I build: 4222 (f0678c5f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.000.795 I main: load the model and apply lora adapter, if any
0.00.021.628 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.641 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.651 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.654 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.658 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.659 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.659 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.660 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.660 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.661 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.666 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.667 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.668 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.668 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.669 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.990 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.106 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.975 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.982 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.983 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.983 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.984 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.986 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.987 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.990 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.991 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.992 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.993 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.994 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.998 I llama_model_loader: - type  f32:   37 tensors
0.00.130.999 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.560 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.782 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.340 I llm_load_vocab: special tokens cache size = 5
0.00.274.986 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.004 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.005 I llm_load_print_meta: arch             = gemma
0.00.275.005 I llm_load_print_meta: vocab type       = SPM
0.00.275.006 I llm_load_print_meta: n_vocab          = 256000
0.00.275.007 I llm_load_print_meta: n_merges         = 0
0.00.275.007 I llm_load_print_meta: vocab_only       = 0
0.00.275.007 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.008 I llm_load_print_meta: n_embd           = 2048
0.00.275.008 I llm_load_print_meta: n_layer          = 18
0.00.275.021 I llm_load_print_meta: n_head           = 8
0.00.275.022 I llm_load_print_meta: n_head_kv        = 1
0.00.275.022 I llm_load_print_meta: n_rot            = 256
0.00.275.022 I llm_load_print_meta: n_swa            = 0
0.00.275.023 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.023 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.024 I llm_load_print_meta: n_gqa            = 8
0.00.275.026 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.027 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.027 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.029 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.030 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.031 I llm_load_print_meta: n_ff             = 16384
0.00.275.031 I llm_load_print_meta: n_expert         = 0
0.00.275.031 I llm_load_print_meta: n_expert_used    = 0
0.00.275.032 I llm_load_print_meta: causal attn      = 1
0.00.275.032 I llm_load_print_meta: pooling type     = 0
0.00.275.032 I llm_load_print_meta: rope type        = 2
0.00.275.033 I llm_load_print_meta: rope scaling     = linear
0.00.275.034 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.035 I llm_load_print_meta: freq_scale_train = 1
0.00.275.035 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.036 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.036 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.036 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.037 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.037 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.037 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.037 I llm_load_print_meta: model type       = 2B
0.00.275.038 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.039 I llm_load_print_meta: model params     = 2.51 B
0.00.275.039 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.040 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.040 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.041 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.041 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.042 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.042 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.042 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.043 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.043 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.044 I llm_load_print_meta: max token length = 93
0.00.370.545 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.375.797 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.804 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.804 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.804 I llama_new_context_with_model: n_batch       = 2048
0.00.375.805 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.805 I llama_new_context_with_model: flash_attn    = 0
0.00.375.808 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.809 I llama_new_context_with_model: freq_scale    = 1
0.00.375.810 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.392.032 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.392.047 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.392.147 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.484 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.393.488 I llama_new_context_with_model: graph nodes  = 601
0.00.393.489 I llama_new_context_with_model: graph splits = 1
0.00.393.491 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.761 I main: llama threadpool init, n_threads = 4
0.00.474.776 I 
0.00.474.848 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.852 I 
0.00.474.894 I sampler seed: 3421197316
0.00.474.906 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.910 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.911 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.912 I 
 seconally.

**Assistant**

I am unable to access real-time information, therefore I am unable to provide you with current stock prices. For the

0.02.658.858 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6804.12 tokens per second)
0.02.658.860 I llama_perf_context_print:        load time =     473.95 ms
0.02.658.862 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.658.863 I llama_perf_context_print:        eval time =    2165.45 ms /    32 runs   (   67.67 ms per token,    14.78 tokens per second)
0.02.658.864 I llama_perf_context_print:       total time =    2184.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.563 I build: 4222 (f0678c5f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.418 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.428 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.435 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.441 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.442 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.445 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.446 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.446 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.448 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.449 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.449 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.455 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.455 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.456 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.456 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.457 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.090 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.359 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.163 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.164 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.164 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.165 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.166 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.166 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.169 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.169 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.171 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.171 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.172 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.175 I llama_model_loader: - type  f32:   37 tensors
0.00.131.176 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.298 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.954 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.525 I llm_load_vocab: special tokens cache size = 5
0.00.264.387 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.405 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.405 I llm_load_print_meta: arch             = gemma
0.00.264.406 I llm_load_print_meta: vocab type       = SPM
0.00.264.407 I llm_load_print_meta: n_vocab          = 256000
0.00.264.407 I llm_load_print_meta: n_merges         = 0
0.00.264.407 I llm_load_print_meta: vocab_only       = 0
0.00.264.408 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.408 I llm_load_print_meta: n_embd           = 2048
0.00.264.408 I llm_load_print_meta: n_layer          = 18
0.00.264.419 I llm_load_print_meta: n_head           = 8
0.00.264.420 I llm_load_print_meta: n_head_kv        = 1
0.00.264.420 I llm_load_print_meta: n_rot            = 256
0.00.264.421 I llm_load_print_meta: n_swa            = 0
0.00.264.421 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.421 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.422 I llm_load_print_meta: n_gqa            = 8
0.00.264.423 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.425 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.426 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.427 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.427 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.427 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.428 I llm_load_print_meta: n_ff             = 16384
0.00.264.429 I llm_load_print_meta: n_expert         = 0
0.00.264.429 I llm_load_print_meta: n_expert_used    = 0
0.00.264.429 I llm_load_print_meta: causal attn      = 1
0.00.264.430 I llm_load_print_meta: pooling type     = 0
0.00.264.430 I llm_load_print_meta: rope type        = 2
0.00.264.431 I llm_load_print_meta: rope scaling     = linear
0.00.264.432 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.432 I llm_load_print_meta: freq_scale_train = 1
0.00.264.433 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.433 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.434 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.434 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.434 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.434 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.435 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.435 I llm_load_print_meta: model type       = 2B
0.00.264.436 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.437 I llm_load_print_meta: model params     = 2.51 B
0.00.264.438 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.438 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.439 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.439 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.440 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.440 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.440 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.441 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.441 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.442 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.442 I llm_load_print_meta: max token length = 93
0.00.338.150 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.338.158 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.158 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.338.159 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.338.160 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.161 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.344.092 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.098 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.099 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.099 I llama_new_context_with_model: n_batch       = 2048
0.00.344.100 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.100 I llama_new_context_with_model: flash_attn    = 0
0.00.344.102 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.103 I llama_new_context_with_model: freq_scale    = 1
0.00.344.104 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.492 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.505 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.593 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.811 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.818 I llama_new_context_with_model: graph nodes  = 601
0.00.359.818 I llama_new_context_with_model: graph splits = 1
0.00.359.821 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.803 I main: llama threadpool init, n_threads = 4
0.00.445.819 I 
0.00.445.888 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.890 I 
0.00.445.932 I sampler seed: 1013834132
0.00.445.943 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.946 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.947 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.947 I 
 increasels of the 20th century and their impact on American society.

**Answer:**

**The Rise of the Jazz Age and its Social Impact

0.02.751.452 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6627.84 tokens per second)
0.02.751.455 I llama_perf_context_print:        load time =     445.04 ms
0.02.751.456 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.751.458 I llama_perf_context_print:        eval time =    2286.45 ms /    32 runs   (   71.45 ms per token,    14.00 tokens per second)
0.02.751.459 I llama_perf_context_print:       total time =    2305.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.182 I build: 4222 (f0678c5f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.378 I main: llama backend init
0.00.000.385 I main: load the model and apply lora adapter, if any
0.00.020.775 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.787 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.794 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.799 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.800 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.803 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.804 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.804 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.804 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.805 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.806 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.810 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.811 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.811 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.813 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.813 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.506 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.352 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.231 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.238 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.239 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.240 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.240 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.241 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.242 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.245 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.246 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.246 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.247 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.248 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.252 I llama_model_loader: - type  f32:   37 tensors
0.00.131.253 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.302 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.562 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.313 I llm_load_vocab: special tokens cache size = 5
0.00.277.678 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.694 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.695 I llm_load_print_meta: arch             = gemma
0.00.277.695 I llm_load_print_meta: vocab type       = SPM
0.00.277.696 I llm_load_print_meta: n_vocab          = 256000
0.00.277.696 I llm_load_print_meta: n_merges         = 0
0.00.277.697 I llm_load_print_meta: vocab_only       = 0
0.00.277.697 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.697 I llm_load_print_meta: n_embd           = 2048
0.00.277.698 I llm_load_print_meta: n_layer          = 18
0.00.277.709 I llm_load_print_meta: n_head           = 8
0.00.277.710 I llm_load_print_meta: n_head_kv        = 1
0.00.277.711 I llm_load_print_meta: n_rot            = 256
0.00.277.711 I llm_load_print_meta: n_swa            = 0
0.00.277.711 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.712 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.712 I llm_load_print_meta: n_gqa            = 8
0.00.277.713 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.714 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.715 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.716 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.717 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.717 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.717 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.718 I llm_load_print_meta: n_ff             = 16384
0.00.277.719 I llm_load_print_meta: n_expert         = 0
0.00.277.719 I llm_load_print_meta: n_expert_used    = 0
0.00.277.719 I llm_load_print_meta: causal attn      = 1
0.00.277.719 I llm_load_print_meta: pooling type     = 0
0.00.277.720 I llm_load_print_meta: rope type        = 2
0.00.277.720 I llm_load_print_meta: rope scaling     = linear
0.00.277.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.722 I llm_load_print_meta: freq_scale_train = 1
0.00.277.723 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.723 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.723 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.724 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.724 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.724 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.724 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.725 I llm_load_print_meta: model type       = 2B
0.00.277.725 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.726 I llm_load_print_meta: model params     = 2.51 B
0.00.277.727 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.727 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.727 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.728 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.728 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.728 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.729 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.729 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.730 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.730 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.730 I llm_load_print_meta: max token length = 93
0.00.348.691 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.348.697 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.852 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.857 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.858 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.858 I llama_new_context_with_model: n_batch       = 2048
0.00.353.859 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.859 I llama_new_context_with_model: flash_attn    = 0
0.00.353.862 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.863 I llama_new_context_with_model: freq_scale    = 1
0.00.353.865 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.436 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.451 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.857 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.863 I llama_new_context_with_model: graph nodes  = 601
0.00.370.864 I llama_new_context_with_model: graph splits = 1
0.00.370.866 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.757 I main: llama threadpool init, n_threads = 4
0.00.472.779 I 
0.00.472.867 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.472.872 I 
0.00.472.945 I sampler seed: 3163308186
0.00.472.961 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.964 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.965 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.966 I 
 increasities. 

The correct answer is: "Paradox".

Paradox is a statement or situation that appears contradictory or absurd, but may nevertheless have a hidden

0.02.905.604 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6417.74 tokens per second)
0.02.905.606 I llama_perf_context_print:        load time =     472.35 ms
0.02.905.607 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.905.610 I llama_perf_context_print:        eval time =    2412.26 ms /    32 runs   (   75.38 ms per token,    13.27 tokens per second)
0.02.905.614 I llama_perf_context_print:       total time =    2432.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.578s
user	0m34.611s
sys	0m9.335s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4222 (f0678c5f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40195.87 ms
main:    total time = 40195.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 4222 (f0678c5f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.020.798 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.807 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.816 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.821 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.822 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.827 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.829 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.830 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.831 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.832 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.832 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.835 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.836 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.836 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.837 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.837 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.593 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.333 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.149 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.156 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.156 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.157 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.157 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.159 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.159 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.162 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.163 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.164 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.165 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.166 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.170 I llama_model_loader: - type  f32:   37 tensors
0.00.130.171 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.171 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.825 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.836 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.439 I llm_load_vocab: special tokens cache size = 5
0.00.273.428 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.445 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.446 I llm_load_print_meta: arch             = gemma
0.00.273.446 I llm_load_print_meta: vocab type       = SPM
0.00.273.448 I llm_load_print_meta: n_vocab          = 256000
0.00.273.449 I llm_load_print_meta: n_merges         = 0
0.00.273.449 I llm_load_print_meta: vocab_only       = 0
0.00.273.450 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.450 I llm_load_print_meta: n_embd           = 2048
0.00.273.450 I llm_load_print_meta: n_layer          = 18
0.00.273.462 I llm_load_print_meta: n_head           = 8
0.00.273.463 I llm_load_print_meta: n_head_kv        = 1
0.00.273.463 I llm_load_print_meta: n_rot            = 256
0.00.273.464 I llm_load_print_meta: n_swa            = 0
0.00.273.464 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.464 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.468 I llm_load_print_meta: n_gqa            = 8
0.00.273.469 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.470 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.471 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.473 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.474 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.475 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.476 I llm_load_print_meta: n_ff             = 16384
0.00.273.477 I llm_load_print_meta: n_expert         = 0
0.00.273.477 I llm_load_print_meta: n_expert_used    = 0
0.00.273.477 I llm_load_print_meta: causal attn      = 1
0.00.273.477 I llm_load_print_meta: pooling type     = 0
0.00.273.478 I llm_load_print_meta: rope type        = 2
0.00.273.478 I llm_load_print_meta: rope scaling     = linear
0.00.273.480 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.481 I llm_load_print_meta: freq_scale_train = 1
0.00.273.481 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.482 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.482 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.483 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.483 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.483 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.484 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.484 I llm_load_print_meta: model type       = 2B
0.00.273.485 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.485 I llm_load_print_meta: model params     = 2.51 B
0.00.273.486 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.487 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.487 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.488 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.488 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.488 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.489 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.489 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.490 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.490 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.490 I llm_load_print_meta: max token length = 93
0.00.333.349 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.333.356 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.333.357 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.333.357 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.333.358 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.333.358 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.338.414 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.420 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.421 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.421 I llama_new_context_with_model: n_batch       = 2048
0.00.338.422 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.422 I llama_new_context_with_model: flash_attn    = 0
0.00.338.424 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.425 I llama_new_context_with_model: freq_scale    = 1
0.00.338.426 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.555 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.567 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.655 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.965 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.972 I llama_new_context_with_model: graph nodes  = 601
0.00.353.972 I llama_new_context_with_model: graph splits = 1
0.00.353.974 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.807 I main: llama threadpool init, n_threads = 4
0.00.428.822 I 
0.00.428.894 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.428.898 I 
0.00.428.943 I sampler seed: 2293592130
0.00.428.954 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.958 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.959 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.959 I 
 seconal, a young man with a gentle demeanor, had a unique perspective on life. He saw the world in shades of gray, devoid of the vibrant hues

0.02.021.107 I llama_perf_sampler_print:    sampling time =       5.30 ms /    33 runs   (    0.16 ms per token,  6221.72 tokens per second)
0.02.021.110 I llama_perf_context_print:        load time =     428.04 ms
0.02.021.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.021.113 I llama_perf_context_print:        eval time =    1573.03 ms /    32 runs   (   49.16 ms per token,    20.34 tokens per second)
0.02.021.113 I llama_perf_context_print:       total time =    1592.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4222 (f0678c5f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40179.24 ms
main:    total time = 40179.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.557 I build: 4222 (f0678c5f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.338 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.353 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.362 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.365 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.370 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.371 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.372 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.372 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.373 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.374 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.378 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.379 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.379 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.580 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.352 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.095 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.102 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.102 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.103 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.103 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.105 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.105 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.107 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.108 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.111 I llama_model_loader: - type  f32:   37 tensors
0.00.129.112 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.112 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.269 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.213 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.686 I llm_load_vocab: special tokens cache size = 5
0.00.260.575 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.591 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.592 I llm_load_print_meta: arch             = gemma
0.00.260.592 I llm_load_print_meta: vocab type       = SPM
0.00.260.593 I llm_load_print_meta: n_vocab          = 256000
0.00.260.593 I llm_load_print_meta: n_merges         = 0
0.00.260.593 I llm_load_print_meta: vocab_only       = 0
0.00.260.594 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.594 I llm_load_print_meta: n_embd           = 2048
0.00.260.594 I llm_load_print_meta: n_layer          = 18
0.00.260.605 I llm_load_print_meta: n_head           = 8
0.00.260.606 I llm_load_print_meta: n_head_kv        = 1
0.00.260.606 I llm_load_print_meta: n_rot            = 256
0.00.260.607 I llm_load_print_meta: n_swa            = 0
0.00.260.607 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.607 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.608 I llm_load_print_meta: n_gqa            = 8
0.00.260.609 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.610 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.611 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.612 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.613 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.613 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.613 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.614 I llm_load_print_meta: n_ff             = 16384
0.00.260.614 I llm_load_print_meta: n_expert         = 0
0.00.260.615 I llm_load_print_meta: n_expert_used    = 0
0.00.260.615 I llm_load_print_meta: causal attn      = 1
0.00.260.615 I llm_load_print_meta: pooling type     = 0
0.00.260.615 I llm_load_print_meta: rope type        = 2
0.00.260.616 I llm_load_print_meta: rope scaling     = linear
0.00.260.617 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.618 I llm_load_print_meta: freq_scale_train = 1
0.00.260.619 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.619 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.619 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.620 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.620 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.620 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.620 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.621 I llm_load_print_meta: model type       = 2B
0.00.260.621 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.622 I llm_load_print_meta: model params     = 2.51 B
0.00.260.623 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.623 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.623 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.624 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.624 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.624 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.624 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.625 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.625 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.626 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.626 I llm_load_print_meta: max token length = 93
0.00.314.490 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.319.614 I llama_new_context_with_model: n_seq_max     = 1
0.00.319.620 I llama_new_context_with_model: n_ctx         = 4096
0.00.319.620 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.319.621 I llama_new_context_with_model: n_batch       = 2048
0.00.319.621 I llama_new_context_with_model: n_ubatch      = 512
0.00.319.622 I llama_new_context_with_model: flash_attn    = 0
0.00.319.624 I llama_new_context_with_model: freq_base     = 10000.0
0.00.319.625 I llama_new_context_with_model: freq_scale    = 1
0.00.319.626 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.110 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.334.123 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.334.216 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.335.435 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.335.441 I llama_new_context_with_model: graph nodes  = 601
0.00.335.441 I llama_new_context_with_model: graph splits = 1
0.00.335.443 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.409.010 I main: llama threadpool init, n_threads = 4
0.00.409.024 I 
0.00.409.096 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.409.099 I 
0.00.409.142 I sampler seed: 3629197274
0.00.409.155 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.409.159 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.409.160 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.409.161 I 
 increasities and myths abound about the origins of the universe and the nature of existence. While the scientific method provides a framework for understanding the universe, it is often

0.01.978.816 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6364.51 tokens per second)
0.01.978.818 I llama_perf_context_print:        load time =     408.23 ms
0.01.978.819 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.978.820 I llama_perf_context_print:        eval time =    1550.14 ms /    32 runs   (   48.44 ms per token,    20.64 tokens per second)
0.01.978.821 I llama_perf_context_print:       total time =    1569.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.207s
user	10m24.329s
sys	0m6.806s
