+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.001.890 I main: load the model and apply lora adapter, if any
0.00.022.129 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.177 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.187 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.192 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.193 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.197 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.197 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.198 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.198 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.199 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.199 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.204 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.205 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.563 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.423 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.261 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.268 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.268 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.269 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.270 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.270 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.272 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.273 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.273 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.274 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.275 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.278 I llama_model_loader: - type  f32:   37 tensors
0.00.131.281 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.340 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.231.872 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.233.102 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.236.790 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.244.349 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.893 I llm_load_vocab: special tokens cache size = 5
0.00.265.765 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.782 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.783 I llm_load_print_meta: arch             = gemma
0.00.265.784 I llm_load_print_meta: vocab type       = SPM
0.00.265.784 I llm_load_print_meta: n_vocab          = 256000
0.00.265.785 I llm_load_print_meta: n_merges         = 0
0.00.265.785 I llm_load_print_meta: vocab_only       = 0
0.00.265.786 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.786 I llm_load_print_meta: n_embd           = 2048
0.00.265.786 I llm_load_print_meta: n_layer          = 18
0.00.265.798 I llm_load_print_meta: n_head           = 8
0.00.265.799 I llm_load_print_meta: n_head_kv        = 1
0.00.265.799 I llm_load_print_meta: n_rot            = 256
0.00.265.800 I llm_load_print_meta: n_swa            = 0
0.00.265.800 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.800 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.802 I llm_load_print_meta: n_gqa            = 8
0.00.265.803 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.804 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.804 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.806 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.806 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.806 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.807 I llm_load_print_meta: n_ff             = 16384
0.00.265.808 I llm_load_print_meta: n_expert         = 0
0.00.265.808 I llm_load_print_meta: n_expert_used    = 0
0.00.265.808 I llm_load_print_meta: causal attn      = 1
0.00.265.809 I llm_load_print_meta: pooling type     = 0
0.00.265.809 I llm_load_print_meta: rope type        = 2
0.00.265.809 I llm_load_print_meta: rope scaling     = linear
0.00.265.811 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.812 I llm_load_print_meta: freq_scale_train = 1
0.00.265.812 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.812 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.812 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.813 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.813 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.813 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.813 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.814 I llm_load_print_meta: model type       = 2B
0.00.265.815 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.815 I llm_load_print_meta: model params     = 2.51 B
0.00.265.816 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.817 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.817 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.818 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.818 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.818 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.819 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.819 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.820 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.820 I llm_load_print_meta: max token length = 93
0.00.265.840 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.365.292 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.365.298 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.365.299 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.365.299 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.365.300 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.365.301 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.370.427 I llama_new_context_with_model: n_ctx      = 8192
0.00.370.434 I llama_new_context_with_model: n_batch    = 2048
0.00.370.434 I llama_new_context_with_model: n_ubatch   = 512
0.00.370.435 I llama_new_context_with_model: flash_attn = 0
0.00.370.437 I llama_new_context_with_model: freq_base  = 10000.0
0.00.370.438 I llama_new_context_with_model: freq_scale = 1
0.00.398.713 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.729 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.821 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.685 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.399.692 I llama_new_context_with_model: graph nodes  = 601
0.00.399.693 I llama_new_context_with_model: graph splits = 1
0.00.399.695 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.490.193 I main: llama threadpool init, n_threads = 4
0.00.490.207 I 
0.00.490.286 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.490.289 I 
0.00.490.328 I sampler seed: 2435496750
0.00.490.337 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.490.344 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.490.345 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.490.346 I 
 increadibly.  

I am unable to provide medical advice or diagnose medical conditions.  If you are experiencing any symptoms, please seek professional medical help. [end of text]


0.02.728.669 I llama_perf_sampler_print:    sampling time =       5.31 ms /    33 runs   (    0.16 ms per token,  6213.52 tokens per second)
0.02.728.673 I llama_perf_context_print:        load time =     488.28 ms
0.02.728.674 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.676 I llama_perf_context_print:        eval time =    2219.77 ms /    32 runs   (   69.37 ms per token,    14.42 tokens per second)
0.02.728.677 I llama_perf_context_print:       total time =    2238.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.524 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.001.893 I main: load the model and apply lora adapter, if any
0.00.021.885 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.896 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.902 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.903 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.907 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.907 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.908 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.909 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.910 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.910 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.915 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.915 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.916 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.917 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.918 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.886 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.078 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.920 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.927 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.928 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.929 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.930 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.931 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.932 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.935 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.936 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.937 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.938 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.940 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.945 I llama_model_loader: - type  f32:   37 tensors
0.00.132.948 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.425 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.233.953 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.235.154 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.238.846 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.246.657 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.273 I llm_load_vocab: special tokens cache size = 5
0.00.268.320 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.337 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.338 I llm_load_print_meta: arch             = gemma
0.00.268.339 I llm_load_print_meta: vocab type       = SPM
0.00.268.339 I llm_load_print_meta: n_vocab          = 256000
0.00.268.340 I llm_load_print_meta: n_merges         = 0
0.00.268.340 I llm_load_print_meta: vocab_only       = 0
0.00.268.340 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.341 I llm_load_print_meta: n_embd           = 2048
0.00.268.341 I llm_load_print_meta: n_layer          = 18
0.00.268.353 I llm_load_print_meta: n_head           = 8
0.00.268.354 I llm_load_print_meta: n_head_kv        = 1
0.00.268.355 I llm_load_print_meta: n_rot            = 256
0.00.268.355 I llm_load_print_meta: n_swa            = 0
0.00.268.355 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.355 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.356 I llm_load_print_meta: n_gqa            = 8
0.00.268.357 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.359 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.360 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.360 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.361 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.361 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.362 I llm_load_print_meta: n_ff             = 16384
0.00.268.362 I llm_load_print_meta: n_expert         = 0
0.00.268.363 I llm_load_print_meta: n_expert_used    = 0
0.00.268.363 I llm_load_print_meta: causal attn      = 1
0.00.268.363 I llm_load_print_meta: pooling type     = 0
0.00.268.364 I llm_load_print_meta: rope type        = 2
0.00.268.364 I llm_load_print_meta: rope scaling     = linear
0.00.268.366 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.366 I llm_load_print_meta: freq_scale_train = 1
0.00.268.367 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.367 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.367 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.367 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.368 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.368 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.368 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.369 I llm_load_print_meta: model type       = 2B
0.00.268.369 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.370 I llm_load_print_meta: model params     = 2.51 B
0.00.268.371 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.371 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.372 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.372 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.373 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.374 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.374 I llm_load_print_meta: max token length = 93
0.00.268.403 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.362.387 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.367.429 I llama_new_context_with_model: n_ctx      = 8192
0.00.367.436 I llama_new_context_with_model: n_batch    = 2048
0.00.367.436 I llama_new_context_with_model: n_ubatch   = 512
0.00.367.437 I llama_new_context_with_model: flash_attn = 0
0.00.367.439 I llama_new_context_with_model: freq_base  = 10000.0
0.00.367.440 I llama_new_context_with_model: freq_scale = 1
0.00.396.883 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.396.900 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.396.996 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.878 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.397.887 I llama_new_context_with_model: graph nodes  = 601
0.00.397.887 I llama_new_context_with_model: graph splits = 1
0.00.397.889 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.926 I main: llama threadpool init, n_threads = 4
0.00.487.941 I 
0.00.488.022 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.488.027 I 
0.00.488.073 I sampler seed: 1633284054
0.00.488.086 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.089 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.488.089 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.091 I 
 increamically.

The answer is:

The answer is: Incredibly.

Incredibly is an adverb that means in a very great or extraordinary way.

0.02.650.760 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6850.74 tokens per second)
0.02.650.762 I llama_perf_context_print:        load time =     486.01 ms
0.02.650.774 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.650.776 I llama_perf_context_print:        eval time =    2144.84 ms /    32 runs   (   67.03 ms per token,    14.92 tokens per second)
0.02.650.777 I llama_perf_context_print:       total time =    2162.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.614 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.837 I main: llama backend init
0.00.001.955 I main: load the model and apply lora adapter, if any
0.00.022.301 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.351 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.362 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.368 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.369 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.374 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.374 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.375 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.375 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.376 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.381 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.381 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.382 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.382 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.383 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.370 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.391 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.302 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.309 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.309 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.310 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.311 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.312 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.312 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.315 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.315 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.316 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.316 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.317 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.320 I llama_model_loader: - type  f32:   37 tensors
0.00.133.323 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.987 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.391 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.248.962 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.253.695 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.262.886 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.456 I llm_load_vocab: special tokens cache size = 5
0.00.284.409 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.425 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.426 I llm_load_print_meta: arch             = gemma
0.00.284.427 I llm_load_print_meta: vocab type       = SPM
0.00.284.427 I llm_load_print_meta: n_vocab          = 256000
0.00.284.428 I llm_load_print_meta: n_merges         = 0
0.00.284.428 I llm_load_print_meta: vocab_only       = 0
0.00.284.428 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.429 I llm_load_print_meta: n_embd           = 2048
0.00.284.429 I llm_load_print_meta: n_layer          = 18
0.00.284.440 I llm_load_print_meta: n_head           = 8
0.00.284.441 I llm_load_print_meta: n_head_kv        = 1
0.00.284.442 I llm_load_print_meta: n_rot            = 256
0.00.284.442 I llm_load_print_meta: n_swa            = 0
0.00.284.443 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.443 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.444 I llm_load_print_meta: n_gqa            = 8
0.00.284.445 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.445 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.446 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.447 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.448 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.448 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.448 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.449 I llm_load_print_meta: n_ff             = 16384
0.00.284.449 I llm_load_print_meta: n_expert         = 0
0.00.284.450 I llm_load_print_meta: n_expert_used    = 0
0.00.284.450 I llm_load_print_meta: causal attn      = 1
0.00.284.450 I llm_load_print_meta: pooling type     = 0
0.00.284.451 I llm_load_print_meta: rope type        = 2
0.00.284.451 I llm_load_print_meta: rope scaling     = linear
0.00.284.452 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.453 I llm_load_print_meta: freq_scale_train = 1
0.00.284.453 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.454 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.454 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.454 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.454 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.454 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.455 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.455 I llm_load_print_meta: model type       = 2B
0.00.284.456 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.456 I llm_load_print_meta: model params     = 2.51 B
0.00.284.457 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.458 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.458 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.458 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.459 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.459 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.460 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.460 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.460 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.461 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.461 I llm_load_print_meta: max token length = 93
0.00.284.482 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.359.965 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.359.973 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.359.973 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.359.974 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.359.975 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.359.975 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.365.156 I llama_new_context_with_model: n_ctx      = 8192
0.00.365.163 I llama_new_context_with_model: n_batch    = 2048
0.00.365.163 I llama_new_context_with_model: n_ubatch   = 512
0.00.365.164 I llama_new_context_with_model: flash_attn = 0
0.00.365.167 I llama_new_context_with_model: freq_base  = 10000.0
0.00.365.168 I llama_new_context_with_model: freq_scale = 1
0.00.395.877 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.892 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.395.984 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.896 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.396.901 I llama_new_context_with_model: graph nodes  = 601
0.00.396.901 I llama_new_context_with_model: graph splits = 1
0.00.396.903 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.487.783 I main: llama threadpool init, n_threads = 4
0.00.487.796 I 
0.00.487.871 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.487.874 I 
0.00.487.917 I sampler seed: 3305657295
0.00.487.928 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.487.933 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.487.934 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.487.934 I 
 increably. [end of text]


0.00.775.124 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8278.15 tokens per second)
0.00.775.126 I llama_perf_context_print:        load time =     485.80 ms
0.00.775.128 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.775.130 I llama_perf_context_print:        eval time =     283.88 ms /     4 runs   (   70.97 ms per token,    14.09 tokens per second)
0.00.775.131 I llama_perf_context_print:       total time =     287.35 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.537 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.869 I main: load the model and apply lora adapter, if any
0.00.021.847 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.891 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.901 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.906 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.907 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.911 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.914 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.914 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.915 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.915 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.916 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.919 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.920 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.920 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.920 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.921 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.685 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.392 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.263 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.270 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.270 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.271 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.271 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.272 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.273 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.275 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.276 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.276 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.277 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.278 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.281 I llama_model_loader: - type  f32:   37 tensors
0.00.132.284 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.338 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.440 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.236.678 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.579 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.248.653 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.256 I llm_load_vocab: special tokens cache size = 5
0.00.270.337 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.353 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.354 I llm_load_print_meta: arch             = gemma
0.00.270.354 I llm_load_print_meta: vocab type       = SPM
0.00.270.355 I llm_load_print_meta: n_vocab          = 256000
0.00.270.355 I llm_load_print_meta: n_merges         = 0
0.00.270.356 I llm_load_print_meta: vocab_only       = 0
0.00.270.356 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.356 I llm_load_print_meta: n_embd           = 2048
0.00.270.357 I llm_load_print_meta: n_layer          = 18
0.00.270.370 I llm_load_print_meta: n_head           = 8
0.00.270.371 I llm_load_print_meta: n_head_kv        = 1
0.00.270.371 I llm_load_print_meta: n_rot            = 256
0.00.270.371 I llm_load_print_meta: n_swa            = 0
0.00.270.372 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.372 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.373 I llm_load_print_meta: n_gqa            = 8
0.00.270.374 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.375 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.376 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.377 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.377 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.377 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.378 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.379 I llm_load_print_meta: n_ff             = 16384
0.00.270.379 I llm_load_print_meta: n_expert         = 0
0.00.270.379 I llm_load_print_meta: n_expert_used    = 0
0.00.270.380 I llm_load_print_meta: causal attn      = 1
0.00.270.380 I llm_load_print_meta: pooling type     = 0
0.00.270.381 I llm_load_print_meta: rope type        = 2
0.00.270.381 I llm_load_print_meta: rope scaling     = linear
0.00.270.382 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.383 I llm_load_print_meta: freq_scale_train = 1
0.00.270.383 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.384 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.384 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.384 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.384 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.384 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.385 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.385 I llm_load_print_meta: model type       = 2B
0.00.270.386 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.387 I llm_load_print_meta: model params     = 2.51 B
0.00.270.387 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.388 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.389 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.389 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.389 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.390 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.390 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.391 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.391 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.391 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.392 I llm_load_print_meta: max token length = 93
0.00.270.414 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.340.563 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.340.572 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.345.630 I llama_new_context_with_model: n_ctx      = 8192
0.00.345.637 I llama_new_context_with_model: n_batch    = 2048
0.00.345.637 I llama_new_context_with_model: n_ubatch   = 512
0.00.345.638 I llama_new_context_with_model: flash_attn = 0
0.00.345.640 I llama_new_context_with_model: freq_base  = 10000.0
0.00.345.641 I llama_new_context_with_model: freq_scale = 1
0.00.374.624 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.374.637 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.374.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.582 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.375.590 I llama_new_context_with_model: graph nodes  = 601
0.00.375.590 I llama_new_context_with_model: graph splits = 1
0.00.375.592 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.479 I main: llama threadpool init, n_threads = 4
0.00.469.491 I 
0.00.469.565 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.569 I 
0.00.469.606 I sampler seed: 205641791
0.00.469.616 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.620 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.469.620 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.620 I 
 increasities. [end of text]


0.00.771.108 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7739.94 tokens per second)
0.00.771.110 I llama_perf_context_print:        load time =     467.59 ms
0.00.771.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.771.112 I llama_perf_context_print:        eval time =     298.51 ms /     4 runs   (   74.63 ms per token,    13.40 tokens per second)
0.00.771.113 I llama_perf_context_print:       total time =     301.64 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.214s
user	0m22.839s
sys	0m9.431s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3933 (f010b77a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32119.21 ms
main:    total time = 32119.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.001.865 I main: load the model and apply lora adapter, if any
0.00.022.030 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.080 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.091 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.097 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.100 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.104 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.105 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.107 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.108 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.109 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.113 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.114 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.114 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.123 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.124 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.772 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.662 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.500 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.506 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.506 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.507 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.508 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.508 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.509 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.511 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.512 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.512 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.512 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.513 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.517 I llama_model_loader: - type  f32:   37 tensors
0.00.132.520 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.521 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.825 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.372 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.236.589 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.384 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.248.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.972 I llm_load_vocab: special tokens cache size = 5
0.00.270.019 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.036 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.036 I llm_load_print_meta: arch             = gemma
0.00.270.037 I llm_load_print_meta: vocab type       = SPM
0.00.270.037 I llm_load_print_meta: n_vocab          = 256000
0.00.270.038 I llm_load_print_meta: n_merges         = 0
0.00.270.038 I llm_load_print_meta: vocab_only       = 0
0.00.270.038 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.039 I llm_load_print_meta: n_embd           = 2048
0.00.270.039 I llm_load_print_meta: n_layer          = 18
0.00.270.050 I llm_load_print_meta: n_head           = 8
0.00.270.051 I llm_load_print_meta: n_head_kv        = 1
0.00.270.051 I llm_load_print_meta: n_rot            = 256
0.00.270.052 I llm_load_print_meta: n_swa            = 0
0.00.270.052 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.052 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.053 I llm_load_print_meta: n_gqa            = 8
0.00.270.054 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.055 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.056 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.057 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.058 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.058 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.058 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.059 I llm_load_print_meta: n_ff             = 16384
0.00.270.059 I llm_load_print_meta: n_expert         = 0
0.00.270.060 I llm_load_print_meta: n_expert_used    = 0
0.00.270.060 I llm_load_print_meta: causal attn      = 1
0.00.270.060 I llm_load_print_meta: pooling type     = 0
0.00.270.061 I llm_load_print_meta: rope type        = 2
0.00.270.061 I llm_load_print_meta: rope scaling     = linear
0.00.270.062 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.063 I llm_load_print_meta: freq_scale_train = 1
0.00.270.063 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.064 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.064 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.064 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.065 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.065 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.065 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.066 I llm_load_print_meta: model type       = 2B
0.00.270.066 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.067 I llm_load_print_meta: model params     = 2.51 B
0.00.270.068 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.068 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.069 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.069 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.069 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.069 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.070 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.070 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.070 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.071 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.071 I llm_load_print_meta: max token length = 93
0.00.270.090 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.329.256 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.329.262 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.329.263 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.329.263 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.329.264 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.329.264 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.334.297 I llama_new_context_with_model: n_ctx      = 8192
0.00.334.304 I llama_new_context_with_model: n_batch    = 2048
0.00.334.304 I llama_new_context_with_model: n_ubatch   = 512
0.00.334.305 I llama_new_context_with_model: flash_attn = 0
0.00.334.307 I llama_new_context_with_model: freq_base  = 10000.0
0.00.334.308 I llama_new_context_with_model: freq_scale = 1
0.00.363.771 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.363.785 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.363.884 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.759 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.364.767 I llama_new_context_with_model: graph nodes  = 601
0.00.364.768 I llama_new_context_with_model: graph splits = 1
0.00.364.770 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.460 I main: llama threadpool init, n_threads = 4
0.00.446.472 I 
0.00.446.546 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.549 I 
0.00.446.589 I sampler seed: 3185030102
0.00.446.601 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.610 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.446.611 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.612 I 
 seconded my questions and gave me a generic answer that didn't address the specific questions.

I would appreciate it if you could provide a more specific and

0.02.006.641 I llama_perf_sampler_print:    sampling time =       4.60 ms /    33 runs   (    0.14 ms per token,  7180.16 tokens per second)
0.02.006.644 I llama_perf_context_print:        load time =     444.57 ms
0.02.006.645 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.006.646 I llama_perf_context_print:        eval time =    1543.29 ms /    32 runs   (   48.23 ms per token,    20.73 tokens per second)
0.02.006.647 I llama_perf_context_print:       total time =    1560.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3933 (f010b77a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32066.94 ms
main:    total time = 32066.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.723 I main: llama backend init
0.00.001.925 I main: load the model and apply lora adapter, if any
0.00.022.010 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.020 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.031 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.035 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.038 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.039 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.039 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.040 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.040 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.043 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.044 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.044 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.045 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.045 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.615 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.096 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.963 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.969 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.970 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.970 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.971 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.972 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.972 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.975 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.975 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.979 I llama_model_loader: - type  f32:   37 tensors
0.00.131.981 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.981 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.213 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.233.848 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.235.291 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.239.720 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.249.173 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.838 I llm_load_vocab: special tokens cache size = 5
0.00.271.001 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.019 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.020 I llm_load_print_meta: arch             = gemma
0.00.271.021 I llm_load_print_meta: vocab type       = SPM
0.00.271.021 I llm_load_print_meta: n_vocab          = 256000
0.00.271.022 I llm_load_print_meta: n_merges         = 0
0.00.271.022 I llm_load_print_meta: vocab_only       = 0
0.00.271.023 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.023 I llm_load_print_meta: n_embd           = 2048
0.00.271.023 I llm_load_print_meta: n_layer          = 18
0.00.271.034 I llm_load_print_meta: n_head           = 8
0.00.271.035 I llm_load_print_meta: n_head_kv        = 1
0.00.271.036 I llm_load_print_meta: n_rot            = 256
0.00.271.036 I llm_load_print_meta: n_swa            = 0
0.00.271.037 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.037 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.038 I llm_load_print_meta: n_gqa            = 8
0.00.271.039 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.040 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.040 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.042 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.042 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.043 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.043 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.044 I llm_load_print_meta: n_ff             = 16384
0.00.271.044 I llm_load_print_meta: n_expert         = 0
0.00.271.044 I llm_load_print_meta: n_expert_used    = 0
0.00.271.045 I llm_load_print_meta: causal attn      = 1
0.00.271.045 I llm_load_print_meta: pooling type     = 0
0.00.271.045 I llm_load_print_meta: rope type        = 2
0.00.271.045 I llm_load_print_meta: rope scaling     = linear
0.00.271.047 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.047 I llm_load_print_meta: freq_scale_train = 1
0.00.271.048 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.048 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.048 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.048 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.049 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.049 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.049 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.049 I llm_load_print_meta: model type       = 2B
0.00.271.050 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.051 I llm_load_print_meta: model params     = 2.51 B
0.00.271.051 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.052 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.052 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.053 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.053 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.053 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.053 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.054 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.054 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.055 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.055 I llm_load_print_meta: max token length = 93
0.00.271.076 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.327.126 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.332.128 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.136 I llama_new_context_with_model: n_batch    = 2048
0.00.332.137 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.137 I llama_new_context_with_model: flash_attn = 0
0.00.332.140 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.141 I llama_new_context_with_model: freq_scale = 1
0.00.362.380 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.362.395 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.362.494 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.434 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.363.442 I llama_new_context_with_model: graph nodes  = 601
0.00.363.443 I llama_new_context_with_model: graph splits = 1
0.00.363.445 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.208 I main: llama threadpool init, n_threads = 4
0.00.445.223 I 
0.00.445.301 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.301 I 
0.00.445.343 I sampler seed: 1462822486
0.00.445.350 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.352 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.445.353 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.353 I 
 seconally, and in order to comply with the law, the offender must accept responsibility for their actions.

This sentence describes which legal concept?

A.

0.02.035.413 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6931.32 tokens per second)
0.02.035.416 I llama_perf_context_print:        load time =     443.26 ms
0.02.035.417 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.035.419 I llama_perf_context_print:        eval time =    1571.73 ms /    32 runs   (   49.12 ms per token,    20.36 tokens per second)
0.02.035.420 I llama_perf_context_print:       total time =    1590.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.449s
user	8m14.660s
sys	0m6.894s
