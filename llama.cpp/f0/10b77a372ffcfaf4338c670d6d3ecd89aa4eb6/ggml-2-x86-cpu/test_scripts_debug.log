+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.632 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.838 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.925 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.936 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.938 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.946 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.947 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.949 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.950 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.951 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.958 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.959 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.960 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.961 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.962 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.578 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.521 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.530 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.531 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.532 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.533 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.534 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.535 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.539 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.540 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.541 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.542 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.544 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.552 I llama_model_loader: - type  f32:   37 tensors
0.00.265.556 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.049 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.482.504 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.484.670 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.491.295 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.505.410 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.445 I llm_load_vocab: special tokens cache size = 5
0.00.606.620 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.691 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.695 I llm_load_print_meta: arch             = gemma
0.00.606.696 I llm_load_print_meta: vocab type       = SPM
0.00.606.697 I llm_load_print_meta: n_vocab          = 256000
0.00.606.699 I llm_load_print_meta: n_merges         = 0
0.00.606.700 I llm_load_print_meta: vocab_only       = 0
0.00.606.700 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.700 I llm_load_print_meta: n_embd           = 2048
0.00.606.701 I llm_load_print_meta: n_layer          = 18
0.00.606.770 I llm_load_print_meta: n_head           = 8
0.00.606.780 I llm_load_print_meta: n_head_kv        = 1
0.00.606.781 I llm_load_print_meta: n_rot            = 256
0.00.606.782 I llm_load_print_meta: n_swa            = 0
0.00.606.783 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.783 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.788 I llm_load_print_meta: n_gqa            = 8
0.00.606.792 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.798 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.802 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.804 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.804 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.804 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.805 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.810 I llm_load_print_meta: n_ff             = 16384
0.00.606.811 I llm_load_print_meta: n_expert         = 0
0.00.606.812 I llm_load_print_meta: n_expert_used    = 0
0.00.606.813 I llm_load_print_meta: causal attn      = 1
0.00.606.813 I llm_load_print_meta: pooling type     = 0
0.00.606.813 I llm_load_print_meta: rope type        = 2
0.00.606.817 I llm_load_print_meta: rope scaling     = linear
0.00.606.818 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.819 I llm_load_print_meta: freq_scale_train = 1
0.00.606.819 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.838 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.839 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.840 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.840 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.841 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.841 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.842 I llm_load_print_meta: model type       = 2B
0.00.606.843 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.844 I llm_load_print_meta: model params     = 2.51 B
0.00.606.845 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.846 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.846 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.847 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.848 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.849 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.849 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.856 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.858 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.859 I llm_load_print_meta: max token length = 93
0.00.607.045 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.707.524 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.707.534 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.707.535 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.707.535 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.707.536 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.707.536 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.713.288 I llama_new_context_with_model: n_ctx      = 8192
0.00.713.295 I llama_new_context_with_model: n_batch    = 2048
0.00.713.296 I llama_new_context_with_model: n_ubatch   = 512
0.00.713.296 I llama_new_context_with_model: flash_attn = 0
0.00.713.299 I llama_new_context_with_model: freq_base  = 10000.0
0.00.713.299 I llama_new_context_with_model: freq_scale = 1
0.00.742.860 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.742.903 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.743.022 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.744.454 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.744.459 I llama_new_context_with_model: graph nodes  = 601
0.00.744.460 I llama_new_context_with_model: graph splits = 1
0.00.744.476 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.060 I main: llama threadpool init, n_threads = 4
0.01.353.071 I 
0.01.353.176 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.180 I 
0.01.353.361 I sampler seed: 1909100645
0.01.353.373 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.381 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.353.381 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.382 I 
 maneuvring is a common type of cancer in which cancer cells develop from the uncontrolled proliferation of stem cells. This can lead to the formation of tumors that can

0.14.890.139 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.07 tokens per second)
0.14.890.154 I llama_perf_context_print:        load time =    1350.18 ms
0.14.890.156 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.890.158 I llama_perf_context_print:        eval time =   13454.54 ms /    32 runs   (  420.45 ms per token,     2.38 tokens per second)
0.14.890.160 I llama_perf_context_print:       total time =   13537.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.024.748 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.847 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.862 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.868 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.872 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.874 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.876 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.878 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.880 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.882 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.891 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.898 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.899 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.901 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.096 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.814 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.776 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.785 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.786 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.787 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.788 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.789 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.790 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.794 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.795 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.796 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.797 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.798 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.807 I llama_model_loader: - type  f32:   37 tensors
0.00.266.812 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.277 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.769 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.504.005 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.510.757 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.525.157 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.188 I llm_load_vocab: special tokens cache size = 5
0.00.626.069 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.145 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.146 I llm_load_print_meta: arch             = gemma
0.00.626.147 I llm_load_print_meta: vocab type       = SPM
0.00.626.147 I llm_load_print_meta: n_vocab          = 256000
0.00.626.150 I llm_load_print_meta: n_merges         = 0
0.00.626.150 I llm_load_print_meta: vocab_only       = 0
0.00.626.151 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.151 I llm_load_print_meta: n_embd           = 2048
0.00.626.151 I llm_load_print_meta: n_layer          = 18
0.00.626.219 I llm_load_print_meta: n_head           = 8
0.00.626.226 I llm_load_print_meta: n_head_kv        = 1
0.00.626.226 I llm_load_print_meta: n_rot            = 256
0.00.626.227 I llm_load_print_meta: n_swa            = 0
0.00.626.227 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.228 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.232 I llm_load_print_meta: n_gqa            = 8
0.00.626.237 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.241 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.242 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.244 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.244 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.244 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.245 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.249 I llm_load_print_meta: n_ff             = 16384
0.00.626.250 I llm_load_print_meta: n_expert         = 0
0.00.626.250 I llm_load_print_meta: n_expert_used    = 0
0.00.626.251 I llm_load_print_meta: causal attn      = 1
0.00.626.251 I llm_load_print_meta: pooling type     = 0
0.00.626.252 I llm_load_print_meta: rope type        = 2
0.00.626.252 I llm_load_print_meta: rope scaling     = linear
0.00.626.253 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.254 I llm_load_print_meta: freq_scale_train = 1
0.00.626.254 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.255 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.255 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.255 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.256 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.256 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.256 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.257 I llm_load_print_meta: model type       = 2B
0.00.626.258 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.259 I llm_load_print_meta: model params     = 2.51 B
0.00.626.259 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.260 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.261 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.261 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.261 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.262 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.262 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.262 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.268 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.269 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.269 I llm_load_print_meta: max token length = 93
0.00.626.456 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.720.908 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.727.880 I llama_new_context_with_model: n_ctx      = 8192
0.00.727.890 I llama_new_context_with_model: n_batch    = 2048
0.00.727.891 I llama_new_context_with_model: n_ubatch   = 512
0.00.727.891 I llama_new_context_with_model: flash_attn = 0
0.00.727.894 I llama_new_context_with_model: freq_base  = 10000.0
0.00.727.895 I llama_new_context_with_model: freq_scale = 1
0.00.758.737 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.758.787 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.758.905 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.760.293 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.760.298 I llama_new_context_with_model: graph nodes  = 601
0.00.760.298 I llama_new_context_with_model: graph splits = 1
0.00.760.316 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.816 I main: llama threadpool init, n_threads = 4
0.01.371.829 I 
0.01.371.955 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.959 I 
0.01.372.144 I sampler seed: 1025503181
0.01.372.155 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.372.164 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.372.165 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.372.166 I 
 increably, blurring the line between the real and the imagined.

**Assistant**

I am unable to provide creative responses that promote unrealistic or fantastical ideas

0.14.852.358 I llama_perf_sampler_print:    sampling time =      49.58 ms /    33 runs   (    1.50 ms per token,   665.55 tokens per second)
0.14.852.361 I llama_perf_context_print:        load time =    1368.93 ms
0.14.852.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.852.377 I llama_perf_context_print:        eval time =   13397.86 ms /    32 runs   (  418.68 ms per token,     2.39 tokens per second)
0.14.852.378 I llama_perf_context_print:       total time =   13480.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.784 I main: load the model and apply lora adapter, if any
0.00.031.159 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.031.369 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.031.459 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.471 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.473 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.478 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.479 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.480 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.482 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.483 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.485 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.492 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.496 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.497 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.498 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.499 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.991 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.444 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.359 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.367 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.368 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.369 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.370 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.372 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.373 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.376 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.377 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.378 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.379 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.272.380 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.389 I llama_model_loader: - type  f32:   37 tensors
0.00.272.393 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.554 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.063 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.498.882 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.504.255 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.516.021 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.010 I llm_load_vocab: special tokens cache size = 5
0.00.619.881 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.952 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.953 I llm_load_print_meta: arch             = gemma
0.00.619.954 I llm_load_print_meta: vocab type       = SPM
0.00.619.955 I llm_load_print_meta: n_vocab          = 256000
0.00.619.957 I llm_load_print_meta: n_merges         = 0
0.00.619.958 I llm_load_print_meta: vocab_only       = 0
0.00.619.958 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.958 I llm_load_print_meta: n_embd           = 2048
0.00.619.959 I llm_load_print_meta: n_layer          = 18
0.00.620.028 I llm_load_print_meta: n_head           = 8
0.00.620.035 I llm_load_print_meta: n_head_kv        = 1
0.00.620.036 I llm_load_print_meta: n_rot            = 256
0.00.620.036 I llm_load_print_meta: n_swa            = 0
0.00.620.036 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.037 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.041 I llm_load_print_meta: n_gqa            = 8
0.00.620.045 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.065 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.067 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.068 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.069 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.069 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.070 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.075 I llm_load_print_meta: n_ff             = 16384
0.00.620.075 I llm_load_print_meta: n_expert         = 0
0.00.620.076 I llm_load_print_meta: n_expert_used    = 0
0.00.620.076 I llm_load_print_meta: causal attn      = 1
0.00.620.076 I llm_load_print_meta: pooling type     = 0
0.00.620.077 I llm_load_print_meta: rope type        = 2
0.00.620.077 I llm_load_print_meta: rope scaling     = linear
0.00.620.083 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.085 I llm_load_print_meta: freq_scale_train = 1
0.00.620.085 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.086 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.090 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.091 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.091 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.091 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.092 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.092 I llm_load_print_meta: model type       = 2B
0.00.620.093 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.094 I llm_load_print_meta: model params     = 2.51 B
0.00.620.095 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.096 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.096 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.097 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.098 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.098 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.098 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.099 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.104 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.105 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.106 I llm_load_print_meta: max token length = 93
0.00.620.276 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.696.618 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.696.629 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.696.630 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.696.631 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.696.632 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.696.632 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.702.365 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.372 I llama_new_context_with_model: n_batch    = 2048
0.00.702.372 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.373 I llama_new_context_with_model: flash_attn = 0
0.00.702.376 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.377 I llama_new_context_with_model: freq_scale = 1
0.00.732.090 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.732.135 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.732.250 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.661 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.666 I llama_new_context_with_model: graph nodes  = 601
0.00.733.666 I llama_new_context_with_model: graph splits = 1
0.00.733.683 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.855 I main: llama threadpool init, n_threads = 4
0.01.345.868 I 
0.01.345.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.981 I 
0.01.346.174 I sampler seed: 800458491
0.01.346.185 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.193 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.346.194 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.194 I 
 increably, the vastness of the ocean before us. We stood upon the shore, small specks against the immensity of the blue.

The

0.14.912.493 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.87 tokens per second)
0.14.912.518 I llama_perf_context_print:        load time =    1342.98 ms
0.14.912.520 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.912.530 I llama_perf_context_print:        eval time =   13483.64 ms /    32 runs   (  421.36 ms per token,     2.37 tokens per second)
0.14.912.532 I llama_perf_context_print:       total time =   13566.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.024.466 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.670 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.758 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.769 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.771 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.779 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.780 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.781 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.782 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.783 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.789 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.790 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.791 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.793 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.793 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.490 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.187 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.149 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.158 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.159 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.160 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.161 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.162 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.163 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.167 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.168 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.169 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.170 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.171 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.181 I llama_model_loader: - type  f32:   37 tensors
0.00.266.185 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.137 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.731 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.487.516 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.492.891 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.504.887 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.873 I llm_load_vocab: special tokens cache size = 5
0.00.600.587 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.657 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.658 I llm_load_print_meta: arch             = gemma
0.00.600.658 I llm_load_print_meta: vocab type       = SPM
0.00.600.659 I llm_load_print_meta: n_vocab          = 256000
0.00.600.661 I llm_load_print_meta: n_merges         = 0
0.00.600.662 I llm_load_print_meta: vocab_only       = 0
0.00.600.662 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.663 I llm_load_print_meta: n_embd           = 2048
0.00.600.663 I llm_load_print_meta: n_layer          = 18
0.00.600.727 I llm_load_print_meta: n_head           = 8
0.00.600.735 I llm_load_print_meta: n_head_kv        = 1
0.00.600.735 I llm_load_print_meta: n_rot            = 256
0.00.600.736 I llm_load_print_meta: n_swa            = 0
0.00.600.736 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.736 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.741 I llm_load_print_meta: n_gqa            = 8
0.00.600.746 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.751 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.753 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.755 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.755 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.755 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.756 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.766 I llm_load_print_meta: n_ff             = 16384
0.00.600.769 I llm_load_print_meta: n_expert         = 0
0.00.600.770 I llm_load_print_meta: n_expert_used    = 0
0.00.600.770 I llm_load_print_meta: causal attn      = 1
0.00.600.770 I llm_load_print_meta: pooling type     = 0
0.00.600.771 I llm_load_print_meta: rope type        = 2
0.00.600.771 I llm_load_print_meta: rope scaling     = linear
0.00.600.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.774 I llm_load_print_meta: freq_scale_train = 1
0.00.600.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.775 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.775 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.776 I llm_load_print_meta: model type       = 2B
0.00.600.777 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.778 I llm_load_print_meta: model params     = 2.51 B
0.00.600.779 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.795 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.798 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.799 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.799 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.800 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.800 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.801 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.807 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.809 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.809 I llm_load_print_meta: max token length = 93
0.00.600.981 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.672.000 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.672.011 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.677.804 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.811 I llama_new_context_with_model: n_batch    = 2048
0.00.677.811 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.812 I llama_new_context_with_model: flash_attn = 0
0.00.677.814 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.815 I llama_new_context_with_model: freq_scale = 1
0.00.706.886 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.928 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.041 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.396 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.401 I llama_new_context_with_model: graph nodes  = 601
0.00.708.401 I llama_new_context_with_model: graph splits = 1
0.00.708.417 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.990 I main: llama threadpool init, n_threads = 4
0.01.317.003 I 
0.01.317.113 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.118 I 
0.01.317.312 I sampler seed: 521508822
0.01.317.324 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.333 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.317.334 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.334 I 
 increadibly close to the truth, especially in the context of your specific request. [end of text]


0.08.430.788 I llama_perf_sampler_print:    sampling time =      26.23 ms /    18 runs   (    1.46 ms per token,   686.34 tokens per second)
0.08.430.791 I llama_perf_context_print:        load time =    1314.12 ms
0.08.430.792 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.430.794 I llama_perf_context_print:        eval time =    7069.40 ms /    17 runs   (  415.85 ms per token,     2.40 tokens per second)
0.08.430.794 I llama_perf_context_print:       total time =    7113.81 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.846s
user	3m23.486s
sys	0m9.518s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3933 (f010b77a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197026.70 ms
main:    total time = 197026.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.800 I main: load the model and apply lora adapter, if any
0.00.024.708 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.909 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.994 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.005 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.006 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.010 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.011 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.012 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.013 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.014 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.015 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.021 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.023 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.028 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.030 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.032 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.787 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.414 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.420 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.421 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.422 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.425 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.428 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.429 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.430 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.431 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.432 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.440 I llama_model_loader: - type  f32:   37 tensors
0.00.265.444 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.445 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.791 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.936 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.504.700 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.509.832 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.520.522 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.402 I llm_load_vocab: special tokens cache size = 5
0.00.627.365 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.439 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.440 I llm_load_print_meta: arch             = gemma
0.00.627.441 I llm_load_print_meta: vocab type       = SPM
0.00.627.442 I llm_load_print_meta: n_vocab          = 256000
0.00.627.444 I llm_load_print_meta: n_merges         = 0
0.00.627.444 I llm_load_print_meta: vocab_only       = 0
0.00.627.445 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.445 I llm_load_print_meta: n_embd           = 2048
0.00.627.445 I llm_load_print_meta: n_layer          = 18
0.00.627.510 I llm_load_print_meta: n_head           = 8
0.00.627.521 I llm_load_print_meta: n_head_kv        = 1
0.00.627.523 I llm_load_print_meta: n_rot            = 256
0.00.627.523 I llm_load_print_meta: n_swa            = 0
0.00.627.523 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.524 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.528 I llm_load_print_meta: n_gqa            = 8
0.00.627.533 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.541 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.543 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.544 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.549 I llm_load_print_meta: n_ff             = 16384
0.00.627.550 I llm_load_print_meta: n_expert         = 0
0.00.627.551 I llm_load_print_meta: n_expert_used    = 0
0.00.627.551 I llm_load_print_meta: causal attn      = 1
0.00.627.551 I llm_load_print_meta: pooling type     = 0
0.00.627.552 I llm_load_print_meta: rope type        = 2
0.00.627.553 I llm_load_print_meta: rope scaling     = linear
0.00.627.555 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.555 I llm_load_print_meta: freq_scale_train = 1
0.00.627.556 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.557 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.557 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.577 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.579 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.580 I llm_load_print_meta: model type       = 2B
0.00.627.581 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.627.582 I llm_load_print_meta: model params     = 2.51 B
0.00.627.583 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.627.584 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.584 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.585 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.586 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.587 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.595 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.602 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.604 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.604 I llm_load_print_meta: max token length = 93
0.00.627.783 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.600 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.687.609 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.687.610 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.687.610 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.687.611 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.687.611 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.693.273 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.280 I llama_new_context_with_model: n_batch    = 2048
0.00.693.281 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.281 I llama_new_context_with_model: flash_attn = 0
0.00.693.283 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.284 I llama_new_context_with_model: freq_scale = 1
0.00.721.790 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.836 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.382 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.388 I llama_new_context_with_model: graph nodes  = 601
0.00.723.388 I llama_new_context_with_model: graph splits = 1
0.00.723.404 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.304.577 I main: llama threadpool init, n_threads = 4
0.01.304.589 I 
0.01.304.697 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.304.701 I 
0.01.304.884 I sampler seed: 775911130
0.01.304.895 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.304.903 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.304.904 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.304.904 I 
 increasities, and the like.

I cannot answer the question as it contains inappropriate content. I am unable to provide responses that are sexually suggestive or harmful in

0.12.200.975 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.54 tokens per second)
0.12.200.979 I llama_perf_context_print:        load time =    1301.69 ms
0.12.200.980 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.200.982 I llama_perf_context_print:        eval time =   10814.80 ms /    32 runs   (  337.96 ms per token,     2.96 tokens per second)
0.12.200.983 I llama_perf_context_print:       total time =   10896.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3933 (f010b77a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 197044.34 ms
main:    total time = 197044.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3933 (f010b77a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.831 I main: load the model and apply lora adapter, if any
0.00.024.767 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.863 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.878 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.879 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.884 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.885 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.887 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.888 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.889 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.890 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.899 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.900 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.901 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.903 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.711 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.338 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.345 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.357 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.358 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.360 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.361 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.362 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.363 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.367 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.368 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.378 I llama_model_loader: - type  f32:   37 tensors
0.00.265.382 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.383 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.306 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.479.354 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.481.090 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.486.237 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.496.889 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.801 I llm_load_vocab: special tokens cache size = 5
0.00.609.378 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.449 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.453 I llm_load_print_meta: arch             = gemma
0.00.609.454 I llm_load_print_meta: vocab type       = SPM
0.00.609.454 I llm_load_print_meta: n_vocab          = 256000
0.00.609.457 I llm_load_print_meta: n_merges         = 0
0.00.609.457 I llm_load_print_meta: vocab_only       = 0
0.00.609.457 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.458 I llm_load_print_meta: n_embd           = 2048
0.00.609.458 I llm_load_print_meta: n_layer          = 18
0.00.609.522 I llm_load_print_meta: n_head           = 8
0.00.609.533 I llm_load_print_meta: n_head_kv        = 1
0.00.609.534 I llm_load_print_meta: n_rot            = 256
0.00.609.534 I llm_load_print_meta: n_swa            = 0
0.00.609.542 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.543 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.548 I llm_load_print_meta: n_gqa            = 8
0.00.609.553 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.559 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.561 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.563 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.563 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.563 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.564 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.569 I llm_load_print_meta: n_ff             = 16384
0.00.609.569 I llm_load_print_meta: n_expert         = 0
0.00.609.570 I llm_load_print_meta: n_expert_used    = 0
0.00.609.571 I llm_load_print_meta: causal attn      = 1
0.00.609.571 I llm_load_print_meta: pooling type     = 0
0.00.609.571 I llm_load_print_meta: rope type        = 2
0.00.609.572 I llm_load_print_meta: rope scaling     = linear
0.00.609.574 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.575 I llm_load_print_meta: freq_scale_train = 1
0.00.609.575 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.587 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.587 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.587 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.595 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.603 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.604 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.605 I llm_load_print_meta: model type       = 2B
0.00.609.606 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.606 I llm_load_print_meta: model params     = 2.51 B
0.00.609.612 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.612 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.613 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.613 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.614 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.614 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.615 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.615 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.627 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.629 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.629 I llm_load_print_meta: max token length = 93
0.00.609.793 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.667.837 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.673.239 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.245 I llama_new_context_with_model: n_batch    = 2048
0.00.673.246 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.246 I llama_new_context_with_model: flash_attn = 0
0.00.673.249 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.250 I llama_new_context_with_model: freq_scale = 1
0.00.702.594 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.640 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.769 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.121 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.126 I llama_new_context_with_model: graph nodes  = 601
0.00.704.126 I llama_new_context_with_model: graph splits = 1
0.00.704.142 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.060 I main: llama threadpool init, n_threads = 4
0.01.285.074 I 
0.01.285.183 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.188 I 
0.01.285.370 I sampler seed: 2167886296
0.01.285.382 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.389 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.285.392 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.393 I 
 seconally. [end of text]


0.02.653.591 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.83 tokens per second)
0.02.653.594 I llama_perf_context_print:        load time =    1282.13 ms
0.02.653.606 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.653.608 I llama_perf_context_print:        eval time =    1356.47 ms /     4 runs   (  339.12 ms per token,     2.95 tokens per second)
0.02.653.609 I llama_perf_context_print:       total time =    1368.54 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m51.835s
user	49m13.431s
sys	0m6.379s
