+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.618 I build: 4322 (f0f1fe75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.817 I main: llama backend init
0.00.000.823 I main: load the model and apply lora adapter, if any
0.00.021.809 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.822 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.830 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.835 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.836 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.840 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.841 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.841 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.842 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.843 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.843 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.850 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.851 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.858 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.859 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.861 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.844 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.120 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.058 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.064 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.065 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.066 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.066 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.068 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.069 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.071 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.072 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.072 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.073 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.074 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.078 I llama_model_loader: - type  f32:   37 tensors
0.00.133.080 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.101 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.049 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.637 I llm_load_vocab: special tokens cache size = 5
0.00.279.645 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.661 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.662 I llm_load_print_meta: arch             = gemma
0.00.279.662 I llm_load_print_meta: vocab type       = SPM
0.00.279.663 I llm_load_print_meta: n_vocab          = 256000
0.00.279.663 I llm_load_print_meta: n_merges         = 0
0.00.279.664 I llm_load_print_meta: vocab_only       = 0
0.00.279.664 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.664 I llm_load_print_meta: n_embd           = 2048
0.00.279.665 I llm_load_print_meta: n_layer          = 18
0.00.279.676 I llm_load_print_meta: n_head           = 8
0.00.279.677 I llm_load_print_meta: n_head_kv        = 1
0.00.279.677 I llm_load_print_meta: n_rot            = 256
0.00.279.678 I llm_load_print_meta: n_swa            = 0
0.00.279.678 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.678 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.679 I llm_load_print_meta: n_gqa            = 8
0.00.279.680 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.681 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.682 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.683 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.683 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.684 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.684 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.685 I llm_load_print_meta: n_ff             = 16384
0.00.279.685 I llm_load_print_meta: n_expert         = 0
0.00.279.685 I llm_load_print_meta: n_expert_used    = 0
0.00.279.686 I llm_load_print_meta: causal attn      = 1
0.00.279.686 I llm_load_print_meta: pooling type     = 0
0.00.279.686 I llm_load_print_meta: rope type        = 2
0.00.279.687 I llm_load_print_meta: rope scaling     = linear
0.00.279.688 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.689 I llm_load_print_meta: freq_scale_train = 1
0.00.279.689 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.690 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.690 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.690 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.690 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.691 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.691 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.691 I llm_load_print_meta: model type       = 2B
0.00.279.692 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.693 I llm_load_print_meta: model params     = 2.51 B
0.00.279.693 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.694 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.694 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.695 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.695 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.695 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.696 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.696 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.696 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.697 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.697 I llm_load_print_meta: max token length = 93
0.00.380.358 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.380.364 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.380.364 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.380.365 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.380.365 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.380.366 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.687 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.694 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.694 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.695 I llama_new_context_with_model: n_batch       = 2048
0.00.385.695 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.696 I llama_new_context_with_model: flash_attn    = 0
0.00.385.698 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.699 I llama_new_context_with_model: freq_scale    = 1
0.00.385.700 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.400.158 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.400.173 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.400.271 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.516 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.401.522 I llama_new_context_with_model: graph nodes  = 601
0.00.401.522 I llama_new_context_with_model: graph splits = 1
0.00.401.525 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.401.525 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.488.096 I main: llama threadpool init, n_threads = 4
0.00.488.111 I 
0.00.488.193 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.488.193 I 
0.00.488.239 I sampler seed: 350928463
0.00.488.248 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.488.251 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.488.251 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.488.251 I 
 increasities, the first time a woman has ever been elected as a member of Parliament in her country.

This landmark victory marks a significant moment in the journey

0.02.774.606 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6397.83 tokens per second)
0.02.774.608 I llama_perf_context_print:        load time =     487.26 ms
0.02.774.609 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.774.610 I llama_perf_context_print:        eval time =    2266.32 ms /    32 runs   (   70.82 ms per token,    14.12 tokens per second)
0.02.774.611 I llama_perf_context_print:       total time =    2286.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.182 I build: 4322 (f0f1fe75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.381 I main: llama backend init
0.00.000.388 I main: load the model and apply lora adapter, if any
0.00.020.631 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.648 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.655 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.656 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.660 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.661 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.661 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.662 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.662 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.663 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.667 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.668 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.669 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.671 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.672 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.179 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.425 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.355 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.361 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.362 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.363 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.363 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.364 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.365 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.368 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.369 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.370 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.370 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.371 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.375 I llama_model_loader: - type  f32:   37 tensors
0.00.131.377 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.708 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.609 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.258 I llm_load_vocab: special tokens cache size = 5
0.00.281.280 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.302 I llm_load_print_meta: arch             = gemma
0.00.281.303 I llm_load_print_meta: vocab type       = SPM
0.00.281.303 I llm_load_print_meta: n_vocab          = 256000
0.00.281.304 I llm_load_print_meta: n_merges         = 0
0.00.281.304 I llm_load_print_meta: vocab_only       = 0
0.00.281.305 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.305 I llm_load_print_meta: n_embd           = 2048
0.00.281.305 I llm_load_print_meta: n_layer          = 18
0.00.281.316 I llm_load_print_meta: n_head           = 8
0.00.281.317 I llm_load_print_meta: n_head_kv        = 1
0.00.281.318 I llm_load_print_meta: n_rot            = 256
0.00.281.318 I llm_load_print_meta: n_swa            = 0
0.00.281.318 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.319 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.319 I llm_load_print_meta: n_gqa            = 8
0.00.281.320 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.321 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.323 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.324 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.324 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.325 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.325 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.326 I llm_load_print_meta: n_ff             = 16384
0.00.281.326 I llm_load_print_meta: n_expert         = 0
0.00.281.326 I llm_load_print_meta: n_expert_used    = 0
0.00.281.326 I llm_load_print_meta: causal attn      = 1
0.00.281.327 I llm_load_print_meta: pooling type     = 0
0.00.281.327 I llm_load_print_meta: rope type        = 2
0.00.281.327 I llm_load_print_meta: rope scaling     = linear
0.00.281.329 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.330 I llm_load_print_meta: freq_scale_train = 1
0.00.281.330 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.330 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.331 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.331 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.331 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.331 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.331 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.332 I llm_load_print_meta: model type       = 2B
0.00.281.333 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.333 I llm_load_print_meta: model params     = 2.51 B
0.00.281.334 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.335 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.335 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.336 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.336 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.337 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.337 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.337 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.338 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.338 I llm_load_print_meta: max token length = 93
0.00.377.971 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.383.059 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.066 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.066 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.067 I llama_new_context_with_model: n_batch       = 2048
0.00.383.067 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.068 I llama_new_context_with_model: flash_attn    = 0
0.00.383.069 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.070 I llama_new_context_with_model: freq_scale    = 1
0.00.383.071 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.397.696 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.710 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.809 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.081 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.088 I llama_new_context_with_model: graph nodes  = 601
0.00.399.088 I llama_new_context_with_model: graph splits = 1
0.00.399.090 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.399.091 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.108 I main: llama threadpool init, n_threads = 4
0.00.481.122 I 
0.00.481.196 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.199 I 
0.00.481.241 I sampler seed: 1986711352
0.00.481.251 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.264 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.268 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.268 I 
 increasively!

I am unable to generate the requested text due to safety concerns. [end of text]


0.01.748.824 I llama_perf_sampler_print:    sampling time =       2.69 ms /    19 runs   (    0.14 ms per token,  7068.45 tokens per second)
0.01.748.826 I llama_perf_context_print:        load time =     480.70 ms
0.01.748.827 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.748.829 I llama_perf_context_print:        eval time =    1256.62 ms /    18 runs   (   69.81 ms per token,    14.32 tokens per second)
0.01.748.829 I llama_perf_context_print:       total time =    1267.72 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 4322 (f0f1fe75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.020.978 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.991 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.004 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.005 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.010 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.010 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.011 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.012 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.013 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.013 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.018 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.018 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.019 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.020 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.020 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.189 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.129.672 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.375 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.385 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.386 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.386 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.387 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.388 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.389 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.391 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.392 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.393 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.394 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.138.394 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.397 I llama_model_loader: - type  f32:   37 tensors
0.00.138.398 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.765 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.891 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.502 I llm_load_vocab: special tokens cache size = 5
0.00.286.656 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.676 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.677 I llm_load_print_meta: arch             = gemma
0.00.286.678 I llm_load_print_meta: vocab type       = SPM
0.00.286.679 I llm_load_print_meta: n_vocab          = 256000
0.00.286.679 I llm_load_print_meta: n_merges         = 0
0.00.286.679 I llm_load_print_meta: vocab_only       = 0
0.00.286.680 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.680 I llm_load_print_meta: n_embd           = 2048
0.00.286.680 I llm_load_print_meta: n_layer          = 18
0.00.286.693 I llm_load_print_meta: n_head           = 8
0.00.286.694 I llm_load_print_meta: n_head_kv        = 1
0.00.286.694 I llm_load_print_meta: n_rot            = 256
0.00.286.694 I llm_load_print_meta: n_swa            = 0
0.00.286.695 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.695 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.696 I llm_load_print_meta: n_gqa            = 8
0.00.286.697 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.698 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.699 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.700 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.700 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.701 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.701 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.702 I llm_load_print_meta: n_ff             = 16384
0.00.286.702 I llm_load_print_meta: n_expert         = 0
0.00.286.702 I llm_load_print_meta: n_expert_used    = 0
0.00.286.703 I llm_load_print_meta: causal attn      = 1
0.00.286.703 I llm_load_print_meta: pooling type     = 0
0.00.286.703 I llm_load_print_meta: rope type        = 2
0.00.286.704 I llm_load_print_meta: rope scaling     = linear
0.00.286.705 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.705 I llm_load_print_meta: freq_scale_train = 1
0.00.286.706 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.706 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.706 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.706 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.707 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.707 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.707 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.707 I llm_load_print_meta: model type       = 2B
0.00.286.708 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.709 I llm_load_print_meta: model params     = 2.51 B
0.00.286.709 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.710 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.710 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.710 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.711 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.711 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.711 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.712 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.712 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.713 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.713 I llm_load_print_meta: max token length = 93
0.00.364.564 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.364.572 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.364.573 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.364.573 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.364.574 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.364.575 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.369.859 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.867 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.867 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.868 I llama_new_context_with_model: n_batch       = 2048
0.00.369.868 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.869 I llama_new_context_with_model: flash_attn    = 0
0.00.369.874 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.875 I llama_new_context_with_model: freq_scale    = 1
0.00.369.876 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.699 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.718 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.847 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.336 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.343 I llama_new_context_with_model: graph nodes  = 601
0.00.387.344 I llama_new_context_with_model: graph splits = 1
0.00.387.346 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.346 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.463 I main: llama threadpool init, n_threads = 4
0.00.473.490 I 
0.00.473.576 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.586 I 
0.00.473.640 I sampler seed: 3316689900
0.00.473.651 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.663 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.667 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.667 I 
 seconary and tertiary lymphoid organs are located within which lymphoid tissue?

a) Bone marrow
b) Spleen
c) Lymph nodes
d) Tons

0.02.756.341 I llama_perf_sampler_print:    sampling time =       5.34 ms /    33 runs   (    0.16 ms per token,  6177.46 tokens per second)
0.02.756.344 I llama_perf_context_print:        load time =     472.69 ms
0.02.756.345 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.756.346 I llama_perf_context_print:        eval time =    2262.14 ms /    32 runs   (   70.69 ms per token,    14.15 tokens per second)
0.02.756.347 I llama_perf_context_print:       total time =    2282.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.597 I build: 4322 (f0f1fe75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.797 I main: llama backend init
0.00.000.805 I main: load the model and apply lora adapter, if any
0.00.021.520 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.529 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.536 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.542 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.543 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.550 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.551 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.551 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.552 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.553 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.553 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.558 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.559 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.560 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.560 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.561 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.074 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.800 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.806 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.807 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.807 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.808 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.809 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.810 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.812 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.813 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.815 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.135.815 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.818 I llama_model_loader: - type  f32:   37 tensors
0.00.135.820 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.889 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.414 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.169 I llm_load_vocab: special tokens cache size = 5
0.00.289.305 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.328 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.329 I llm_load_print_meta: arch             = gemma
0.00.289.329 I llm_load_print_meta: vocab type       = SPM
0.00.289.330 I llm_load_print_meta: n_vocab          = 256000
0.00.289.331 I llm_load_print_meta: n_merges         = 0
0.00.289.331 I llm_load_print_meta: vocab_only       = 0
0.00.289.331 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.332 I llm_load_print_meta: n_embd           = 2048
0.00.289.332 I llm_load_print_meta: n_layer          = 18
0.00.289.347 I llm_load_print_meta: n_head           = 8
0.00.289.348 I llm_load_print_meta: n_head_kv        = 1
0.00.289.348 I llm_load_print_meta: n_rot            = 256
0.00.289.349 I llm_load_print_meta: n_swa            = 0
0.00.289.349 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.349 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.350 I llm_load_print_meta: n_gqa            = 8
0.00.289.351 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.352 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.353 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.354 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.355 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.355 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.355 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.356 I llm_load_print_meta: n_ff             = 16384
0.00.289.356 I llm_load_print_meta: n_expert         = 0
0.00.289.357 I llm_load_print_meta: n_expert_used    = 0
0.00.289.357 I llm_load_print_meta: causal attn      = 1
0.00.289.357 I llm_load_print_meta: pooling type     = 0
0.00.289.358 I llm_load_print_meta: rope type        = 2
0.00.289.358 I llm_load_print_meta: rope scaling     = linear
0.00.289.359 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.360 I llm_load_print_meta: freq_scale_train = 1
0.00.289.360 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.361 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.361 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.361 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.361 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.362 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.362 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.362 I llm_load_print_meta: model type       = 2B
0.00.289.363 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.364 I llm_load_print_meta: model params     = 2.51 B
0.00.289.365 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.365 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.366 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.366 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.366 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.367 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.367 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.367 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.368 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.368 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.368 I llm_load_print_meta: max token length = 93
0.00.364.470 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.364.476 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.369.849 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.855 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.856 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.856 I llama_new_context_with_model: n_batch       = 2048
0.00.369.856 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.857 I llama_new_context_with_model: flash_attn    = 0
0.00.369.859 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.860 I llama_new_context_with_model: freq_scale    = 1
0.00.369.861 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.195 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.208 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.309 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.617 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.622 I llama_new_context_with_model: graph nodes  = 601
0.00.385.623 I llama_new_context_with_model: graph splits = 1
0.00.385.626 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.626 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.444 I main: llama threadpool init, n_threads = 4
0.00.477.460 I 
0.00.477.536 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.539 I 
0.00.477.585 I sampler seed: 1815479413
0.00.477.594 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.598 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.599 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.600 I 
 increasels, but the crusaders were victorious.

**What is the historical event described?**

A) Battle of Hastings
B) Battle of A

0.02.925.890 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6572.40 tokens per second)
0.02.925.892 I llama_perf_context_print:        load time =     476.62 ms
0.02.925.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.925.894 I llama_perf_context_print:        eval time =    2428.76 ms /    32 runs   (   75.90 ms per token,    13.18 tokens per second)
0.02.925.895 I llama_perf_context_print:       total time =    2448.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.946s
user	0m36.115s
sys	0m9.519s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4322 (f0f1fe75)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40256.15 ms
main:    total time = 40256.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 4322 (f0f1fe75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.021.513 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.523 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.532 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.541 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.542 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.547 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.548 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.548 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.549 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.550 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.551 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.557 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.558 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.559 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.560 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.561 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.463 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.089 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.009 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.016 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.017 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.018 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.019 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.020 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.021 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.025 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.025 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.026 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.027 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.028 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.031 I llama_model_loader: - type  f32:   37 tensors
0.00.133.033 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.034 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.121 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.741 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.327 I llm_load_vocab: special tokens cache size = 5
0.00.270.212 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.229 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.231 I llm_load_print_meta: arch             = gemma
0.00.270.232 I llm_load_print_meta: vocab type       = SPM
0.00.270.233 I llm_load_print_meta: n_vocab          = 256000
0.00.270.233 I llm_load_print_meta: n_merges         = 0
0.00.270.234 I llm_load_print_meta: vocab_only       = 0
0.00.270.234 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.234 I llm_load_print_meta: n_embd           = 2048
0.00.270.235 I llm_load_print_meta: n_layer          = 18
0.00.270.245 I llm_load_print_meta: n_head           = 8
0.00.270.247 I llm_load_print_meta: n_head_kv        = 1
0.00.270.247 I llm_load_print_meta: n_rot            = 256
0.00.270.248 I llm_load_print_meta: n_swa            = 0
0.00.270.248 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.249 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.250 I llm_load_print_meta: n_gqa            = 8
0.00.270.251 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.252 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.253 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.254 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.254 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.255 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.255 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.256 I llm_load_print_meta: n_ff             = 16384
0.00.270.257 I llm_load_print_meta: n_expert         = 0
0.00.270.257 I llm_load_print_meta: n_expert_used    = 0
0.00.270.257 I llm_load_print_meta: causal attn      = 1
0.00.270.257 I llm_load_print_meta: pooling type     = 0
0.00.270.258 I llm_load_print_meta: rope type        = 2
0.00.270.259 I llm_load_print_meta: rope scaling     = linear
0.00.270.260 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.261 I llm_load_print_meta: freq_scale_train = 1
0.00.270.261 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.262 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.262 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.263 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.263 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.263 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.264 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.264 I llm_load_print_meta: model type       = 2B
0.00.270.265 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.266 I llm_load_print_meta: model params     = 2.51 B
0.00.270.267 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.268 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.268 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.269 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.269 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.269 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.270 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.270 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.270 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.271 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.271 I llm_load_print_meta: max token length = 93
0.00.330.532 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.330.540 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.330.541 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.330.541 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.330.542 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.330.542 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.815 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.821 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.821 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.822 I llama_new_context_with_model: n_batch       = 2048
0.00.335.822 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.822 I llama_new_context_with_model: flash_attn    = 0
0.00.335.825 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.826 I llama_new_context_with_model: freq_scale    = 1
0.00.335.827 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.252 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.268 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.367 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.645 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.651 I llama_new_context_with_model: graph nodes  = 601
0.00.351.651 I llama_new_context_with_model: graph splits = 1
0.00.351.654 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.351.654 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.058 I main: llama threadpool init, n_threads = 4
0.00.427.074 I 
0.00.427.156 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.161 I 
0.00.427.214 I sampler seed: 3385023918
0.00.427.224 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.228 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.229 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.229 I 
 maneuvously!

I am unable to generate the requested text due to the limitations of my programming. I am not able to generate sexually suggestive or inappropriate content

0.02.077.428 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6426.48 tokens per second)
0.02.077.430 I llama_perf_context_print:        load time =     426.28 ms
0.02.077.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.077.433 I llama_perf_context_print:        eval time =    1630.71 ms /    32 runs   (   50.96 ms per token,    19.62 tokens per second)
0.02.077.433 I llama_perf_context_print:       total time =    1650.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4322 (f0f1fe75)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40232.85 ms
main:    total time = 40232.85 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.576 I build: 4322 (f0f1fe75) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.805 I main: llama backend init
0.00.000.812 I main: load the model and apply lora adapter, if any
0.00.021.424 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.440 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.448 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.449 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.454 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.455 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.455 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.456 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.456 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.461 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.462 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.463 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.463 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.463 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.085 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.999 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.907 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.913 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.914 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.915 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.916 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.917 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.919 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.920 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.923 I llama_model_loader: - type  f32:   37 tensors
0.00.131.924 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.925 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.089 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.635 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.313 I llm_load_vocab: special tokens cache size = 5
0.00.274.650 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.668 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.668 I llm_load_print_meta: arch             = gemma
0.00.274.669 I llm_load_print_meta: vocab type       = SPM
0.00.274.670 I llm_load_print_meta: n_vocab          = 256000
0.00.274.670 I llm_load_print_meta: n_merges         = 0
0.00.274.670 I llm_load_print_meta: vocab_only       = 0
0.00.274.671 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.671 I llm_load_print_meta: n_embd           = 2048
0.00.274.671 I llm_load_print_meta: n_layer          = 18
0.00.274.682 I llm_load_print_meta: n_head           = 8
0.00.274.683 I llm_load_print_meta: n_head_kv        = 1
0.00.274.683 I llm_load_print_meta: n_rot            = 256
0.00.274.684 I llm_load_print_meta: n_swa            = 0
0.00.274.684 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.684 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.685 I llm_load_print_meta: n_gqa            = 8
0.00.274.686 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.687 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.688 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.690 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.690 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.690 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.691 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.691 I llm_load_print_meta: n_ff             = 16384
0.00.274.692 I llm_load_print_meta: n_expert         = 0
0.00.274.692 I llm_load_print_meta: n_expert_used    = 0
0.00.274.692 I llm_load_print_meta: causal attn      = 1
0.00.274.692 I llm_load_print_meta: pooling type     = 0
0.00.274.693 I llm_load_print_meta: rope type        = 2
0.00.274.693 I llm_load_print_meta: rope scaling     = linear
0.00.274.694 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.695 I llm_load_print_meta: freq_scale_train = 1
0.00.274.695 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.696 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.696 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.696 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.697 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.697 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.697 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.697 I llm_load_print_meta: model type       = 2B
0.00.274.698 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.699 I llm_load_print_meta: model params     = 2.51 B
0.00.274.699 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.700 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.700 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.701 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.701 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.701 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.702 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.702 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.702 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.703 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.703 I llm_load_print_meta: max token length = 93
0.00.332.554 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.337.728 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.734 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.734 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.735 I llama_new_context_with_model: n_batch       = 2048
0.00.337.735 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.736 I llama_new_context_with_model: flash_attn    = 0
0.00.337.738 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.739 I llama_new_context_with_model: freq_scale    = 1
0.00.337.740 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.116 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.131 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.227 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.503 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.509 I llama_new_context_with_model: graph nodes  = 601
0.00.354.509 I llama_new_context_with_model: graph splits = 1
0.00.354.511 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.354.512 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.300 I main: llama threadpool init, n_threads = 4
0.00.429.318 I 
0.00.429.397 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.401 I 
0.00.429.444 I sampler seed: 2436485657
0.00.429.456 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.463 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.466 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.467 I 
 seconally to the following questions:

1. What is the relationship between the central bank and the financial system?


2. How does the monetary policy of

0.02.050.273 I llama_perf_sampler_print:    sampling time =       5.23 ms /    33 runs   (    0.16 ms per token,  6314.58 tokens per second)
0.02.050.275 I llama_perf_context_print:        load time =     428.47 ms
0.02.050.276 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.050.278 I llama_perf_context_print:        eval time =    1601.46 ms /    32 runs   (   50.05 ms per token,    19.98 tokens per second)
0.02.050.279 I llama_perf_context_print:       total time =    1620.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.541s
user	10m24.737s
sys	0m7.007s
