+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4164 (c70833d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.023.695 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.705 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.796 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.808 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.809 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.816 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.818 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.819 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.821 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.822 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.823 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.833 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.835 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.836 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.837 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.838 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.966 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.304 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.867 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.877 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.878 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.879 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.881 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.882 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.886 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.887 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.888 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.889 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.890 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.899 I llama_model_loader: - type  f32:   37 tensors
0.00.270.901 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.810 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.720 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.713 I llm_load_vocab: special tokens cache size = 5
0.00.616.045 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.120 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.122 I llm_load_print_meta: arch             = gemma
0.00.616.122 I llm_load_print_meta: vocab type       = SPM
0.00.616.123 I llm_load_print_meta: n_vocab          = 256000
0.00.616.126 I llm_load_print_meta: n_merges         = 0
0.00.616.126 I llm_load_print_meta: vocab_only       = 0
0.00.616.127 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.127 I llm_load_print_meta: n_embd           = 2048
0.00.616.127 I llm_load_print_meta: n_layer          = 18
0.00.616.196 I llm_load_print_meta: n_head           = 8
0.00.616.203 I llm_load_print_meta: n_head_kv        = 1
0.00.616.204 I llm_load_print_meta: n_rot            = 256
0.00.616.204 I llm_load_print_meta: n_swa            = 0
0.00.616.205 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.209 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.214 I llm_load_print_meta: n_gqa            = 8
0.00.616.219 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.224 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.225 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.227 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.227 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.229 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.229 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.235 I llm_load_print_meta: n_ff             = 16384
0.00.616.235 I llm_load_print_meta: n_expert         = 0
0.00.616.261 I llm_load_print_meta: n_expert_used    = 0
0.00.616.265 I llm_load_print_meta: causal attn      = 1
0.00.616.265 I llm_load_print_meta: pooling type     = 0
0.00.616.266 I llm_load_print_meta: rope type        = 2
0.00.616.266 I llm_load_print_meta: rope scaling     = linear
0.00.616.267 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.268 I llm_load_print_meta: freq_scale_train = 1
0.00.616.268 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.269 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.269 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.269 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.270 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.270 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.270 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.271 I llm_load_print_meta: model type       = 2B
0.00.616.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.281 I llm_load_print_meta: model params     = 2.51 B
0.00.616.290 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.291 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.291 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.292 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.292 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.293 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.293 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.301 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.308 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.309 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.310 I llm_load_print_meta: max token length = 93
0.00.720.601 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.720.609 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.720.610 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.720.610 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.720.611 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.720.612 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.726.480 I llama_new_context_with_model: n_seq_max     = 1
0.00.726.487 I llama_new_context_with_model: n_ctx         = 4096
0.00.726.487 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.726.487 I llama_new_context_with_model: n_batch       = 2048
0.00.726.488 I llama_new_context_with_model: n_ubatch      = 512
0.00.726.488 I llama_new_context_with_model: flash_attn    = 0
0.00.726.490 I llama_new_context_with_model: freq_base     = 10000.0
0.00.726.491 I llama_new_context_with_model: freq_scale    = 1
0.00.726.492 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.741.022 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.741.062 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.741.183 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.696 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.743.701 I llama_new_context_with_model: graph nodes  = 601
0.00.743.701 I llama_new_context_with_model: graph splits = 1
0.00.743.726 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.972 I main: llama threadpool init, n_threads = 4
0.01.360.985 I 
0.01.361.091 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.096 I 
0.01.361.321 I sampler seed: 1843741528
0.01.361.334 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.340 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.343 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.344 I 
 increably.

I cannot perform a task that requires me to generate text that is sexually suggestive in nature. [end of text]


0.11.084.475 I llama_perf_sampler_print:    sampling time =      35.46 ms /    24 runs   (    1.48 ms per token,   676.76 tokens per second)
0.11.084.478 I llama_perf_context_print:        load time =    1360.00 ms
0.11.084.479 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.084.481 I llama_perf_context_print:        eval time =    9659.65 ms /    23 runs   (  419.98 ms per token,     2.38 tokens per second)
0.11.084.481 I llama_perf_context_print:       total time =    9723.51 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4164 (c70833d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.023.056 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.160 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.175 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.188 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.191 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.193 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.196 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.200 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.203 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.211 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.216 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.228 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.232 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.943 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.011 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.666 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.678 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.679 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.680 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.681 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.683 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.686 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.689 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.690 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.692 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.700 I llama_model_loader: - type  f32:   37 tensors
0.00.270.702 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.804 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.226 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.183 I llm_load_vocab: special tokens cache size = 5
0.00.647.607 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.647.686 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.647.691 I llm_load_print_meta: arch             = gemma
0.00.647.693 I llm_load_print_meta: vocab type       = SPM
0.00.647.693 I llm_load_print_meta: n_vocab          = 256000
0.00.647.696 I llm_load_print_meta: n_merges         = 0
0.00.647.697 I llm_load_print_meta: vocab_only       = 0
0.00.647.698 I llm_load_print_meta: n_ctx_train      = 8192
0.00.647.698 I llm_load_print_meta: n_embd           = 2048
0.00.647.699 I llm_load_print_meta: n_layer          = 18
0.00.647.765 I llm_load_print_meta: n_head           = 8
0.00.647.775 I llm_load_print_meta: n_head_kv        = 1
0.00.647.775 I llm_load_print_meta: n_rot            = 256
0.00.647.776 I llm_load_print_meta: n_swa            = 0
0.00.647.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.647.776 I llm_load_print_meta: n_embd_head_v    = 256
0.00.647.783 I llm_load_print_meta: n_gqa            = 8
0.00.647.790 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.647.800 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.647.803 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.647.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.647.809 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.647.809 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.647.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.647.821 I llm_load_print_meta: n_ff             = 16384
0.00.647.822 I llm_load_print_meta: n_expert         = 0
0.00.647.825 I llm_load_print_meta: n_expert_used    = 0
0.00.647.826 I llm_load_print_meta: causal attn      = 1
0.00.647.827 I llm_load_print_meta: pooling type     = 0
0.00.647.840 I llm_load_print_meta: rope type        = 2
0.00.647.841 I llm_load_print_meta: rope scaling     = linear
0.00.647.843 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.647.844 I llm_load_print_meta: freq_scale_train = 1
0.00.647.844 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.647.845 I llm_load_print_meta: rope_finetuned   = unknown
0.00.647.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.647.846 I llm_load_print_meta: ssm_d_inner      = 0
0.00.647.847 I llm_load_print_meta: ssm_d_state      = 0
0.00.647.848 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.647.849 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.647.854 I llm_load_print_meta: model type       = 2B
0.00.647.855 I llm_load_print_meta: model ftype      = Q8_0
0.00.647.856 I llm_load_print_meta: model params     = 2.51 B
0.00.647.871 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.647.872 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.647.872 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.647.873 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.874 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.875 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.876 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.877 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.647.884 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.647.886 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.647.886 I llm_load_print_meta: max token length = 93
0.00.743.800 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.749.923 I llama_new_context_with_model: n_seq_max     = 1
0.00.749.930 I llama_new_context_with_model: n_ctx         = 4096
0.00.749.930 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.749.931 I llama_new_context_with_model: n_batch       = 2048
0.00.749.931 I llama_new_context_with_model: n_ubatch      = 512
0.00.749.931 I llama_new_context_with_model: flash_attn    = 0
0.00.749.933 I llama_new_context_with_model: freq_base     = 10000.0
0.00.749.934 I llama_new_context_with_model: freq_scale    = 1
0.00.749.935 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.764.796 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.764.837 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.764.976 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.767.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.767.547 I llama_new_context_with_model: graph nodes  = 601
0.00.767.547 I llama_new_context_with_model: graph splits = 1
0.00.767.571 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.385.569 I main: llama threadpool init, n_threads = 4
0.01.385.586 I 
0.01.385.712 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.385.716 I 
0.01.385.958 I sampler seed: 1077133270
0.01.385.972 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.385.980 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.385.985 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.385.986 I 
 increably.

I'm not sure if I should stay or go,
Between two paths, both unknown.
One leads to comfort and security,

0.14.928.848 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.59 tokens per second)
0.14.928.851 I llama_perf_context_print:        load time =    1384.60 ms
0.14.928.852 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.928.867 I llama_perf_context_print:        eval time =   13453.76 ms /    32 runs   (  420.43 ms per token,     2.38 tokens per second)
0.14.928.869 I llama_perf_context_print:       total time =   13543.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4164 (c70833d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.180 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.190 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.277 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.288 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.289 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.294 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.295 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.296 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.297 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.298 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.299 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.308 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.309 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.311 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.312 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.313 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.188 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.100 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.657 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.665 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.666 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.667 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.669 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.670 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.671 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.675 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.676 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.677 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.678 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.679 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.687 I llama_model_loader: - type  f32:   37 tensors
0.00.270.690 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.110 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.005 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.978 I llm_load_vocab: special tokens cache size = 5
0.00.611.020 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.093 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.094 I llm_load_print_meta: arch             = gemma
0.00.611.095 I llm_load_print_meta: vocab type       = SPM
0.00.611.096 I llm_load_print_meta: n_vocab          = 256000
0.00.611.098 I llm_load_print_meta: n_merges         = 0
0.00.611.098 I llm_load_print_meta: vocab_only       = 0
0.00.611.099 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.099 I llm_load_print_meta: n_embd           = 2048
0.00.611.099 I llm_load_print_meta: n_layer          = 18
0.00.611.181 I llm_load_print_meta: n_head           = 8
0.00.611.190 I llm_load_print_meta: n_head_kv        = 1
0.00.611.190 I llm_load_print_meta: n_rot            = 256
0.00.611.191 I llm_load_print_meta: n_swa            = 0
0.00.611.191 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.191 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.196 I llm_load_print_meta: n_gqa            = 8
0.00.611.200 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.206 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.207 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.209 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.209 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.210 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.210 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.216 I llm_load_print_meta: n_ff             = 16384
0.00.611.216 I llm_load_print_meta: n_expert         = 0
0.00.611.217 I llm_load_print_meta: n_expert_used    = 0
0.00.611.218 I llm_load_print_meta: causal attn      = 1
0.00.611.218 I llm_load_print_meta: pooling type     = 0
0.00.611.219 I llm_load_print_meta: rope type        = 2
0.00.611.220 I llm_load_print_meta: rope scaling     = linear
0.00.611.221 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.222 I llm_load_print_meta: freq_scale_train = 1
0.00.611.223 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.223 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.223 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.223 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.224 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.224 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.225 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.226 I llm_load_print_meta: model type       = 2B
0.00.611.227 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.228 I llm_load_print_meta: model params     = 2.51 B
0.00.611.236 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.236 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.238 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.238 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.239 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.239 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.239 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.240 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.246 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.247 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.248 I llm_load_print_meta: max token length = 93
0.00.686.121 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.686.132 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.686.133 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.686.133 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.686.134 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.686.135 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.691.949 I llama_new_context_with_model: n_seq_max     = 1
0.00.691.955 I llama_new_context_with_model: n_ctx         = 4096
0.00.691.956 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.691.956 I llama_new_context_with_model: n_batch       = 2048
0.00.691.957 I llama_new_context_with_model: n_ubatch      = 512
0.00.691.957 I llama_new_context_with_model: flash_attn    = 0
0.00.691.960 I llama_new_context_with_model: freq_base     = 10000.0
0.00.691.961 I llama_new_context_with_model: freq_scale    = 1
0.00.691.962 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.706.668 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.706.708 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.706.844 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.467 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.709.471 I llama_new_context_with_model: graph nodes  = 601
0.00.709.471 I llama_new_context_with_model: graph splits = 1
0.00.709.494 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.419 I main: llama threadpool init, n_threads = 4
0.01.317.434 I 
0.01.317.535 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.538 I 
0.01.317.761 I sampler seed: 2957183967
0.01.317.773 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.780 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.317.782 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.782 I 
 increasities for the benefit of the child.

I cannot answer this question as it is unethical and potentially harmful. It is important to prioritize the well-being

0.14.780.596 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.24 tokens per second)
0.14.780.598 I llama_perf_context_print:        load time =    1316.50 ms
0.14.780.621 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.780.623 I llama_perf_context_print:        eval time =   13374.65 ms /    32 runs   (  417.96 ms per token,     2.39 tokens per second)
0.14.780.624 I llama_perf_context_print:       total time =   13463.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 4164 (c70833d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.022.906 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.917 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.002 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.015 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.020 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.023 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.024 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.025 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.026 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.028 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.035 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.044 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.046 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.047 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.048 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.441 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.112 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.655 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.666 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.667 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.668 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.669 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.671 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.672 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.676 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.677 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.678 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.679 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.681 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.689 I llama_model_loader: - type  f32:   37 tensors
0.00.271.692 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.861 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.215 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.175 I llm_load_vocab: special tokens cache size = 5
0.00.626.896 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.968 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.969 I llm_load_print_meta: arch             = gemma
0.00.626.970 I llm_load_print_meta: vocab type       = SPM
0.00.626.971 I llm_load_print_meta: n_vocab          = 256000
0.00.626.974 I llm_load_print_meta: n_merges         = 0
0.00.626.974 I llm_load_print_meta: vocab_only       = 0
0.00.626.975 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.975 I llm_load_print_meta: n_embd           = 2048
0.00.626.976 I llm_load_print_meta: n_layer          = 18
0.00.627.056 I llm_load_print_meta: n_head           = 8
0.00.627.066 I llm_load_print_meta: n_head_kv        = 1
0.00.627.067 I llm_load_print_meta: n_rot            = 256
0.00.627.067 I llm_load_print_meta: n_swa            = 0
0.00.627.068 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.078 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.084 I llm_load_print_meta: n_gqa            = 8
0.00.627.089 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.098 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.100 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.101 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.102 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.102 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.102 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.107 I llm_load_print_meta: n_ff             = 16384
0.00.627.108 I llm_load_print_meta: n_expert         = 0
0.00.627.111 I llm_load_print_meta: n_expert_used    = 0
0.00.627.111 I llm_load_print_meta: causal attn      = 1
0.00.627.112 I llm_load_print_meta: pooling type     = 0
0.00.627.112 I llm_load_print_meta: rope type        = 2
0.00.627.113 I llm_load_print_meta: rope scaling     = linear
0.00.627.114 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.115 I llm_load_print_meta: freq_scale_train = 1
0.00.627.115 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.115 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.115 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.116 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.116 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.116 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.117 I llm_load_print_meta: model type       = 2B
0.00.627.118 I llm_load_print_meta: model ftype      = Q8_0
0.00.627.119 I llm_load_print_meta: model params     = 2.51 B
0.00.627.127 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.627.127 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.128 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.128 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.129 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.129 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.130 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.131 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.137 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.139 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.139 I llm_load_print_meta: max token length = 93
0.00.699.936 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.699.948 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.705.644 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.651 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.652 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.652 I llama_new_context_with_model: n_batch       = 2048
0.00.705.652 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.653 I llama_new_context_with_model: flash_attn    = 0
0.00.705.655 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.656 I llama_new_context_with_model: freq_scale    = 1
0.00.705.657 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.720.154 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.720.195 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.720.315 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.906 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.722.910 I llama_new_context_with_model: graph nodes  = 601
0.00.722.910 I llama_new_context_with_model: graph splits = 1
0.00.722.933 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.235 I main: llama threadpool init, n_threads = 4
0.01.332.250 I 
0.01.332.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.361 I 
0.01.332.592 I sampler seed: 3691718935
0.01.332.605 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.611 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.332.614 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.614 I 
 increadibly long list of benefits of using a vpn service.

**Benefits of Using a VPN Service:**

* Enhanced security and privacy
* Increased online freedom

0.14.874.463 I llama_perf_sampler_print:    sampling time =      49.09 ms /    33 runs   (    1.49 ms per token,   672.23 tokens per second)
0.14.874.466 I llama_perf_context_print:        load time =    1331.28 ms
0.14.874.467 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.874.483 I llama_perf_context_print:        eval time =   13453.01 ms /    32 runs   (  420.41 ms per token,     2.38 tokens per second)
0.14.874.484 I llama_perf_context_print:       total time =   13542.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.202s
user	3m33.959s
sys	0m9.281s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4164 (c70833d8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186183.24 ms
main:    total time = 186183.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4164 (c70833d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.000.867 I main: load the model and apply lora adapter, if any
0.00.023.266 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.275 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.375 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.387 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.388 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.394 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.398 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.399 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.400 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.401 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.402 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.408 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.411 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.412 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.419 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.421 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.018 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.508 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.055 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.064 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.066 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.067 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.068 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.069 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.070 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.074 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.075 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.077 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.078 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.079 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.088 I llama_model_loader: - type  f32:   37 tensors
0.00.270.090 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.091 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.341 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.183 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.051 I llm_load_vocab: special tokens cache size = 5
0.00.618.361 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.430 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.431 I llm_load_print_meta: arch             = gemma
0.00.618.431 I llm_load_print_meta: vocab type       = SPM
0.00.618.432 I llm_load_print_meta: n_vocab          = 256000
0.00.618.435 I llm_load_print_meta: n_merges         = 0
0.00.618.435 I llm_load_print_meta: vocab_only       = 0
0.00.618.436 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.436 I llm_load_print_meta: n_embd           = 2048
0.00.618.437 I llm_load_print_meta: n_layer          = 18
0.00.618.500 I llm_load_print_meta: n_head           = 8
0.00.618.507 I llm_load_print_meta: n_head_kv        = 1
0.00.618.509 I llm_load_print_meta: n_rot            = 256
0.00.618.509 I llm_load_print_meta: n_swa            = 0
0.00.618.510 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.510 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.515 I llm_load_print_meta: n_gqa            = 8
0.00.618.519 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.524 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.529 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.530 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.531 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.532 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.533 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.538 I llm_load_print_meta: n_ff             = 16384
0.00.618.538 I llm_load_print_meta: n_expert         = 0
0.00.618.538 I llm_load_print_meta: n_expert_used    = 0
0.00.618.539 I llm_load_print_meta: causal attn      = 1
0.00.618.540 I llm_load_print_meta: pooling type     = 0
0.00.618.540 I llm_load_print_meta: rope type        = 2
0.00.618.540 I llm_load_print_meta: rope scaling     = linear
0.00.618.542 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.542 I llm_load_print_meta: freq_scale_train = 1
0.00.618.542 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.543 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.544 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.544 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.544 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.544 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.545 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.546 I llm_load_print_meta: model type       = 2B
0.00.618.547 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.548 I llm_load_print_meta: model params     = 2.51 B
0.00.618.564 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.566 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.567 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.567 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.568 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.568 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.569 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.569 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.575 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.577 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.578 I llm_load_print_meta: max token length = 93
0.00.681.357 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.681.366 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.681.367 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.681.367 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.681.368 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.681.369 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.687.081 I llama_new_context_with_model: n_seq_max     = 1
0.00.687.088 I llama_new_context_with_model: n_ctx         = 4096
0.00.687.089 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.687.089 I llama_new_context_with_model: n_batch       = 2048
0.00.687.090 I llama_new_context_with_model: n_ubatch      = 512
0.00.687.090 I llama_new_context_with_model: flash_attn    = 0
0.00.687.093 I llama_new_context_with_model: freq_base     = 10000.0
0.00.687.093 I llama_new_context_with_model: freq_scale    = 1
0.00.687.094 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.701.801 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.701.842 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.701.966 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.510 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.704.514 I llama_new_context_with_model: graph nodes  = 601
0.00.704.514 I llama_new_context_with_model: graph splits = 1
0.00.704.537 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.289.249 I main: llama threadpool init, n_threads = 4
0.01.289.265 I 
0.01.289.371 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.289.375 I 
0.01.289.606 I sampler seed: 1865239945
0.01.289.619 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.289.626 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.289.627 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.289.627 I 
 seconading the original question and providing the requested information.

**Original Question:**

> Explain why the following statements are true:

> a. The equation

0.12.466.767 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.66 tokens per second)
0.12.466.782 I llama_perf_context_print:        load time =    1288.29 ms
0.12.466.784 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.466.786 I llama_perf_context_print:        eval time =   11088.84 ms /    32 runs   (  346.53 ms per token,     2.89 tokens per second)
0.12.466.787 I llama_perf_context_print:       total time =   11177.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4164 (c70833d8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186077.54 ms
main:    total time = 186077.54 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 4164 (c70833d8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.908 I main: llama backend init
0.00.000.916 I main: load the model and apply lora adapter, if any
0.00.023.181 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.279 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.293 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.295 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.300 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.307 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.309 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.311 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.313 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.320 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.322 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.324 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.326 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.329 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.740 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.595 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.208 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.217 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.218 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.219 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.221 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.222 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.228 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.229 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.237 I llama_model_loader: - type  f32:   37 tensors
0.00.270.239 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.240 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.054 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.424 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.483 I llm_load_vocab: special tokens cache size = 5
0.00.609.378 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.453 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.457 I llm_load_print_meta: arch             = gemma
0.00.609.458 I llm_load_print_meta: vocab type       = SPM
0.00.609.459 I llm_load_print_meta: n_vocab          = 256000
0.00.609.461 I llm_load_print_meta: n_merges         = 0
0.00.609.461 I llm_load_print_meta: vocab_only       = 0
0.00.609.462 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.463 I llm_load_print_meta: n_embd           = 2048
0.00.609.463 I llm_load_print_meta: n_layer          = 18
0.00.609.527 I llm_load_print_meta: n_head           = 8
0.00.609.536 I llm_load_print_meta: n_head_kv        = 1
0.00.609.537 I llm_load_print_meta: n_rot            = 256
0.00.609.537 I llm_load_print_meta: n_swa            = 0
0.00.609.538 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.538 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.544 I llm_load_print_meta: n_gqa            = 8
0.00.609.548 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.554 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.559 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.560 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.560 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.561 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.566 I llm_load_print_meta: n_ff             = 16384
0.00.609.567 I llm_load_print_meta: n_expert         = 0
0.00.609.568 I llm_load_print_meta: n_expert_used    = 0
0.00.609.568 I llm_load_print_meta: causal attn      = 1
0.00.609.569 I llm_load_print_meta: pooling type     = 0
0.00.609.569 I llm_load_print_meta: rope type        = 2
0.00.609.570 I llm_load_print_meta: rope scaling     = linear
0.00.609.571 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.572 I llm_load_print_meta: freq_scale_train = 1
0.00.609.575 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.575 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.576 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.576 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.576 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.576 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.577 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.577 I llm_load_print_meta: model type       = 2B
0.00.609.578 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.609.579 I llm_load_print_meta: model params     = 2.51 B
0.00.609.589 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.609.590 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.591 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.591 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.592 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.593 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.610 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.611 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.619 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.623 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.624 I llm_load_print_meta: max token length = 93
0.00.666.365 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.672.408 I llama_new_context_with_model: n_seq_max     = 1
0.00.672.416 I llama_new_context_with_model: n_ctx         = 4096
0.00.672.416 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.672.417 I llama_new_context_with_model: n_batch       = 2048
0.00.672.417 I llama_new_context_with_model: n_ubatch      = 512
0.00.672.418 I llama_new_context_with_model: flash_attn    = 0
0.00.672.420 I llama_new_context_with_model: freq_base     = 10000.0
0.00.672.421 I llama_new_context_with_model: freq_scale    = 1
0.00.672.422 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.687.683 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.687.727 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.687.850 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.690.482 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.690.486 I llama_new_context_with_model: graph nodes  = 601
0.00.690.486 I llama_new_context_with_model: graph splits = 1
0.00.690.511 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.843 I main: llama threadpool init, n_threads = 4
0.01.271.857 I 
0.01.271.979 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.984 I 
0.01.272.218 I sampler seed: 668778912
0.01.272.230 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.236 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.272.240 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.240 I 
 seconally.

**Assistant**

I am not able to provide medical advice or diagnose medical conditions. Please consult a qualified medical professional for any health concerns.

0.12.453.650 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.72 tokens per second)
0.12.453.652 I llama_perf_context_print:        load time =    1270.83 ms
0.12.453.654 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.453.655 I llama_perf_context_print:        eval time =   11093.10 ms /    32 runs   (  346.66 ms per token,     2.88 tokens per second)
0.12.453.656 I llama_perf_context_print:       total time =   11181.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.052s
user	46m42.293s
sys	0m6.214s
