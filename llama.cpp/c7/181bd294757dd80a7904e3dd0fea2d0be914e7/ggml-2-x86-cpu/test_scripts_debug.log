+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 3914 (c7181bd2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.002.831 I main: load the model and apply lora adapter, if any
0.00.024.761 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.958 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.043 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.054 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.055 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.059 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.060 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.061 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.063 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.064 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.064 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.070 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.071 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.072 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.073 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.074 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.251 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.486 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.366 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.374 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.375 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.376 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.379 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.380 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.383 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.384 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.385 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.386 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.387 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.395 I llama_model_loader: - type  f32:   37 tensors
0.00.268.400 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.477 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.446 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.493 I llm_load_vocab: special tokens cache size = 5
0.00.610.400 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.467 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.471 I llm_load_print_meta: arch             = gemma
0.00.610.472 I llm_load_print_meta: vocab type       = SPM
0.00.610.473 I llm_load_print_meta: n_vocab          = 256000
0.00.610.475 I llm_load_print_meta: n_merges         = 0
0.00.610.476 I llm_load_print_meta: vocab_only       = 0
0.00.610.476 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.476 I llm_load_print_meta: n_embd           = 2048
0.00.610.477 I llm_load_print_meta: n_layer          = 18
0.00.610.539 I llm_load_print_meta: n_head           = 8
0.00.610.548 I llm_load_print_meta: n_head_kv        = 1
0.00.610.549 I llm_load_print_meta: n_rot            = 256
0.00.610.550 I llm_load_print_meta: n_swa            = 0
0.00.610.551 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.556 I llm_load_print_meta: n_gqa            = 8
0.00.610.561 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.566 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.568 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.569 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.570 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.570 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.571 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.575 I llm_load_print_meta: n_ff             = 16384
0.00.610.576 I llm_load_print_meta: n_expert         = 0
0.00.610.576 I llm_load_print_meta: n_expert_used    = 0
0.00.610.576 I llm_load_print_meta: causal attn      = 1
0.00.610.577 I llm_load_print_meta: pooling type     = 0
0.00.610.578 I llm_load_print_meta: rope type        = 2
0.00.610.579 I llm_load_print_meta: rope scaling     = linear
0.00.610.580 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.581 I llm_load_print_meta: freq_scale_train = 1
0.00.610.581 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.581 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.582 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.582 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.582 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.583 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.584 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.585 I llm_load_print_meta: model type       = 2B
0.00.610.586 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.595 I llm_load_print_meta: model params     = 2.51 B
0.00.610.596 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.596 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.609 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.610 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.618 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.619 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.620 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.620 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.627 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.628 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.629 I llm_load_print_meta: max token length = 93
0.00.610.794 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.713.984 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.713.995 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.713.995 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.713.996 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.713.997 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.713.998 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.719.679 I llama_new_context_with_model: n_ctx      = 8192
0.00.719.687 I llama_new_context_with_model: n_batch    = 2048
0.00.719.687 I llama_new_context_with_model: n_ubatch   = 512
0.00.719.688 I llama_new_context_with_model: flash_attn = 0
0.00.719.690 I llama_new_context_with_model: freq_base  = 10000.0
0.00.719.691 I llama_new_context_with_model: freq_scale = 1
0.00.748.666 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.748.712 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.832 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.750.200 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.750.205 I llama_new_context_with_model: graph nodes  = 601
0.00.750.205 I llama_new_context_with_model: graph splits = 1
0.00.750.220 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.364.677 I main: llama threadpool init, n_threads = 4
0.01.364.687 I 
0.01.364.795 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.364.799 I 
0.01.364.969 I sampler seed: 977435923
0.01.364.979 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.364.985 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.364.986 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.364.986 I 
 increadibly well in the scenario.

**Scenario:**

A customer walks into a store and wants to buy a specific product. However, they are unable to

0.14.892.277 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.60 tokens per second)
0.14.892.291 I llama_perf_context_print:        load time =    1361.76 ms
0.14.892.293 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.892.295 I llama_perf_context_print:        eval time =   13445.67 ms /    32 runs   (  420.18 ms per token,     2.38 tokens per second)
0.14.892.297 I llama_perf_context_print:       total time =   13527.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 3914 (c7181bd2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.025.230 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.325 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.340 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.342 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.346 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.350 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.351 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.352 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.359 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.361 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.362 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.370 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.371 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.107 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.936 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.829 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.837 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.838 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.839 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.840 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.842 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.843 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.846 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.847 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.848 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.849 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.267.851 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.858 I llama_model_loader: - type  f32:   37 tensors
0.00.267.861 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.080 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.744 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.756 I llm_load_vocab: special tokens cache size = 5
0.00.599.749 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.813 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.814 I llm_load_print_meta: arch             = gemma
0.00.599.814 I llm_load_print_meta: vocab type       = SPM
0.00.599.815 I llm_load_print_meta: n_vocab          = 256000
0.00.599.817 I llm_load_print_meta: n_merges         = 0
0.00.599.818 I llm_load_print_meta: vocab_only       = 0
0.00.599.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.819 I llm_load_print_meta: n_embd           = 2048
0.00.599.819 I llm_load_print_meta: n_layer          = 18
0.00.599.906 I llm_load_print_meta: n_head           = 8
0.00.599.916 I llm_load_print_meta: n_head_kv        = 1
0.00.599.917 I llm_load_print_meta: n_rot            = 256
0.00.599.917 I llm_load_print_meta: n_swa            = 0
0.00.599.918 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.925 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.931 I llm_load_print_meta: n_gqa            = 8
0.00.599.936 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.941 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.943 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.944 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.946 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.946 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.947 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.952 I llm_load_print_meta: n_ff             = 16384
0.00.599.953 I llm_load_print_meta: n_expert         = 0
0.00.599.953 I llm_load_print_meta: n_expert_used    = 0
0.00.599.954 I llm_load_print_meta: causal attn      = 1
0.00.599.954 I llm_load_print_meta: pooling type     = 0
0.00.599.955 I llm_load_print_meta: rope type        = 2
0.00.599.956 I llm_load_print_meta: rope scaling     = linear
0.00.599.958 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.959 I llm_load_print_meta: freq_scale_train = 1
0.00.599.967 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.968 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.969 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.970 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.971 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.971 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.971 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.972 I llm_load_print_meta: model type       = 2B
0.00.599.973 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.974 I llm_load_print_meta: model params     = 2.51 B
0.00.599.975 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.975 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.976 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.977 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.978 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.978 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.978 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.979 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.985 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.986 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.987 I llm_load_print_meta: max token length = 93
0.00.600.157 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.695.761 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.701.434 I llama_new_context_with_model: n_ctx      = 8192
0.00.701.441 I llama_new_context_with_model: n_batch    = 2048
0.00.701.442 I llama_new_context_with_model: n_ubatch   = 512
0.00.701.442 I llama_new_context_with_model: flash_attn = 0
0.00.701.444 I llama_new_context_with_model: freq_base  = 10000.0
0.00.701.445 I llama_new_context_with_model: freq_scale = 1
0.00.731.334 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.379 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.492 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.856 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.732.861 I llama_new_context_with_model: graph nodes  = 601
0.00.732.861 I llama_new_context_with_model: graph splits = 1
0.00.732.878 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.346.660 I main: llama threadpool init, n_threads = 4
0.01.346.671 I 
0.01.346.773 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.346.777 I 
0.01.346.939 I sampler seed: 1578435903
0.01.346.949 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.955 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.346.955 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.956 I 
 maneuvrage.
I am unable to access the internet to retrieve the necessary information. Please provide an alternative solution.

I am unable to access the internet

0.15.102.970 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.89 tokens per second)
0.15.102.976 I llama_perf_context_print:        load time =    1343.74 ms
0.15.102.978 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.102.980 I llama_perf_context_print:        eval time =   13674.58 ms /    32 runs   (  427.33 ms per token,     2.34 tokens per second)
0.15.102.981 I llama_perf_context_print:       total time =   13756.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 3914 (c7181bd2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.749 I main: load the model and apply lora adapter, if any
0.00.024.603 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.809 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.895 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.906 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.908 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.912 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.913 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.914 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.915 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.916 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.917 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.924 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.925 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.926 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.926 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.928 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.056 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.217 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.089 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.097 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.098 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.099 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.100 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.102 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.103 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.107 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.108 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.109 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.110 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.117 I llama_model_loader: - type  f32:   37 tensors
0.00.269.121 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.144 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.222 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.237 I llm_load_vocab: special tokens cache size = 5
0.00.599.339 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.408 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.410 I llm_load_print_meta: arch             = gemma
0.00.599.410 I llm_load_print_meta: vocab type       = SPM
0.00.599.411 I llm_load_print_meta: n_vocab          = 256000
0.00.599.413 I llm_load_print_meta: n_merges         = 0
0.00.599.414 I llm_load_print_meta: vocab_only       = 0
0.00.599.414 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.415 I llm_load_print_meta: n_embd           = 2048
0.00.599.415 I llm_load_print_meta: n_layer          = 18
0.00.599.479 I llm_load_print_meta: n_head           = 8
0.00.599.486 I llm_load_print_meta: n_head_kv        = 1
0.00.599.487 I llm_load_print_meta: n_rot            = 256
0.00.599.488 I llm_load_print_meta: n_swa            = 0
0.00.599.488 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.488 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.494 I llm_load_print_meta: n_gqa            = 8
0.00.599.499 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.505 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.507 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.509 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.509 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.509 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.511 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.516 I llm_load_print_meta: n_ff             = 16384
0.00.599.517 I llm_load_print_meta: n_expert         = 0
0.00.599.517 I llm_load_print_meta: n_expert_used    = 0
0.00.599.517 I llm_load_print_meta: causal attn      = 1
0.00.599.518 I llm_load_print_meta: pooling type     = 0
0.00.599.529 I llm_load_print_meta: rope type        = 2
0.00.599.542 I llm_load_print_meta: rope scaling     = linear
0.00.599.545 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.545 I llm_load_print_meta: freq_scale_train = 1
0.00.599.546 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.546 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.547 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.548 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.549 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.549 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.549 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.550 I llm_load_print_meta: model type       = 2B
0.00.599.551 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.552 I llm_load_print_meta: model params     = 2.51 B
0.00.599.553 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.554 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.555 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.556 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.556 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.557 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.558 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.558 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.564 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.565 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.565 I llm_load_print_meta: max token length = 93
0.00.599.730 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.678.031 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.678.040 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.678.041 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.678.042 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.678.042 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.678.043 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.683.702 I llama_new_context_with_model: n_ctx      = 8192
0.00.683.709 I llama_new_context_with_model: n_batch    = 2048
0.00.683.709 I llama_new_context_with_model: n_ubatch   = 512
0.00.683.710 I llama_new_context_with_model: flash_attn = 0
0.00.683.712 I llama_new_context_with_model: freq_base  = 10000.0
0.00.683.713 I llama_new_context_with_model: freq_scale = 1
0.00.712.577 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.712.618 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.712.744 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.714.127 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.714.132 I llama_new_context_with_model: graph nodes  = 601
0.00.714.132 I llama_new_context_with_model: graph splits = 1
0.00.714.149 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.848 I main: llama threadpool init, n_threads = 4
0.01.335.861 I 
0.01.335.963 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.967 I 
0.01.336.133 I sampler seed: 3240605817
0.01.336.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.153 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.336.156 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.156 I 
 seconally.

I am not sure I understand the relationship between the two sentences.

"The boy ran away because he was tired."

"He ran

0.14.876.547 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.04 tokens per second)
0.14.876.551 I llama_perf_context_print:        load time =    1333.01 ms
0.14.876.552 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.876.554 I llama_perf_context_print:        eval time =   13458.49 ms /    32 runs   (  420.58 ms per token,     2.38 tokens per second)
0.14.876.555 I llama_perf_context_print:       total time =   13540.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 3914 (c7181bd2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.753 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.967 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.060 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.071 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.076 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.080 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.082 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.083 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.084 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.085 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.086 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.093 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.095 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.097 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.110 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.411 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.824 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.688 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.695 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.696 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.698 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.699 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.700 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.701 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.704 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.705 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.707 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.708 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.709 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.716 I llama_model_loader: - type  f32:   37 tensors
0.00.268.720 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.993 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.419 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.459 I llm_load_vocab: special tokens cache size = 5
0.00.604.281 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.349 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.353 I llm_load_print_meta: arch             = gemma
0.00.604.354 I llm_load_print_meta: vocab type       = SPM
0.00.604.354 I llm_load_print_meta: n_vocab          = 256000
0.00.604.357 I llm_load_print_meta: n_merges         = 0
0.00.604.358 I llm_load_print_meta: vocab_only       = 0
0.00.604.358 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.358 I llm_load_print_meta: n_embd           = 2048
0.00.604.359 I llm_load_print_meta: n_layer          = 18
0.00.604.421 I llm_load_print_meta: n_head           = 8
0.00.604.430 I llm_load_print_meta: n_head_kv        = 1
0.00.604.432 I llm_load_print_meta: n_rot            = 256
0.00.604.433 I llm_load_print_meta: n_swa            = 0
0.00.604.433 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.434 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.448 I llm_load_print_meta: n_gqa            = 8
0.00.604.453 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.460 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.461 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.463 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.465 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.465 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.465 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.470 I llm_load_print_meta: n_ff             = 16384
0.00.604.471 I llm_load_print_meta: n_expert         = 0
0.00.604.482 I llm_load_print_meta: n_expert_used    = 0
0.00.604.483 I llm_load_print_meta: causal attn      = 1
0.00.604.484 I llm_load_print_meta: pooling type     = 0
0.00.604.484 I llm_load_print_meta: rope type        = 2
0.00.604.484 I llm_load_print_meta: rope scaling     = linear
0.00.604.486 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.486 I llm_load_print_meta: freq_scale_train = 1
0.00.604.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.488 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.489 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.489 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.497 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.497 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.498 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.499 I llm_load_print_meta: model type       = 2B
0.00.604.500 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.501 I llm_load_print_meta: model params     = 2.51 B
0.00.604.502 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.503 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.504 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.504 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.505 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.506 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.506 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.507 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.513 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.514 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.515 I llm_load_print_meta: max token length = 93
0.00.604.684 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.676.138 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.676.150 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.681.612 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.619 I llama_new_context_with_model: n_batch    = 2048
0.00.681.619 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.620 I llama_new_context_with_model: flash_attn = 0
0.00.681.622 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.623 I llama_new_context_with_model: freq_scale = 1
0.00.711.110 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.150 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.260 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.619 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.625 I llama_new_context_with_model: graph nodes  = 601
0.00.712.625 I llama_new_context_with_model: graph splits = 1
0.00.712.641 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.967 I main: llama threadpool init, n_threads = 4
0.01.324.980 I 
0.01.325.088 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.325.091 I 
0.01.325.254 I sampler seed: 1258782904
0.01.325.265 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.272 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.325.273 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.274 I 
 seconally.

I cannot perform a task without a clear understanding of the problem. Therefore, I need to have a clear understanding of the problem before I can

0.14.945.456 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.35 tokens per second)
0.14.945.460 I llama_perf_context_print:        load time =    1322.06 ms
0.14.945.469 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.945.472 I llama_perf_context_print:        eval time =   13538.71 ms /    32 runs   (  423.08 ms per token,     2.36 tokens per second)
0.14.945.473 I llama_perf_context_print:       total time =   13620.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.868s
user	3m50.490s
sys	0m9.352s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3914 (c7181bd2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198479.44 ms
main:    total time = 198479.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 3914 (c7181bd2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.002.763 I main: load the model and apply lora adapter, if any
0.00.024.554 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.759 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.842 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.853 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.855 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.859 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.860 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.861 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.862 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.864 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.865 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.871 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.872 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.873 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.875 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.876 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.802 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.647 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.596 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.605 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.606 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.607 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.608 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.610 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.611 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.615 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.616 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.617 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.618 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.619 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.627 I llama_model_loader: - type  f32:   37 tensors
0.00.267.631 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.633 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.909 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.121 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.115 I llm_load_vocab: special tokens cache size = 5
0.00.601.577 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.646 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.650 I llm_load_print_meta: arch             = gemma
0.00.601.651 I llm_load_print_meta: vocab type       = SPM
0.00.601.651 I llm_load_print_meta: n_vocab          = 256000
0.00.601.653 I llm_load_print_meta: n_merges         = 0
0.00.601.654 I llm_load_print_meta: vocab_only       = 0
0.00.601.654 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.655 I llm_load_print_meta: n_embd           = 2048
0.00.601.655 I llm_load_print_meta: n_layer          = 18
0.00.601.719 I llm_load_print_meta: n_head           = 8
0.00.601.729 I llm_load_print_meta: n_head_kv        = 1
0.00.601.730 I llm_load_print_meta: n_rot            = 256
0.00.601.731 I llm_load_print_meta: n_swa            = 0
0.00.601.731 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.732 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.737 I llm_load_print_meta: n_gqa            = 8
0.00.601.741 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.747 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.750 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.751 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.752 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.756 I llm_load_print_meta: n_ff             = 16384
0.00.601.757 I llm_load_print_meta: n_expert         = 0
0.00.601.758 I llm_load_print_meta: n_expert_used    = 0
0.00.601.759 I llm_load_print_meta: causal attn      = 1
0.00.601.759 I llm_load_print_meta: pooling type     = 0
0.00.601.759 I llm_load_print_meta: rope type        = 2
0.00.601.760 I llm_load_print_meta: rope scaling     = linear
0.00.601.762 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.765 I llm_load_print_meta: freq_scale_train = 1
0.00.601.765 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.766 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.766 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.767 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.767 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.768 I llm_load_print_meta: model type       = 2B
0.00.601.768 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.601.769 I llm_load_print_meta: model params     = 2.51 B
0.00.601.770 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.601.770 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.790 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.791 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.792 I llm_load_print_meta: max token length = 93
0.00.601.960 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.884 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.662.894 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.662.895 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.662.896 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.662.896 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.662.897 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.668.522 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.530 I llama_new_context_with_model: n_batch    = 2048
0.00.668.530 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.531 I llama_new_context_with_model: flash_attn = 0
0.00.668.533 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.534 I llama_new_context_with_model: freq_scale = 1
0.00.696.839 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.884 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.997 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.374 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.379 I llama_new_context_with_model: graph nodes  = 601
0.00.698.380 I llama_new_context_with_model: graph splits = 1
0.00.698.396 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.276.817 I main: llama threadpool init, n_threads = 4
0.01.276.828 I 
0.01.276.933 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.276.937 I 
0.01.277.107 I sampler seed: 2540665884
0.01.277.117 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.125 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.277.128 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.129 I 
 effe a vita mundi.

The translation is:
"And there is life."

This is the opening line of Dante's Divine Comedy, a

0.12.188.050 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.11 tokens per second)
0.12.188.053 I llama_perf_context_print:        load time =    1273.97 ms
0.12.188.055 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.188.058 I llama_perf_context_print:        eval time =   10828.77 ms /    32 runs   (  338.40 ms per token,     2.96 tokens per second)
0.12.188.059 I llama_perf_context_print:       total time =   10911.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3914 (c7181bd2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198321.96 ms
main:    total time = 198321.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 3914 (c7181bd2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
0.00.025.155 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.264 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.283 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.288 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.294 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.298 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.300 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.302 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.304 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.314 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.327 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.332 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.334 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.336 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.741 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.083 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.090 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.091 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.092 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.093 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.095 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.096 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.100 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.101 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.109 I llama_model_loader: - type  f32:   37 tensors
0.00.269.113 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.113 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.490 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.699 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.711 I llm_load_vocab: special tokens cache size = 5
0.00.587.915 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.984 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.985 I llm_load_print_meta: arch             = gemma
0.00.587.986 I llm_load_print_meta: vocab type       = SPM
0.00.587.987 I llm_load_print_meta: n_vocab          = 256000
0.00.587.989 I llm_load_print_meta: n_merges         = 0
0.00.587.989 I llm_load_print_meta: vocab_only       = 0
0.00.587.989 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.990 I llm_load_print_meta: n_embd           = 2048
0.00.587.990 I llm_load_print_meta: n_layer          = 18
0.00.588.053 I llm_load_print_meta: n_head           = 8
0.00.588.060 I llm_load_print_meta: n_head_kv        = 1
0.00.588.061 I llm_load_print_meta: n_rot            = 256
0.00.588.061 I llm_load_print_meta: n_swa            = 0
0.00.588.061 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.062 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.066 I llm_load_print_meta: n_gqa            = 8
0.00.588.071 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.076 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.077 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.078 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.079 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.079 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.084 I llm_load_print_meta: n_ff             = 16384
0.00.588.085 I llm_load_print_meta: n_expert         = 0
0.00.588.085 I llm_load_print_meta: n_expert_used    = 0
0.00.588.085 I llm_load_print_meta: causal attn      = 1
0.00.588.085 I llm_load_print_meta: pooling type     = 0
0.00.588.086 I llm_load_print_meta: rope type        = 2
0.00.588.086 I llm_load_print_meta: rope scaling     = linear
0.00.588.088 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.088 I llm_load_print_meta: freq_scale_train = 1
0.00.588.089 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.089 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.089 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.090 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.090 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.091 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.091 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.092 I llm_load_print_meta: model type       = 2B
0.00.588.093 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.588.094 I llm_load_print_meta: model params     = 2.51 B
0.00.588.096 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.588.098 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.098 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.100 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.101 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.111 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.112 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.113 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.121 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.122 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.124 I llm_load_print_meta: max token length = 93
0.00.588.304 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.647.666 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.653.639 I llama_new_context_with_model: n_ctx      = 8192
0.00.653.646 I llama_new_context_with_model: n_batch    = 2048
0.00.653.647 I llama_new_context_with_model: n_ubatch   = 512
0.00.653.648 I llama_new_context_with_model: flash_attn = 0
0.00.653.650 I llama_new_context_with_model: freq_base  = 10000.0
0.00.653.651 I llama_new_context_with_model: freq_scale = 1
0.00.682.948 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.682.995 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.683.103 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.684.450 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.684.455 I llama_new_context_with_model: graph nodes  = 601
0.00.684.456 I llama_new_context_with_model: graph splits = 1
0.00.684.472 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.264.541 I main: llama threadpool init, n_threads = 4
0.01.264.553 I 
0.01.264.682 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.264.686 I 
0.01.264.860 I sampler seed: 3925334632
0.01.264.871 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.264.879 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.264.881 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.264.882 I 
 secon.png 400x200

**Answer the following questions based on the provided image.**

**1. What is the object in

0.12.282.921 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.32 tokens per second)
0.12.282.938 I llama_perf_context_print:        load time =    1261.63 ms
0.12.282.940 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.282.942 I llama_perf_context_print:        eval time =   10936.21 ms /    32 runs   (  341.76 ms per token,     2.93 tokens per second)
0.12.282.943 I llama_perf_context_print:       total time =   11018.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.151s
user	50m5.608s
sys	0m6.336s
