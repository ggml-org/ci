+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.617 I build: 4443 (c792dcf4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.816 I main: llama backend init
0.00.000.824 I main: load the model and apply lora adapter, if any
0.00.084.867 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.084.879 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.084.971 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.084.991 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.084.993 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.084.998 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.000 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.001 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.003 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.005 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.007 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.013 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.015 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.017 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.018 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.020 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.287.642 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.388.911 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.006 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.017 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.019 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.021 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.023 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.025 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.027 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.032 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.034 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.036 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.038 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.040 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.413.049 I llama_model_loader: - type  f32:   37 tensors
0.00.413.050 I llama_model_loader: - type q8_0:  127 tensors
0.00.668.040 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.787.156 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.788.091 I llm_load_vocab: special tokens cache size = 5
0.01.007.946 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.008.024 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.008.029 I llm_load_print_meta: arch             = gemma
0.01.008.029 I llm_load_print_meta: vocab type       = SPM
0.01.008.031 I llm_load_print_meta: n_vocab          = 256000
0.01.008.033 I llm_load_print_meta: n_merges         = 0
0.01.008.034 I llm_load_print_meta: vocab_only       = 0
0.01.008.034 I llm_load_print_meta: n_ctx_train      = 8192
0.01.008.035 I llm_load_print_meta: n_embd           = 2048
0.01.008.035 I llm_load_print_meta: n_layer          = 18
0.01.008.112 I llm_load_print_meta: n_head           = 8
0.01.008.122 I llm_load_print_meta: n_head_kv        = 1
0.01.008.123 I llm_load_print_meta: n_rot            = 256
0.01.008.124 I llm_load_print_meta: n_swa            = 0
0.01.008.124 I llm_load_print_meta: n_embd_head_k    = 256
0.01.008.125 I llm_load_print_meta: n_embd_head_v    = 256
0.01.008.130 I llm_load_print_meta: n_gqa            = 8
0.01.008.135 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.008.140 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.008.142 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.008.143 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.008.144 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.008.145 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.008.152 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.008.159 I llm_load_print_meta: n_ff             = 16384
0.01.008.160 I llm_load_print_meta: n_expert         = 0
0.01.008.161 I llm_load_print_meta: n_expert_used    = 0
0.01.008.161 I llm_load_print_meta: causal attn      = 1
0.01.008.161 I llm_load_print_meta: pooling type     = 0
0.01.008.162 I llm_load_print_meta: rope type        = 2
0.01.008.162 I llm_load_print_meta: rope scaling     = linear
0.01.008.164 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.008.165 I llm_load_print_meta: freq_scale_train = 1
0.01.008.167 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.008.168 I llm_load_print_meta: rope_finetuned   = unknown
0.01.008.168 I llm_load_print_meta: ssm_d_conv       = 0
0.01.008.169 I llm_load_print_meta: ssm_d_inner      = 0
0.01.008.169 I llm_load_print_meta: ssm_d_state      = 0
0.01.008.169 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.008.170 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.008.187 I llm_load_print_meta: model type       = 2B
0.01.008.189 I llm_load_print_meta: model ftype      = Q8_0
0.01.008.190 I llm_load_print_meta: model params     = 2.51 B
0.01.008.191 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.008.192 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.008.193 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.008.193 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.008.194 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.008.195 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.008.196 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.008.197 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.008.202 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.008.210 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.008.211 I llm_load_print_meta: max token length = 93
0.01.111.058 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.111.067 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.111.068 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.111.069 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.111.070 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.111.070 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.118.051 I llama_new_context_with_model: n_seq_max     = 1
0.01.118.056 I llama_new_context_with_model: n_ctx         = 4096
0.01.118.057 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.118.057 I llama_new_context_with_model: n_batch       = 2048
0.01.118.058 I llama_new_context_with_model: n_ubatch      = 512
0.01.118.058 I llama_new_context_with_model: flash_attn    = 0
0.01.118.060 I llama_new_context_with_model: freq_base     = 10000.0
0.01.118.061 I llama_new_context_with_model: freq_scale    = 1
0.01.118.062 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.118.144 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.132.259 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.132.298 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.132.418 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.135.953 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.135.957 I llama_new_context_with_model: graph nodes  = 601
0.01.135.958 I llama_new_context_with_model: graph splits = 1
0.01.135.983 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.135.986 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.753.238 I main: llama threadpool init, n_threads = 4
0.01.753.254 I 
0.01.753.374 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.753.378 I 
0.01.753.607 I sampler seed: 102984413
0.01.753.621 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.753.631 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.753.632 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.753.633 I 
 increamically, circling back to the beginning. [end of text]


0.05.999.799 I llama_perf_sampler_print:    sampling time =      15.67 ms /    11 runs   (    1.42 ms per token,   702.07 tokens per second)
0.05.999.802 I llama_perf_context_print:        load time =    1752.33 ms
0.05.999.804 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.999.806 I llama_perf_context_print:        eval time =    4218.79 ms /    10 runs   (  421.88 ms per token,     2.37 tokens per second)
0.05.999.807 I llama_perf_context_print:       total time =    4246.57 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4443 (c792dcf4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.085.744 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.861 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.886 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.892 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.898 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.899 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.901 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.903 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.905 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.906 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.914 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.918 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.920 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.921 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.923 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.507 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.389.357 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.384 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.394 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.396 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.397 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.399 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.401 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.403 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.408 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.410 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.412 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.414 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.415 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.413.424 I llama_model_loader: - type  f32:   37 tensors
0.00.413.426 I llama_model_loader: - type q8_0:  127 tensors
0.00.679.242 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.811.684 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.812.742 I llm_load_vocab: special tokens cache size = 5
0.01.030.399 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.030.481 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.030.486 I llm_load_print_meta: arch             = gemma
0.01.030.487 I llm_load_print_meta: vocab type       = SPM
0.01.030.488 I llm_load_print_meta: n_vocab          = 256000
0.01.030.490 I llm_load_print_meta: n_merges         = 0
0.01.030.490 I llm_load_print_meta: vocab_only       = 0
0.01.030.491 I llm_load_print_meta: n_ctx_train      = 8192
0.01.030.491 I llm_load_print_meta: n_embd           = 2048
0.01.030.492 I llm_load_print_meta: n_layer          = 18
0.01.030.571 I llm_load_print_meta: n_head           = 8
0.01.030.579 I llm_load_print_meta: n_head_kv        = 1
0.01.030.580 I llm_load_print_meta: n_rot            = 256
0.01.030.580 I llm_load_print_meta: n_swa            = 0
0.01.030.582 I llm_load_print_meta: n_embd_head_k    = 256
0.01.030.583 I llm_load_print_meta: n_embd_head_v    = 256
0.01.030.600 I llm_load_print_meta: n_gqa            = 8
0.01.030.605 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.030.622 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.030.627 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.030.629 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.030.629 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.030.630 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.030.631 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.030.637 I llm_load_print_meta: n_ff             = 16384
0.01.030.637 I llm_load_print_meta: n_expert         = 0
0.01.030.638 I llm_load_print_meta: n_expert_used    = 0
0.01.030.642 I llm_load_print_meta: causal attn      = 1
0.01.030.643 I llm_load_print_meta: pooling type     = 0
0.01.030.644 I llm_load_print_meta: rope type        = 2
0.01.030.644 I llm_load_print_meta: rope scaling     = linear
0.01.030.646 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.030.647 I llm_load_print_meta: freq_scale_train = 1
0.01.030.648 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.030.648 I llm_load_print_meta: rope_finetuned   = unknown
0.01.030.648 I llm_load_print_meta: ssm_d_conv       = 0
0.01.030.649 I llm_load_print_meta: ssm_d_inner      = 0
0.01.030.650 I llm_load_print_meta: ssm_d_state      = 0
0.01.030.650 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.030.651 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.030.654 I llm_load_print_meta: model type       = 2B
0.01.030.658 I llm_load_print_meta: model ftype      = Q8_0
0.01.030.663 I llm_load_print_meta: model params     = 2.51 B
0.01.030.665 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.030.665 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.030.673 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.030.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.030.674 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.030.675 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.030.675 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.030.677 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.030.684 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.030.686 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.030.686 I llm_load_print_meta: max token length = 93
0.01.130.466 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.137.343 I llama_new_context_with_model: n_seq_max     = 1
0.01.137.348 I llama_new_context_with_model: n_ctx         = 4096
0.01.137.349 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.137.349 I llama_new_context_with_model: n_batch       = 2048
0.01.137.349 I llama_new_context_with_model: n_ubatch      = 512
0.01.137.350 I llama_new_context_with_model: flash_attn    = 0
0.01.137.352 I llama_new_context_with_model: freq_base     = 10000.0
0.01.137.352 I llama_new_context_with_model: freq_scale    = 1
0.01.137.353 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.137.434 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.152.266 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.152.306 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.152.426 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.155.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.155.945 I llama_new_context_with_model: graph nodes  = 601
0.01.155.945 I llama_new_context_with_model: graph splits = 1
0.01.155.969 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.155.972 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.773.086 I main: llama threadpool init, n_threads = 4
0.01.773.103 I 
0.01.773.222 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.773.226 I 
0.01.773.465 I sampler seed: 4184888094
0.01.773.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.773.491 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.773.492 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.773.492 I 
 increasively.

I am so excited to finally be here!
I can't wait to experience all that this place has to offer.
I'

0.15.447.264 I llama_perf_sampler_print:    sampling time =      49.64 ms /    33 runs   (    1.50 ms per token,   664.73 tokens per second)
0.15.447.280 I llama_perf_context_print:        load time =    1772.12 ms
0.15.447.281 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.447.283 I llama_perf_context_print:        eval time =   13589.38 ms /    32 runs   (  424.67 ms per token,     2.35 tokens per second)
0.15.447.284 I llama_perf_context_print:       total time =   13674.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4443 (c792dcf4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.085.761 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.774 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.871 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.893 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.899 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.904 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.906 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.908 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.910 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.911 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.913 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.920 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.924 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.926 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.928 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.929 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.287.888 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.388.939 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.047 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.058 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.060 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.063 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.064 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.067 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.069 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.073 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.075 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.413.077 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.413.079 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.413.080 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.413.088 I llama_model_loader: - type  f32:   37 tensors
0.00.413.090 I llama_model_loader: - type q8_0:  127 tensors
0.00.662.501 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.787.129 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.788.061 I llm_load_vocab: special tokens cache size = 5
0.01.000.995 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.001.077 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.001.082 I llm_load_print_meta: arch             = gemma
0.01.001.082 I llm_load_print_meta: vocab type       = SPM
0.01.001.083 I llm_load_print_meta: n_vocab          = 256000
0.01.001.086 I llm_load_print_meta: n_merges         = 0
0.01.001.086 I llm_load_print_meta: vocab_only       = 0
0.01.001.086 I llm_load_print_meta: n_ctx_train      = 8192
0.01.001.087 I llm_load_print_meta: n_embd           = 2048
0.01.001.087 I llm_load_print_meta: n_layer          = 18
0.01.001.165 I llm_load_print_meta: n_head           = 8
0.01.001.172 I llm_load_print_meta: n_head_kv        = 1
0.01.001.173 I llm_load_print_meta: n_rot            = 256
0.01.001.173 I llm_load_print_meta: n_swa            = 0
0.01.001.174 I llm_load_print_meta: n_embd_head_k    = 256
0.01.001.174 I llm_load_print_meta: n_embd_head_v    = 256
0.01.001.179 I llm_load_print_meta: n_gqa            = 8
0.01.001.184 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.001.189 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.001.190 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.001.192 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.001.192 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.001.193 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.001.194 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.001.199 I llm_load_print_meta: n_ff             = 16384
0.01.001.199 I llm_load_print_meta: n_expert         = 0
0.01.001.200 I llm_load_print_meta: n_expert_used    = 0
0.01.001.201 I llm_load_print_meta: causal attn      = 1
0.01.001.201 I llm_load_print_meta: pooling type     = 0
0.01.001.202 I llm_load_print_meta: rope type        = 2
0.01.001.203 I llm_load_print_meta: rope scaling     = linear
0.01.001.204 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.001.206 I llm_load_print_meta: freq_scale_train = 1
0.01.001.206 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.001.207 I llm_load_print_meta: rope_finetuned   = unknown
0.01.001.207 I llm_load_print_meta: ssm_d_conv       = 0
0.01.001.212 I llm_load_print_meta: ssm_d_inner      = 0
0.01.001.212 I llm_load_print_meta: ssm_d_state      = 0
0.01.001.213 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.001.213 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.001.216 I llm_load_print_meta: model type       = 2B
0.01.001.218 I llm_load_print_meta: model ftype      = Q8_0
0.01.001.218 I llm_load_print_meta: model params     = 2.51 B
0.01.001.219 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.001.220 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.001.223 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.001.223 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.001.224 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.001.224 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.001.225 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.001.225 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.001.231 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.001.233 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.001.233 I llm_load_print_meta: max token length = 93
0.01.079.983 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.079.994 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.079.995 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.079.996 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.079.996 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.079.997 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.086.996 I llama_new_context_with_model: n_seq_max     = 1
0.01.087.001 I llama_new_context_with_model: n_ctx         = 4096
0.01.087.001 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.087.002 I llama_new_context_with_model: n_batch       = 2048
0.01.087.002 I llama_new_context_with_model: n_ubatch      = 512
0.01.087.002 I llama_new_context_with_model: flash_attn    = 0
0.01.087.005 I llama_new_context_with_model: freq_base     = 10000.0
0.01.087.005 I llama_new_context_with_model: freq_scale    = 1
0.01.087.006 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.087.086 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.101.367 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.101.409 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.101.530 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.105.087 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.105.091 I llama_new_context_with_model: graph nodes  = 601
0.01.105.091 I llama_new_context_with_model: graph splits = 1
0.01.105.116 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.105.119 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.716.498 I main: llama threadpool init, n_threads = 4
0.01.716.516 I 
0.01.716.638 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.716.642 I 
0.01.716.878 I sampler seed: 238342048
0.01.716.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.716.903 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.716.906 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.716.906 I 
 increasities into a complex philosophical and theological reflection on the nature of reality, existence, and the divine.

**Response:**

**The Interplay of Existence

0.15.235.865 I llama_perf_sampler_print:    sampling time =      49.61 ms /    33 runs   (    1.50 ms per token,   665.23 tokens per second)
0.15.235.890 I llama_perf_context_print:        load time =    1715.53 ms
0.15.235.892 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.235.894 I llama_perf_context_print:        eval time =   13434.77 ms /    32 runs   (  419.84 ms per token,     2.38 tokens per second)
0.15.235.895 I llama_perf_context_print:       total time =   13519.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 4443 (c792dcf4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.085.494 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.508 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.604 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.625 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.627 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.633 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.636 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.638 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.640 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.642 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.643 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.651 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.656 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.658 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.659 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.661 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.305.487 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.406.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.430.774 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.430.791 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.430.793 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.430.795 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.430.797 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.430.799 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.430.801 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.430.806 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.430.808 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.430.810 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.430.812 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.430.814 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.430.822 I llama_model_loader: - type  f32:   37 tensors
0.00.430.824 I llama_model_loader: - type q8_0:  127 tensors
0.00.704.136 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.824.323 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.825.243 I llm_load_vocab: special tokens cache size = 5
0.01.060.222 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.060.305 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.060.309 I llm_load_print_meta: arch             = gemma
0.01.060.310 I llm_load_print_meta: vocab type       = SPM
0.01.060.311 I llm_load_print_meta: n_vocab          = 256000
0.01.060.314 I llm_load_print_meta: n_merges         = 0
0.01.060.315 I llm_load_print_meta: vocab_only       = 0
0.01.060.315 I llm_load_print_meta: n_ctx_train      = 8192
0.01.060.316 I llm_load_print_meta: n_embd           = 2048
0.01.060.316 I llm_load_print_meta: n_layer          = 18
0.01.060.395 I llm_load_print_meta: n_head           = 8
0.01.060.406 I llm_load_print_meta: n_head_kv        = 1
0.01.060.407 I llm_load_print_meta: n_rot            = 256
0.01.060.407 I llm_load_print_meta: n_swa            = 0
0.01.060.407 I llm_load_print_meta: n_embd_head_k    = 256
0.01.060.408 I llm_load_print_meta: n_embd_head_v    = 256
0.01.060.413 I llm_load_print_meta: n_gqa            = 8
0.01.060.419 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.060.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.060.428 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.060.430 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.060.430 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.060.431 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.060.431 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.060.437 I llm_load_print_meta: n_ff             = 16384
0.01.060.438 I llm_load_print_meta: n_expert         = 0
0.01.060.438 I llm_load_print_meta: n_expert_used    = 0
0.01.060.439 I llm_load_print_meta: causal attn      = 1
0.01.060.439 I llm_load_print_meta: pooling type     = 0
0.01.060.440 I llm_load_print_meta: rope type        = 2
0.01.060.441 I llm_load_print_meta: rope scaling     = linear
0.01.060.442 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.060.443 I llm_load_print_meta: freq_scale_train = 1
0.01.060.443 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.060.443 I llm_load_print_meta: rope_finetuned   = unknown
0.01.060.444 I llm_load_print_meta: ssm_d_conv       = 0
0.01.060.444 I llm_load_print_meta: ssm_d_inner      = 0
0.01.060.445 I llm_load_print_meta: ssm_d_state      = 0
0.01.060.446 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.060.447 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.060.450 I llm_load_print_meta: model type       = 2B
0.01.060.452 I llm_load_print_meta: model ftype      = Q8_0
0.01.060.453 I llm_load_print_meta: model params     = 2.51 B
0.01.060.454 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.060.454 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.060.455 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.060.456 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.060.457 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.060.457 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.060.457 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.060.468 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.060.488 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.060.490 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.060.490 I llm_load_print_meta: max token length = 93
0.01.133.676 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.133.686 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.140.491 I llama_new_context_with_model: n_seq_max     = 1
0.01.140.496 I llama_new_context_with_model: n_ctx         = 4096
0.01.140.497 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.140.497 I llama_new_context_with_model: n_batch       = 2048
0.01.140.497 I llama_new_context_with_model: n_ubatch      = 512
0.01.140.498 I llama_new_context_with_model: flash_attn    = 0
0.01.140.500 I llama_new_context_with_model: freq_base     = 10000.0
0.01.140.501 I llama_new_context_with_model: freq_scale    = 1
0.01.140.501 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.140.583 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.154.427 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.154.465 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.154.595 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.157.794 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.157.799 I llama_new_context_with_model: graph nodes  = 601
0.01.157.799 I llama_new_context_with_model: graph splits = 1
0.01.157.823 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.157.826 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.770.947 I main: llama threadpool init, n_threads = 4
0.01.770.963 I 
0.01.771.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.771.087 I 
0.01.771.318 I sampler seed: 914515239
0.01.771.331 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.771.340 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.771.344 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.771.344 I 
 increamically with the size of the object. [end of text]


0.06.015.476 I llama_perf_sampler_print:    sampling time =      15.60 ms /    11 runs   (    1.42 ms per token,   705.26 tokens per second)
0.06.015.479 I llama_perf_context_print:        load time =    1770.04 ms
0.06.015.480 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.015.481 I llama_perf_context_print:        eval time =    4216.34 ms /    10 runs   (  421.63 ms per token,     2.37 tokens per second)
0.06.015.495 I llama_perf_context_print:       total time =    4244.54 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m53.777s
user	2m38.658s
sys	0m9.269s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4443 (c792dcf4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187524.35 ms
main:    total time = 187524.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4443 (c792dcf4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.085.388 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.401 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.501 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.521 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.527 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.533 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.535 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.536 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.538 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.540 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.542 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.550 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.551 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.553 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.555 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.310.186 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.630 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.435.668 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.435.678 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.435.680 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.435.682 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.435.684 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.435.686 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.435.687 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.435.692 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.435.694 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.435.696 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.435.698 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.435.699 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.435.701 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.435.710 I llama_model_loader: - type  f32:   37 tensors
0.00.435.712 I llama_model_loader: - type q4_K:  108 tensors
0.00.435.713 I llama_model_loader: - type q6_K:   19 tensors
0.00.715.548 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.840.663 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.841.605 I llm_load_vocab: special tokens cache size = 5
0.01.056.453 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.056.533 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.056.538 I llm_load_print_meta: arch             = gemma
0.01.056.538 I llm_load_print_meta: vocab type       = SPM
0.01.056.539 I llm_load_print_meta: n_vocab          = 256000
0.01.056.541 I llm_load_print_meta: n_merges         = 0
0.01.056.542 I llm_load_print_meta: vocab_only       = 0
0.01.056.542 I llm_load_print_meta: n_ctx_train      = 8192
0.01.056.542 I llm_load_print_meta: n_embd           = 2048
0.01.056.543 I llm_load_print_meta: n_layer          = 18
0.01.056.625 I llm_load_print_meta: n_head           = 8
0.01.056.635 I llm_load_print_meta: n_head_kv        = 1
0.01.056.636 I llm_load_print_meta: n_rot            = 256
0.01.056.636 I llm_load_print_meta: n_swa            = 0
0.01.056.636 I llm_load_print_meta: n_embd_head_k    = 256
0.01.056.637 I llm_load_print_meta: n_embd_head_v    = 256
0.01.056.642 I llm_load_print_meta: n_gqa            = 8
0.01.056.646 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.056.651 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.056.653 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.056.654 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.056.655 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.056.655 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.056.655 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.056.660 I llm_load_print_meta: n_ff             = 16384
0.01.056.661 I llm_load_print_meta: n_expert         = 0
0.01.056.662 I llm_load_print_meta: n_expert_used    = 0
0.01.056.662 I llm_load_print_meta: causal attn      = 1
0.01.056.663 I llm_load_print_meta: pooling type     = 0
0.01.056.663 I llm_load_print_meta: rope type        = 2
0.01.056.664 I llm_load_print_meta: rope scaling     = linear
0.01.056.666 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.056.666 I llm_load_print_meta: freq_scale_train = 1
0.01.056.667 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.056.670 I llm_load_print_meta: rope_finetuned   = unknown
0.01.056.670 I llm_load_print_meta: ssm_d_conv       = 0
0.01.056.671 I llm_load_print_meta: ssm_d_inner      = 0
0.01.056.671 I llm_load_print_meta: ssm_d_state      = 0
0.01.056.671 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.056.672 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.056.674 I llm_load_print_meta: model type       = 2B
0.01.056.676 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.056.677 I llm_load_print_meta: model params     = 2.51 B
0.01.056.695 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.056.696 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.056.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.056.697 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.056.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.056.699 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.056.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.056.701 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.056.708 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.056.710 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.056.711 I llm_load_print_meta: max token length = 93
0.01.118.513 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.118.526 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.118.527 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.118.527 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.118.528 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.118.529 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.125.493 I llama_new_context_with_model: n_seq_max     = 1
0.01.125.498 I llama_new_context_with_model: n_ctx         = 4096
0.01.125.499 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.125.499 I llama_new_context_with_model: n_batch       = 2048
0.01.125.500 I llama_new_context_with_model: n_ubatch      = 512
0.01.125.500 I llama_new_context_with_model: flash_attn    = 0
0.01.125.502 I llama_new_context_with_model: freq_base     = 10000.0
0.01.125.503 I llama_new_context_with_model: freq_scale    = 1
0.01.125.504 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.125.586 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.139.560 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.139.600 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.139.722 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.143.237 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.143.255 I llama_new_context_with_model: graph nodes  = 601
0.01.143.256 I llama_new_context_with_model: graph splits = 1
0.01.143.279 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.143.282 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.722.637 I main: llama threadpool init, n_threads = 4
0.01.722.652 I 
0.01.722.778 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.722.782 I 
0.01.723.020 I sampler seed: 1126109013
0.01.723.035 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.723.047 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.723.048 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.723.048 I 
 squaRED!

I'm not sure if this is the right question to ask, but I'm curious to know what people think about the phrase "

0.12.840.937 I llama_perf_sampler_print:    sampling time =      49.61 ms /    33 runs   (    1.50 ms per token,   665.23 tokens per second)
0.12.840.940 I llama_perf_context_print:        load time =    1721.72 ms
0.12.840.942 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.840.943 I llama_perf_context_print:        eval time =   11033.15 ms /    32 runs   (  344.79 ms per token,     2.90 tokens per second)
0.12.840.944 I llama_perf_context_print:       total time =   11118.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4443 (c792dcf4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186002.05 ms
main:    total time = 186002.05 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4443 (c792dcf4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.086.452 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.086.576 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.600 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.602 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.631 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.640 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.642 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.644 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.646 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.647 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.657 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.660 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.662 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.663 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.309.596 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.410.498 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.434.600 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.434.612 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.434.614 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.434.616 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.434.618 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.434.620 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.434.622 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.434.627 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.434.629 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.434.631 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.434.639 I llama_model_loader: - type  f32:   37 tensors
0.00.434.641 I llama_model_loader: - type q4_K:  108 tensors
0.00.434.642 I llama_model_loader: - type q6_K:   19 tensors
0.00.715.512 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.843.480 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.844.453 I llm_load_vocab: special tokens cache size = 5
0.01.052.128 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.052.212 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.052.219 I llm_load_print_meta: arch             = gemma
0.01.052.220 I llm_load_print_meta: vocab type       = SPM
0.01.052.221 I llm_load_print_meta: n_vocab          = 256000
0.01.052.224 I llm_load_print_meta: n_merges         = 0
0.01.052.225 I llm_load_print_meta: vocab_only       = 0
0.01.052.225 I llm_load_print_meta: n_ctx_train      = 8192
0.01.052.235 I llm_load_print_meta: n_embd           = 2048
0.01.052.244 I llm_load_print_meta: n_layer          = 18
0.01.052.323 I llm_load_print_meta: n_head           = 8
0.01.052.340 I llm_load_print_meta: n_head_kv        = 1
0.01.052.342 I llm_load_print_meta: n_rot            = 256
0.01.052.342 I llm_load_print_meta: n_swa            = 0
0.01.052.343 I llm_load_print_meta: n_embd_head_k    = 256
0.01.052.344 I llm_load_print_meta: n_embd_head_v    = 256
0.01.052.349 I llm_load_print_meta: n_gqa            = 8
0.01.052.354 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.052.361 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.052.368 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.052.369 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.052.370 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.052.370 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.052.375 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.052.381 I llm_load_print_meta: n_ff             = 16384
0.01.052.384 I llm_load_print_meta: n_expert         = 0
0.01.052.385 I llm_load_print_meta: n_expert_used    = 0
0.01.052.385 I llm_load_print_meta: causal attn      = 1
0.01.052.385 I llm_load_print_meta: pooling type     = 0
0.01.052.386 I llm_load_print_meta: rope type        = 2
0.01.052.386 I llm_load_print_meta: rope scaling     = linear
0.01.052.388 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.052.389 I llm_load_print_meta: freq_scale_train = 1
0.01.052.389 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.052.389 I llm_load_print_meta: rope_finetuned   = unknown
0.01.052.389 I llm_load_print_meta: ssm_d_conv       = 0
0.01.052.390 I llm_load_print_meta: ssm_d_inner      = 0
0.01.052.390 I llm_load_print_meta: ssm_d_state      = 0
0.01.052.390 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.052.391 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.052.394 I llm_load_print_meta: model type       = 2B
0.01.052.395 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.052.396 I llm_load_print_meta: model params     = 2.51 B
0.01.052.397 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.052.398 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.052.399 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.052.399 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.052.400 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.052.400 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.052.401 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.052.401 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.052.408 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.052.409 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.052.410 I llm_load_print_meta: max token length = 93
0.01.111.211 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.118.195 I llama_new_context_with_model: n_seq_max     = 1
0.01.118.203 I llama_new_context_with_model: n_ctx         = 4096
0.01.118.203 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.118.204 I llama_new_context_with_model: n_batch       = 2048
0.01.118.204 I llama_new_context_with_model: n_ubatch      = 512
0.01.118.204 I llama_new_context_with_model: flash_attn    = 0
0.01.118.207 I llama_new_context_with_model: freq_base     = 10000.0
0.01.118.208 I llama_new_context_with_model: freq_scale    = 1
0.01.118.209 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.118.303 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.134.510 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.134.555 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.134.678 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.138.254 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.138.259 I llama_new_context_with_model: graph nodes  = 601
0.01.138.260 I llama_new_context_with_model: graph splits = 1
0.01.138.285 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.138.288 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.717.164 I main: llama threadpool init, n_threads = 4
0.01.717.180 I 
0.01.717.322 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.717.331 I 
0.01.717.566 I sampler seed: 6565823
0.01.717.580 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.717.590 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.717.593 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.717.594 I 
 increasities in the workplace.

**Causes of Workplace Sexual Harassment:**

* Power imbalances
* Gender inequality
* Lack of communication
* Microaggressions

0.12.839.531 I llama_perf_sampler_print:    sampling time =      49.53 ms /    33 runs   (    1.50 ms per token,   666.25 tokens per second)
0.12.839.535 I llama_perf_context_print:        load time =    1716.23 ms
0.12.839.536 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.839.560 I llama_perf_context_print:        eval time =   11037.91 ms /    32 runs   (  344.93 ms per token,     2.90 tokens per second)
0.12.839.561 I llama_perf_context_print:       total time =   11122.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.453s
user	46m54.028s
sys	0m6.420s
