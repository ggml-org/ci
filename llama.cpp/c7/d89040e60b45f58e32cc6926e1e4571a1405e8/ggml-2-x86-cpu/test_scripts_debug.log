+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 3930 (c7d89040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.646 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.853 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.937 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.948 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.952 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.953 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.954 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.966 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.975 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.984 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.985 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.986 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.987 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.988 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.024 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.210 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.133 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.141 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.145 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.146 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.147 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.151 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.152 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.153 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.154 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.155 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.165 I llama_model_loader: - type  f32:   37 tensors
0.00.269.169 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.486 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.987 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.032 I llm_load_vocab: special tokens cache size = 5
0.00.605.412 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.482 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.483 I llm_load_print_meta: arch             = gemma
0.00.605.483 I llm_load_print_meta: vocab type       = SPM
0.00.605.484 I llm_load_print_meta: n_vocab          = 256000
0.00.605.487 I llm_load_print_meta: n_merges         = 0
0.00.605.487 I llm_load_print_meta: vocab_only       = 0
0.00.605.488 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.488 I llm_load_print_meta: n_embd           = 2048
0.00.605.488 I llm_load_print_meta: n_layer          = 18
0.00.605.555 I llm_load_print_meta: n_head           = 8
0.00.605.562 I llm_load_print_meta: n_head_kv        = 1
0.00.605.562 I llm_load_print_meta: n_rot            = 256
0.00.605.563 I llm_load_print_meta: n_swa            = 0
0.00.605.564 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.564 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.569 I llm_load_print_meta: n_gqa            = 8
0.00.605.574 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.580 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.581 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.583 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.583 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.583 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.585 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.590 I llm_load_print_meta: n_ff             = 16384
0.00.605.591 I llm_load_print_meta: n_expert         = 0
0.00.605.591 I llm_load_print_meta: n_expert_used    = 0
0.00.605.592 I llm_load_print_meta: causal attn      = 1
0.00.605.593 I llm_load_print_meta: pooling type     = 0
0.00.605.593 I llm_load_print_meta: rope type        = 2
0.00.605.594 I llm_load_print_meta: rope scaling     = linear
0.00.605.596 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.602 I llm_load_print_meta: freq_scale_train = 1
0.00.605.603 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.603 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.603 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.604 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.615 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.634 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.636 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.636 I llm_load_print_meta: model type       = 2B
0.00.605.638 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.639 I llm_load_print_meta: model params     = 2.51 B
0.00.605.640 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.640 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.641 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.642 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.642 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.643 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.644 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.644 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.651 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.652 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.653 I llm_load_print_meta: max token length = 93
0.00.605.820 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.706.655 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.706.666 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.706.667 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.706.668 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.706.668 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.706.670 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.712.450 I llama_new_context_with_model: n_ctx      = 8192
0.00.712.458 I llama_new_context_with_model: n_batch    = 2048
0.00.712.459 I llama_new_context_with_model: n_ubatch   = 512
0.00.712.459 I llama_new_context_with_model: flash_attn = 0
0.00.712.462 I llama_new_context_with_model: freq_base  = 10000.0
0.00.712.463 I llama_new_context_with_model: freq_scale = 1
0.00.742.290 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.742.332 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.742.449 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.865 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.870 I llama_new_context_with_model: graph nodes  = 601
0.00.743.871 I llama_new_context_with_model: graph splits = 1
0.00.743.887 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.637 I main: llama threadpool init, n_threads = 4
0.01.357.648 I 
0.01.357.753 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.757 I 
0.01.357.926 I sampler seed: 2511437868
0.01.357.936 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.942 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.357.942 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.952 I 
 increasities.

I do not know the context, so I am unable to determine if this is a request for help or a joke. [end of text]


0.13.665.287 I llama_perf_sampler_print:    sampling time =      43.59 ms /    30 runs   (    1.45 ms per token,   688.25 tokens per second)
0.13.665.290 I llama_perf_context_print:        load time =    1354.75 ms
0.13.665.291 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.665.293 I llama_perf_context_print:        eval time =   12234.42 ms /    29 runs   (  421.88 ms per token,     2.37 tokens per second)
0.13.665.294 I llama_perf_context_print:       total time =   12307.66 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 3930 (c7d89040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.735 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.827 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.842 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.846 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.847 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.859 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.860 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.861 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.862 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.863 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.126 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.801 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.581 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.591 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.592 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.593 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.594 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.596 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.597 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.601 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.602 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.603 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.604 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.606 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.614 I llama_model_loader: - type  f32:   37 tensors
0.00.268.619 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.704 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.422 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.479 I llm_load_vocab: special tokens cache size = 5
0.00.604.521 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.589 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.589 I llm_load_print_meta: arch             = gemma
0.00.604.590 I llm_load_print_meta: vocab type       = SPM
0.00.604.591 I llm_load_print_meta: n_vocab          = 256000
0.00.604.593 I llm_load_print_meta: n_merges         = 0
0.00.604.594 I llm_load_print_meta: vocab_only       = 0
0.00.604.594 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.594 I llm_load_print_meta: n_embd           = 2048
0.00.604.595 I llm_load_print_meta: n_layer          = 18
0.00.604.657 I llm_load_print_meta: n_head           = 8
0.00.604.663 I llm_load_print_meta: n_head_kv        = 1
0.00.604.664 I llm_load_print_meta: n_rot            = 256
0.00.604.664 I llm_load_print_meta: n_swa            = 0
0.00.604.665 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.665 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.670 I llm_load_print_meta: n_gqa            = 8
0.00.604.674 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.679 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.680 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.682 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.682 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.683 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.688 I llm_load_print_meta: n_ff             = 16384
0.00.604.688 I llm_load_print_meta: n_expert         = 0
0.00.604.689 I llm_load_print_meta: n_expert_used    = 0
0.00.604.689 I llm_load_print_meta: causal attn      = 1
0.00.604.689 I llm_load_print_meta: pooling type     = 0
0.00.604.691 I llm_load_print_meta: rope type        = 2
0.00.604.691 I llm_load_print_meta: rope scaling     = linear
0.00.604.693 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.694 I llm_load_print_meta: freq_scale_train = 1
0.00.604.694 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.695 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.695 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.705 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.706 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.706 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.706 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.707 I llm_load_print_meta: model type       = 2B
0.00.604.708 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.709 I llm_load_print_meta: model params     = 2.51 B
0.00.604.710 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.710 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.711 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.711 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.712 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.723 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.726 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.727 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.733 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.734 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.735 I llm_load_print_meta: max token length = 93
0.00.604.896 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.698.090 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.703.784 I llama_new_context_with_model: n_ctx      = 8192
0.00.703.792 I llama_new_context_with_model: n_batch    = 2048
0.00.703.793 I llama_new_context_with_model: n_ubatch   = 512
0.00.703.793 I llama_new_context_with_model: flash_attn = 0
0.00.703.796 I llama_new_context_with_model: freq_base  = 10000.0
0.00.703.797 I llama_new_context_with_model: freq_scale = 1
0.00.733.345 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.391 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.733.504 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.882 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.734.887 I llama_new_context_with_model: graph nodes  = 601
0.00.734.887 I llama_new_context_with_model: graph splits = 1
0.00.734.903 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.345 I main: llama threadpool init, n_threads = 4
0.01.347.357 I 
0.01.347.459 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.463 I 
0.01.347.625 I sampler seed: 168867986
0.01.347.636 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.643 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.347.644 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.644 I 
 increasities.

I'm not sure how to answer this question. The question is asking me to write something that is sexually suggestive and inappropriate. I am

0.14.958.577 I llama_perf_sampler_print:    sampling time =      48.43 ms /    33 runs   (    1.47 ms per token,   681.35 tokens per second)
0.14.958.581 I llama_perf_context_print:        load time =    1344.50 ms
0.14.958.583 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.958.585 I llama_perf_context_print:        eval time =   13530.39 ms /    32 runs   (  422.82 ms per token,     2.37 tokens per second)
0.14.958.587 I llama_perf_context_print:       total time =   13611.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 3930 (c7d89040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.808 I main: llama backend init
0.00.002.742 I main: load the model and apply lora adapter, if any
0.00.024.081 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.275 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.360 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.370 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.372 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.376 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.378 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.381 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.381 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.387 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.388 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.390 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.391 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.392 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.429 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.037 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.044 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.046 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.047 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.048 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.049 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.050 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.054 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.055 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.056 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.057 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.058 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.065 I llama_model_loader: - type  f32:   37 tensors
0.00.267.069 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.309 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.196 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.200 I llm_load_vocab: special tokens cache size = 5
0.00.598.361 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.431 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.436 I llm_load_print_meta: arch             = gemma
0.00.598.436 I llm_load_print_meta: vocab type       = SPM
0.00.598.437 I llm_load_print_meta: n_vocab          = 256000
0.00.598.439 I llm_load_print_meta: n_merges         = 0
0.00.598.440 I llm_load_print_meta: vocab_only       = 0
0.00.598.440 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.441 I llm_load_print_meta: n_embd           = 2048
0.00.598.441 I llm_load_print_meta: n_layer          = 18
0.00.598.506 I llm_load_print_meta: n_head           = 8
0.00.598.517 I llm_load_print_meta: n_head_kv        = 1
0.00.598.518 I llm_load_print_meta: n_rot            = 256
0.00.598.519 I llm_load_print_meta: n_swa            = 0
0.00.598.519 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.521 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.526 I llm_load_print_meta: n_gqa            = 8
0.00.598.531 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.538 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.540 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.542 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.543 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.543 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.544 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.549 I llm_load_print_meta: n_ff             = 16384
0.00.598.550 I llm_load_print_meta: n_expert         = 0
0.00.598.550 I llm_load_print_meta: n_expert_used    = 0
0.00.598.551 I llm_load_print_meta: causal attn      = 1
0.00.598.551 I llm_load_print_meta: pooling type     = 0
0.00.598.551 I llm_load_print_meta: rope type        = 2
0.00.598.554 I llm_load_print_meta: rope scaling     = linear
0.00.598.556 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.557 I llm_load_print_meta: freq_scale_train = 1
0.00.598.557 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.557 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.558 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.558 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.558 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.559 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.559 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.560 I llm_load_print_meta: model type       = 2B
0.00.598.561 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.561 I llm_load_print_meta: model params     = 2.51 B
0.00.598.563 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.565 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.566 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.566 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.567 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.567 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.568 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.568 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.575 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.576 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.577 I llm_load_print_meta: max token length = 93
0.00.598.740 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.677.104 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.677.112 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.677.113 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.677.114 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.677.114 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.677.115 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.682.586 I llama_new_context_with_model: n_ctx      = 8192
0.00.682.594 I llama_new_context_with_model: n_batch    = 2048
0.00.682.594 I llama_new_context_with_model: n_ubatch   = 512
0.00.682.595 I llama_new_context_with_model: flash_attn = 0
0.00.682.597 I llama_new_context_with_model: freq_base  = 10000.0
0.00.682.597 I llama_new_context_with_model: freq_scale = 1
0.00.711.275 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.321 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.431 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.783 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.788 I llama_new_context_with_model: graph nodes  = 601
0.00.712.788 I llama_new_context_with_model: graph splits = 1
0.00.712.803 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.361.298 I main: llama threadpool init, n_threads = 4
0.01.361.310 I 
0.01.361.416 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.420 I 
0.01.361.584 I sampler seed: 1370175744
0.01.361.596 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.603 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.361.604 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.605 I 
 increasities, the company has decided to implement a compensation structure based on performance metrics.

a) Explain the advantages and disadvantages of this performance-based compensation structure

0.14.953.990 I llama_perf_sampler_print:    sampling time =      47.63 ms /    33 runs   (    1.44 ms per token,   692.86 tokens per second)
0.14.953.994 I llama_perf_context_print:        load time =    1358.47 ms
0.14.954.006 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.954.009 I llama_perf_context_print:        eval time =   13512.76 ms /    32 runs   (  422.27 ms per token,     2.37 tokens per second)
0.14.954.010 I llama_perf_context_print:       total time =   13592.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 3930 (c7d89040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.024.482 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.672 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.758 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.769 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.770 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.774 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.775 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.777 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.778 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.779 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.780 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.787 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.788 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.789 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.790 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.791 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.509 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.262 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.241 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.251 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.252 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.254 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.255 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.256 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.257 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.261 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.262 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.263 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.264 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.265 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.274 I llama_model_loader: - type  f32:   37 tensors
0.00.269.278 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.123 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.260 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.371 I llm_load_vocab: special tokens cache size = 5
0.00.612.347 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.415 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.416 I llm_load_print_meta: arch             = gemma
0.00.612.417 I llm_load_print_meta: vocab type       = SPM
0.00.612.418 I llm_load_print_meta: n_vocab          = 256000
0.00.612.421 I llm_load_print_meta: n_merges         = 0
0.00.612.421 I llm_load_print_meta: vocab_only       = 0
0.00.612.422 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.422 I llm_load_print_meta: n_embd           = 2048
0.00.612.422 I llm_load_print_meta: n_layer          = 18
0.00.612.486 I llm_load_print_meta: n_head           = 8
0.00.612.493 I llm_load_print_meta: n_head_kv        = 1
0.00.612.494 I llm_load_print_meta: n_rot            = 256
0.00.612.496 I llm_load_print_meta: n_swa            = 0
0.00.612.496 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.497 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.502 I llm_load_print_meta: n_gqa            = 8
0.00.612.506 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.511 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.513 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.514 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.515 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.515 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.516 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.521 I llm_load_print_meta: n_ff             = 16384
0.00.612.522 I llm_load_print_meta: n_expert         = 0
0.00.612.523 I llm_load_print_meta: n_expert_used    = 0
0.00.612.523 I llm_load_print_meta: causal attn      = 1
0.00.612.523 I llm_load_print_meta: pooling type     = 0
0.00.612.524 I llm_load_print_meta: rope type        = 2
0.00.612.525 I llm_load_print_meta: rope scaling     = linear
0.00.612.527 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.527 I llm_load_print_meta: freq_scale_train = 1
0.00.612.528 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.528 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.529 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.529 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.529 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.530 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.531 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.531 I llm_load_print_meta: model type       = 2B
0.00.612.533 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.533 I llm_load_print_meta: model params     = 2.51 B
0.00.612.534 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.535 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.536 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.537 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.537 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.549 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.549 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.562 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.568 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.571 I llm_load_print_meta: max token length = 93
0.00.612.737 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.837 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.683.846 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.689.391 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.398 I llama_new_context_with_model: n_batch    = 2048
0.00.689.399 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.399 I llama_new_context_with_model: flash_attn = 0
0.00.689.402 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.403 I llama_new_context_with_model: freq_scale = 1
0.00.718.177 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.219 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.330 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.719.694 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.719.698 I llama_new_context_with_model: graph nodes  = 601
0.00.719.699 I llama_new_context_with_model: graph splits = 1
0.00.719.714 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.828 I main: llama threadpool init, n_threads = 4
0.01.332.838 I 
0.01.332.942 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.945 I 
0.01.333.109 I sampler seed: 2997661650
0.01.333.121 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.128 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.333.130 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.132 I 
 increasities and the potential for future action. [end of text]


0.05.554.418 I llama_perf_sampler_print:    sampling time =      15.15 ms /    11 runs   (    1.38 ms per token,   726.12 tokens per second)
0.05.554.422 I llama_perf_context_print:        load time =    1329.95 ms
0.05.554.423 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.554.426 I llama_perf_context_print:        eval time =    4195.16 ms /    10 runs   (  419.52 ms per token,     2.38 tokens per second)
0.05.554.428 I llama_perf_context_print:       total time =    4221.60 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.725s
user	3m7.771s
sys	0m9.372s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3930 (c7d89040)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199963.35 ms
main:    total time = 199963.35 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3930 (c7d89040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.927 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.120 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.205 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.224 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.226 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.229 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.231 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.242 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.243 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.250 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.251 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.257 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.914 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.285 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.231 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.240 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.241 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.242 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.243 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.244 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.247 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.258 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.260 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.261 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.262 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.270 I llama_model_loader: - type  f32:   37 tensors
0.00.268.273 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.274 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.230 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.314 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.492.319 I llm_load_vocab: special tokens cache size = 5
0.00.587.450 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.526 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.527 I llm_load_print_meta: arch             = gemma
0.00.587.527 I llm_load_print_meta: vocab type       = SPM
0.00.587.528 I llm_load_print_meta: n_vocab          = 256000
0.00.587.530 I llm_load_print_meta: n_merges         = 0
0.00.587.531 I llm_load_print_meta: vocab_only       = 0
0.00.587.531 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.532 I llm_load_print_meta: n_embd           = 2048
0.00.587.532 I llm_load_print_meta: n_layer          = 18
0.00.587.596 I llm_load_print_meta: n_head           = 8
0.00.587.604 I llm_load_print_meta: n_head_kv        = 1
0.00.587.605 I llm_load_print_meta: n_rot            = 256
0.00.587.605 I llm_load_print_meta: n_swa            = 0
0.00.587.606 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.606 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.612 I llm_load_print_meta: n_gqa            = 8
0.00.587.617 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.623 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.624 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.626 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.627 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.627 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.627 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.632 I llm_load_print_meta: n_ff             = 16384
0.00.587.633 I llm_load_print_meta: n_expert         = 0
0.00.587.633 I llm_load_print_meta: n_expert_used    = 0
0.00.587.633 I llm_load_print_meta: causal attn      = 1
0.00.587.638 I llm_load_print_meta: pooling type     = 0
0.00.587.638 I llm_load_print_meta: rope type        = 2
0.00.587.639 I llm_load_print_meta: rope scaling     = linear
0.00.587.640 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.641 I llm_load_print_meta: freq_scale_train = 1
0.00.587.642 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.642 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.642 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.643 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.643 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.644 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.644 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.645 I llm_load_print_meta: model type       = 2B
0.00.587.646 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.587.646 I llm_load_print_meta: model params     = 2.51 B
0.00.587.647 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.587.648 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.648 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.649 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.650 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.650 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.651 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.657 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.659 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.659 I llm_load_print_meta: max token length = 93
0.00.587.829 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.646.762 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.646.774 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.646.775 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.646.776 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.646.776 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.646.777 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.652.477 I llama_new_context_with_model: n_ctx      = 8192
0.00.652.484 I llama_new_context_with_model: n_batch    = 2048
0.00.652.485 I llama_new_context_with_model: n_ubatch   = 512
0.00.652.485 I llama_new_context_with_model: flash_attn = 0
0.00.652.488 I llama_new_context_with_model: freq_base  = 10000.0
0.00.652.489 I llama_new_context_with_model: freq_scale = 1
0.00.680.978 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.681.021 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.681.143 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.682.532 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.682.538 I llama_new_context_with_model: graph nodes  = 601
0.00.682.538 I llama_new_context_with_model: graph splits = 1
0.00.682.553 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.373 I main: llama threadpool init, n_threads = 4
0.01.266.385 I 
0.01.266.492 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.266.496 I 
0.01.266.663 I sampler seed: 2449668170
0.01.266.673 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.266.679 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.266.680 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.266.681 I 
 increasities are the result of?

a) Incomplete dominance
b) Polygenic inheritance
c) Mendelian inheritance
d) Incomplete penetrance

Answer

0.12.203.507 I llama_perf_sampler_print:    sampling time =      47.55 ms /    33 runs   (    1.44 ms per token,   694.06 tokens per second)
0.12.203.510 I llama_perf_context_print:        load time =    1263.51 ms
0.12.203.512 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.203.513 I llama_perf_context_print:        eval time =   10857.36 ms /    32 runs   (  339.29 ms per token,     2.95 tokens per second)
0.12.203.514 I llama_perf_context_print:       total time =   10937.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3930 (c7d89040)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198967.93 ms
main:    total time = 198967.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 3930 (c7d89040) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.902 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.996 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.011 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.016 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.020 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.022 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.023 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.024 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.025 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.026 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.032 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.034 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.036 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.037 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.791 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.627 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.579 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.589 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.590 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.592 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.593 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.594 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.595 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.599 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.600 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.625 I llama_model_loader: - type  f32:   37 tensors
0.00.269.630 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.631 I llama_model_loader: - type q6_K:   19 tensors
0.00.461.254 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.876 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.881 I llm_load_vocab: special tokens cache size = 5
0.00.616.848 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.918 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.919 I llm_load_print_meta: arch             = gemma
0.00.616.919 I llm_load_print_meta: vocab type       = SPM
0.00.616.920 I llm_load_print_meta: n_vocab          = 256000
0.00.616.923 I llm_load_print_meta: n_merges         = 0
0.00.616.923 I llm_load_print_meta: vocab_only       = 0
0.00.616.924 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.924 I llm_load_print_meta: n_embd           = 2048
0.00.616.924 I llm_load_print_meta: n_layer          = 18
0.00.616.992 I llm_load_print_meta: n_head           = 8
0.00.617.000 I llm_load_print_meta: n_head_kv        = 1
0.00.617.000 I llm_load_print_meta: n_rot            = 256
0.00.617.001 I llm_load_print_meta: n_swa            = 0
0.00.617.001 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.001 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.006 I llm_load_print_meta: n_gqa            = 8
0.00.617.011 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.017 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.021 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.022 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.023 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.023 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.024 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.029 I llm_load_print_meta: n_ff             = 16384
0.00.617.029 I llm_load_print_meta: n_expert         = 0
0.00.617.029 I llm_load_print_meta: n_expert_used    = 0
0.00.617.030 I llm_load_print_meta: causal attn      = 1
0.00.617.030 I llm_load_print_meta: pooling type     = 0
0.00.617.030 I llm_load_print_meta: rope type        = 2
0.00.617.031 I llm_load_print_meta: rope scaling     = linear
0.00.617.032 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.033 I llm_load_print_meta: freq_scale_train = 1
0.00.617.034 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.035 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.035 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.035 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.037 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.037 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.038 I llm_load_print_meta: model type       = 2B
0.00.617.039 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.040 I llm_load_print_meta: model params     = 2.51 B
0.00.617.041 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.042 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.042 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.042 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.043 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.044 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.044 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.044 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.050 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.052 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.053 I llm_load_print_meta: max token length = 93
0.00.617.222 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.843 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.680.558 I llama_new_context_with_model: n_ctx      = 8192
0.00.680.566 I llama_new_context_with_model: n_batch    = 2048
0.00.680.567 I llama_new_context_with_model: n_ubatch   = 512
0.00.680.567 I llama_new_context_with_model: flash_attn = 0
0.00.680.571 I llama_new_context_with_model: freq_base  = 10000.0
0.00.680.571 I llama_new_context_with_model: freq_scale = 1
0.00.712.287 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.712.334 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.712.451 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.713.845 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.713.850 I llama_new_context_with_model: graph nodes  = 601
0.00.713.851 I llama_new_context_with_model: graph splits = 1
0.00.713.867 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.548 I main: llama threadpool init, n_threads = 4
0.01.294.559 I 
0.01.294.666 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.670 I 
0.01.294.838 I sampler seed: 1384931573
0.01.294.848 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.855 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.294.856 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.856 I 
 increasities, and other sexually transmitted infections can cause a variety of physical and emotional problems.

**Physical Problems:**

* Painful or painful intercourse
*

0.12.337.177 I llama_perf_sampler_print:    sampling time =      47.65 ms /    33 runs   (    1.44 ms per token,   692.52 tokens per second)
0.12.337.194 I llama_perf_context_print:        load time =    1291.65 ms
0.12.337.196 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.337.197 I llama_perf_context_print:        eval time =   10962.95 ms /    32 runs   (  342.59 ms per token,     2.92 tokens per second)
0.12.337.198 I llama_perf_context_print:       total time =   11042.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.322s
user	50m16.109s
sys	0m6.409s
