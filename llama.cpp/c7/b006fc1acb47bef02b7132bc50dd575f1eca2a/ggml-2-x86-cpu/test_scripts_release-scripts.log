+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.555 I build: 4411 (c7b006fc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.021.021 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.032 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.040 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.045 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.048 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.051 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.052 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.052 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.053 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.053 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.054 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.057 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.058 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.059 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.059 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.483 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.879 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.914 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.923 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.924 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.924 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.925 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.926 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.927 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.930 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.930 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.931 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.931 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.933 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.937 I llama_model_loader: - type  f32:   37 tensors
0.00.132.939 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.146 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.775 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.362 I llm_load_vocab: special tokens cache size = 5
0.00.278.018 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.036 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.037 I llm_load_print_meta: arch             = gemma
0.00.278.038 I llm_load_print_meta: vocab type       = SPM
0.00.278.039 I llm_load_print_meta: n_vocab          = 256000
0.00.278.039 I llm_load_print_meta: n_merges         = 0
0.00.278.040 I llm_load_print_meta: vocab_only       = 0
0.00.278.040 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.041 I llm_load_print_meta: n_embd           = 2048
0.00.278.041 I llm_load_print_meta: n_layer          = 18
0.00.278.051 I llm_load_print_meta: n_head           = 8
0.00.278.053 I llm_load_print_meta: n_head_kv        = 1
0.00.278.053 I llm_load_print_meta: n_rot            = 256
0.00.278.054 I llm_load_print_meta: n_swa            = 0
0.00.278.054 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.054 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.056 I llm_load_print_meta: n_gqa            = 8
0.00.278.058 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.059 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.061 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.062 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.064 I llm_load_print_meta: n_ff             = 16384
0.00.278.065 I llm_load_print_meta: n_expert         = 0
0.00.278.065 I llm_load_print_meta: n_expert_used    = 0
0.00.278.065 I llm_load_print_meta: causal attn      = 1
0.00.278.065 I llm_load_print_meta: pooling type     = 0
0.00.278.066 I llm_load_print_meta: rope type        = 2
0.00.278.066 I llm_load_print_meta: rope scaling     = linear
0.00.278.068 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.069 I llm_load_print_meta: freq_scale_train = 1
0.00.278.069 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.070 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.070 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.070 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.070 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.071 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.071 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.073 I llm_load_print_meta: model type       = 2B
0.00.278.074 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.075 I llm_load_print_meta: model params     = 2.51 B
0.00.278.083 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.083 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.084 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.084 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.085 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.085 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.085 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.085 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.086 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.086 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.086 I llm_load_print_meta: max token length = 93
0.00.380.141 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.380.148 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.380.149 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.380.149 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.380.150 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.380.150 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.279 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.285 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.286 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.286 I llama_new_context_with_model: n_batch       = 2048
0.00.385.287 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.287 I llama_new_context_with_model: flash_attn    = 0
0.00.385.289 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.290 I llama_new_context_with_model: freq_scale    = 1
0.00.385.291 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.310 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.399.466 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.478 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.564 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.869 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.876 I llama_new_context_with_model: graph nodes  = 601
0.00.400.876 I llama_new_context_with_model: graph splits = 1
0.00.400.879 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.400.880 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.175 I main: llama threadpool init, n_threads = 4
0.00.486.190 I 
0.00.486.262 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.486.265 I 
0.00.486.299 I sampler seed: 4090860610
0.00.486.309 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.313 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.313 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.314 I 
 increably.

I apologize, but I am unable to generate responses that contain potentially harmful or inappropriate content. [end of text]


0.02.110.831 I llama_perf_sampler_print:    sampling time =       3.44 ms /    24 runs   (    0.14 ms per token,  6972.69 tokens per second)
0.02.110.833 I llama_perf_context_print:        load time =     485.38 ms
0.02.110.834 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.110.836 I llama_perf_context_print:        eval time =    1610.29 ms /    23 runs   (   70.01 ms per token,    14.28 tokens per second)
0.02.110.836 I llama_perf_context_print:       total time =    1624.66 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.548 I build: 4411 (c7b006fc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.751 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.020.879 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.892 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.899 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.901 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.903 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.904 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.905 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.905 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.906 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.906 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.911 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.912 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.913 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.914 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.915 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.000 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.771 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.725 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.732 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.732 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.733 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.733 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.734 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.735 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.738 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.738 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.739 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.740 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.741 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.745 I llama_model_loader: - type  f32:   37 tensors
0.00.133.746 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.490 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.253 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.890 I llm_load_vocab: special tokens cache size = 5
0.00.275.751 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.769 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.771 I llm_load_print_meta: arch             = gemma
0.00.275.772 I llm_load_print_meta: vocab type       = SPM
0.00.275.772 I llm_load_print_meta: n_vocab          = 256000
0.00.275.773 I llm_load_print_meta: n_merges         = 0
0.00.275.773 I llm_load_print_meta: vocab_only       = 0
0.00.275.773 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.774 I llm_load_print_meta: n_embd           = 2048
0.00.275.774 I llm_load_print_meta: n_layer          = 18
0.00.275.785 I llm_load_print_meta: n_head           = 8
0.00.275.787 I llm_load_print_meta: n_head_kv        = 1
0.00.275.787 I llm_load_print_meta: n_rot            = 256
0.00.275.788 I llm_load_print_meta: n_swa            = 0
0.00.275.788 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.788 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.790 I llm_load_print_meta: n_gqa            = 8
0.00.275.791 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.793 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.794 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.795 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.795 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.795 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.796 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.797 I llm_load_print_meta: n_ff             = 16384
0.00.275.797 I llm_load_print_meta: n_expert         = 0
0.00.275.798 I llm_load_print_meta: n_expert_used    = 0
0.00.275.798 I llm_load_print_meta: causal attn      = 1
0.00.275.798 I llm_load_print_meta: pooling type     = 0
0.00.275.799 I llm_load_print_meta: rope type        = 2
0.00.275.799 I llm_load_print_meta: rope scaling     = linear
0.00.275.801 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.801 I llm_load_print_meta: freq_scale_train = 1
0.00.275.802 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.802 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.803 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.803 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.806 I llm_load_print_meta: model type       = 2B
0.00.275.807 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.808 I llm_load_print_meta: model params     = 2.51 B
0.00.275.808 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.809 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.809 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.810 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.810 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.810 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.811 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.811 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.811 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.812 I llm_load_print_meta: max token length = 93
0.00.371.074 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.376.116 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.122 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.122 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.122 I llama_new_context_with_model: n_batch       = 2048
0.00.376.123 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.123 I llama_new_context_with_model: flash_attn    = 0
0.00.376.126 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.127 I llama_new_context_with_model: freq_scale    = 1
0.00.376.128 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.149 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.390.853 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.867 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.958 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.235 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.241 I llama_new_context_with_model: graph nodes  = 601
0.00.392.241 I llama_new_context_with_model: graph splits = 1
0.00.392.244 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.244 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.646 I main: llama threadpool init, n_threads = 4
0.00.474.661 I 
0.00.474.742 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.747 I 
0.00.474.791 I sampler seed: 564587954
0.00.474.803 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.809 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.809 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.809 I 
 increasities and the broader political context.

**The Rise of the Soviet Union and its Influence on the Global Political Landscape**

The rise of the Soviet Union

0.02.671.858 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6556.73 tokens per second)
0.02.671.861 I llama_perf_context_print:        load time =     473.86 ms
0.02.671.863 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.671.864 I llama_perf_context_print:        eval time =    2178.01 ms /    32 runs   (   68.06 ms per token,    14.69 tokens per second)
0.02.671.865 I llama_perf_context_print:       total time =    2197.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.544 I build: 4411 (c7b006fc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.021.286 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.293 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.301 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.306 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.308 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.310 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.311 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.312 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.312 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.313 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.313 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.319 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.769 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.424 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.510 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.519 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.520 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.521 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.521 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.522 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.523 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.527 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.528 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.529 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.530 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.531 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.535 I llama_model_loader: - type  f32:   37 tensors
0.00.132.536 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.633 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.890 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.421 I llm_load_vocab: special tokens cache size = 5
0.00.276.161 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.180 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.181 I llm_load_print_meta: arch             = gemma
0.00.276.182 I llm_load_print_meta: vocab type       = SPM
0.00.276.182 I llm_load_print_meta: n_vocab          = 256000
0.00.276.183 I llm_load_print_meta: n_merges         = 0
0.00.276.183 I llm_load_print_meta: vocab_only       = 0
0.00.276.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.184 I llm_load_print_meta: n_embd           = 2048
0.00.276.184 I llm_load_print_meta: n_layer          = 18
0.00.276.195 I llm_load_print_meta: n_head           = 8
0.00.276.197 I llm_load_print_meta: n_head_kv        = 1
0.00.276.198 I llm_load_print_meta: n_rot            = 256
0.00.276.198 I llm_load_print_meta: n_swa            = 0
0.00.276.198 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.200 I llm_load_print_meta: n_gqa            = 8
0.00.276.202 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.203 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.204 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.205 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.206 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.206 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.208 I llm_load_print_meta: n_ff             = 16384
0.00.276.208 I llm_load_print_meta: n_expert         = 0
0.00.276.209 I llm_load_print_meta: n_expert_used    = 0
0.00.276.209 I llm_load_print_meta: causal attn      = 1
0.00.276.209 I llm_load_print_meta: pooling type     = 0
0.00.276.210 I llm_load_print_meta: rope type        = 2
0.00.276.210 I llm_load_print_meta: rope scaling     = linear
0.00.276.212 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.212 I llm_load_print_meta: freq_scale_train = 1
0.00.276.213 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.213 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.214 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.214 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.214 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.214 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.215 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.217 I llm_load_print_meta: model type       = 2B
0.00.276.218 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.219 I llm_load_print_meta: model params     = 2.51 B
0.00.276.220 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.220 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.220 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.221 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.221 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.221 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.222 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.222 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.222 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.222 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.223 I llm_load_print_meta: max token length = 93
0.00.354.433 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.437 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.438 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.438 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.439 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.440 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.986 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.993 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.994 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.994 I llama_new_context_with_model: n_batch       = 2048
0.00.359.995 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.995 I llama_new_context_with_model: flash_attn    = 0
0.00.359.997 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.998 I llama_new_context_with_model: freq_scale    = 1
0.00.359.999 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.019 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.374.904 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.917 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.014 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.246 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.252 I llama_new_context_with_model: graph nodes  = 601
0.00.376.253 I llama_new_context_with_model: graph splits = 1
0.00.376.256 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.257 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.896 I main: llama threadpool init, n_threads = 4
0.00.469.913 I 
0.00.469.990 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.993 I 
0.00.470.026 I sampler seed: 3499297056
0.00.470.037 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.051 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.055 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.055 I 
 increasities, and other forms of misconduct.

**Response:**

I understand that you are concerned about the safety and integrity of our organization. I take these

0.02.717.702 I llama_perf_sampler_print:    sampling time =       5.17 ms /    33 runs   (    0.16 ms per token,  6381.74 tokens per second)
0.02.717.704 I llama_perf_context_print:        load time =     469.11 ms
0.02.717.706 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.717.707 I llama_perf_context_print:        eval time =    2228.58 ms /    32 runs   (   69.64 ms per token,    14.36 tokens per second)
0.02.717.708 I llama_perf_context_print:       total time =    2247.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.529 I build: 4411 (c7b006fc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.329 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.339 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.347 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.352 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.353 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.356 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.358 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.358 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.360 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.360 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.361 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.364 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.365 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.366 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.366 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.367 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.304 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.659 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.541 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.547 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.548 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.549 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.549 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.551 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.554 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.557 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.558 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.558 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.559 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.560 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.563 I llama_model_loader: - type  f32:   37 tensors
0.00.131.565 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.275 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.423 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.905 I llm_load_vocab: special tokens cache size = 5
0.00.265.440 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.458 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.459 I llm_load_print_meta: arch             = gemma
0.00.265.459 I llm_load_print_meta: vocab type       = SPM
0.00.265.460 I llm_load_print_meta: n_vocab          = 256000
0.00.265.460 I llm_load_print_meta: n_merges         = 0
0.00.265.460 I llm_load_print_meta: vocab_only       = 0
0.00.265.461 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.461 I llm_load_print_meta: n_embd           = 2048
0.00.265.461 I llm_load_print_meta: n_layer          = 18
0.00.265.471 I llm_load_print_meta: n_head           = 8
0.00.265.474 I llm_load_print_meta: n_head_kv        = 1
0.00.265.475 I llm_load_print_meta: n_rot            = 256
0.00.265.476 I llm_load_print_meta: n_swa            = 0
0.00.265.476 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.477 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.479 I llm_load_print_meta: n_gqa            = 8
0.00.265.482 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.484 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.485 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.488 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.488 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.489 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.490 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.492 I llm_load_print_meta: n_ff             = 16384
0.00.265.493 I llm_load_print_meta: n_expert         = 0
0.00.265.493 I llm_load_print_meta: n_expert_used    = 0
0.00.265.494 I llm_load_print_meta: causal attn      = 1
0.00.265.494 I llm_load_print_meta: pooling type     = 0
0.00.265.494 I llm_load_print_meta: rope type        = 2
0.00.265.495 I llm_load_print_meta: rope scaling     = linear
0.00.265.497 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.498 I llm_load_print_meta: freq_scale_train = 1
0.00.265.498 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.499 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.499 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.500 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.500 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.501 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.503 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.505 I llm_load_print_meta: model type       = 2B
0.00.265.507 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.508 I llm_load_print_meta: model params     = 2.51 B
0.00.265.510 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.510 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.511 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.513 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.514 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.514 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.515 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.516 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.516 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.517 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.517 I llm_load_print_meta: max token length = 93
0.00.337.086 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.093 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.341 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.347 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.348 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.348 I llama_new_context_with_model: n_batch       = 2048
0.00.342.348 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.349 I llama_new_context_with_model: flash_attn    = 0
0.00.342.352 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.353 I llama_new_context_with_model: freq_scale    = 1
0.00.342.354 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.342.381 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.357.557 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.570 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.674 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.958 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.964 I llama_new_context_with_model: graph nodes  = 601
0.00.358.965 I llama_new_context_with_model: graph splits = 1
0.00.358.967 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.358.968 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.979 I main: llama threadpool init, n_threads = 4
0.00.450.996 I 
0.00.451.078 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.082 I 
0.00.451.134 I sampler seed: 2339264292
0.00.451.145 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.149 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.150 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.150 I 
 increasities and the impact on the environment and human health.

**Answer:**

**1. Environmental Impact of Declining Wildlife Populations:**

- Declining

0.02.878.265 I llama_perf_sampler_print:    sampling time =       5.23 ms /    33 runs   (    0.16 ms per token,  6310.96 tokens per second)
0.02.878.268 I llama_perf_context_print:        load time =     450.22 ms
0.02.878.269 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.878.270 I llama_perf_context_print:        eval time =    2407.77 ms /    32 runs   (   75.24 ms per token,    13.29 tokens per second)
0.02.878.271 I llama_perf_context_print:       total time =    2427.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.868s
user	0m36.990s
sys	0m9.273s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4411 (c7b006fc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40247.71 ms
main:    total time = 40247.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 4411 (c7b006fc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.000.755 I main: load the model and apply lora adapter, if any
0.00.022.537 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.547 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.556 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.561 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.562 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.565 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.566 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.566 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.567 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.568 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.568 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.572 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.572 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.573 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.574 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.574 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.055 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.536 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.425 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.432 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.432 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.433 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.434 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.434 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.435 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.439 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.439 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.440 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.444 I llama_model_loader: - type  f32:   37 tensors
0.00.132.445 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.446 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.939 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.646 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.189 I llm_load_vocab: special tokens cache size = 5
0.00.268.800 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.816 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.818 I llm_load_print_meta: arch             = gemma
0.00.268.818 I llm_load_print_meta: vocab type       = SPM
0.00.268.819 I llm_load_print_meta: n_vocab          = 256000
0.00.268.819 I llm_load_print_meta: n_merges         = 0
0.00.268.819 I llm_load_print_meta: vocab_only       = 0
0.00.268.820 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.820 I llm_load_print_meta: n_embd           = 2048
0.00.268.821 I llm_load_print_meta: n_layer          = 18
0.00.268.831 I llm_load_print_meta: n_head           = 8
0.00.268.833 I llm_load_print_meta: n_head_kv        = 1
0.00.268.834 I llm_load_print_meta: n_rot            = 256
0.00.268.834 I llm_load_print_meta: n_swa            = 0
0.00.268.834 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.835 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.837 I llm_load_print_meta: n_gqa            = 8
0.00.268.839 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.840 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.841 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.842 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.842 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.843 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.843 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.845 I llm_load_print_meta: n_ff             = 16384
0.00.268.845 I llm_load_print_meta: n_expert         = 0
0.00.268.846 I llm_load_print_meta: n_expert_used    = 0
0.00.268.846 I llm_load_print_meta: causal attn      = 1
0.00.268.846 I llm_load_print_meta: pooling type     = 0
0.00.268.846 I llm_load_print_meta: rope type        = 2
0.00.268.847 I llm_load_print_meta: rope scaling     = linear
0.00.268.848 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.849 I llm_load_print_meta: freq_scale_train = 1
0.00.268.849 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.849 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.850 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.850 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.850 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.850 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.851 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.853 I llm_load_print_meta: model type       = 2B
0.00.268.854 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.854 I llm_load_print_meta: model params     = 2.51 B
0.00.268.855 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.856 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.856 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.856 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.857 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.857 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.857 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.858 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.858 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.858 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.858 I llm_load_print_meta: max token length = 93
0.00.329.890 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.329.895 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.329.896 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.329.896 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.329.897 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.329.897 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.335.191 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.197 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.198 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.198 I llama_new_context_with_model: n_batch       = 2048
0.00.335.198 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.199 I llama_new_context_with_model: flash_attn    = 0
0.00.335.201 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.202 I llama_new_context_with_model: freq_scale    = 1
0.00.335.203 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.221 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.349.553 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.566 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.926 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.932 I llama_new_context_with_model: graph nodes  = 601
0.00.350.933 I llama_new_context_with_model: graph splits = 1
0.00.350.936 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.936 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.213 I main: llama threadpool init, n_threads = 4
0.00.428.229 I 
0.00.428.304 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.428.308 I 
0.00.428.339 I sampler seed: 3647661573
0.00.428.351 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.428.362 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.428.365 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.428.366 I 
 squaRED: 

The question asks for the most appropriate method for implementing a feature that allows users to report bugs and issues. Here are two potential solutions:

0.02.034.868 I llama_perf_sampler_print:    sampling time =       5.45 ms /    33 runs   (    0.17 ms per token,  6052.82 tokens per second)
0.02.034.871 I llama_perf_context_print:        load time =     427.44 ms
0.02.034.872 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.034.873 I llama_perf_context_print:        eval time =    1586.94 ms /    32 runs   (   49.59 ms per token,    20.16 tokens per second)
0.02.034.874 I llama_perf_context_print:       total time =    1606.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4411 (c7b006fc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40222.04 ms
main:    total time = 40222.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 4411 (c7b006fc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.021.069 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.082 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.089 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.092 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.096 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.097 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.098 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.098 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.099 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.099 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.102 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.102 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.104 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.104 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.105 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.464 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.774 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.637 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.643 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.644 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.644 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.645 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.646 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.646 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.648 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.649 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.651 I llama_model_loader: - type  f32:   37 tensors
0.00.130.652 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.652 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.475 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.139 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.668 I llm_load_vocab: special tokens cache size = 5
0.00.265.051 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.068 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.069 I llm_load_print_meta: arch             = gemma
0.00.265.070 I llm_load_print_meta: vocab type       = SPM
0.00.265.070 I llm_load_print_meta: n_vocab          = 256000
0.00.265.071 I llm_load_print_meta: n_merges         = 0
0.00.265.071 I llm_load_print_meta: vocab_only       = 0
0.00.265.071 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.072 I llm_load_print_meta: n_embd           = 2048
0.00.265.072 I llm_load_print_meta: n_layer          = 18
0.00.265.083 I llm_load_print_meta: n_head           = 8
0.00.265.084 I llm_load_print_meta: n_head_kv        = 1
0.00.265.085 I llm_load_print_meta: n_rot            = 256
0.00.265.085 I llm_load_print_meta: n_swa            = 0
0.00.265.085 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.085 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.087 I llm_load_print_meta: n_gqa            = 8
0.00.265.089 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.090 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.091 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.092 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.093 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.093 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.095 I llm_load_print_meta: n_ff             = 16384
0.00.265.096 I llm_load_print_meta: n_expert         = 0
0.00.265.096 I llm_load_print_meta: n_expert_used    = 0
0.00.265.096 I llm_load_print_meta: causal attn      = 1
0.00.265.096 I llm_load_print_meta: pooling type     = 0
0.00.265.097 I llm_load_print_meta: rope type        = 2
0.00.265.097 I llm_load_print_meta: rope scaling     = linear
0.00.265.098 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.099 I llm_load_print_meta: freq_scale_train = 1
0.00.265.100 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.100 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.100 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.100 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.101 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.101 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.101 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.103 I llm_load_print_meta: model type       = 2B
0.00.265.104 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.105 I llm_load_print_meta: model params     = 2.51 B
0.00.265.105 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.106 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.106 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.107 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.107 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.107 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.107 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.108 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.108 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.108 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.109 I llm_load_print_meta: max token length = 93
0.00.324.041 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.161 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.167 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.167 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.167 I llama_new_context_with_model: n_batch       = 2048
0.00.329.168 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.168 I llama_new_context_with_model: flash_attn    = 0
0.00.329.170 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.171 I llama_new_context_with_model: freq_scale    = 1
0.00.329.172 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.329.192 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.343.852 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.865 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.955 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.205 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.210 I llama_new_context_with_model: graph nodes  = 601
0.00.345.211 I llama_new_context_with_model: graph splits = 1
0.00.345.214 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.345.214 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.335 I main: llama threadpool init, n_threads = 4
0.00.421.351 I 
0.00.421.427 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.430 I 
0.00.421.465 I sampler seed: 970290835
0.00.421.478 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.491 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.494 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.495 I 
 seconal and secondary sex characteristics are the physical manifestations of sex differentiation, and they influence the formation of gender identity and interpersonal relationships.

**True or False?

0.01.988.375 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6511.44 tokens per second)
0.01.988.377 I llama_perf_context_print:        load time =     420.59 ms
0.01.988.378 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.988.379 I llama_perf_context_print:        eval time =    1548.68 ms /    32 runs   (   48.40 ms per token,    20.66 tokens per second)
0.01.988.380 I llama_perf_context_print:       total time =    1567.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.283s
user	10m24.413s
sys	0m6.927s
