+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 4028 (6a066b99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.001.138 I main: load the model and apply lora adapter, if any
0.00.023.968 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.979 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.079 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.092 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.093 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.100 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.104 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.105 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.106 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.107 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.108 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.116 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.118 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.120 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.121 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.170 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.458 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.899 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.911 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.912 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.914 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.916 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.917 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.921 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.922 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.923 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.924 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.925 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.934 I llama_model_loader: - type  f32:   37 tensors
0.00.269.937 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.866 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.539.138 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.540.096 I llm_load_vocab: special tokens cache size = 5
0.00.635.059 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.131 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.132 I llm_load_print_meta: arch             = gemma
0.00.635.133 I llm_load_print_meta: vocab type       = SPM
0.00.635.134 I llm_load_print_meta: n_vocab          = 256000
0.00.635.137 I llm_load_print_meta: n_merges         = 0
0.00.635.138 I llm_load_print_meta: vocab_only       = 0
0.00.635.138 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.139 I llm_load_print_meta: n_embd           = 2048
0.00.635.139 I llm_load_print_meta: n_layer          = 18
0.00.635.213 I llm_load_print_meta: n_head           = 8
0.00.635.220 I llm_load_print_meta: n_head_kv        = 1
0.00.635.220 I llm_load_print_meta: n_rot            = 256
0.00.635.221 I llm_load_print_meta: n_swa            = 0
0.00.635.221 I llm_load_print_meta: n_embd_head_k    = 256
0.00.635.221 I llm_load_print_meta: n_embd_head_v    = 256
0.00.635.226 I llm_load_print_meta: n_gqa            = 8
0.00.635.231 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.635.236 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.635.237 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.635.238 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.635.239 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.635.239 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.635.240 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.635.246 I llm_load_print_meta: n_ff             = 16384
0.00.635.247 I llm_load_print_meta: n_expert         = 0
0.00.635.247 I llm_load_print_meta: n_expert_used    = 0
0.00.635.249 I llm_load_print_meta: causal attn      = 1
0.00.635.249 I llm_load_print_meta: pooling type     = 0
0.00.635.250 I llm_load_print_meta: rope type        = 2
0.00.635.251 I llm_load_print_meta: rope scaling     = linear
0.00.635.253 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.635.254 I llm_load_print_meta: freq_scale_train = 1
0.00.635.254 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.635.255 I llm_load_print_meta: rope_finetuned   = unknown
0.00.635.255 I llm_load_print_meta: ssm_d_conv       = 0
0.00.635.267 I llm_load_print_meta: ssm_d_inner      = 0
0.00.635.273 I llm_load_print_meta: ssm_d_state      = 0
0.00.635.273 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.635.273 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.635.274 I llm_load_print_meta: model type       = 2B
0.00.635.276 I llm_load_print_meta: model ftype      = Q8_0
0.00.635.276 I llm_load_print_meta: model params     = 2.51 B
0.00.635.286 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.635.287 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.287 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.289 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.289 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.290 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.291 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.292 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.299 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.300 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.301 I llm_load_print_meta: max token length = 93
0.00.736.226 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.736.237 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.736.238 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.736.239 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.736.239 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.736.240 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.742.389 I llama_new_context_with_model: n_seq_max     = 1
0.00.742.400 I llama_new_context_with_model: n_ctx         = 4096
0.00.742.400 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.742.401 I llama_new_context_with_model: n_batch       = 2048
0.00.742.401 I llama_new_context_with_model: n_ubatch      = 512
0.00.742.402 I llama_new_context_with_model: flash_attn    = 0
0.00.742.405 I llama_new_context_with_model: freq_base     = 10000.0
0.00.742.406 I llama_new_context_with_model: freq_scale    = 1
0.00.742.407 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.760.210 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.760.251 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.760.371 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.762.909 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.762.913 I llama_new_context_with_model: graph nodes  = 601
0.00.762.913 I llama_new_context_with_model: graph splits = 1
0.00.762.938 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.373.611 I main: llama threadpool init, n_threads = 4
0.01.373.624 I 
0.01.373.733 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.373.737 I 
0.01.373.968 I sampler seed: 1427342413
0.01.373.981 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.373.987 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.373.991 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.373.991 I 
 increasities, a playful and suggestive song about a woman's body.

**Response:**

I am unable to provide any assistance or generate content of that

0.14.918.953 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.75 tokens per second)
0.14.918.968 I llama_perf_context_print:        load time =    1372.36 ms
0.14.918.970 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.918.972 I llama_perf_context_print:        eval time =   13453.78 ms /    32 runs   (  420.43 ms per token,     2.38 tokens per second)
0.14.918.974 I llama_perf_context_print:       total time =   13545.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 4028 (6a066b99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.001.159 I main: load the model and apply lora adapter, if any
0.00.024.007 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.113 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.130 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.135 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.141 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.142 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.143 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.145 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.147 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.148 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.158 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.162 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.163 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.164 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.165 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.475 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.323 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.732 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.742 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.743 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.744 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.745 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.746 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.747 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.752 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.753 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.754 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.755 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.756 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.765 I llama_model_loader: - type  f32:   37 tensors
0.00.268.767 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.551 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.685 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.724 I llm_load_vocab: special tokens cache size = 5
0.00.623.678 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.751 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.752 I llm_load_print_meta: arch             = gemma
0.00.623.753 I llm_load_print_meta: vocab type       = SPM
0.00.623.753 I llm_load_print_meta: n_vocab          = 256000
0.00.623.756 I llm_load_print_meta: n_merges         = 0
0.00.623.756 I llm_load_print_meta: vocab_only       = 0
0.00.623.757 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.757 I llm_load_print_meta: n_embd           = 2048
0.00.623.757 I llm_load_print_meta: n_layer          = 18
0.00.623.822 I llm_load_print_meta: n_head           = 8
0.00.623.829 I llm_load_print_meta: n_head_kv        = 1
0.00.623.830 I llm_load_print_meta: n_rot            = 256
0.00.623.830 I llm_load_print_meta: n_swa            = 0
0.00.623.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.835 I llm_load_print_meta: n_gqa            = 8
0.00.623.840 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.845 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.846 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.847 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.848 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.848 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.849 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.853 I llm_load_print_meta: n_ff             = 16384
0.00.623.854 I llm_load_print_meta: n_expert         = 0
0.00.623.854 I llm_load_print_meta: n_expert_used    = 0
0.00.623.855 I llm_load_print_meta: causal attn      = 1
0.00.623.855 I llm_load_print_meta: pooling type     = 0
0.00.623.855 I llm_load_print_meta: rope type        = 2
0.00.623.856 I llm_load_print_meta: rope scaling     = linear
0.00.623.857 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.858 I llm_load_print_meta: freq_scale_train = 1
0.00.623.858 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.859 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.859 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.859 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.860 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.860 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.860 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.861 I llm_load_print_meta: model type       = 2B
0.00.623.862 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.862 I llm_load_print_meta: model params     = 2.51 B
0.00.623.871 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.872 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.873 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.893 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.894 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.895 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.895 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.896 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.903 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.911 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.912 I llm_load_print_meta: max token length = 93
0.00.723.223 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.729.452 I llama_new_context_with_model: n_seq_max     = 1
0.00.729.459 I llama_new_context_with_model: n_ctx         = 4096
0.00.729.459 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.729.460 I llama_new_context_with_model: n_batch       = 2048
0.00.729.460 I llama_new_context_with_model: n_ubatch      = 512
0.00.729.460 I llama_new_context_with_model: flash_attn    = 0
0.00.729.463 I llama_new_context_with_model: freq_base     = 10000.0
0.00.729.463 I llama_new_context_with_model: freq_scale    = 1
0.00.729.464 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.746.729 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.746.773 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.746.900 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.466 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.749.470 I llama_new_context_with_model: graph nodes  = 601
0.00.749.471 I llama_new_context_with_model: graph splits = 1
0.00.749.495 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.980 I main: llama threadpool init, n_threads = 4
0.01.359.993 I 
0.01.360.118 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.360.122 I 
0.01.360.370 I sampler seed: 860745896
0.01.360.382 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.390 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.360.391 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.403 I 
 increably, and then tumbled over the edge of the Earth. [end of text]


0.07.314.651 I llama_perf_sampler_print:    sampling time =      21.61 ms /    15 runs   (    1.44 ms per token,   694.16 tokens per second)
0.07.314.653 I llama_perf_context_print:        load time =    1358.71 ms
0.07.314.667 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.314.669 I llama_perf_context_print:        eval time =    5913.95 ms /    14 runs   (  422.43 ms per token,     2.37 tokens per second)
0.07.314.670 I llama_perf_context_print:       total time =    5954.68 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4028 (6a066b99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.001.133 I main: load the model and apply lora adapter, if any
0.00.023.901 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.916 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.014 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.027 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.028 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.033 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.037 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.038 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.039 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.040 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.041 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.050 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.052 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.053 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.054 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.055 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.741 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.978 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.989 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.990 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.991 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.992 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.993 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.994 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.999 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.000 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.002 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.002 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.004 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.012 I llama_model_loader: - type  f32:   37 tensors
0.00.269.015 I llama_model_loader: - type q8_0:  127 tensors
0.00.475.764 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.547.061 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.548.042 I llm_load_vocab: special tokens cache size = 5
0.00.642.306 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.642.378 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.642.382 I llm_load_print_meta: arch             = gemma
0.00.642.383 I llm_load_print_meta: vocab type       = SPM
0.00.642.384 I llm_load_print_meta: n_vocab          = 256000
0.00.642.386 I llm_load_print_meta: n_merges         = 0
0.00.642.387 I llm_load_print_meta: vocab_only       = 0
0.00.642.387 I llm_load_print_meta: n_ctx_train      = 8192
0.00.642.388 I llm_load_print_meta: n_embd           = 2048
0.00.642.388 I llm_load_print_meta: n_layer          = 18
0.00.642.455 I llm_load_print_meta: n_head           = 8
0.00.642.464 I llm_load_print_meta: n_head_kv        = 1
0.00.642.465 I llm_load_print_meta: n_rot            = 256
0.00.642.465 I llm_load_print_meta: n_swa            = 0
0.00.642.465 I llm_load_print_meta: n_embd_head_k    = 256
0.00.642.466 I llm_load_print_meta: n_embd_head_v    = 256
0.00.642.470 I llm_load_print_meta: n_gqa            = 8
0.00.642.475 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.642.481 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.642.483 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.642.484 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.642.485 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.642.486 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.642.486 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.642.491 I llm_load_print_meta: n_ff             = 16384
0.00.642.492 I llm_load_print_meta: n_expert         = 0
0.00.642.492 I llm_load_print_meta: n_expert_used    = 0
0.00.642.493 I llm_load_print_meta: causal attn      = 1
0.00.642.493 I llm_load_print_meta: pooling type     = 0
0.00.642.493 I llm_load_print_meta: rope type        = 2
0.00.642.494 I llm_load_print_meta: rope scaling     = linear
0.00.642.495 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.642.496 I llm_load_print_meta: freq_scale_train = 1
0.00.642.496 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.642.497 I llm_load_print_meta: rope_finetuned   = unknown
0.00.642.507 I llm_load_print_meta: ssm_d_conv       = 0
0.00.642.508 I llm_load_print_meta: ssm_d_inner      = 0
0.00.642.509 I llm_load_print_meta: ssm_d_state      = 0
0.00.642.509 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.642.510 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.642.510 I llm_load_print_meta: model type       = 2B
0.00.642.511 I llm_load_print_meta: model ftype      = Q8_0
0.00.642.512 I llm_load_print_meta: model params     = 2.51 B
0.00.642.521 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.642.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.642.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.642.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.642.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.642.537 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.642.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.642.538 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.642.544 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.642.546 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.642.546 I llm_load_print_meta: max token length = 93
0.00.738.697 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.738.705 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.738.706 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.738.706 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.738.707 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.738.708 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.744.588 I llama_new_context_with_model: n_seq_max     = 1
0.00.744.596 I llama_new_context_with_model: n_ctx         = 4096
0.00.744.597 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.744.597 I llama_new_context_with_model: n_batch       = 2048
0.00.744.597 I llama_new_context_with_model: n_ubatch      = 512
0.00.744.598 I llama_new_context_with_model: flash_attn    = 0
0.00.744.601 I llama_new_context_with_model: freq_base     = 10000.0
0.00.744.601 I llama_new_context_with_model: freq_scale    = 1
0.00.744.602 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.761.381 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.761.419 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.761.552 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.764.082 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.764.086 I llama_new_context_with_model: graph nodes  = 601
0.00.764.086 I llama_new_context_with_model: graph splits = 1
0.00.764.111 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.079 I main: llama threadpool init, n_threads = 4
0.01.371.091 I 
0.01.371.195 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.198 I 
0.01.371.424 I sampler seed: 3228598611
0.01.371.436 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.442 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.371.445 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.446 I 
 seconally, the narrator recounts a dream in which she felt lost and alone.

The dream began with a vast, echoing space, a void devoid of any

0.14.950.416 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.77 tokens per second)
0.14.950.421 I llama_perf_context_print:        load time =    1369.85 ms
0.14.950.422 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.950.424 I llama_perf_context_print:        eval time =   13489.08 ms /    32 runs   (  421.53 ms per token,     2.37 tokens per second)
0.14.950.425 I llama_perf_context_print:       total time =   13579.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4028 (6a066b99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.001.151 I main: load the model and apply lora adapter, if any
0.00.029.975 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.029.985 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.030.089 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.102 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.104 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.110 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.112 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.113 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.115 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.117 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.132 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.133 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.135 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.137 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.482 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.370 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.757 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.767 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.768 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.769 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.770 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.772 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.773 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.777 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.778 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.779 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.780 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.274.781 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.790 I llama_model_loader: - type  f32:   37 tensors
0.00.274.792 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.841 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.450 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.463 I llm_load_vocab: special tokens cache size = 5
0.00.624.288 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.361 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.362 I llm_load_print_meta: arch             = gemma
0.00.624.363 I llm_load_print_meta: vocab type       = SPM
0.00.624.363 I llm_load_print_meta: n_vocab          = 256000
0.00.624.366 I llm_load_print_meta: n_merges         = 0
0.00.624.367 I llm_load_print_meta: vocab_only       = 0
0.00.624.367 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.367 I llm_load_print_meta: n_embd           = 2048
0.00.624.368 I llm_load_print_meta: n_layer          = 18
0.00.624.433 I llm_load_print_meta: n_head           = 8
0.00.624.441 I llm_load_print_meta: n_head_kv        = 1
0.00.624.441 I llm_load_print_meta: n_rot            = 256
0.00.624.441 I llm_load_print_meta: n_swa            = 0
0.00.624.442 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.442 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.446 I llm_load_print_meta: n_gqa            = 8
0.00.624.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.457 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.459 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.460 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.463 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.464 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.465 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.470 I llm_load_print_meta: n_ff             = 16384
0.00.624.470 I llm_load_print_meta: n_expert         = 0
0.00.624.471 I llm_load_print_meta: n_expert_used    = 0
0.00.624.471 I llm_load_print_meta: causal attn      = 1
0.00.624.472 I llm_load_print_meta: pooling type     = 0
0.00.624.473 I llm_load_print_meta: rope type        = 2
0.00.624.473 I llm_load_print_meta: rope scaling     = linear
0.00.624.475 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.476 I llm_load_print_meta: freq_scale_train = 1
0.00.624.476 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.477 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.477 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.478 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.478 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.478 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.479 I llm_load_print_meta: model type       = 2B
0.00.624.480 I llm_load_print_meta: model ftype      = Q8_0
0.00.624.481 I llm_load_print_meta: model params     = 2.51 B
0.00.624.492 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.624.492 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.493 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.493 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.494 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.494 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.495 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.495 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.501 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.502 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.516 I llm_load_print_meta: max token length = 93
0.00.698.010 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.698.020 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.704.360 I llama_new_context_with_model: n_seq_max     = 1
0.00.704.370 I llama_new_context_with_model: n_ctx         = 4096
0.00.704.370 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.704.371 I llama_new_context_with_model: n_batch       = 2048
0.00.704.371 I llama_new_context_with_model: n_ubatch      = 512
0.00.704.371 I llama_new_context_with_model: flash_attn    = 0
0.00.704.376 I llama_new_context_with_model: freq_base     = 10000.0
0.00.704.376 I llama_new_context_with_model: freq_scale    = 1
0.00.704.377 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.721.776 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.721.817 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.721.950 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.498 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.724.502 I llama_new_context_with_model: graph nodes  = 601
0.00.724.502 I llama_new_context_with_model: graph splits = 1
0.00.724.528 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.217 I main: llama threadpool init, n_threads = 4
0.01.333.233 I 
0.01.333.355 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.359 I 
0.01.333.624 I sampler seed: 3076816555
0.01.333.637 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.643 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.647 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.647 I 
 increasities can occur due to various factors, including:

- **Nutrient deficiencies:** Deficiencies in essential nutrients such as iron, calcium, and vitamin D can

0.14.975.313 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.36 tokens per second)
0.14.975.316 I llama_perf_context_print:        load time =    1331.96 ms
0.14.975.317 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.975.319 I llama_perf_context_print:        eval time =   13551.41 ms /    32 runs   (  423.48 ms per token,     2.36 tokens per second)
0.14.975.320 I llama_perf_context_print:       total time =   13642.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.981s
user	3m19.676s
sys	0m9.577s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4028 (6a066b99)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199370.64 ms
main:    total time = 199370.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4028 (6a066b99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.001.089 I main: load the model and apply lora adapter, if any
0.00.023.751 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.763 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.861 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.873 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.877 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.882 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.887 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.888 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.889 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.890 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.891 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.898 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.900 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.901 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.902 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.904 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.268 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.673 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.685 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.687 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.688 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.689 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.690 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.691 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.695 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.696 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.697 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.698 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.700 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.708 I llama_model_loader: - type  f32:   37 tensors
0.00.268.711 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.712 I llama_model_loader: - type q6_K:   19 tensors
0.00.468.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.696 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.661 I llm_load_vocab: special tokens cache size = 5
0.00.629.928 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.000 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.004 I llm_load_print_meta: arch             = gemma
0.00.630.005 I llm_load_print_meta: vocab type       = SPM
0.00.630.006 I llm_load_print_meta: n_vocab          = 256000
0.00.630.008 I llm_load_print_meta: n_merges         = 0
0.00.630.009 I llm_load_print_meta: vocab_only       = 0
0.00.630.009 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.010 I llm_load_print_meta: n_embd           = 2048
0.00.630.010 I llm_load_print_meta: n_layer          = 18
0.00.630.072 I llm_load_print_meta: n_head           = 8
0.00.630.082 I llm_load_print_meta: n_head_kv        = 1
0.00.630.083 I llm_load_print_meta: n_rot            = 256
0.00.630.084 I llm_load_print_meta: n_swa            = 0
0.00.630.084 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.084 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.090 I llm_load_print_meta: n_gqa            = 8
0.00.630.094 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.100 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.101 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.103 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.104 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.106 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.111 I llm_load_print_meta: n_ff             = 16384
0.00.630.112 I llm_load_print_meta: n_expert         = 0
0.00.630.112 I llm_load_print_meta: n_expert_used    = 0
0.00.630.112 I llm_load_print_meta: causal attn      = 1
0.00.630.113 I llm_load_print_meta: pooling type     = 0
0.00.630.113 I llm_load_print_meta: rope type        = 2
0.00.630.114 I llm_load_print_meta: rope scaling     = linear
0.00.630.115 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.116 I llm_load_print_meta: freq_scale_train = 1
0.00.630.116 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.116 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.117 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.117 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.118 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.118 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.119 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.120 I llm_load_print_meta: model type       = 2B
0.00.630.121 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.630.122 I llm_load_print_meta: model params     = 2.51 B
0.00.630.132 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.630.133 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.133 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.137 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.137 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.138 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.138 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.138 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.144 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.145 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.146 I llm_load_print_meta: max token length = 93
0.00.693.118 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.693.130 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.693.130 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.693.131 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.693.132 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.693.132 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.699.058 I llama_new_context_with_model: n_seq_max     = 1
0.00.699.066 I llama_new_context_with_model: n_ctx         = 4096
0.00.699.066 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.699.067 I llama_new_context_with_model: n_batch       = 2048
0.00.699.067 I llama_new_context_with_model: n_ubatch      = 512
0.00.699.068 I llama_new_context_with_model: flash_attn    = 0
0.00.699.071 I llama_new_context_with_model: freq_base     = 10000.0
0.00.699.072 I llama_new_context_with_model: freq_scale    = 1
0.00.699.073 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.715.824 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.715.864 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.715.987 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.513 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.718.517 I llama_new_context_with_model: graph nodes  = 601
0.00.718.517 I llama_new_context_with_model: graph splits = 1
0.00.718.542 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.933 I main: llama threadpool init, n_threads = 4
0.01.291.945 I 
0.01.292.053 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.057 I 
0.01.292.289 I sampler seed: 845466732
0.01.292.302 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.308 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.292.311 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.312 I 
 seconally.

The question is: Explain the role of the hippocampus in memory formation.

The response should explain how the hippocampus allows memory formation and retrieval,

0.12.183.923 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.22 tokens per second)
0.12.183.927 I llama_perf_context_print:        load time =    1290.75 ms
0.12.183.928 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.183.941 I llama_perf_context_print:        eval time =   10801.48 ms /    32 runs   (  337.55 ms per token,     2.96 tokens per second)
0.12.183.942 I llama_perf_context_print:       total time =   10892.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4028 (6a066b99)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199348.75 ms
main:    total time = 199348.75 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 4028 (6a066b99) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.863 I main: llama backend init
0.00.001.126 I main: load the model and apply lora adapter, if any
0.00.023.464 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.564 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.578 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.582 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.586 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.588 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.589 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.590 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.592 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.593 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.599 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.602 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.603 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.605 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.606 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.753 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.818 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.259 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.269 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.270 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.272 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.273 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.274 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.275 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.279 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.280 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.289 I llama_model_loader: - type  f32:   37 tensors
0.00.267.291 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.292 I llama_model_loader: - type q6_K:   19 tensors
0.00.459.112 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.531.275 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.322 I llm_load_vocab: special tokens cache size = 5
0.00.626.944 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.014 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.015 I llm_load_print_meta: arch             = gemma
0.00.627.015 I llm_load_print_meta: vocab type       = SPM
0.00.627.016 I llm_load_print_meta: n_vocab          = 256000
0.00.627.018 I llm_load_print_meta: n_merges         = 0
0.00.627.019 I llm_load_print_meta: vocab_only       = 0
0.00.627.019 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.019 I llm_load_print_meta: n_embd           = 2048
0.00.627.020 I llm_load_print_meta: n_layer          = 18
0.00.627.085 I llm_load_print_meta: n_head           = 8
0.00.627.092 I llm_load_print_meta: n_head_kv        = 1
0.00.627.093 I llm_load_print_meta: n_rot            = 256
0.00.627.093 I llm_load_print_meta: n_swa            = 0
0.00.627.094 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.094 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.098 I llm_load_print_meta: n_gqa            = 8
0.00.627.103 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.108 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.109 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.110 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.111 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.111 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.116 I llm_load_print_meta: n_ff             = 16384
0.00.627.116 I llm_load_print_meta: n_expert         = 0
0.00.627.117 I llm_load_print_meta: n_expert_used    = 0
0.00.627.117 I llm_load_print_meta: causal attn      = 1
0.00.627.117 I llm_load_print_meta: pooling type     = 0
0.00.627.118 I llm_load_print_meta: rope type        = 2
0.00.627.118 I llm_load_print_meta: rope scaling     = linear
0.00.627.119 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.120 I llm_load_print_meta: freq_scale_train = 1
0.00.627.120 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.121 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.121 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.121 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.122 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.122 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.122 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.123 I llm_load_print_meta: model type       = 2B
0.00.627.124 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.627.125 I llm_load_print_meta: model params     = 2.51 B
0.00.627.134 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.627.135 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.135 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.136 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.136 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.137 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.137 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.137 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.167 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.167 I llm_load_print_meta: max token length = 93
0.00.686.708 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.692.488 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.494 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.495 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.495 I llama_new_context_with_model: n_batch       = 2048
0.00.692.496 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.497 I llama_new_context_with_model: flash_attn    = 0
0.00.692.499 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.500 I llama_new_context_with_model: freq_scale    = 1
0.00.692.501 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.709.277 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.709.318 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.709.442 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.987 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.711.991 I llama_new_context_with_model: graph nodes  = 601
0.00.711.991 I llama_new_context_with_model: graph splits = 1
0.00.712.015 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.116 I main: llama threadpool init, n_threads = 4
0.01.284.129 I 
0.01.284.235 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.239 I 
0.01.284.484 I sampler seed: 2595766719
0.01.284.496 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.505 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.284.514 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.515 I 
 seconal (second stage) lymphoid follicles are found in which organ?

a) Spleen
b) Thymus
c) Lymph nodes
d)

0.12.137.333 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.08 tokens per second)
0.12.137.336 I llama_perf_context_print:        load time =    1282.90 ms
0.12.137.351 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.137.352 I llama_perf_context_print:        eval time =   10763.54 ms /    32 runs   (  336.36 ms per token,     2.97 tokens per second)
0.12.137.353 I llama_perf_context_print:       total time =   10853.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.022s
user	50m14.592s
sys	0m6.584s
