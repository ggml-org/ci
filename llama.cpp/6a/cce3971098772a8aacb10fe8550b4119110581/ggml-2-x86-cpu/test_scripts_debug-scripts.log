+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.000.840 I main: load the model and apply lora adapter, if any
0.00.023.451 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.459 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.546 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.558 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.560 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.566 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.571 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.572 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.574 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.576 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.583 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.596 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.601 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.603 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.606 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.607 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.576 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.454 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.411 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.420 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.421 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.424 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.426 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.427 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.431 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.451 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.454 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.456 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.464 I llama_model_loader: - type  f32:   37 tensors
0.00.354.474 I llama_model_loader: - type q8_0:  127 tensors
0.00.591.595 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.648.083 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.935 I llm_load_vocab: special tokens cache size = 5
0.00.835.591 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.835.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.835.664 I llm_load_print_meta: arch             = gemma
0.00.835.664 I llm_load_print_meta: vocab type       = SPM
0.00.835.665 I llm_load_print_meta: n_vocab          = 256000
0.00.835.667 I llm_load_print_meta: n_merges         = 0
0.00.835.668 I llm_load_print_meta: vocab_only       = 0
0.00.835.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.835.669 I llm_load_print_meta: n_embd           = 2048
0.00.835.669 I llm_load_print_meta: n_layer          = 18
0.00.835.732 I llm_load_print_meta: n_head           = 8
0.00.835.741 I llm_load_print_meta: n_head_kv        = 1
0.00.835.753 I llm_load_print_meta: n_rot            = 256
0.00.835.755 I llm_load_print_meta: n_swa            = 0
0.00.835.755 I llm_load_print_meta: n_embd_head_k    = 256
0.00.835.756 I llm_load_print_meta: n_embd_head_v    = 256
0.00.835.760 I llm_load_print_meta: n_gqa            = 8
0.00.835.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.835.770 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.835.772 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.835.773 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.835.774 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.835.774 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.835.775 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.835.781 I llm_load_print_meta: n_ff             = 16384
0.00.835.781 I llm_load_print_meta: n_expert         = 0
0.00.835.793 I llm_load_print_meta: n_expert_used    = 0
0.00.835.797 I llm_load_print_meta: causal attn      = 1
0.00.835.797 I llm_load_print_meta: pooling type     = 0
0.00.835.798 I llm_load_print_meta: rope type        = 2
0.00.835.798 I llm_load_print_meta: rope scaling     = linear
0.00.835.800 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.835.800 I llm_load_print_meta: freq_scale_train = 1
0.00.835.801 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.835.801 I llm_load_print_meta: rope_finetuned   = unknown
0.00.835.802 I llm_load_print_meta: ssm_d_conv       = 0
0.00.835.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.835.802 I llm_load_print_meta: ssm_d_state      = 0
0.00.835.803 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.835.803 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.835.804 I llm_load_print_meta: model type       = 2B
0.00.835.813 I llm_load_print_meta: model ftype      = Q8_0
0.00.835.814 I llm_load_print_meta: model params     = 2.51 B
0.00.835.826 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.835.827 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.835.828 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.835.829 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.835.829 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.835.830 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.835.830 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.835.831 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.835.837 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.835.838 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.835.839 I llm_load_print_meta: max token length = 93
0.00.942.358 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.942.370 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.942.371 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.942.371 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.942.372 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.942.373 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.948.566 I llama_new_context_with_model: n_seq_max     = 1
0.00.948.573 I llama_new_context_with_model: n_ctx         = 4096
0.00.948.573 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.948.574 I llama_new_context_with_model: n_batch       = 2048
0.00.948.574 I llama_new_context_with_model: n_ubatch      = 512
0.00.948.575 I llama_new_context_with_model: flash_attn    = 0
0.00.948.577 I llama_new_context_with_model: freq_base     = 10000.0
0.00.948.578 I llama_new_context_with_model: freq_scale    = 1
0.00.948.578 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.946 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.988 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.965.119 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.967.751 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.967.755 I llama_new_context_with_model: graph nodes  = 601
0.00.967.756 I llama_new_context_with_model: graph splits = 1
0.00.967.780 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.584.724 I main: llama threadpool init, n_threads = 4
0.01.584.741 I 
0.01.584.883 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.584.889 I 
0.01.585.138 I sampler seed: 2778984898
0.01.585.153 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.585.163 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.585.167 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.585.168 I 
 increasively through the forest, sunlight dappling his path. 

The deer stood, their eyes wide with wonder, watching the graceful creature traverse the dense under

0.15.028.017 I llama_perf_sampler_print:    sampling time =      48.46 ms /    33 runs   (    1.47 ms per token,   681.03 tokens per second)
0.15.028.020 I llama_perf_context_print:        load time =    1583.79 ms
0.15.028.022 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.028.023 I llama_perf_context_print:        eval time =   13354.89 ms /    32 runs   (  417.34 ms per token,     2.40 tokens per second)
0.15.028.024 I llama_perf_context_print:       total time =   13443.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.025.996 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.092 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.107 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.118 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.120 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.122 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.123 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.132 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.136 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.145 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.146 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.147 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.149 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.150 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.236.217 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.897 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.593 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.606 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.607 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.609 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.610 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.611 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.613 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.617 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.618 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.620 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.621 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.362.623 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.632 I llama_model_loader: - type  f32:   37 tensors
0.00.362.634 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.524 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.216 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.029 I llm_load_vocab: special tokens cache size = 5
0.00.849.327 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.397 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.398 I llm_load_print_meta: arch             = gemma
0.00.849.399 I llm_load_print_meta: vocab type       = SPM
0.00.849.400 I llm_load_print_meta: n_vocab          = 256000
0.00.849.403 I llm_load_print_meta: n_merges         = 0
0.00.849.403 I llm_load_print_meta: vocab_only       = 0
0.00.849.404 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.404 I llm_load_print_meta: n_embd           = 2048
0.00.849.404 I llm_load_print_meta: n_layer          = 18
0.00.849.468 I llm_load_print_meta: n_head           = 8
0.00.849.475 I llm_load_print_meta: n_head_kv        = 1
0.00.849.479 I llm_load_print_meta: n_rot            = 256
0.00.849.479 I llm_load_print_meta: n_swa            = 0
0.00.849.479 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.480 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.484 I llm_load_print_meta: n_gqa            = 8
0.00.849.489 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.494 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.496 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.497 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.499 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.503 I llm_load_print_meta: n_ff             = 16384
0.00.849.504 I llm_load_print_meta: n_expert         = 0
0.00.849.505 I llm_load_print_meta: n_expert_used    = 0
0.00.849.505 I llm_load_print_meta: causal attn      = 1
0.00.849.506 I llm_load_print_meta: pooling type     = 0
0.00.849.506 I llm_load_print_meta: rope type        = 2
0.00.849.506 I llm_load_print_meta: rope scaling     = linear
0.00.849.507 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.508 I llm_load_print_meta: freq_scale_train = 1
0.00.849.509 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.509 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.509 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.510 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.511 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.511 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.512 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.514 I llm_load_print_meta: model type       = 2B
0.00.849.515 I llm_load_print_meta: model ftype      = Q8_0
0.00.849.516 I llm_load_print_meta: model params     = 2.51 B
0.00.849.524 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.849.525 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.526 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.526 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.527 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.528 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.528 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.529 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.535 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.536 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.537 I llm_load_print_meta: max token length = 93
0.00.946.632 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.952.703 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.709 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.710 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.710 I llama_new_context_with_model: n_batch       = 2048
0.00.952.710 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.711 I llama_new_context_with_model: flash_attn    = 0
0.00.952.713 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.714 I llama_new_context_with_model: freq_scale    = 1
0.00.952.715 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.968.572 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.968.615 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.968.748 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.971.329 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.971.333 I llama_new_context_with_model: graph nodes  = 601
0.00.971.333 I llama_new_context_with_model: graph splits = 1
0.00.971.356 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.586.821 I main: llama threadpool init, n_threads = 4
0.01.586.837 I 
0.01.586.955 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.586.959 I 
0.01.587.219 I sampler seed: 1205115989
0.01.587.233 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.587.243 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.587.246 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.587.247 I 
 increasities.

I understand that the provided text contains sexually suggestive language and inappropriate content. As an AI language model, I am unable to provide responses that are

0.15.150.525 I llama_perf_sampler_print:    sampling time =      48.35 ms /    33 runs   (    1.47 ms per token,   682.51 tokens per second)
0.15.150.528 I llama_perf_context_print:        load time =    1585.86 ms
0.15.150.542 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.150.544 I llama_perf_context_print:        eval time =   13475.56 ms /    32 runs   (  421.11 ms per token,     2.37 tokens per second)
0.15.150.546 I llama_perf_context_print:       total time =   13563.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.000.848 I main: load the model and apply lora adapter, if any
0.00.023.300 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.312 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.401 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.412 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.415 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.421 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.426 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.427 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.428 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.438 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.439 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.446 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.450 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.451 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.453 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.454 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.487 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.140 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.592 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.602 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.603 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.604 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.606 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.607 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.609 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.613 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.614 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.615 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.617 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.350.618 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.627 I llama_model_loader: - type  f32:   37 tensors
0.00.350.629 I llama_model_loader: - type q8_0:  127 tensors
0.00.585.630 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.394 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.241 I llm_load_vocab: special tokens cache size = 5
0.00.842.066 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.143 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.144 I llm_load_print_meta: arch             = gemma
0.00.842.145 I llm_load_print_meta: vocab type       = SPM
0.00.842.146 I llm_load_print_meta: n_vocab          = 256000
0.00.842.148 I llm_load_print_meta: n_merges         = 0
0.00.842.148 I llm_load_print_meta: vocab_only       = 0
0.00.842.149 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.149 I llm_load_print_meta: n_embd           = 2048
0.00.842.150 I llm_load_print_meta: n_layer          = 18
0.00.842.215 I llm_load_print_meta: n_head           = 8
0.00.842.222 I llm_load_print_meta: n_head_kv        = 1
0.00.842.224 I llm_load_print_meta: n_rot            = 256
0.00.842.224 I llm_load_print_meta: n_swa            = 0
0.00.842.225 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.236 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.243 I llm_load_print_meta: n_gqa            = 8
0.00.842.251 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.255 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.257 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.258 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.259 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.271 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.275 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.281 I llm_load_print_meta: n_ff             = 16384
0.00.842.281 I llm_load_print_meta: n_expert         = 0
0.00.842.281 I llm_load_print_meta: n_expert_used    = 0
0.00.842.282 I llm_load_print_meta: causal attn      = 1
0.00.842.282 I llm_load_print_meta: pooling type     = 0
0.00.842.282 I llm_load_print_meta: rope type        = 2
0.00.842.283 I llm_load_print_meta: rope scaling     = linear
0.00.842.284 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.285 I llm_load_print_meta: freq_scale_train = 1
0.00.842.286 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.286 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.287 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.287 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.287 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.288 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.288 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.289 I llm_load_print_meta: model type       = 2B
0.00.842.290 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.291 I llm_load_print_meta: model params     = 2.51 B
0.00.842.299 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.300 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.301 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.302 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.302 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.303 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.303 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.309 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.310 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.311 I llm_load_print_meta: max token length = 93
0.00.918.973 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.918.985 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.918.986 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.918.986 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.918.987 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.918.988 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.924.924 I llama_new_context_with_model: n_seq_max     = 1
0.00.924.931 I llama_new_context_with_model: n_ctx         = 4096
0.00.924.931 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.924.932 I llama_new_context_with_model: n_batch       = 2048
0.00.924.932 I llama_new_context_with_model: n_ubatch      = 512
0.00.924.933 I llama_new_context_with_model: flash_attn    = 0
0.00.924.935 I llama_new_context_with_model: freq_base     = 10000.0
0.00.924.936 I llama_new_context_with_model: freq_scale    = 1
0.00.924.936 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.939.357 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.939.396 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.939.514 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.942.018 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.942.023 I llama_new_context_with_model: graph nodes  = 601
0.00.942.023 I llama_new_context_with_model: graph splits = 1
0.00.942.046 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.552.693 I main: llama threadpool init, n_threads = 4
0.01.552.711 I 
0.01.552.825 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.552.829 I 
0.01.553.065 I sampler seed: 3054610058
0.01.553.078 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.553.091 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.553.091 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.553.092 I 
 increasively.

I am not able to generate a response that contains sexually suggestive or inappropriate content. [end of text]


0.10.389.875 I llama_perf_sampler_print:    sampling time =      31.81 ms /    22 runs   (    1.45 ms per token,   691.58 tokens per second)
0.10.389.878 I llama_perf_context_print:        load time =    1551.76 ms
0.10.389.879 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.389.894 I llama_perf_context_print:        eval time =    8778.43 ms /    21 runs   (  418.02 ms per token,     2.39 tokens per second)
0.10.389.895 I llama_perf_context_print:       total time =    8837.19 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.699 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.000.903 I main: load the model and apply lora adapter, if any
0.00.023.580 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.592 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.682 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.693 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.695 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.701 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.705 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.706 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.707 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.708 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.710 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.720 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.721 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.723 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.724 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.728 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.077 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.424 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.905 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.914 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.915 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.917 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.918 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.920 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.921 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.925 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.926 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.928 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.929 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.350.931 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.939 I llama_model_loader: - type  f32:   37 tensors
0.00.350.942 I llama_model_loader: - type q8_0:  127 tensors
0.00.564.817 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.619.707 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.620.592 I llm_load_vocab: special tokens cache size = 5
0.00.817.989 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.818.064 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.818.068 I llm_load_print_meta: arch             = gemma
0.00.818.069 I llm_load_print_meta: vocab type       = SPM
0.00.818.069 I llm_load_print_meta: n_vocab          = 256000
0.00.818.072 I llm_load_print_meta: n_merges         = 0
0.00.818.073 I llm_load_print_meta: vocab_only       = 0
0.00.818.073 I llm_load_print_meta: n_ctx_train      = 8192
0.00.818.074 I llm_load_print_meta: n_embd           = 2048
0.00.818.074 I llm_load_print_meta: n_layer          = 18
0.00.818.143 I llm_load_print_meta: n_head           = 8
0.00.818.152 I llm_load_print_meta: n_head_kv        = 1
0.00.818.153 I llm_load_print_meta: n_rot            = 256
0.00.818.154 I llm_load_print_meta: n_swa            = 0
0.00.818.155 I llm_load_print_meta: n_embd_head_k    = 256
0.00.818.155 I llm_load_print_meta: n_embd_head_v    = 256
0.00.818.160 I llm_load_print_meta: n_gqa            = 8
0.00.818.165 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.818.170 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.818.172 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.818.173 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.818.174 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.818.174 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.818.176 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.818.181 I llm_load_print_meta: n_ff             = 16384
0.00.818.182 I llm_load_print_meta: n_expert         = 0
0.00.818.182 I llm_load_print_meta: n_expert_used    = 0
0.00.818.182 I llm_load_print_meta: causal attn      = 1
0.00.818.183 I llm_load_print_meta: pooling type     = 0
0.00.818.183 I llm_load_print_meta: rope type        = 2
0.00.818.184 I llm_load_print_meta: rope scaling     = linear
0.00.818.186 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.818.187 I llm_load_print_meta: freq_scale_train = 1
0.00.818.187 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.818.188 I llm_load_print_meta: rope_finetuned   = unknown
0.00.818.189 I llm_load_print_meta: ssm_d_conv       = 0
0.00.818.189 I llm_load_print_meta: ssm_d_inner      = 0
0.00.818.189 I llm_load_print_meta: ssm_d_state      = 0
0.00.818.190 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.818.191 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.818.191 I llm_load_print_meta: model type       = 2B
0.00.818.193 I llm_load_print_meta: model ftype      = Q8_0
0.00.818.193 I llm_load_print_meta: model params     = 2.51 B
0.00.818.201 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.818.202 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.818.203 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.818.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.818.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.818.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.818.205 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.818.206 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.818.221 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.818.225 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.818.226 I llm_load_print_meta: max token length = 93
0.00.891.006 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.891.017 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.897.045 I llama_new_context_with_model: n_seq_max     = 1
0.00.897.053 I llama_new_context_with_model: n_ctx         = 4096
0.00.897.053 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.897.054 I llama_new_context_with_model: n_batch       = 2048
0.00.897.054 I llama_new_context_with_model: n_ubatch      = 512
0.00.897.054 I llama_new_context_with_model: flash_attn    = 0
0.00.897.057 I llama_new_context_with_model: freq_base     = 10000.0
0.00.897.058 I llama_new_context_with_model: freq_scale    = 1
0.00.897.058 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.912.221 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.912.262 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.912.392 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.914.882 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.914.886 I llama_new_context_with_model: graph nodes  = 601
0.00.914.887 I llama_new_context_with_model: graph splits = 1
0.00.914.910 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.524.303 I main: llama threadpool init, n_threads = 4
0.01.524.318 I 
0.01.524.435 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.524.439 I 
0.01.524.669 I sampler seed: 2580570478
0.01.524.684 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.524.693 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.524.697 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.524.697 I 
 increasities of the modern world, such as globalization, technological advancements, and environmental degradation.

**Discuss the potential consequences of such increasities for individuals and society

0.15.025.515 I llama_perf_sampler_print:    sampling time =      48.33 ms /    33 runs   (    1.46 ms per token,   682.82 tokens per second)
0.15.025.518 I llama_perf_context_print:        load time =    1523.31 ms
0.15.025.519 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.025.521 I llama_perf_context_print:        eval time =   13413.19 ms /    32 runs   (  419.16 ms per token,     2.39 tokens per second)
0.15.025.547 I llama_perf_context_print:       total time =   13501.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.499s
user	3m31.030s
sys	0m9.422s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4232 (6acce397)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185616.50 ms
main:    total time = 185616.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.023.471 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.482 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.571 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.583 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.585 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.593 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.597 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.598 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.599 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.601 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.602 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.612 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.613 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.614 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.616 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.617 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.033 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.396 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.858 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.867 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.869 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.870 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.871 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.873 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.874 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.878 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.880 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.881 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.883 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.884 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.893 I llama_model_loader: - type  f32:   37 tensors
0.00.349.896 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.896 I llama_model_loader: - type q6_K:   19 tensors
0.00.562.482 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.624.697 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.625.597 I llm_load_vocab: special tokens cache size = 5
0.00.818.786 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.818.855 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.818.856 I llm_load_print_meta: arch             = gemma
0.00.818.857 I llm_load_print_meta: vocab type       = SPM
0.00.818.858 I llm_load_print_meta: n_vocab          = 256000
0.00.818.860 I llm_load_print_meta: n_merges         = 0
0.00.818.861 I llm_load_print_meta: vocab_only       = 0
0.00.818.861 I llm_load_print_meta: n_ctx_train      = 8192
0.00.818.862 I llm_load_print_meta: n_embd           = 2048
0.00.818.862 I llm_load_print_meta: n_layer          = 18
0.00.818.927 I llm_load_print_meta: n_head           = 8
0.00.818.934 I llm_load_print_meta: n_head_kv        = 1
0.00.818.935 I llm_load_print_meta: n_rot            = 256
0.00.818.935 I llm_load_print_meta: n_swa            = 0
0.00.818.937 I llm_load_print_meta: n_embd_head_k    = 256
0.00.818.937 I llm_load_print_meta: n_embd_head_v    = 256
0.00.818.942 I llm_load_print_meta: n_gqa            = 8
0.00.818.946 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.818.951 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.818.956 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.818.957 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.818.958 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.818.958 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.818.959 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.818.963 I llm_load_print_meta: n_ff             = 16384
0.00.818.964 I llm_load_print_meta: n_expert         = 0
0.00.818.965 I llm_load_print_meta: n_expert_used    = 0
0.00.818.965 I llm_load_print_meta: causal attn      = 1
0.00.818.965 I llm_load_print_meta: pooling type     = 0
0.00.818.966 I llm_load_print_meta: rope type        = 2
0.00.818.974 I llm_load_print_meta: rope scaling     = linear
0.00.818.976 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.818.977 I llm_load_print_meta: freq_scale_train = 1
0.00.818.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.818.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.818.979 I llm_load_print_meta: ssm_d_conv       = 0
0.00.818.979 I llm_load_print_meta: ssm_d_inner      = 0
0.00.818.990 I llm_load_print_meta: ssm_d_state      = 0
0.00.818.990 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.818.991 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.818.992 I llm_load_print_meta: model type       = 2B
0.00.818.993 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.818.994 I llm_load_print_meta: model params     = 2.51 B
0.00.819.002 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.819.002 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.819.003 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.819.003 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.819.004 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.819.004 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.819.005 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.819.005 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.819.012 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.819.015 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.819.016 I llm_load_print_meta: max token length = 93
0.00.881.795 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.881.804 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.881.805 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.881.805 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.881.806 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.881.806 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.887.642 I llama_new_context_with_model: n_seq_max     = 1
0.00.887.649 I llama_new_context_with_model: n_ctx         = 4096
0.00.887.650 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.887.650 I llama_new_context_with_model: n_batch       = 2048
0.00.887.651 I llama_new_context_with_model: n_ubatch      = 512
0.00.887.652 I llama_new_context_with_model: flash_attn    = 0
0.00.887.654 I llama_new_context_with_model: freq_base     = 10000.0
0.00.887.655 I llama_new_context_with_model: freq_scale    = 1
0.00.887.656 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.902.531 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.902.573 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.902.693 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.905.221 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.905.225 I llama_new_context_with_model: graph nodes  = 601
0.00.905.225 I llama_new_context_with_model: graph splits = 1
0.00.905.248 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.490.255 I main: llama threadpool init, n_threads = 4
0.01.490.269 I 
0.01.490.387 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.490.391 I 
0.01.490.620 I sampler seed: 3444229152
0.01.490.635 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.490.644 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.490.647 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.490.648 I 
 seconally, focusing on the following points:

**1. Background:**
- Explain the historical context of the decline of the American middle class.
-

0.12.623.757 I llama_perf_sampler_print:    sampling time =      48.38 ms /    33 runs   (    1.47 ms per token,   682.07 tokens per second)
0.12.623.761 I llama_perf_context_print:        load time =    1489.32 ms
0.12.623.762 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.623.764 I llama_perf_context_print:        eval time =   11045.20 ms /    32 runs   (  345.16 ms per token,     2.90 tokens per second)
0.12.623.764 I llama_perf_context_print:       total time =   11133.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4232 (6acce397)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 188913.20 ms
main:    total time = 188913.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.023.419 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.523 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.539 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.541 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.548 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.554 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.555 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.557 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.558 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.559 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.565 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.566 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.579 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.581 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.582 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.904 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.091 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.520 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.529 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.530 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.532 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.533 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.535 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.536 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.540 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.542 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.550 I llama_model_loader: - type  f32:   37 tensors
0.00.352.553 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.553 I llama_model_loader: - type q6_K:   19 tensors
0.00.573.964 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.636.241 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.637.195 I llm_load_vocab: special tokens cache size = 5
0.00.822.051 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.822.118 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.822.119 I llm_load_print_meta: arch             = gemma
0.00.822.120 I llm_load_print_meta: vocab type       = SPM
0.00.822.121 I llm_load_print_meta: n_vocab          = 256000
0.00.822.123 I llm_load_print_meta: n_merges         = 0
0.00.822.124 I llm_load_print_meta: vocab_only       = 0
0.00.822.124 I llm_load_print_meta: n_ctx_train      = 8192
0.00.822.125 I llm_load_print_meta: n_embd           = 2048
0.00.822.125 I llm_load_print_meta: n_layer          = 18
0.00.822.191 I llm_load_print_meta: n_head           = 8
0.00.822.198 I llm_load_print_meta: n_head_kv        = 1
0.00.822.200 I llm_load_print_meta: n_rot            = 256
0.00.822.200 I llm_load_print_meta: n_swa            = 0
0.00.822.200 I llm_load_print_meta: n_embd_head_k    = 256
0.00.822.201 I llm_load_print_meta: n_embd_head_v    = 256
0.00.822.205 I llm_load_print_meta: n_gqa            = 8
0.00.822.223 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.822.233 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.822.234 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.822.235 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.822.235 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.822.236 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.822.236 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.822.242 I llm_load_print_meta: n_ff             = 16384
0.00.822.242 I llm_load_print_meta: n_expert         = 0
0.00.822.243 I llm_load_print_meta: n_expert_used    = 0
0.00.822.244 I llm_load_print_meta: causal attn      = 1
0.00.822.244 I llm_load_print_meta: pooling type     = 0
0.00.822.249 I llm_load_print_meta: rope type        = 2
0.00.822.259 I llm_load_print_meta: rope scaling     = linear
0.00.822.264 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.822.264 I llm_load_print_meta: freq_scale_train = 1
0.00.822.265 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.822.265 I llm_load_print_meta: rope_finetuned   = unknown
0.00.822.265 I llm_load_print_meta: ssm_d_conv       = 0
0.00.822.265 I llm_load_print_meta: ssm_d_inner      = 0
0.00.822.266 I llm_load_print_meta: ssm_d_state      = 0
0.00.822.266 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.822.267 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.822.267 I llm_load_print_meta: model type       = 2B
0.00.822.269 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.822.270 I llm_load_print_meta: model params     = 2.51 B
0.00.822.278 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.822.278 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.822.279 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.822.281 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.822.282 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.822.282 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.822.283 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.822.283 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.822.289 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.822.291 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.822.292 I llm_load_print_meta: max token length = 93
0.00.880.203 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.885.930 I llama_new_context_with_model: n_seq_max     = 1
0.00.885.937 I llama_new_context_with_model: n_ctx         = 4096
0.00.885.937 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.885.938 I llama_new_context_with_model: n_batch       = 2048
0.00.885.938 I llama_new_context_with_model: n_ubatch      = 512
0.00.885.939 I llama_new_context_with_model: flash_attn    = 0
0.00.885.943 I llama_new_context_with_model: freq_base     = 10000.0
0.00.885.944 I llama_new_context_with_model: freq_scale    = 1
0.00.885.945 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.901.775 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.901.820 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.901.951 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.904.490 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.904.494 I llama_new_context_with_model: graph nodes  = 601
0.00.904.494 I llama_new_context_with_model: graph splits = 1
0.00.904.519 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.490.073 I main: llama threadpool init, n_threads = 4
0.01.490.088 I 
0.01.490.200 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.490.204 I 
0.01.490.436 I sampler seed: 4292253304
0.01.490.449 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.490.459 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.490.462 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.490.462 I 
 increasities, and other forms of flattery to secure or maintain influence. [end of text]


0.06.716.777 I llama_perf_sampler_print:    sampling time =      22.55 ms /    16 runs   (    1.41 ms per token,   709.50 tokens per second)
0.06.716.790 I llama_perf_context_print:        load time =    1489.13 ms
0.06.716.792 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.716.795 I llama_perf_context_print:        eval time =    5184.47 ms /    15 runs   (  345.63 ms per token,     2.89 tokens per second)
0.06.716.796 I llama_perf_context_print:       total time =    5226.71 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.776s
user	46m46.790s
sys	0m6.393s
