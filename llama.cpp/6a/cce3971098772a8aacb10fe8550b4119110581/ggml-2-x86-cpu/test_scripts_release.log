+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.527 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.214 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.224 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.232 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.240 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.247 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.250 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.251 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.251 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.252 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.252 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.252 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.257 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.257 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.258 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.258 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.259 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.870 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.723 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.724 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.725 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.728 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.729 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.729 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.730 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.731 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.734 I llama_model_loader: - type  f32:   37 tensors
0.00.130.736 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.196 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.718 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.371 I llm_load_vocab: special tokens cache size = 5
0.00.268.546 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.562 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.563 I llm_load_print_meta: arch             = gemma
0.00.268.564 I llm_load_print_meta: vocab type       = SPM
0.00.268.564 I llm_load_print_meta: n_vocab          = 256000
0.00.268.565 I llm_load_print_meta: n_merges         = 0
0.00.268.565 I llm_load_print_meta: vocab_only       = 0
0.00.268.565 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.566 I llm_load_print_meta: n_embd           = 2048
0.00.268.566 I llm_load_print_meta: n_layer          = 18
0.00.268.577 I llm_load_print_meta: n_head           = 8
0.00.268.578 I llm_load_print_meta: n_head_kv        = 1
0.00.268.578 I llm_load_print_meta: n_rot            = 256
0.00.268.579 I llm_load_print_meta: n_swa            = 0
0.00.268.579 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.579 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.580 I llm_load_print_meta: n_gqa            = 8
0.00.268.581 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.582 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.582 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.584 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.584 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.585 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.585 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.586 I llm_load_print_meta: n_ff             = 16384
0.00.268.586 I llm_load_print_meta: n_expert         = 0
0.00.268.587 I llm_load_print_meta: n_expert_used    = 0
0.00.268.587 I llm_load_print_meta: causal attn      = 1
0.00.268.587 I llm_load_print_meta: pooling type     = 0
0.00.268.588 I llm_load_print_meta: rope type        = 2
0.00.268.588 I llm_load_print_meta: rope scaling     = linear
0.00.268.589 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.590 I llm_load_print_meta: freq_scale_train = 1
0.00.268.590 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.590 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.591 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.591 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.591 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.591 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.592 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.592 I llm_load_print_meta: model type       = 2B
0.00.268.593 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.594 I llm_load_print_meta: model params     = 2.51 B
0.00.268.594 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.595 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.595 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.595 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.596 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.596 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.596 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.596 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.597 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.597 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.598 I llm_load_print_meta: max token length = 93
0.00.370.222 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.230 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.230 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.231 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.232 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.232 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.502 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.509 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.509 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.510 I llama_new_context_with_model: n_batch       = 2048
0.00.375.510 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.511 I llama_new_context_with_model: flash_attn    = 0
0.00.375.513 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.514 I llama_new_context_with_model: freq_scale    = 1
0.00.375.514 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.874 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.887 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.969 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.224 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.230 I llama_new_context_with_model: graph nodes  = 601
0.00.391.231 I llama_new_context_with_model: graph splits = 1
0.00.391.232 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.600 I main: llama threadpool init, n_threads = 4
0.00.476.616 I 
0.00.476.690 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.476.693 I 
0.00.476.735 I sampler seed: 2885797578
0.00.476.745 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.749 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.749 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.750 I 
 increasities. 

I'm not sure what you're trying to say. Could you please rephrase your question? [end of text]


0.02.367.049 I llama_perf_sampler_print:    sampling time =       4.00 ms /    28 runs   (    0.14 ms per token,  7005.25 tokens per second)
0.02.367.052 I llama_perf_context_print:        load time =     475.84 ms
0.02.367.053 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.367.054 I llama_perf_context_print:        eval time =    1874.25 ms /    27 runs   (   69.42 ms per token,    14.41 tokens per second)
0.02.367.055 I llama_perf_context_print:       total time =    1890.46 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.570 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.769 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.533 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.549 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.557 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.558 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.564 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.565 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.565 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.566 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.567 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.573 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.573 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.577 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.577 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.578 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.582 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.350 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.230 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.236 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.237 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.237 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.240 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.242 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.242 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.243 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.244 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.245 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.248 I llama_model_loader: - type  f32:   37 tensors
0.00.131.249 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.184 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.245 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.782 I llm_load_vocab: special tokens cache size = 5
0.00.265.684 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.701 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.702 I llm_load_print_meta: arch             = gemma
0.00.265.703 I llm_load_print_meta: vocab type       = SPM
0.00.265.704 I llm_load_print_meta: n_vocab          = 256000
0.00.265.704 I llm_load_print_meta: n_merges         = 0
0.00.265.704 I llm_load_print_meta: vocab_only       = 0
0.00.265.705 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.705 I llm_load_print_meta: n_embd           = 2048
0.00.265.705 I llm_load_print_meta: n_layer          = 18
0.00.265.716 I llm_load_print_meta: n_head           = 8
0.00.265.717 I llm_load_print_meta: n_head_kv        = 1
0.00.265.717 I llm_load_print_meta: n_rot            = 256
0.00.265.718 I llm_load_print_meta: n_swa            = 0
0.00.265.718 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.718 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.719 I llm_load_print_meta: n_gqa            = 8
0.00.265.720 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.721 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.722 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.723 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.723 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.724 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.724 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.725 I llm_load_print_meta: n_ff             = 16384
0.00.265.725 I llm_load_print_meta: n_expert         = 0
0.00.265.726 I llm_load_print_meta: n_expert_used    = 0
0.00.265.726 I llm_load_print_meta: causal attn      = 1
0.00.265.726 I llm_load_print_meta: pooling type     = 0
0.00.265.727 I llm_load_print_meta: rope type        = 2
0.00.265.727 I llm_load_print_meta: rope scaling     = linear
0.00.265.729 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.729 I llm_load_print_meta: freq_scale_train = 1
0.00.265.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.730 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.730 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.730 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.730 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.731 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.731 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.731 I llm_load_print_meta: model type       = 2B
0.00.265.732 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.732 I llm_load_print_meta: model params     = 2.51 B
0.00.265.733 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.734 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.734 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.735 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.735 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.736 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.736 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.736 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.736 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.737 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.737 I llm_load_print_meta: max token length = 93
0.00.360.257 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.396 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.402 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.402 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.403 I llama_new_context_with_model: n_batch       = 2048
0.00.365.403 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.404 I llama_new_context_with_model: flash_attn    = 0
0.00.365.406 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.406 I llama_new_context_with_model: freq_scale    = 1
0.00.365.407 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.271 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.285 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.373 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.562 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.569 I llama_new_context_with_model: graph nodes  = 601
0.00.381.569 I llama_new_context_with_model: graph splits = 1
0.00.381.571 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.139 I main: llama threadpool init, n_threads = 4
0.00.462.153 I 
0.00.462.224 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.462.227 I 
0.00.462.274 I sampler seed: 2704821590
0.00.462.285 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.296 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.300 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.300 I 
 increably, a majestic creature of the skies, gliding gracefully through the azure canvas. 

**What is the meaning of the simile "a majestic creature of

0.02.637.282 I llama_perf_sampler_print:    sampling time =       4.97 ms /    33 runs   (    0.15 ms per token,  6637.17 tokens per second)
0.02.637.285 I llama_perf_context_print:        load time =     461.34 ms
0.02.637.286 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.637.287 I llama_perf_context_print:        eval time =    2155.50 ms /    32 runs   (   67.36 ms per token,    14.85 tokens per second)
0.02.637.289 I llama_perf_context_print:       total time =    2175.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.547 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.026.911 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.921 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.940 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.940 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.941 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.942 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.942 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.942 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.946 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.947 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.947 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.948 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.948 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.770 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.136.136 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.142.989 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.997 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.999 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.143.002 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.143.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.143.004 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.143.004 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.143.005 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.143.009 I llama_model_loader: - type  f32:   37 tensors
0.00.143.010 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.989 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.837 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.315 I llm_load_vocab: special tokens cache size = 5
0.00.282.432 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.451 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.451 I llm_load_print_meta: arch             = gemma
0.00.282.452 I llm_load_print_meta: vocab type       = SPM
0.00.282.452 I llm_load_print_meta: n_vocab          = 256000
0.00.282.453 I llm_load_print_meta: n_merges         = 0
0.00.282.453 I llm_load_print_meta: vocab_only       = 0
0.00.282.454 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.454 I llm_load_print_meta: n_embd           = 2048
0.00.282.454 I llm_load_print_meta: n_layer          = 18
0.00.282.467 I llm_load_print_meta: n_head           = 8
0.00.282.468 I llm_load_print_meta: n_head_kv        = 1
0.00.282.468 I llm_load_print_meta: n_rot            = 256
0.00.282.468 I llm_load_print_meta: n_swa            = 0
0.00.282.469 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.469 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.470 I llm_load_print_meta: n_gqa            = 8
0.00.282.471 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.472 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.473 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.474 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.475 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.475 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.476 I llm_load_print_meta: n_ff             = 16384
0.00.282.476 I llm_load_print_meta: n_expert         = 0
0.00.282.477 I llm_load_print_meta: n_expert_used    = 0
0.00.282.477 I llm_load_print_meta: causal attn      = 1
0.00.282.477 I llm_load_print_meta: pooling type     = 0
0.00.282.477 I llm_load_print_meta: rope type        = 2
0.00.282.478 I llm_load_print_meta: rope scaling     = linear
0.00.282.479 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.479 I llm_load_print_meta: freq_scale_train = 1
0.00.282.480 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.480 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.480 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.481 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.481 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.481 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.482 I llm_load_print_meta: model type       = 2B
0.00.282.483 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.483 I llm_load_print_meta: model params     = 2.51 B
0.00.282.484 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.485 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.485 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.486 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.486 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.486 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.486 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.487 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.487 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.488 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.488 I llm_load_print_meta: max token length = 93
0.00.362.942 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.362.949 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.949 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.362.950 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.362.951 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.362.951 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.368.221 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.229 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.229 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.230 I llama_new_context_with_model: n_batch       = 2048
0.00.368.230 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.231 I llama_new_context_with_model: flash_attn    = 0
0.00.368.234 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.235 I llama_new_context_with_model: freq_scale    = 1
0.00.368.236 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.372 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.389 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.485 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.832 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.839 I llama_new_context_with_model: graph nodes  = 601
0.00.384.839 I llama_new_context_with_model: graph splits = 1
0.00.384.841 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.010 I main: llama threadpool init, n_threads = 4
0.00.474.025 I 
0.00.474.096 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.099 I 
0.00.474.142 I sampler seed: 3547250182
0.00.474.152 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.161 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.173 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.176 I 
 increasels? 

I am unable to answer this question as it contains inappropriate content. [end of text]


0.01.854.989 I llama_perf_sampler_print:    sampling time =       3.11 ms /    20 runs   (    0.16 ms per token,  6432.94 tokens per second)
0.01.854.992 I llama_perf_context_print:        load time =     473.24 ms
0.01.854.993 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.854.994 I llama_perf_context_print:        eval time =    1368.32 ms /    19 runs   (   72.02 ms per token,    13.89 tokens per second)
0.01.854.995 I llama_perf_context_print:       total time =    1380.99 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.434 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.632 I main: llama backend init
0.00.000.639 I main: load the model and apply lora adapter, if any
0.00.021.006 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.013 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.020 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.025 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.029 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.030 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.031 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.031 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.032 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.032 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.037 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.038 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.038 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.039 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.040 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.606 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.043 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.835 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.841 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.842 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.842 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.843 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.844 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.844 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.846 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.847 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.848 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.849 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.850 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.852 I llama_model_loader: - type  f32:   37 tensors
0.00.129.853 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.482 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.976 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.578 I llm_load_vocab: special tokens cache size = 5
0.00.264.568 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.583 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.584 I llm_load_print_meta: arch             = gemma
0.00.264.584 I llm_load_print_meta: vocab type       = SPM
0.00.264.585 I llm_load_print_meta: n_vocab          = 256000
0.00.264.585 I llm_load_print_meta: n_merges         = 0
0.00.264.586 I llm_load_print_meta: vocab_only       = 0
0.00.264.586 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.586 I llm_load_print_meta: n_embd           = 2048
0.00.264.586 I llm_load_print_meta: n_layer          = 18
0.00.264.597 I llm_load_print_meta: n_head           = 8
0.00.264.598 I llm_load_print_meta: n_head_kv        = 1
0.00.264.598 I llm_load_print_meta: n_rot            = 256
0.00.264.599 I llm_load_print_meta: n_swa            = 0
0.00.264.599 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.599 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.600 I llm_load_print_meta: n_gqa            = 8
0.00.264.601 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.602 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.603 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.605 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.605 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.606 I llm_load_print_meta: n_ff             = 16384
0.00.264.607 I llm_load_print_meta: n_expert         = 0
0.00.264.607 I llm_load_print_meta: n_expert_used    = 0
0.00.264.607 I llm_load_print_meta: causal attn      = 1
0.00.264.608 I llm_load_print_meta: pooling type     = 0
0.00.264.608 I llm_load_print_meta: rope type        = 2
0.00.264.609 I llm_load_print_meta: rope scaling     = linear
0.00.264.610 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.610 I llm_load_print_meta: freq_scale_train = 1
0.00.264.611 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.611 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.611 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.611 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.612 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.612 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.612 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.613 I llm_load_print_meta: model type       = 2B
0.00.264.613 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.614 I llm_load_print_meta: model params     = 2.51 B
0.00.264.615 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.616 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.616 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.616 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.617 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.617 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.617 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.617 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.618 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.618 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.619 I llm_load_print_meta: max token length = 93
0.00.336.218 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.227 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.656 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.663 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.664 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.664 I llama_new_context_with_model: n_batch       = 2048
0.00.341.665 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.666 I llama_new_context_with_model: flash_attn    = 0
0.00.341.670 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.671 I llama_new_context_with_model: freq_scale    = 1
0.00.341.672 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.750 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.767 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.862 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.094 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.101 I llama_new_context_with_model: graph nodes  = 601
0.00.359.101 I llama_new_context_with_model: graph splits = 1
0.00.359.104 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.729 I main: llama threadpool init, n_threads = 4
0.00.449.744 I 
0.00.449.812 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.449.815 I 
0.00.449.857 I sampler seed: 619356674
0.00.449.868 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.872 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.873 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.873 I 
 increably.

I am unable to generate a response that includes sexually suggestive or inappropriate content. [end of text]


0.01.962.713 I llama_perf_sampler_print:    sampling time =       3.08 ms /    21 runs   (    0.15 ms per token,  6809.34 tokens per second)
0.01.962.715 I llama_perf_context_print:        load time =     449.07 ms
0.01.962.716 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.962.718 I llama_perf_context_print:        eval time =    1500.96 ms /    20 runs   (   75.05 ms per token,    13.32 tokens per second)
0.01.962.718 I llama_perf_context_print:       total time =    1512.99 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.410s
user	0m30.803s
sys	0m9.224s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4232 (6acce397)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40201.86 ms
main:    total time = 40201.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.401 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.410 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.419 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.424 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.424 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.428 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.429 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.429 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.430 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.430 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.431 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.434 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.435 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.436 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.437 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.437 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.443 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.852 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.722 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.728 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.729 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.730 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.730 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.731 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.732 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.734 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.735 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.736 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.737 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.738 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.741 I llama_model_loader: - type  f32:   37 tensors
0.00.130.742 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.742 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.019 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.971 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.439 I llm_load_vocab: special tokens cache size = 5
0.00.264.227 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.243 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.243 I llm_load_print_meta: arch             = gemma
0.00.264.244 I llm_load_print_meta: vocab type       = SPM
0.00.264.244 I llm_load_print_meta: n_vocab          = 256000
0.00.264.245 I llm_load_print_meta: n_merges         = 0
0.00.264.245 I llm_load_print_meta: vocab_only       = 0
0.00.264.245 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.246 I llm_load_print_meta: n_embd           = 2048
0.00.264.246 I llm_load_print_meta: n_layer          = 18
0.00.264.258 I llm_load_print_meta: n_head           = 8
0.00.264.259 I llm_load_print_meta: n_head_kv        = 1
0.00.264.259 I llm_load_print_meta: n_rot            = 256
0.00.264.259 I llm_load_print_meta: n_swa            = 0
0.00.264.260 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.260 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.261 I llm_load_print_meta: n_gqa            = 8
0.00.264.262 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.263 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.264 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.265 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.266 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.266 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.266 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.267 I llm_load_print_meta: n_ff             = 16384
0.00.264.268 I llm_load_print_meta: n_expert         = 0
0.00.264.268 I llm_load_print_meta: n_expert_used    = 0
0.00.264.269 I llm_load_print_meta: causal attn      = 1
0.00.264.269 I llm_load_print_meta: pooling type     = 0
0.00.264.269 I llm_load_print_meta: rope type        = 2
0.00.264.270 I llm_load_print_meta: rope scaling     = linear
0.00.264.271 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.272 I llm_load_print_meta: freq_scale_train = 1
0.00.264.272 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.272 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.273 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.273 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.273 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.273 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.274 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.274 I llm_load_print_meta: model type       = 2B
0.00.264.275 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.275 I llm_load_print_meta: model params     = 2.51 B
0.00.264.276 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.276 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.277 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.277 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.277 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.277 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.278 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.278 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.279 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.279 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.279 I llm_load_print_meta: max token length = 93
0.00.323.598 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.606 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.607 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.607 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.608 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.608 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.822 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.830 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.830 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.831 I llama_new_context_with_model: n_batch       = 2048
0.00.328.831 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.832 I llama_new_context_with_model: flash_attn    = 0
0.00.328.835 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.836 I llama_new_context_with_model: freq_scale    = 1
0.00.328.836 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.041 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.055 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.151 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.443 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.450 I llama_new_context_with_model: graph nodes  = 601
0.00.345.451 I llama_new_context_with_model: graph splits = 1
0.00.345.453 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.004 I main: llama threadpool init, n_threads = 4
0.00.421.020 I 
0.00.421.090 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.421.093 I 
0.00.421.135 I sampler seed: 2384722880
0.00.421.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.158 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.162 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.163 I 
 increasities, and polyamory.

I am interested in exploring these topics, but I am hesitant to delve into them due to concerns about potential misunderstandings

0.02.018.803 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6397.83 tokens per second)
0.02.018.806 I llama_perf_context_print:        load time =     420.23 ms
0.02.018.808 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.018.810 I llama_perf_context_print:        eval time =    1579.24 ms /    32 runs   (   49.35 ms per token,    20.26 tokens per second)
0.02.018.811 I llama_perf_context_print:       total time =    1597.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4232 (6acce397)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40180.23 ms
main:    total time = 40180.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.527 I build: 4232 (6acce397) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.715 I main: llama backend init
0.00.000.721 I main: load the model and apply lora adapter, if any
0.00.021.362 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.377 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.383 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.384 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.388 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.390 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.394 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.395 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.396 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.774 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.205 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.989 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.997 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.998 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.998 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.000 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.001 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.003 I llama_model_loader: - type  f32:   37 tensors
0.00.130.004 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.005 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.871 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.234.495 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.234.929 I llm_load_vocab: special tokens cache size = 5
0.00.255.787 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.255.802 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.255.802 I llm_load_print_meta: arch             = gemma
0.00.255.803 I llm_load_print_meta: vocab type       = SPM
0.00.255.803 I llm_load_print_meta: n_vocab          = 256000
0.00.255.804 I llm_load_print_meta: n_merges         = 0
0.00.255.804 I llm_load_print_meta: vocab_only       = 0
0.00.255.805 I llm_load_print_meta: n_ctx_train      = 8192
0.00.255.805 I llm_load_print_meta: n_embd           = 2048
0.00.255.805 I llm_load_print_meta: n_layer          = 18
0.00.255.816 I llm_load_print_meta: n_head           = 8
0.00.255.817 I llm_load_print_meta: n_head_kv        = 1
0.00.255.818 I llm_load_print_meta: n_rot            = 256
0.00.255.818 I llm_load_print_meta: n_swa            = 0
0.00.255.819 I llm_load_print_meta: n_embd_head_k    = 256
0.00.255.819 I llm_load_print_meta: n_embd_head_v    = 256
0.00.255.820 I llm_load_print_meta: n_gqa            = 8
0.00.255.821 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.255.822 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.255.823 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.255.825 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.255.825 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.255.826 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.255.826 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.255.827 I llm_load_print_meta: n_ff             = 16384
0.00.255.828 I llm_load_print_meta: n_expert         = 0
0.00.255.831 I llm_load_print_meta: n_expert_used    = 0
0.00.255.831 I llm_load_print_meta: causal attn      = 1
0.00.255.831 I llm_load_print_meta: pooling type     = 0
0.00.255.832 I llm_load_print_meta: rope type        = 2
0.00.255.832 I llm_load_print_meta: rope scaling     = linear
0.00.255.833 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.255.834 I llm_load_print_meta: freq_scale_train = 1
0.00.255.834 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.255.835 I llm_load_print_meta: rope_finetuned   = unknown
0.00.255.835 I llm_load_print_meta: ssm_d_conv       = 0
0.00.255.835 I llm_load_print_meta: ssm_d_inner      = 0
0.00.255.836 I llm_load_print_meta: ssm_d_state      = 0
0.00.255.836 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.255.836 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.255.837 I llm_load_print_meta: model type       = 2B
0.00.255.837 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.255.838 I llm_load_print_meta: model params     = 2.51 B
0.00.255.839 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.255.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.255.840 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.255.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.255.841 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.255.842 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.255.842 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.255.842 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.255.843 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.255.844 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.255.844 I llm_load_print_meta: max token length = 93
0.00.312.871 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.318.032 I llama_new_context_with_model: n_seq_max     = 1
0.00.318.038 I llama_new_context_with_model: n_ctx         = 4096
0.00.318.038 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.318.039 I llama_new_context_with_model: n_batch       = 2048
0.00.318.039 I llama_new_context_with_model: n_ubatch      = 512
0.00.318.040 I llama_new_context_with_model: flash_attn    = 0
0.00.318.042 I llama_new_context_with_model: freq_base     = 10000.0
0.00.318.043 I llama_new_context_with_model: freq_scale    = 1
0.00.318.043 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.333.711 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.333.727 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.333.827 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.335.097 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.335.104 I llama_new_context_with_model: graph nodes  = 601
0.00.335.105 I llama_new_context_with_model: graph splits = 1
0.00.335.107 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.585 I main: llama threadpool init, n_threads = 4
0.00.411.601 I 
0.00.411.694 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.411.697 I 
0.00.411.738 I sampler seed: 2562587002
0.00.411.749 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.411.757 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.411.760 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.411.760 I 
 seconded.

I am not sure what you mean by "seconded." Could you please explain?

I apologize for any inconvenience. I am here to

0.01.967.813 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6415.24 tokens per second)
0.01.967.816 I llama_perf_context_print:        load time =     410.85 ms
0.01.967.818 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.967.820 I llama_perf_context_print:        eval time =    1537.40 ms /    32 runs   (   48.04 ms per token,    20.81 tokens per second)
0.01.967.820 I llama_perf_context_print:       total time =    1556.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.144s
user	10m24.020s
sys	0m6.710s
