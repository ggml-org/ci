+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.621 I build: 3807 (37f8c7b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.774 I main: load the model and apply lora adapter, if any
0.00.024.791 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.977 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.061 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.072 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.073 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.078 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.078 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.080 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.081 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.083 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.083 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.089 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.090 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.091 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.092 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.093 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.150 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.122 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.213 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.220 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.221 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.222 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.222 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.227 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.229 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.230 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.231 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.239 I llama_model_loader: - type  f32:   37 tensors
0.00.197.242 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.376 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.394 I llm_load_vocab: special tokens cache size = 5
0.00.531.187 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.243 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.244 I llm_load_print_meta: arch             = gemma
0.00.531.245 I llm_load_print_meta: vocab type       = SPM
0.00.531.245 I llm_load_print_meta: n_vocab          = 256000
0.00.531.248 I llm_load_print_meta: n_merges         = 0
0.00.531.248 I llm_load_print_meta: vocab_only       = 0
0.00.531.249 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.249 I llm_load_print_meta: n_embd           = 2048
0.00.531.249 I llm_load_print_meta: n_layer          = 18
0.00.531.282 I llm_load_print_meta: n_head           = 8
0.00.531.289 I llm_load_print_meta: n_head_kv        = 1
0.00.531.290 I llm_load_print_meta: n_rot            = 256
0.00.531.290 I llm_load_print_meta: n_swa            = 0
0.00.531.291 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.291 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.297 I llm_load_print_meta: n_gqa            = 8
0.00.531.302 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.307 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.308 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.310 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.310 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.311 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.311 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.316 I llm_load_print_meta: n_ff             = 16384
0.00.531.316 I llm_load_print_meta: n_expert         = 0
0.00.531.317 I llm_load_print_meta: n_expert_used    = 0
0.00.531.317 I llm_load_print_meta: causal attn      = 1
0.00.531.317 I llm_load_print_meta: pooling type     = 0
0.00.531.318 I llm_load_print_meta: rope type        = 2
0.00.531.318 I llm_load_print_meta: rope scaling     = linear
0.00.531.320 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.320 I llm_load_print_meta: freq_scale_train = 1
0.00.531.321 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.322 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.322 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.322 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.323 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.323 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.323 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.325 I llm_load_print_meta: model type       = 2B
0.00.531.326 I llm_load_print_meta: model ftype      = Q8_0
0.00.531.326 I llm_load_print_meta: model params     = 2.51 B
0.00.531.331 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.531.332 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.341 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.342 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.342 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.356 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.357 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.357 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.358 I llm_load_print_meta: max token length = 93
0.00.531.534 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.630.060 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.630.072 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.630.073 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.630.073 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.630.074 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.630.075 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.635.752 I llama_new_context_with_model: n_ctx      = 8192
0.00.635.760 I llama_new_context_with_model: n_batch    = 2048
0.00.635.760 I llama_new_context_with_model: n_ubatch   = 512
0.00.635.761 I llama_new_context_with_model: flash_attn = 0
0.00.635.764 I llama_new_context_with_model: freq_base  = 10000.0
0.00.635.766 I llama_new_context_with_model: freq_scale = 1
0.00.664.547 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.664.591 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.664.700 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.666.094 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.666.099 I llama_new_context_with_model: graph nodes  = 601
0.00.666.100 I llama_new_context_with_model: graph splits = 1
0.00.666.116 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.480 I main: llama threadpool init, n_threads = 4
0.01.279.490 I 
0.01.279.580 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.584 I 
0.01.279.743 I sampler seed: 2855601430
0.01.279.753 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.759 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.279.759 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to the narrator, who is unsure of what to do.

**The Narrator:** My mind is a tangled mess of conflicting emotions.

**

0.14.913.104 I llama_perf_sampler_print:    sampling time =      47.97 ms /    33 runs   (    1.45 ms per token,   688.00 tokens per second)
0.14.913.107 I llama_perf_context_print:        load time =    1276.63 ms
0.14.913.121 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.913.123 I llama_perf_context_print:        eval time =   13552.96 ms /    32 runs   (  423.53 ms per token,     2.36 tokens per second)
0.14.913.124 I llama_perf_context_print:       total time =   13633.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.679 I build: 3807 (37f8c7b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.889 I main: llama backend init
0.00.002.837 I main: load the model and apply lora adapter, if any
0.00.025.068 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.156 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.169 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.174 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.175 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.177 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.177 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.178 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.180 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.186 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.187 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.188 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.189 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.190 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.097 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.947 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.169 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.177 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.178 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.179 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.180 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.185 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.186 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.188 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.188 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.189 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.197 I llama_model_loader: - type  f32:   37 tensors
0.00.197.202 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.408 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.419 I llm_load_vocab: special tokens cache size = 5
0.00.528.981 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.529.039 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.529.041 I llm_load_print_meta: arch             = gemma
0.00.529.041 I llm_load_print_meta: vocab type       = SPM
0.00.529.042 I llm_load_print_meta: n_vocab          = 256000
0.00.529.044 I llm_load_print_meta: n_merges         = 0
0.00.529.045 I llm_load_print_meta: vocab_only       = 0
0.00.529.045 I llm_load_print_meta: n_ctx_train      = 8192
0.00.529.045 I llm_load_print_meta: n_embd           = 2048
0.00.529.046 I llm_load_print_meta: n_layer          = 18
0.00.529.079 I llm_load_print_meta: n_head           = 8
0.00.529.085 I llm_load_print_meta: n_head_kv        = 1
0.00.529.085 I llm_load_print_meta: n_rot            = 256
0.00.529.086 I llm_load_print_meta: n_swa            = 0
0.00.529.087 I llm_load_print_meta: n_embd_head_k    = 256
0.00.529.087 I llm_load_print_meta: n_embd_head_v    = 256
0.00.529.091 I llm_load_print_meta: n_gqa            = 8
0.00.529.096 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.529.122 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.529.124 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.529.125 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.529.126 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.529.126 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.529.127 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.529.132 I llm_load_print_meta: n_ff             = 16384
0.00.529.135 I llm_load_print_meta: n_expert         = 0
0.00.529.136 I llm_load_print_meta: n_expert_used    = 0
0.00.529.136 I llm_load_print_meta: causal attn      = 1
0.00.529.137 I llm_load_print_meta: pooling type     = 0
0.00.529.145 I llm_load_print_meta: rope type        = 2
0.00.529.146 I llm_load_print_meta: rope scaling     = linear
0.00.529.147 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.529.148 I llm_load_print_meta: freq_scale_train = 1
0.00.529.148 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.529.149 I llm_load_print_meta: rope_finetuned   = unknown
0.00.529.149 I llm_load_print_meta: ssm_d_conv       = 0
0.00.529.152 I llm_load_print_meta: ssm_d_inner      = 0
0.00.529.152 I llm_load_print_meta: ssm_d_state      = 0
0.00.529.153 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.529.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.529.161 I llm_load_print_meta: model type       = 2B
0.00.529.162 I llm_load_print_meta: model ftype      = Q8_0
0.00.529.165 I llm_load_print_meta: model params     = 2.51 B
0.00.529.167 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.529.167 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.529.168 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.529.168 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.529.168 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.529.175 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.529.176 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.529.177 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.529.177 I llm_load_print_meta: max token length = 93
0.00.529.357 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.623.615 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.629.401 I llama_new_context_with_model: n_ctx      = 8192
0.00.629.410 I llama_new_context_with_model: n_batch    = 2048
0.00.629.410 I llama_new_context_with_model: n_ubatch   = 512
0.00.629.411 I llama_new_context_with_model: flash_attn = 0
0.00.629.415 I llama_new_context_with_model: freq_base  = 10000.0
0.00.629.416 I llama_new_context_with_model: freq_scale = 1
0.00.659.782 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.659.828 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.943 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.661.345 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.661.350 I llama_new_context_with_model: graph nodes  = 601
0.00.661.351 I llama_new_context_with_model: graph splits = 1
0.00.661.367 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.273.310 I main: llama threadpool init, n_threads = 4
0.01.273.320 I 
0.01.273.410 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.273.414 I 
0.01.273.582 I sampler seed: 4280426386
0.01.273.594 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.601 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.273.602 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and a penchant for mischief, leading to many a hilarious anecdote.

This individual possesses an exceptional memory for details and is able to recall even the most

0.14.848.115 I llama_perf_sampler_print:    sampling time =      48.82 ms /    33 runs   (    1.48 ms per token,   675.94 tokens per second)
0.14.848.118 I llama_perf_context_print:        load time =    1270.39 ms
0.14.848.119 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.848.120 I llama_perf_context_print:        eval time =   13491.64 ms /    32 runs   (  421.61 ms per token,     2.37 tokens per second)
0.14.848.121 I llama_perf_context_print:       total time =   13574.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.652 I build: 3807 (37f8c7b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.024.495 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.690 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.781 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.792 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.794 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.799 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.800 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.801 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.802 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.803 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.804 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.811 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.812 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.813 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.815 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.817 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.477 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.241 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.456 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.464 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.465 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.466 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.466 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.467 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.468 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.472 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.473 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.474 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.475 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.483 I llama_model_loader: - type  f32:   37 tensors
0.00.196.487 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.369 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.379 I llm_load_vocab: special tokens cache size = 5
0.00.527.702 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.763 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.763 I llm_load_print_meta: arch             = gemma
0.00.527.764 I llm_load_print_meta: vocab type       = SPM
0.00.527.765 I llm_load_print_meta: n_vocab          = 256000
0.00.527.767 I llm_load_print_meta: n_merges         = 0
0.00.527.768 I llm_load_print_meta: vocab_only       = 0
0.00.527.768 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.769 I llm_load_print_meta: n_embd           = 2048
0.00.527.770 I llm_load_print_meta: n_layer          = 18
0.00.527.802 I llm_load_print_meta: n_head           = 8
0.00.527.809 I llm_load_print_meta: n_head_kv        = 1
0.00.527.810 I llm_load_print_meta: n_rot            = 256
0.00.527.810 I llm_load_print_meta: n_swa            = 0
0.00.527.810 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.811 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.815 I llm_load_print_meta: n_gqa            = 8
0.00.527.820 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.824 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.826 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.827 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.828 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.828 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.829 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.834 I llm_load_print_meta: n_ff             = 16384
0.00.527.834 I llm_load_print_meta: n_expert         = 0
0.00.527.835 I llm_load_print_meta: n_expert_used    = 0
0.00.527.835 I llm_load_print_meta: causal attn      = 1
0.00.527.835 I llm_load_print_meta: pooling type     = 0
0.00.527.836 I llm_load_print_meta: rope type        = 2
0.00.527.836 I llm_load_print_meta: rope scaling     = linear
0.00.527.838 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.527.839 I llm_load_print_meta: freq_scale_train = 1
0.00.527.858 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.527.859 I llm_load_print_meta: rope_finetuned   = unknown
0.00.527.859 I llm_load_print_meta: ssm_d_conv       = 0
0.00.527.859 I llm_load_print_meta: ssm_d_inner      = 0
0.00.527.860 I llm_load_print_meta: ssm_d_state      = 0
0.00.527.860 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.527.860 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.527.861 I llm_load_print_meta: model type       = 2B
0.00.527.862 I llm_load_print_meta: model ftype      = Q8_0
0.00.527.863 I llm_load_print_meta: model params     = 2.51 B
0.00.527.864 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.527.864 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.527.865 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.527.874 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.527.874 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.527.875 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.527.876 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.527.876 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.527.877 I llm_load_print_meta: max token length = 93
0.00.528.057 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.606.027 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.606.038 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.606.039 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.606.040 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.606.041 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.606.042 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.611.513 I llama_new_context_with_model: n_ctx      = 8192
0.00.611.520 I llama_new_context_with_model: n_batch    = 2048
0.00.611.520 I llama_new_context_with_model: n_ubatch   = 512
0.00.611.521 I llama_new_context_with_model: flash_attn = 0
0.00.611.523 I llama_new_context_with_model: freq_base  = 10000.0
0.00.611.524 I llama_new_context_with_model: freq_scale = 1
0.00.640.191 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.640.235 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.640.348 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.641.775 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.641.782 I llama_new_context_with_model: graph nodes  = 601
0.00.641.783 I llama_new_context_with_model: graph splits = 1
0.00.641.807 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.255.125 I main: llama threadpool init, n_threads = 4
0.01.255.137 I 
0.01.255.236 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.255.241 I 
0.01.255.421 I sampler seed: 3226652714
0.01.255.433 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.255.438 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.255.440 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneurages. [end of text]


0.02.948.788 I llama_perf_sampler_print:    sampling time =       6.07 ms /     5 runs   (    1.21 ms per token,   823.59 tokens per second)
0.02.948.791 I llama_perf_context_print:        load time =    1252.18 ms
0.02.948.793 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.948.794 I llama_perf_context_print:        eval time =    1682.03 ms /     4 runs   (  420.51 ms per token,     2.38 tokens per second)
0.02.948.795 I llama_perf_context_print:       total time =    1693.67 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.648 I build: 3807 (37f8c7b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.025.104 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.280 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.368 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.378 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.380 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.383 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.384 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.385 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.386 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.387 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.388 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.394 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.394 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.396 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.398 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.619 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.188 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.338 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.346 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.347 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.348 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.349 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.350 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.351 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.354 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.355 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.356 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.356 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.358 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.365 I llama_model_loader: - type  f32:   37 tensors
0.00.197.368 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.315 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.298 I llm_load_vocab: special tokens cache size = 5
0.00.526.732 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.526.792 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.526.793 I llm_load_print_meta: arch             = gemma
0.00.526.794 I llm_load_print_meta: vocab type       = SPM
0.00.526.795 I llm_load_print_meta: n_vocab          = 256000
0.00.526.797 I llm_load_print_meta: n_merges         = 0
0.00.526.797 I llm_load_print_meta: vocab_only       = 0
0.00.526.798 I llm_load_print_meta: n_ctx_train      = 8192
0.00.526.798 I llm_load_print_meta: n_embd           = 2048
0.00.526.798 I llm_load_print_meta: n_layer          = 18
0.00.526.833 I llm_load_print_meta: n_head           = 8
0.00.526.841 I llm_load_print_meta: n_head_kv        = 1
0.00.526.842 I llm_load_print_meta: n_rot            = 256
0.00.526.842 I llm_load_print_meta: n_swa            = 0
0.00.526.843 I llm_load_print_meta: n_embd_head_k    = 256
0.00.526.843 I llm_load_print_meta: n_embd_head_v    = 256
0.00.526.848 I llm_load_print_meta: n_gqa            = 8
0.00.526.852 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.526.856 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.526.858 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.526.859 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.526.859 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.526.860 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.526.860 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.526.865 I llm_load_print_meta: n_ff             = 16384
0.00.526.865 I llm_load_print_meta: n_expert         = 0
0.00.526.866 I llm_load_print_meta: n_expert_used    = 0
0.00.526.867 I llm_load_print_meta: causal attn      = 1
0.00.526.867 I llm_load_print_meta: pooling type     = 0
0.00.526.868 I llm_load_print_meta: rope type        = 2
0.00.526.868 I llm_load_print_meta: rope scaling     = linear
0.00.526.869 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.526.870 I llm_load_print_meta: freq_scale_train = 1
0.00.526.871 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.526.871 I llm_load_print_meta: rope_finetuned   = unknown
0.00.526.871 I llm_load_print_meta: ssm_d_conv       = 0
0.00.526.872 I llm_load_print_meta: ssm_d_inner      = 0
0.00.526.872 I llm_load_print_meta: ssm_d_state      = 0
0.00.526.872 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.526.873 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.526.874 I llm_load_print_meta: model type       = 2B
0.00.526.875 I llm_load_print_meta: model ftype      = Q8_0
0.00.526.876 I llm_load_print_meta: model params     = 2.51 B
0.00.526.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.526.878 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.526.878 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.526.879 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.526.879 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.526.890 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.526.892 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.526.892 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.526.893 I llm_load_print_meta: max token length = 93
0.00.527.068 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.598.633 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.598.644 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.604.252 I llama_new_context_with_model: n_ctx      = 8192
0.00.604.260 I llama_new_context_with_model: n_batch    = 2048
0.00.604.260 I llama_new_context_with_model: n_ubatch   = 512
0.00.604.261 I llama_new_context_with_model: flash_attn = 0
0.00.604.263 I llama_new_context_with_model: freq_base  = 10000.0
0.00.604.264 I llama_new_context_with_model: freq_scale = 1
0.00.634.139 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.634.181 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.634.295 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.635.648 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.635.654 I llama_new_context_with_model: graph nodes  = 601
0.00.635.655 I llama_new_context_with_model: graph splits = 1
0.00.635.671 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.249.578 I main: llama threadpool init, n_threads = 4
0.01.249.590 I 
0.01.249.683 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.249.687 I 
0.01.249.850 I sampler seed: 2331453486
0.01.249.861 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.249.868 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.249.869 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.02.942.808 I llama_perf_sampler_print:    sampling time =       6.08 ms /     5 runs   (    1.22 ms per token,   822.10 tokens per second)
0.02.942.825 I llama_perf_context_print:        load time =    1246.69 ms
0.02.942.827 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.942.828 I llama_perf_context_print:        eval time =    1681.78 ms /     4 runs   (  420.44 ms per token,     2.38 tokens per second)
0.02.942.829 I llama_perf_context_print:       total time =    1693.24 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.207s
user	2m14.581s
sys	0m9.489s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3807 (37f8c7b4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200259.42 ms
main:    total time = 200259.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.672 I build: 3807 (37f8c7b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.833 I main: load the model and apply lora adapter, if any
0.00.024.598 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.786 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.874 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.886 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.887 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.891 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.893 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.894 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.895 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.896 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.896 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.902 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.903 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.904 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.905 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.906 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.666 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.482 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.687 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.694 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.695 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.696 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.697 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.698 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.699 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.702 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.702 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.703 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.704 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.705 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.713 I llama_model_loader: - type  f32:   37 tensors
0.00.196.716 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.717 I llama_model_loader: - type q6_K:   19 tensors
0.00.467.589 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.610 I llm_load_vocab: special tokens cache size = 5
0.00.527.157 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.211 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.212 I llm_load_print_meta: arch             = gemma
0.00.527.213 I llm_load_print_meta: vocab type       = SPM
0.00.527.214 I llm_load_print_meta: n_vocab          = 256000
0.00.527.216 I llm_load_print_meta: n_merges         = 0
0.00.527.217 I llm_load_print_meta: vocab_only       = 0
0.00.527.217 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.217 I llm_load_print_meta: n_embd           = 2048
0.00.527.218 I llm_load_print_meta: n_layer          = 18
0.00.527.251 I llm_load_print_meta: n_head           = 8
0.00.527.258 I llm_load_print_meta: n_head_kv        = 1
0.00.527.258 I llm_load_print_meta: n_rot            = 256
0.00.527.258 I llm_load_print_meta: n_swa            = 0
0.00.527.259 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.259 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.263 I llm_load_print_meta: n_gqa            = 8
0.00.527.268 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.272 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.273 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.275 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.275 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.276 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.276 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.281 I llm_load_print_meta: n_ff             = 16384
0.00.527.281 I llm_load_print_meta: n_expert         = 0
0.00.527.282 I llm_load_print_meta: n_expert_used    = 0
0.00.527.282 I llm_load_print_meta: causal attn      = 1
0.00.527.282 I llm_load_print_meta: pooling type     = 0
0.00.527.283 I llm_load_print_meta: rope type        = 2
0.00.527.283 I llm_load_print_meta: rope scaling     = linear
0.00.527.284 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.527.285 I llm_load_print_meta: freq_scale_train = 1
0.00.527.285 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.527.286 I llm_load_print_meta: rope_finetuned   = unknown
0.00.527.286 I llm_load_print_meta: ssm_d_conv       = 0
0.00.527.286 I llm_load_print_meta: ssm_d_inner      = 0
0.00.527.287 I llm_load_print_meta: ssm_d_state      = 0
0.00.527.287 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.527.287 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.527.288 I llm_load_print_meta: model type       = 2B
0.00.527.289 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.527.289 I llm_load_print_meta: model params     = 2.51 B
0.00.527.290 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.527.291 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.527.291 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.527.292 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.527.292 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.527.293 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.527.293 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.527.293 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.527.294 I llm_load_print_meta: max token length = 93
0.00.527.462 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.589.062 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.589.073 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.589.074 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.589.074 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.589.075 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.589.075 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.594.694 I llama_new_context_with_model: n_ctx      = 8192
0.00.594.701 I llama_new_context_with_model: n_batch    = 2048
0.00.594.701 I llama_new_context_with_model: n_ubatch   = 512
0.00.594.702 I llama_new_context_with_model: flash_attn = 0
0.00.594.705 I llama_new_context_with_model: freq_base  = 10000.0
0.00.594.706 I llama_new_context_with_model: freq_scale = 1
0.00.625.009 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.625.053 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.625.165 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.626.546 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.626.552 I llama_new_context_with_model: graph nodes  = 601
0.00.626.552 I llama_new_context_with_model: graph splits = 1
0.00.626.569 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.209.831 I main: llama threadpool init, n_threads = 4
0.01.209.841 I 
0.01.209.928 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.209.932 I 
0.01.210.101 I sampler seed: 3136900017
0.01.210.111 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.210.116 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.210.117 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and the anxieties that accompany them.

## Exploring the Intersection of Trauma, Attachment, and Identity

**Trauma** can disrupt the development of healthy attachment

0.12.210.646 I llama_perf_sampler_print:    sampling time =      48.01 ms /    33 runs   (    1.45 ms per token,   687.43 tokens per second)
0.12.210.651 I llama_perf_context_print:        load time =    1206.92 ms
0.12.210.652 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.210.654 I llama_perf_context_print:        eval time =   10919.98 ms /    32 runs   (  341.25 ms per token,     2.93 tokens per second)
0.12.210.655 I llama_perf_context_print:       total time =   11000.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3807 (37f8c7b4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199851.10 ms
main:    total time = 199851.10 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.636 I build: 3807 (37f8c7b4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.812 I main: load the model and apply lora adapter, if any
0.00.024.419 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.516 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.530 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.532 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.536 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.539 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.540 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.541 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.543 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.545 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.552 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.557 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.559 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.566 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.568 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.582 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.665 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.673 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.674 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.675 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.675 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.676 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.677 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.681 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.681 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.691 I llama_model_loader: - type  f32:   37 tensors
0.00.196.695 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.695 I llama_model_loader: - type q6_K:   19 tensors
0.00.467.836 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.949 I llm_load_vocab: special tokens cache size = 5
0.00.527.601 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.658 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.659 I llm_load_print_meta: arch             = gemma
0.00.527.660 I llm_load_print_meta: vocab type       = SPM
0.00.527.661 I llm_load_print_meta: n_vocab          = 256000
0.00.527.664 I llm_load_print_meta: n_merges         = 0
0.00.527.664 I llm_load_print_meta: vocab_only       = 0
0.00.527.665 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.665 I llm_load_print_meta: n_embd           = 2048
0.00.527.666 I llm_load_print_meta: n_layer          = 18
0.00.527.700 I llm_load_print_meta: n_head           = 8
0.00.527.707 I llm_load_print_meta: n_head_kv        = 1
0.00.527.707 I llm_load_print_meta: n_rot            = 256
0.00.527.708 I llm_load_print_meta: n_swa            = 0
0.00.527.708 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.709 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.713 I llm_load_print_meta: n_gqa            = 8
0.00.527.718 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.723 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.724 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.725 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.725 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.725 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.726 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.730 I llm_load_print_meta: n_ff             = 16384
0.00.527.731 I llm_load_print_meta: n_expert         = 0
0.00.527.731 I llm_load_print_meta: n_expert_used    = 0
0.00.527.732 I llm_load_print_meta: causal attn      = 1
0.00.527.732 I llm_load_print_meta: pooling type     = 0
0.00.527.732 I llm_load_print_meta: rope type        = 2
0.00.527.733 I llm_load_print_meta: rope scaling     = linear
0.00.527.734 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.527.735 I llm_load_print_meta: freq_scale_train = 1
0.00.527.735 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.527.735 I llm_load_print_meta: rope_finetuned   = unknown
0.00.527.736 I llm_load_print_meta: ssm_d_conv       = 0
0.00.527.736 I llm_load_print_meta: ssm_d_inner      = 0
0.00.527.736 I llm_load_print_meta: ssm_d_state      = 0
0.00.527.737 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.527.737 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.527.738 I llm_load_print_meta: model type       = 2B
0.00.527.739 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.527.739 I llm_load_print_meta: model params     = 2.51 B
0.00.527.740 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.527.741 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.527.741 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.527.742 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.527.742 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.527.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.527.743 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.527.743 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.527.744 I llm_load_print_meta: max token length = 93
0.00.527.912 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.585.712 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.591.244 I llama_new_context_with_model: n_ctx      = 8192
0.00.591.251 I llama_new_context_with_model: n_batch    = 2048
0.00.591.251 I llama_new_context_with_model: n_ubatch   = 512
0.00.591.252 I llama_new_context_with_model: flash_attn = 0
0.00.591.255 I llama_new_context_with_model: freq_base  = 10000.0
0.00.591.256 I llama_new_context_with_model: freq_scale = 1
0.00.620.978 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.621.023 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.621.131 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.622.486 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.622.493 I llama_new_context_with_model: graph nodes  = 601
0.00.622.494 I llama_new_context_with_model: graph splits = 1
0.00.622.512 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.201.739 I main: llama threadpool init, n_threads = 4
0.01.201.751 I 
0.01.201.844 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.201.848 I 
0.01.202.005 I sampler seed: 866084420
0.01.202.015 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.202.020 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.202.021 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.02.577.220 I llama_perf_sampler_print:    sampling time =       6.03 ms /     5 runs   (    1.21 ms per token,   829.32 tokens per second)
0.02.577.222 I llama_perf_context_print:        load time =    1198.84 ms
0.02.577.245 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.577.247 I llama_perf_context_print:        eval time =    1363.69 ms /     4 runs   (  340.92 ms per token,     2.93 tokens per second)
0.02.577.247 I llama_perf_context_print:       total time =    1375.49 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m57.675s
user	49m45.950s
sys	0m6.634s
