+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.622 I build: 3773 (37f3a381) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.822 I main: llama backend init
0.00.002.756 I main: load the model and apply lora adapter, if any
0.00.024.500 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.689 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.771 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.781 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.783 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.787 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.788 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.789 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.790 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.790 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.791 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.796 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.798 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.799 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.800 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.801 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.375 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.767 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.786 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.792 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.793 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.794 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.795 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.796 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.797 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.800 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.800 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.801 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.802 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.803 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.810 I llama_model_loader: - type  f32:   37 tensors
0.00.197.814 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.962 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.049 I llm_load_vocab: special tokens cache size = 5
0.00.519.897 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.519.956 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.519.960 I llm_load_print_meta: arch             = gemma
0.00.519.961 I llm_load_print_meta: vocab type       = SPM
0.00.519.961 I llm_load_print_meta: n_vocab          = 256000
0.00.519.964 I llm_load_print_meta: n_merges         = 0
0.00.519.965 I llm_load_print_meta: vocab_only       = 0
0.00.519.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.519.965 I llm_load_print_meta: n_embd           = 2048
0.00.519.966 I llm_load_print_meta: n_layer          = 18
0.00.519.999 I llm_load_print_meta: n_head           = 8
0.00.520.008 I llm_load_print_meta: n_head_kv        = 1
0.00.520.010 I llm_load_print_meta: n_rot            = 256
0.00.520.010 I llm_load_print_meta: n_swa            = 0
0.00.520.012 I llm_load_print_meta: n_embd_head_k    = 256
0.00.520.012 I llm_load_print_meta: n_embd_head_v    = 256
0.00.520.016 I llm_load_print_meta: n_gqa            = 8
0.00.520.021 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.520.027 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.520.028 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.520.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.520.032 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.520.032 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.520.033 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.520.037 I llm_load_print_meta: n_ff             = 16384
0.00.520.048 I llm_load_print_meta: n_expert         = 0
0.00.520.050 I llm_load_print_meta: n_expert_used    = 0
0.00.520.050 I llm_load_print_meta: causal attn      = 1
0.00.520.050 I llm_load_print_meta: pooling type     = 0
0.00.520.051 I llm_load_print_meta: rope type        = 2
0.00.520.052 I llm_load_print_meta: rope scaling     = linear
0.00.520.054 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.520.055 I llm_load_print_meta: freq_scale_train = 1
0.00.520.067 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.520.068 I llm_load_print_meta: rope_finetuned   = unknown
0.00.520.068 I llm_load_print_meta: ssm_d_conv       = 0
0.00.520.069 I llm_load_print_meta: ssm_d_inner      = 0
0.00.520.069 I llm_load_print_meta: ssm_d_state      = 0
0.00.520.070 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.520.070 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.520.071 I llm_load_print_meta: model type       = 2B
0.00.520.072 I llm_load_print_meta: model ftype      = Q8_0
0.00.520.073 I llm_load_print_meta: model params     = 2.51 B
0.00.520.073 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.520.074 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.520.075 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.520.076 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.520.076 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.520.085 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.520.086 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.520.087 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.520.088 I llm_load_print_meta: max token length = 93
0.00.520.261 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.620.525 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.620.535 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.620.536 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.620.537 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.620.537 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.620.538 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.626.218 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.225 I llama_new_context_with_model: n_batch    = 2048
0.00.626.226 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.226 I llama_new_context_with_model: flash_attn = 0
0.00.626.229 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.229 I llama_new_context_with_model: freq_scale = 1
0.00.654.970 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.655.011 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.655.121 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.656.516 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.656.523 I llama_new_context_with_model: graph nodes  = 601
0.00.656.523 I llama_new_context_with_model: graph splits = 1
0.00.656.538 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.209 I main: llama threadpool init, n_threads = 4
0.01.267.220 I 
0.01.267.314 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.318 I 
0.01.267.478 I sampler seed: 1898947368
0.01.267.488 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.492 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.267.493 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am a large language model, and I am able to generate human-quality text. I am trained on a massive dataset of text and

0.14.742.433 I llama_perf_sampler_print:    sampling time =      48.20 ms /    33 runs   (    1.46 ms per token,   684.70 tokens per second)
0.14.742.437 I llama_perf_context_print:        load time =    1264.38 ms
0.14.742.439 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.742.453 I llama_perf_context_print:        eval time =   13394.86 ms /    32 runs   (  418.59 ms per token,     2.39 tokens per second)
0.14.742.455 I llama_perf_context_print:       total time =   13475.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.679 I build: 3773 (37f3a381) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.901 I main: llama backend init
0.00.002.870 I main: load the model and apply lora adapter, if any
0.00.025.097 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.194 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.209 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.213 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.220 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.221 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.225 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.226 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.235 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.240 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.241 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.242 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.243 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.190 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.986 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.234 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.243 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.244 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.245 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.246 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.247 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.247 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.251 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.251 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.252 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.253 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.196.254 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.262 I llama_model_loader: - type  f32:   37 tensors
0.00.196.266 I llama_model_loader: - type q8_0:  127 tensors
0.00.466.049 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.467.132 I llm_load_vocab: special tokens cache size = 5
0.00.524.543 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.524.610 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.524.611 I llm_load_print_meta: arch             = gemma
0.00.524.612 I llm_load_print_meta: vocab type       = SPM
0.00.524.612 I llm_load_print_meta: n_vocab          = 256000
0.00.524.615 I llm_load_print_meta: n_merges         = 0
0.00.524.615 I llm_load_print_meta: vocab_only       = 0
0.00.524.616 I llm_load_print_meta: n_ctx_train      = 8192
0.00.524.616 I llm_load_print_meta: n_embd           = 2048
0.00.524.616 I llm_load_print_meta: n_layer          = 18
0.00.524.658 I llm_load_print_meta: n_head           = 8
0.00.524.664 I llm_load_print_meta: n_head_kv        = 1
0.00.524.665 I llm_load_print_meta: n_rot            = 256
0.00.524.665 I llm_load_print_meta: n_swa            = 0
0.00.524.666 I llm_load_print_meta: n_embd_head_k    = 256
0.00.524.666 I llm_load_print_meta: n_embd_head_v    = 256
0.00.524.671 I llm_load_print_meta: n_gqa            = 8
0.00.524.675 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.524.680 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.524.681 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.524.682 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.524.682 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.524.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.524.684 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.524.696 I llm_load_print_meta: n_ff             = 16384
0.00.524.697 I llm_load_print_meta: n_expert         = 0
0.00.524.698 I llm_load_print_meta: n_expert_used    = 0
0.00.524.698 I llm_load_print_meta: causal attn      = 1
0.00.524.699 I llm_load_print_meta: pooling type     = 0
0.00.524.699 I llm_load_print_meta: rope type        = 2
0.00.524.700 I llm_load_print_meta: rope scaling     = linear
0.00.524.702 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.524.703 I llm_load_print_meta: freq_scale_train = 1
0.00.524.704 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.524.704 I llm_load_print_meta: rope_finetuned   = unknown
0.00.524.705 I llm_load_print_meta: ssm_d_conv       = 0
0.00.524.705 I llm_load_print_meta: ssm_d_inner      = 0
0.00.524.706 I llm_load_print_meta: ssm_d_state      = 0
0.00.524.706 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.524.706 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.524.707 I llm_load_print_meta: model type       = 2B
0.00.524.708 I llm_load_print_meta: model ftype      = Q8_0
0.00.524.709 I llm_load_print_meta: model params     = 2.51 B
0.00.524.710 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.524.710 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.524.711 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.524.711 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.524.712 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.524.712 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.524.713 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.524.713 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.524.714 I llm_load_print_meta: max token length = 93
0.00.524.889 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.620.782 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.626.493 I llama_new_context_with_model: n_ctx      = 8192
0.00.626.501 I llama_new_context_with_model: n_batch    = 2048
0.00.626.501 I llama_new_context_with_model: n_ubatch   = 512
0.00.626.501 I llama_new_context_with_model: flash_attn = 0
0.00.626.504 I llama_new_context_with_model: freq_base  = 10000.0
0.00.626.504 I llama_new_context_with_model: freq_scale = 1
0.00.656.174 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.656.219 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.656.328 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.657.724 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.657.732 I llama_new_context_with_model: graph nodes  = 601
0.00.657.733 I llama_new_context_with_model: graph splits = 1
0.00.657.750 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.032 I main: llama threadpool init, n_threads = 4
0.01.271.042 I 
0.01.271.140 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.145 I 
0.01.271.313 I sampler seed: 1451409798
0.01.271.323 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.328 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.271.328 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

A scientist discovers a new species of bacteria that can produce a powerful antibiotic. The discovery is met with excitement and hope for a new era of

0.15.071.919 I llama_perf_sampler_print:    sampling time =      48.74 ms /    33 runs   (    1.48 ms per token,   677.05 tokens per second)
0.15.071.922 I llama_perf_context_print:        load time =    1268.08 ms
0.15.071.924 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.071.949 I llama_perf_context_print:        eval time =   13718.29 ms /    32 runs   (  428.70 ms per token,     2.33 tokens per second)
0.15.071.950 I llama_perf_context_print:       total time =   13800.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.648 I build: 3773 (37f3a381) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.024.569 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.788 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.873 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.884 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.885 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.889 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.890 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.891 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.892 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.892 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.893 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.899 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.901 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.903 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.904 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.905 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.419 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.582 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.589 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.590 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.591 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.591 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.593 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.593 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.597 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.598 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.599 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.599 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.600 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.607 I llama_model_loader: - type  f32:   37 tensors
0.00.197.611 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.137 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.468.160 I llm_load_vocab: special tokens cache size = 5
0.00.525.493 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.525.546 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.525.546 I llm_load_print_meta: arch             = gemma
0.00.525.547 I llm_load_print_meta: vocab type       = SPM
0.00.525.548 I llm_load_print_meta: n_vocab          = 256000
0.00.525.551 I llm_load_print_meta: n_merges         = 0
0.00.525.551 I llm_load_print_meta: vocab_only       = 0
0.00.525.552 I llm_load_print_meta: n_ctx_train      = 8192
0.00.525.552 I llm_load_print_meta: n_embd           = 2048
0.00.525.552 I llm_load_print_meta: n_layer          = 18
0.00.525.584 I llm_load_print_meta: n_head           = 8
0.00.525.591 I llm_load_print_meta: n_head_kv        = 1
0.00.525.591 I llm_load_print_meta: n_rot            = 256
0.00.525.592 I llm_load_print_meta: n_swa            = 0
0.00.525.592 I llm_load_print_meta: n_embd_head_k    = 256
0.00.525.592 I llm_load_print_meta: n_embd_head_v    = 256
0.00.525.617 I llm_load_print_meta: n_gqa            = 8
0.00.525.632 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.525.641 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.525.643 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.525.644 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.525.645 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.525.645 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.525.646 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.525.651 I llm_load_print_meta: n_ff             = 16384
0.00.525.651 I llm_load_print_meta: n_expert         = 0
0.00.525.652 I llm_load_print_meta: n_expert_used    = 0
0.00.525.653 I llm_load_print_meta: causal attn      = 1
0.00.525.653 I llm_load_print_meta: pooling type     = 0
0.00.525.653 I llm_load_print_meta: rope type        = 2
0.00.525.654 I llm_load_print_meta: rope scaling     = linear
0.00.525.658 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.525.659 I llm_load_print_meta: freq_scale_train = 1
0.00.525.659 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.525.659 I llm_load_print_meta: rope_finetuned   = unknown
0.00.525.660 I llm_load_print_meta: ssm_d_conv       = 0
0.00.525.660 I llm_load_print_meta: ssm_d_inner      = 0
0.00.525.660 I llm_load_print_meta: ssm_d_state      = 0
0.00.525.660 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.525.661 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.525.661 I llm_load_print_meta: model type       = 2B
0.00.525.662 I llm_load_print_meta: model ftype      = Q8_0
0.00.525.663 I llm_load_print_meta: model params     = 2.51 B
0.00.525.664 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.525.664 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.525.665 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.525.665 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.525.666 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.525.666 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.525.667 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.525.668 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.525.668 I llm_load_print_meta: max token length = 93
0.00.525.840 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.599.436 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.599.446 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.599.447 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.599.447 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.599.448 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.599.449 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.605.012 I llama_new_context_with_model: n_ctx      = 8192
0.00.605.018 I llama_new_context_with_model: n_batch    = 2048
0.00.605.019 I llama_new_context_with_model: n_ubatch   = 512
0.00.605.019 I llama_new_context_with_model: flash_attn = 0
0.00.605.021 I llama_new_context_with_model: freq_base  = 10000.0
0.00.605.022 I llama_new_context_with_model: freq_scale = 1
0.00.634.025 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.634.068 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.634.179 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.635.577 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.635.583 I llama_new_context_with_model: graph nodes  = 601
0.00.635.584 I llama_new_context_with_model: graph splits = 1
0.00.635.599 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.246.031 I main: llama threadpool init, n_threads = 4
0.01.246.042 I 
0.01.246.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.246.142 I 
0.01.246.304 I sampler seed: 1291612133
0.01.246.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.246.319 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.246.319 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the novel and their consequences.

**Answer:**

**Scandals and their Consequences in the Novel:**

Scandals permeate the

0.14.679.187 I llama_perf_sampler_print:    sampling time =      47.85 ms /    33 runs   (    1.45 ms per token,   689.63 tokens per second)
0.14.679.190 I llama_perf_context_print:        load time =    1243.16 ms
0.14.679.212 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.679.214 I llama_perf_context_print:        eval time =   13352.18 ms /    32 runs   (  417.26 ms per token,     2.40 tokens per second)
0.14.679.215 I llama_perf_context_print:       total time =   13433.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.640 I build: 3773 (37f3a381) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.002.826 I main: load the model and apply lora adapter, if any
0.00.024.262 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.469 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.564 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.576 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.577 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.581 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.585 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.587 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.588 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.589 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.590 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.599 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.600 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.602 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.604 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.606 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.798 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.225 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.227 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.235 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.236 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.237 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.239 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.243 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.243 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.244 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.245 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.246 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.253 I llama_model_loader: - type  f32:   37 tensors
0.00.197.258 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.219 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.462.255 I llm_load_vocab: special tokens cache size = 5
0.00.520.018 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.520.073 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.520.074 I llm_load_print_meta: arch             = gemma
0.00.520.074 I llm_load_print_meta: vocab type       = SPM
0.00.520.075 I llm_load_print_meta: n_vocab          = 256000
0.00.520.077 I llm_load_print_meta: n_merges         = 0
0.00.520.078 I llm_load_print_meta: vocab_only       = 0
0.00.520.078 I llm_load_print_meta: n_ctx_train      = 8192
0.00.520.078 I llm_load_print_meta: n_embd           = 2048
0.00.520.079 I llm_load_print_meta: n_layer          = 18
0.00.520.111 I llm_load_print_meta: n_head           = 8
0.00.520.118 I llm_load_print_meta: n_head_kv        = 1
0.00.520.118 I llm_load_print_meta: n_rot            = 256
0.00.520.119 I llm_load_print_meta: n_swa            = 0
0.00.520.119 I llm_load_print_meta: n_embd_head_k    = 256
0.00.520.120 I llm_load_print_meta: n_embd_head_v    = 256
0.00.520.124 I llm_load_print_meta: n_gqa            = 8
0.00.520.128 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.520.133 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.520.134 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.520.135 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.520.136 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.520.136 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.520.136 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.520.141 I llm_load_print_meta: n_ff             = 16384
0.00.520.141 I llm_load_print_meta: n_expert         = 0
0.00.520.142 I llm_load_print_meta: n_expert_used    = 0
0.00.520.142 I llm_load_print_meta: causal attn      = 1
0.00.520.142 I llm_load_print_meta: pooling type     = 0
0.00.520.143 I llm_load_print_meta: rope type        = 2
0.00.520.143 I llm_load_print_meta: rope scaling     = linear
0.00.520.144 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.520.145 I llm_load_print_meta: freq_scale_train = 1
0.00.520.145 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.520.146 I llm_load_print_meta: rope_finetuned   = unknown
0.00.520.146 I llm_load_print_meta: ssm_d_conv       = 0
0.00.520.146 I llm_load_print_meta: ssm_d_inner      = 0
0.00.520.147 I llm_load_print_meta: ssm_d_state      = 0
0.00.520.147 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.520.147 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.520.148 I llm_load_print_meta: model type       = 2B
0.00.520.149 I llm_load_print_meta: model ftype      = Q8_0
0.00.520.150 I llm_load_print_meta: model params     = 2.51 B
0.00.520.163 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.520.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.520.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.520.165 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.520.165 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.520.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.520.166 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.520.166 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.520.166 I llm_load_print_meta: max token length = 93
0.00.520.334 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.593.110 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.593.116 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.598.771 I llama_new_context_with_model: n_ctx      = 8192
0.00.598.778 I llama_new_context_with_model: n_batch    = 2048
0.00.598.779 I llama_new_context_with_model: n_ubatch   = 512
0.00.598.779 I llama_new_context_with_model: flash_attn = 0
0.00.598.782 I llama_new_context_with_model: freq_base  = 10000.0
0.00.598.782 I llama_new_context_with_model: freq_scale = 1
0.00.627.083 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.627.126 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.627.235 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.628.613 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.628.632 I llama_new_context_with_model: graph nodes  = 601
0.00.628.633 I llama_new_context_with_model: graph splits = 1
0.00.628.652 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.242.212 I main: llama threadpool init, n_threads = 4
0.01.242.221 I 
0.01.242.316 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.242.321 I 
0.01.242.487 I sampler seed: 340819583
0.01.242.498 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.242.504 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.242.505 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to enhance the quality of life in the community.

**Answer the following questions based on the provided context:**

a) What is the main goal

0.14.691.498 I llama_perf_sampler_print:    sampling time =      47.91 ms /    33 runs   (    1.45 ms per token,   688.79 tokens per second)
0.14.691.512 I llama_perf_context_print:        load time =    1239.30 ms
0.14.691.514 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.691.516 I llama_perf_context_print:        eval time =   13368.68 ms /    32 runs   (  417.77 ms per token,     2.39 tokens per second)
0.14.691.518 I llama_perf_context_print:       total time =   13449.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.568s
user	3m48.885s
sys	0m9.367s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3773 (37f3a381)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199202.61 ms
main:    total time = 199202.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.650 I build: 3773 (37f3a381) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.619 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.820 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.906 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.917 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.918 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.923 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.924 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.926 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.927 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.928 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.929 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.941 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.945 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.946 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.946 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.947 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.856 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.207 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.214 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.221 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.222 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.222 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.223 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.225 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.229 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.230 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.230 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.231 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.232 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.239 I llama_model_loader: - type  f32:   37 tensors
0.00.195.243 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.244 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.235 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.459.226 I llm_load_vocab: special tokens cache size = 5
0.00.516.447 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.516.507 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.516.508 I llm_load_print_meta: arch             = gemma
0.00.516.508 I llm_load_print_meta: vocab type       = SPM
0.00.516.509 I llm_load_print_meta: n_vocab          = 256000
0.00.516.511 I llm_load_print_meta: n_merges         = 0
0.00.516.512 I llm_load_print_meta: vocab_only       = 0
0.00.516.512 I llm_load_print_meta: n_ctx_train      = 8192
0.00.516.513 I llm_load_print_meta: n_embd           = 2048
0.00.516.513 I llm_load_print_meta: n_layer          = 18
0.00.516.547 I llm_load_print_meta: n_head           = 8
0.00.516.553 I llm_load_print_meta: n_head_kv        = 1
0.00.516.553 I llm_load_print_meta: n_rot            = 256
0.00.516.554 I llm_load_print_meta: n_swa            = 0
0.00.516.554 I llm_load_print_meta: n_embd_head_k    = 256
0.00.516.555 I llm_load_print_meta: n_embd_head_v    = 256
0.00.516.559 I llm_load_print_meta: n_gqa            = 8
0.00.516.564 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.516.569 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.516.570 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.516.571 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.516.572 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.516.572 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.516.572 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.516.577 I llm_load_print_meta: n_ff             = 16384
0.00.516.577 I llm_load_print_meta: n_expert         = 0
0.00.516.578 I llm_load_print_meta: n_expert_used    = 0
0.00.516.578 I llm_load_print_meta: causal attn      = 1
0.00.516.578 I llm_load_print_meta: pooling type     = 0
0.00.516.578 I llm_load_print_meta: rope type        = 2
0.00.516.579 I llm_load_print_meta: rope scaling     = linear
0.00.516.580 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.516.581 I llm_load_print_meta: freq_scale_train = 1
0.00.516.581 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.516.582 I llm_load_print_meta: rope_finetuned   = unknown
0.00.516.582 I llm_load_print_meta: ssm_d_conv       = 0
0.00.516.582 I llm_load_print_meta: ssm_d_inner      = 0
0.00.516.582 I llm_load_print_meta: ssm_d_state      = 0
0.00.516.583 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.516.583 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.516.584 I llm_load_print_meta: model type       = 2B
0.00.516.585 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.516.585 I llm_load_print_meta: model params     = 2.51 B
0.00.516.586 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.516.587 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.516.587 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.516.588 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.516.588 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.516.589 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.516.590 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.516.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.516.591 I llm_load_print_meta: max token length = 93
0.00.516.778 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.578.438 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.578.448 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.578.448 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.578.449 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.578.450 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.578.451 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.583.973 I llama_new_context_with_model: n_ctx      = 8192
0.00.583.981 I llama_new_context_with_model: n_batch    = 2048
0.00.583.981 I llama_new_context_with_model: n_ubatch   = 512
0.00.583.982 I llama_new_context_with_model: flash_attn = 0
0.00.583.985 I llama_new_context_with_model: freq_base  = 10000.0
0.00.583.986 I llama_new_context_with_model: freq_scale = 1
0.00.613.427 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.613.472 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.613.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.614.985 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.614.991 I llama_new_context_with_model: graph nodes  = 601
0.00.614.992 I llama_new_context_with_model: graph splits = 1
0.00.615.007 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.193.363 I main: llama threadpool init, n_threads = 4
0.01.193.375 I 
0.01.193.465 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.193.468 I 
0.01.193.633 I sampler seed: 883203929
0.01.193.645 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.193.651 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.193.652 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRE.

## The Squashore Chronicles

**Chapter 1: The Shifting Sands**

The salty wind whistled through squiggly waves, carrying

0.12.152.546 I llama_perf_sampler_print:    sampling time =      48.26 ms /    33 runs   (    1.46 ms per token,   683.74 tokens per second)
0.12.152.559 I llama_perf_context_print:        load time =    1190.50 ms
0.12.152.561 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.152.563 I llama_perf_context_print:        eval time =   10878.57 ms /    32 runs   (  339.96 ms per token,     2.94 tokens per second)
0.12.152.565 I llama_perf_context_print:       total time =   10959.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3773 (37f3a381)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198861.07 ms
main:    total time = 198861.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.629 I build: 3773 (37f3a381) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.811 I main: load the model and apply lora adapter, if any
0.00.024.710 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.802 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.815 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.817 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.820 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.824 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.825 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.825 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.826 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.827 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.832 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.834 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.834 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.835 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.224 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.386 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.327 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.334 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.335 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.335 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.336 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.337 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.338 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.342 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.342 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.349 I llama_model_loader: - type  f32:   37 tensors
0.00.194.353 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.354 I llama_model_loader: - type q6_K:   19 tensors
0.00.453.535 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.454.558 I llm_load_vocab: special tokens cache size = 5
0.00.511.690 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.511.743 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.511.744 I llm_load_print_meta: arch             = gemma
0.00.511.744 I llm_load_print_meta: vocab type       = SPM
0.00.511.745 I llm_load_print_meta: n_vocab          = 256000
0.00.511.748 I llm_load_print_meta: n_merges         = 0
0.00.511.749 I llm_load_print_meta: vocab_only       = 0
0.00.511.749 I llm_load_print_meta: n_ctx_train      = 8192
0.00.511.750 I llm_load_print_meta: n_embd           = 2048
0.00.511.750 I llm_load_print_meta: n_layer          = 18
0.00.511.781 I llm_load_print_meta: n_head           = 8
0.00.511.788 I llm_load_print_meta: n_head_kv        = 1
0.00.511.788 I llm_load_print_meta: n_rot            = 256
0.00.511.789 I llm_load_print_meta: n_swa            = 0
0.00.511.789 I llm_load_print_meta: n_embd_head_k    = 256
0.00.511.790 I llm_load_print_meta: n_embd_head_v    = 256
0.00.511.814 I llm_load_print_meta: n_gqa            = 8
0.00.511.828 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.511.833 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.511.841 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.511.843 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.511.844 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.511.844 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.511.845 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.511.850 I llm_load_print_meta: n_ff             = 16384
0.00.511.851 I llm_load_print_meta: n_expert         = 0
0.00.511.851 I llm_load_print_meta: n_expert_used    = 0
0.00.511.851 I llm_load_print_meta: causal attn      = 1
0.00.511.851 I llm_load_print_meta: pooling type     = 0
0.00.511.852 I llm_load_print_meta: rope type        = 2
0.00.511.852 I llm_load_print_meta: rope scaling     = linear
0.00.511.854 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.511.854 I llm_load_print_meta: freq_scale_train = 1
0.00.511.855 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.511.856 I llm_load_print_meta: rope_finetuned   = unknown
0.00.511.856 I llm_load_print_meta: ssm_d_conv       = 0
0.00.511.856 I llm_load_print_meta: ssm_d_inner      = 0
0.00.511.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.511.857 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.511.857 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.511.858 I llm_load_print_meta: model type       = 2B
0.00.511.859 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.511.860 I llm_load_print_meta: model params     = 2.51 B
0.00.511.860 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.511.861 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.511.862 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.511.863 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.511.863 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.511.864 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.511.864 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.511.865 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.511.865 I llm_load_print_meta: max token length = 93
0.00.512.033 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.568.933 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.574.537 I llama_new_context_with_model: n_ctx      = 8192
0.00.574.545 I llama_new_context_with_model: n_batch    = 2048
0.00.574.546 I llama_new_context_with_model: n_ubatch   = 512
0.00.574.547 I llama_new_context_with_model: flash_attn = 0
0.00.574.550 I llama_new_context_with_model: freq_base  = 10000.0
0.00.574.551 I llama_new_context_with_model: freq_scale = 1
0.00.605.759 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.605.804 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.605.916 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.607.267 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.607.273 I llama_new_context_with_model: graph nodes  = 601
0.00.607.274 I llama_new_context_with_model: graph splits = 1
0.00.607.289 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.184.641 I main: llama threadpool init, n_threads = 4
0.01.184.653 I 
0.01.184.746 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.184.749 I 
0.01.184.913 I sampler seed: 2555526108
0.01.184.923 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.184.927 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.184.928 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.02.542.825 I llama_perf_sampler_print:    sampling time =       6.05 ms /     5 runs   (    1.21 ms per token,   826.04 tokens per second)
0.02.542.828 I llama_perf_context_print:        load time =    1181.75 ms
0.02.542.843 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.542.845 I llama_perf_context_print:        eval time =    1346.48 ms /     4 runs   (  336.62 ms per token,     2.97 tokens per second)
0.02.542.846 I llama_perf_context_print:       total time =    1358.19 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m55.591s
user	49m28.034s
sys	0m6.289s
