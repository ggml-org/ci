+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4396 (edb7896b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.372 I main: llama backend init
0.00.000.380 I main: load the model and apply lora adapter, if any
0.00.020.976 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.985 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.992 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.001 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.005 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.009 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.009 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.010 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.012 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.012 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.013 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.017 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.018 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.019 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.019 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.020 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.451 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.278 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.286 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.286 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.287 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.288 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.289 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.290 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.292 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.293 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.294 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.294 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.295 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.298 I llama_model_loader: - type  f32:   37 tensors
0.00.131.300 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.022 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.391 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.988 I llm_load_vocab: special tokens cache size = 5
0.00.265.791 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.812 I llm_load_print_meta: arch             = gemma
0.00.265.812 I llm_load_print_meta: vocab type       = SPM
0.00.265.814 I llm_load_print_meta: n_vocab          = 256000
0.00.265.814 I llm_load_print_meta: n_merges         = 0
0.00.265.814 I llm_load_print_meta: vocab_only       = 0
0.00.265.815 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.815 I llm_load_print_meta: n_embd           = 2048
0.00.265.815 I llm_load_print_meta: n_layer          = 18
0.00.265.828 I llm_load_print_meta: n_head           = 8
0.00.265.829 I llm_load_print_meta: n_head_kv        = 1
0.00.265.830 I llm_load_print_meta: n_rot            = 256
0.00.265.830 I llm_load_print_meta: n_swa            = 0
0.00.265.830 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.831 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.832 I llm_load_print_meta: n_gqa            = 8
0.00.265.833 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.834 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.836 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.836 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.837 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.838 I llm_load_print_meta: n_ff             = 16384
0.00.265.838 I llm_load_print_meta: n_expert         = 0
0.00.265.838 I llm_load_print_meta: n_expert_used    = 0
0.00.265.839 I llm_load_print_meta: causal attn      = 1
0.00.265.839 I llm_load_print_meta: pooling type     = 0
0.00.265.839 I llm_load_print_meta: rope type        = 2
0.00.265.840 I llm_load_print_meta: rope scaling     = linear
0.00.265.841 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.842 I llm_load_print_meta: freq_scale_train = 1
0.00.265.842 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.843 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.843 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.843 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.843 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.843 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.844 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.844 I llm_load_print_meta: model type       = 2B
0.00.265.845 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.846 I llm_load_print_meta: model params     = 2.51 B
0.00.265.846 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.847 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.847 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.848 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.848 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.849 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.849 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.849 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.850 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.850 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.851 I llm_load_print_meta: max token length = 93
0.00.364.461 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.467 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.468 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.469 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.469 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.470 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.420 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.426 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.426 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.427 I llama_new_context_with_model: n_batch       = 2048
0.00.370.427 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.428 I llama_new_context_with_model: flash_attn    = 0
0.00.370.430 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.431 I llama_new_context_with_model: freq_scale    = 1
0.00.370.432 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.452 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.384.791 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.805 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.890 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.091 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.096 I llama_new_context_with_model: graph nodes  = 601
0.00.386.096 I llama_new_context_with_model: graph splits = 1
0.00.386.098 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.386.098 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.678 I main: llama threadpool init, n_threads = 4
0.00.470.693 I 
0.00.470.768 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.772 I 
0.00.470.816 I sampler seed: 2566889034
0.00.470.826 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.839 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.843 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.843 I 
 increasities to the concept of a "natural order" that governs the interactions of organisms in a community.

**Natural Order and Community Structure:**

* A

0.02.714.021 I llama_perf_sampler_print:    sampling time =       5.45 ms /    33 runs   (    0.17 ms per token,  6059.49 tokens per second)
0.02.714.024 I llama_perf_context_print:        load time =     470.28 ms
0.02.714.025 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.714.026 I llama_perf_context_print:        eval time =    2223.27 ms /    32 runs   (   69.48 ms per token,    14.39 tokens per second)
0.02.714.027 I llama_perf_context_print:       total time =    2243.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.171 I build: 4396 (edb7896b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.367 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.180 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.195 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.202 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.206 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.206 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.207 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.208 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.213 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.214 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.215 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.215 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.216 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.242 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.283 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.289 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.290 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.291 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.291 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.292 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.293 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.295 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.295 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.297 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.297 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.298 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.302 I llama_model_loader: - type  f32:   37 tensors
0.00.129.302 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.757 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.160 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.617 I llm_load_vocab: special tokens cache size = 5
0.00.270.203 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.220 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.220 I llm_load_print_meta: arch             = gemma
0.00.270.221 I llm_load_print_meta: vocab type       = SPM
0.00.270.221 I llm_load_print_meta: n_vocab          = 256000
0.00.270.222 I llm_load_print_meta: n_merges         = 0
0.00.270.222 I llm_load_print_meta: vocab_only       = 0
0.00.270.222 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.223 I llm_load_print_meta: n_embd           = 2048
0.00.270.223 I llm_load_print_meta: n_layer          = 18
0.00.270.234 I llm_load_print_meta: n_head           = 8
0.00.270.235 I llm_load_print_meta: n_head_kv        = 1
0.00.270.236 I llm_load_print_meta: n_rot            = 256
0.00.270.236 I llm_load_print_meta: n_swa            = 0
0.00.270.236 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.237 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.238 I llm_load_print_meta: n_gqa            = 8
0.00.270.239 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.240 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.240 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.242 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.242 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.242 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.244 I llm_load_print_meta: n_ff             = 16384
0.00.270.244 I llm_load_print_meta: n_expert         = 0
0.00.270.244 I llm_load_print_meta: n_expert_used    = 0
0.00.270.244 I llm_load_print_meta: causal attn      = 1
0.00.270.245 I llm_load_print_meta: pooling type     = 0
0.00.270.245 I llm_load_print_meta: rope type        = 2
0.00.270.245 I llm_load_print_meta: rope scaling     = linear
0.00.270.247 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.247 I llm_load_print_meta: freq_scale_train = 1
0.00.270.248 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.248 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.248 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.248 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.249 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.249 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.249 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.250 I llm_load_print_meta: model type       = 2B
0.00.270.250 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.251 I llm_load_print_meta: model params     = 2.51 B
0.00.270.252 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.252 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.253 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.253 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.253 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.254 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.254 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.254 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.255 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.255 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.255 I llm_load_print_meta: max token length = 93
0.00.366.504 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.371.525 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.531 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.532 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.532 I llama_new_context_with_model: n_batch       = 2048
0.00.371.532 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.533 I llama_new_context_with_model: flash_attn    = 0
0.00.371.535 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.536 I llama_new_context_with_model: freq_scale    = 1
0.00.371.537 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.555 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.386.141 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.155 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.242 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.457 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.464 I llama_new_context_with_model: graph nodes  = 601
0.00.387.464 I llama_new_context_with_model: graph splits = 1
0.00.387.467 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.387.467 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.989 I main: llama threadpool init, n_threads = 4
0.00.473.005 I 
0.00.473.081 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.473.085 I 
0.00.473.127 I sampler seed: 1410589828
0.00.473.138 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.150 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.153 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.154 I 
 increasities and misconceptions in the field.

**Misconception:** The field of psychology is only concerned with mental health issues.

**Reality:** Psychology has a

0.02.681.555 I llama_perf_sampler_print:    sampling time =       5.47 ms /    33 runs   (    0.17 ms per token,  6030.70 tokens per second)
0.02.681.557 I llama_perf_context_print:        load time =     472.60 ms
0.02.681.559 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.681.560 I llama_perf_context_print:        eval time =    2188.56 ms /    32 runs   (   68.39 ms per token,    14.62 tokens per second)
0.02.681.561 I llama_perf_context_print:       total time =    2208.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.566 I build: 4396 (edb7896b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.757 I main: load the model and apply lora adapter, if any
0.00.021.167 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.177 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.185 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.194 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.196 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.201 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.202 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.202 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.203 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.204 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.208 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.208 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.209 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.209 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.210 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.764 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.076 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.989 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.995 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.996 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.996 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.997 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.998 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.999 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.001 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.002 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.003 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.004 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.005 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.009 I llama_model_loader: - type  f32:   37 tensors
0.00.131.011 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.005 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.941 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.393 I llm_load_vocab: special tokens cache size = 5
0.00.269.676 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.692 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.693 I llm_load_print_meta: arch             = gemma
0.00.269.693 I llm_load_print_meta: vocab type       = SPM
0.00.269.694 I llm_load_print_meta: n_vocab          = 256000
0.00.269.694 I llm_load_print_meta: n_merges         = 0
0.00.269.695 I llm_load_print_meta: vocab_only       = 0
0.00.269.695 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.695 I llm_load_print_meta: n_embd           = 2048
0.00.269.696 I llm_load_print_meta: n_layer          = 18
0.00.269.708 I llm_load_print_meta: n_head           = 8
0.00.269.709 I llm_load_print_meta: n_head_kv        = 1
0.00.269.710 I llm_load_print_meta: n_rot            = 256
0.00.269.711 I llm_load_print_meta: n_swa            = 0
0.00.269.711 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.711 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.712 I llm_load_print_meta: n_gqa            = 8
0.00.269.713 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.714 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.715 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.716 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.717 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.717 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.717 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.718 I llm_load_print_meta: n_ff             = 16384
0.00.269.719 I llm_load_print_meta: n_expert         = 0
0.00.269.719 I llm_load_print_meta: n_expert_used    = 0
0.00.269.719 I llm_load_print_meta: causal attn      = 1
0.00.269.720 I llm_load_print_meta: pooling type     = 0
0.00.269.720 I llm_load_print_meta: rope type        = 2
0.00.269.720 I llm_load_print_meta: rope scaling     = linear
0.00.269.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.722 I llm_load_print_meta: freq_scale_train = 1
0.00.269.723 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.723 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.723 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.724 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.724 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.724 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.724 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.725 I llm_load_print_meta: model type       = 2B
0.00.269.726 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.726 I llm_load_print_meta: model params     = 2.51 B
0.00.269.727 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.728 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.728 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.729 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.729 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.729 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.729 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.730 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.730 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.731 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.731 I llm_load_print_meta: max token length = 93
0.00.346.185 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.346.193 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.194 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.346.194 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.346.195 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.346.196 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.351.362 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.369 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.369 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.369 I llama_new_context_with_model: n_batch       = 2048
0.00.351.370 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.370 I llama_new_context_with_model: flash_attn    = 0
0.00.351.373 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.374 I llama_new_context_with_model: freq_scale    = 1
0.00.351.375 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.395 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.365.634 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.647 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.739 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.017 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.023 I llama_new_context_with_model: graph nodes  = 601
0.00.367.024 I llama_new_context_with_model: graph splits = 1
0.00.367.026 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.026 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.997 I main: llama threadpool init, n_threads = 4
0.00.451.013 I 
0.00.451.087 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.090 I 
0.00.451.135 I sampler seed: 4049423417
0.00.451.146 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.149 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.159 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.162 I 
 increasively, yearning for more. It is a tale of insatiable hunger, of a desperate yearning for something just beyond reach.

**Theme:** The theme of

0.02.737.629 I llama_perf_sampler_print:    sampling time =       5.46 ms /    33 runs   (    0.17 ms per token,  6043.96 tokens per second)
0.02.737.632 I llama_perf_context_print:        load time =     450.22 ms
0.02.737.633 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.737.634 I llama_perf_context_print:        eval time =    2266.54 ms /    32 runs   (   70.83 ms per token,    14.12 tokens per second)
0.02.737.635 I llama_perf_context_print:       total time =    2286.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.576 I build: 4396 (edb7896b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.774 I main: load the model and apply lora adapter, if any
0.00.021.188 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.201 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.214 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.219 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.220 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.226 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.227 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.228 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.229 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.230 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.231 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.235 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.236 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.236 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.237 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.500 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.124 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.262 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.268 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.268 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.269 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.270 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.271 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.271 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.274 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.275 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.276 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.276 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.277 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.281 I llama_model_loader: - type  f32:   37 tensors
0.00.133.283 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.273 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.174 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.685 I llm_load_vocab: special tokens cache size = 5
0.00.273.937 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.954 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.954 I llm_load_print_meta: arch             = gemma
0.00.273.955 I llm_load_print_meta: vocab type       = SPM
0.00.273.955 I llm_load_print_meta: n_vocab          = 256000
0.00.273.956 I llm_load_print_meta: n_merges         = 0
0.00.273.956 I llm_load_print_meta: vocab_only       = 0
0.00.273.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.957 I llm_load_print_meta: n_embd           = 2048
0.00.273.957 I llm_load_print_meta: n_layer          = 18
0.00.273.969 I llm_load_print_meta: n_head           = 8
0.00.273.970 I llm_load_print_meta: n_head_kv        = 1
0.00.273.971 I llm_load_print_meta: n_rot            = 256
0.00.273.971 I llm_load_print_meta: n_swa            = 0
0.00.273.971 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.972 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.972 I llm_load_print_meta: n_gqa            = 8
0.00.273.973 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.974 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.975 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.976 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.978 I llm_load_print_meta: n_ff             = 16384
0.00.273.978 I llm_load_print_meta: n_expert         = 0
0.00.273.979 I llm_load_print_meta: n_expert_used    = 0
0.00.273.979 I llm_load_print_meta: causal attn      = 1
0.00.273.979 I llm_load_print_meta: pooling type     = 0
0.00.273.979 I llm_load_print_meta: rope type        = 2
0.00.273.980 I llm_load_print_meta: rope scaling     = linear
0.00.273.981 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.982 I llm_load_print_meta: freq_scale_train = 1
0.00.273.982 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.983 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.983 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.983 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.983 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.983 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.984 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.984 I llm_load_print_meta: model type       = 2B
0.00.273.985 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.986 I llm_load_print_meta: model params     = 2.51 B
0.00.273.987 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.988 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.988 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.990 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.991 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.992 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.992 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.993 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.993 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.993 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.994 I llm_load_print_meta: max token length = 93
0.00.345.089 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.096 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.115 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.121 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.122 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.122 I llama_new_context_with_model: n_batch       = 2048
0.00.350.123 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.124 I llama_new_context_with_model: flash_attn    = 0
0.00.350.126 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.127 I llama_new_context_with_model: freq_scale    = 1
0.00.350.128 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.149 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.364.672 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.687 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.776 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.005 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.010 I llama_new_context_with_model: graph nodes  = 601
0.00.366.011 I llama_new_context_with_model: graph splits = 1
0.00.366.014 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.014 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.694 I main: llama threadpool init, n_threads = 4
0.00.454.709 I 
0.00.454.782 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.454.786 I 
0.00.454.828 I sampler seed: 2435809701
0.00.454.838 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.846 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.847 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.847 I 
 increamically.

I have a lot of experience with different types of data, and I am proficient in a variety of data analysis methods. My expertise spans across

0.02.845.229 I llama_perf_sampler_print:    sampling time =       5.52 ms /    33 runs   (    0.17 ms per token,  5982.60 tokens per second)
0.02.845.233 I llama_perf_context_print:        load time =     453.90 ms
0.02.845.234 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.845.236 I llama_perf_context_print:        eval time =    2371.32 ms /    32 runs   (   74.10 ms per token,    13.49 tokens per second)
0.02.845.238 I llama_perf_context_print:       total time =    2390.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.490s
user	0m39.361s
sys	0m9.386s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4396 (edb7896b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40255.26 ms
main:    total time = 40255.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.542 I build: 4396 (edb7896b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.020.925 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.936 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.945 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.956 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.962 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.963 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.963 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.964 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.969 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.969 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.970 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.971 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.971 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.207 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.846 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.755 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.761 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.762 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.763 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.764 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.767 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.771 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.772 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.773 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.774 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.775 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.779 I llama_model_loader: - type  f32:   37 tensors
0.00.132.781 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.782 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.231 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.080 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.707 I llm_load_vocab: special tokens cache size = 5
0.00.275.444 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.460 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.460 I llm_load_print_meta: arch             = gemma
0.00.275.461 I llm_load_print_meta: vocab type       = SPM
0.00.275.462 I llm_load_print_meta: n_vocab          = 256000
0.00.275.462 I llm_load_print_meta: n_merges         = 0
0.00.275.463 I llm_load_print_meta: vocab_only       = 0
0.00.275.463 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.463 I llm_load_print_meta: n_embd           = 2048
0.00.275.464 I llm_load_print_meta: n_layer          = 18
0.00.275.475 I llm_load_print_meta: n_head           = 8
0.00.275.476 I llm_load_print_meta: n_head_kv        = 1
0.00.275.476 I llm_load_print_meta: n_rot            = 256
0.00.275.476 I llm_load_print_meta: n_swa            = 0
0.00.275.477 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.477 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.478 I llm_load_print_meta: n_gqa            = 8
0.00.275.479 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.480 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.480 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.482 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.482 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.482 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.483 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.484 I llm_load_print_meta: n_ff             = 16384
0.00.275.484 I llm_load_print_meta: n_expert         = 0
0.00.275.484 I llm_load_print_meta: n_expert_used    = 0
0.00.275.485 I llm_load_print_meta: causal attn      = 1
0.00.275.485 I llm_load_print_meta: pooling type     = 0
0.00.275.485 I llm_load_print_meta: rope type        = 2
0.00.275.486 I llm_load_print_meta: rope scaling     = linear
0.00.275.487 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.488 I llm_load_print_meta: freq_scale_train = 1
0.00.275.488 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.488 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.489 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.489 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.489 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.489 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.490 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.491 I llm_load_print_meta: model type       = 2B
0.00.275.491 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.492 I llm_load_print_meta: model params     = 2.51 B
0.00.275.493 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.493 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.494 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.494 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.495 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.495 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.495 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.495 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.496 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.497 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.497 I llm_load_print_meta: max token length = 93
0.00.336.650 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.658 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.659 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.659 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.660 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.661 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.341.704 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.710 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.710 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.710 I llama_new_context_with_model: n_batch       = 2048
0.00.341.711 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.711 I llama_new_context_with_model: flash_attn    = 0
0.00.341.714 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.716 I llama_new_context_with_model: freq_scale    = 1
0.00.341.717 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.736 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.355.656 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.668 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.759 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.962 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.969 I llama_new_context_with_model: graph nodes  = 601
0.00.356.970 I llama_new_context_with_model: graph splits = 1
0.00.356.972 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.356.972 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.648 I main: llama threadpool init, n_threads = 4
0.00.432.664 I 
0.00.432.738 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.432.741 I 
0.00.432.787 I sampler seed: 4212580861
0.00.432.798 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.801 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.802 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.802 I 
 seconally to the narrator's request and provide the requested summary.

I am unable to provide the requested summary as I do not have access to personal information

0.02.025.781 I llama_perf_sampler_print:    sampling time =       5.66 ms /    33 runs   (    0.17 ms per token,  5835.54 tokens per second)
0.02.025.784 I llama_perf_context_print:        load time =     431.89 ms
0.02.025.786 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.025.788 I llama_perf_context_print:        eval time =    1572.92 ms /    32 runs   (   49.15 ms per token,    20.34 tokens per second)
0.02.025.789 I llama_perf_context_print:       total time =    1593.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4396 (edb7896b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40215.82 ms
main:    total time = 40215.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.552 I build: 4396 (edb7896b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.104 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.123 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.131 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.135 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.140 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.141 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.141 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.142 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.145 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.146 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.150 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.150 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.151 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.152 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.152 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.148 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.654 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.596 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.602 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.603 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.604 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.604 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.605 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.606 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.608 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.609 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.613 I llama_model_loader: - type  f32:   37 tensors
0.00.132.613 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.614 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.345 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.650 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.108 I llm_load_vocab: special tokens cache size = 5
0.00.268.496 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.511 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.511 I llm_load_print_meta: arch             = gemma
0.00.268.512 I llm_load_print_meta: vocab type       = SPM
0.00.268.512 I llm_load_print_meta: n_vocab          = 256000
0.00.268.512 I llm_load_print_meta: n_merges         = 0
0.00.268.513 I llm_load_print_meta: vocab_only       = 0
0.00.268.513 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.513 I llm_load_print_meta: n_embd           = 2048
0.00.268.514 I llm_load_print_meta: n_layer          = 18
0.00.268.524 I llm_load_print_meta: n_head           = 8
0.00.268.525 I llm_load_print_meta: n_head_kv        = 1
0.00.268.525 I llm_load_print_meta: n_rot            = 256
0.00.268.525 I llm_load_print_meta: n_swa            = 0
0.00.268.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.526 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.527 I llm_load_print_meta: n_gqa            = 8
0.00.268.528 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.529 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.530 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.532 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.532 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.532 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.533 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.534 I llm_load_print_meta: n_ff             = 16384
0.00.268.534 I llm_load_print_meta: n_expert         = 0
0.00.268.534 I llm_load_print_meta: n_expert_used    = 0
0.00.268.535 I llm_load_print_meta: causal attn      = 1
0.00.268.535 I llm_load_print_meta: pooling type     = 0
0.00.268.535 I llm_load_print_meta: rope type        = 2
0.00.268.536 I llm_load_print_meta: rope scaling     = linear
0.00.268.537 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.538 I llm_load_print_meta: freq_scale_train = 1
0.00.268.538 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.538 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.539 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.539 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.539 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.539 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.540 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.540 I llm_load_print_meta: model type       = 2B
0.00.268.541 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.268.542 I llm_load_print_meta: model params     = 2.51 B
0.00.268.542 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.268.543 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.543 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.544 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.544 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.544 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.545 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.545 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.545 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.546 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.546 I llm_load_print_meta: max token length = 93
0.00.326.866 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.932 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.938 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.939 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.939 I llama_new_context_with_model: n_batch       = 2048
0.00.331.939 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.940 I llama_new_context_with_model: flash_attn    = 0
0.00.331.942 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.943 I llama_new_context_with_model: freq_scale    = 1
0.00.331.944 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.331.965 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.346.447 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.461 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.550 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.769 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.776 I llama_new_context_with_model: graph nodes  = 601
0.00.347.777 I llama_new_context_with_model: graph splits = 1
0.00.347.779 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.347.779 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.751 I main: llama threadpool init, n_threads = 4
0.00.421.766 I 
0.00.421.845 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.849 I 
0.00.421.891 I sampler seed: 3007787417
0.00.421.902 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.914 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.917 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.917 I 
 seconded arms folded across the chest, concealing a face that held an expression of intense longing and longing. [end of text]


0.01.491.802 I llama_perf_sampler_print:    sampling time =       4.06 ms /    23 runs   (    0.18 ms per token,  5670.61 tokens per second)
0.01.491.805 I llama_perf_context_print:        load time =     420.98 ms
0.01.491.806 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.491.808 I llama_perf_context_print:        eval time =    1056.66 ms /    22 runs   (   48.03 ms per token,    20.82 tokens per second)
0.01.491.809 I llama_perf_context_print:       total time =    1070.06 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.776s
user	10m21.955s
sys	0m6.912s
