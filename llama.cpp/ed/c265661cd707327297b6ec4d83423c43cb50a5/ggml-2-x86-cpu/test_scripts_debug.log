+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 3912 (edc26566) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.812 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.650 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.861 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.944 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.957 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.961 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.962 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.963 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.964 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.965 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.966 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.973 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.974 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.976 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.433 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.633 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.908 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.915 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.916 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.917 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.918 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.919 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.920 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.923 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.925 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.926 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.927 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.934 I llama_model_loader: - type  f32:   37 tensors
0.00.268.938 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.743 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.080 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.084 I llm_load_vocab: special tokens cache size = 5
0.00.594.994 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.595.063 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.595.064 I llm_load_print_meta: arch             = gemma
0.00.595.065 I llm_load_print_meta: vocab type       = SPM
0.00.595.066 I llm_load_print_meta: n_vocab          = 256000
0.00.595.068 I llm_load_print_meta: n_merges         = 0
0.00.595.069 I llm_load_print_meta: vocab_only       = 0
0.00.595.069 I llm_load_print_meta: n_ctx_train      = 8192
0.00.595.069 I llm_load_print_meta: n_embd           = 2048
0.00.595.070 I llm_load_print_meta: n_layer          = 18
0.00.595.132 I llm_load_print_meta: n_head           = 8
0.00.595.139 I llm_load_print_meta: n_head_kv        = 1
0.00.595.139 I llm_load_print_meta: n_rot            = 256
0.00.595.141 I llm_load_print_meta: n_swa            = 0
0.00.595.141 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.142 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.147 I llm_load_print_meta: n_gqa            = 8
0.00.595.152 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.160 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.161 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.163 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.163 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.164 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.165 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.170 I llm_load_print_meta: n_ff             = 16384
0.00.595.170 I llm_load_print_meta: n_expert         = 0
0.00.595.170 I llm_load_print_meta: n_expert_used    = 0
0.00.595.171 I llm_load_print_meta: causal attn      = 1
0.00.595.172 I llm_load_print_meta: pooling type     = 0
0.00.595.172 I llm_load_print_meta: rope type        = 2
0.00.595.172 I llm_load_print_meta: rope scaling     = linear
0.00.595.174 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.175 I llm_load_print_meta: freq_scale_train = 1
0.00.595.176 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.177 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.177 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.178 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.178 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.178 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.179 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.180 I llm_load_print_meta: model type       = 2B
0.00.595.181 I llm_load_print_meta: model ftype      = Q8_0
0.00.595.181 I llm_load_print_meta: model params     = 2.51 B
0.00.595.182 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.595.183 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.184 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.184 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.185 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.185 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.186 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.186 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.192 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.193 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.194 I llm_load_print_meta: max token length = 93
0.00.595.354 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.696.586 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.696.597 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.696.598 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.696.599 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.696.599 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.696.600 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.702.312 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.319 I llama_new_context_with_model: n_batch    = 2048
0.00.702.319 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.320 I llama_new_context_with_model: flash_attn = 0
0.00.702.322 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.323 I llama_new_context_with_model: freq_scale = 1
0.00.731.587 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.631 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.745 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.147 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.152 I llama_new_context_with_model: graph nodes  = 601
0.00.733.153 I llama_new_context_with_model: graph splits = 1
0.00.733.169 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.346.288 I main: llama threadpool init, n_threads = 4
0.01.346.299 I 
0.01.346.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.346.409 I 
0.01.346.585 I sampler seed: 2244750379
0.01.346.598 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.606 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.346.607 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.608 I 
 increasities in the ancient world.

**Answer:**

**The ancient world witnessed numerous remarkable civilizations and empires that left their mark on history. Among them were

0.14.841.580 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.22 tokens per second)
0.14.841.583 I llama_perf_context_print:        load time =    1343.44 ms
0.14.841.584 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.841.585 I llama_perf_context_print:        eval time =   13413.74 ms /    32 runs   (  419.18 ms per token,     2.39 tokens per second)
0.14.841.586 I llama_perf_context_print:       total time =   13495.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 3912 (edc26566) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.024.888 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.978 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.991 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.996 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.001 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.002 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.003 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.004 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.005 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.012 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.013 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.015 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.016 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.017 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.475 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.532 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.806 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.815 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.817 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.818 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.819 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.820 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.822 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.825 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.826 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.827 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.828 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.829 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.837 I llama_model_loader: - type  f32:   37 tensors
0.00.268.842 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.400 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.821 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.838 I llm_load_vocab: special tokens cache size = 5
0.00.601.944 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.015 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.016 I llm_load_print_meta: arch             = gemma
0.00.602.017 I llm_load_print_meta: vocab type       = SPM
0.00.602.018 I llm_load_print_meta: n_vocab          = 256000
0.00.602.020 I llm_load_print_meta: n_merges         = 0
0.00.602.021 I llm_load_print_meta: vocab_only       = 0
0.00.602.021 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.021 I llm_load_print_meta: n_embd           = 2048
0.00.602.022 I llm_load_print_meta: n_layer          = 18
0.00.602.091 I llm_load_print_meta: n_head           = 8
0.00.602.098 I llm_load_print_meta: n_head_kv        = 1
0.00.602.098 I llm_load_print_meta: n_rot            = 256
0.00.602.099 I llm_load_print_meta: n_swa            = 0
0.00.602.099 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.100 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.105 I llm_load_print_meta: n_gqa            = 8
0.00.602.109 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.114 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.115 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.120 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.122 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.123 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.124 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.132 I llm_load_print_meta: n_ff             = 16384
0.00.602.133 I llm_load_print_meta: n_expert         = 0
0.00.602.133 I llm_load_print_meta: n_expert_used    = 0
0.00.602.134 I llm_load_print_meta: causal attn      = 1
0.00.602.135 I llm_load_print_meta: pooling type     = 0
0.00.602.136 I llm_load_print_meta: rope type        = 2
0.00.602.140 I llm_load_print_meta: rope scaling     = linear
0.00.602.142 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.143 I llm_load_print_meta: freq_scale_train = 1
0.00.602.143 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.144 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.144 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.145 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.145 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.146 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.149 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.149 I llm_load_print_meta: model type       = 2B
0.00.602.151 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.151 I llm_load_print_meta: model params     = 2.51 B
0.00.602.153 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.153 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.154 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.158 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.159 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.159 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.160 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.161 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.167 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.169 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.170 I llm_load_print_meta: max token length = 93
0.00.602.343 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.704.299 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.710.094 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.102 I llama_new_context_with_model: n_batch    = 2048
0.00.710.102 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.103 I llama_new_context_with_model: flash_attn = 0
0.00.710.105 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.106 I llama_new_context_with_model: freq_scale = 1
0.00.738.755 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.738.799 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.738.922 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.292 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.740.297 I llama_new_context_with_model: graph nodes  = 601
0.00.740.297 I llama_new_context_with_model: graph splits = 1
0.00.740.312 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.377.565 I main: llama threadpool init, n_threads = 4
0.01.377.577 I 
0.01.377.691 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.377.696 I 
0.01.377.867 I sampler seed: 4260681299
0.01.377.877 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.377.885 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.377.886 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.377.886 I 
 increasels.

A mischievous gnome named Grolnok discovered a peculiar potion hidden within a forgotten tome. The potion granted him the power to turn into any creature

0.14.994.277 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.10 tokens per second)
0.14.994.280 I llama_perf_context_print:        load time =    1374.66 ms
0.14.994.281 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.994.283 I llama_perf_context_print:        eval time =   13535.11 ms /    32 runs   (  422.97 ms per token,     2.36 tokens per second)
0.14.994.284 I llama_perf_context_print:       total time =   13616.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 3912 (edc26566) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.941 I main: llama backend init
0.00.003.068 I main: load the model and apply lora adapter, if any
0.00.025.048 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.258 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.353 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.365 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.367 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.372 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.376 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.377 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.378 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.379 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.379 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.387 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.388 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.389 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.390 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.391 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.769 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.580 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.662 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.669 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.670 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.672 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.673 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.674 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.675 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.679 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.680 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.681 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.682 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.683 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.691 I llama_model_loader: - type  f32:   37 tensors
0.00.270.695 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.913 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.928 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.911 I llm_load_vocab: special tokens cache size = 5
0.00.589.885 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.956 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.957 I llm_load_print_meta: arch             = gemma
0.00.589.958 I llm_load_print_meta: vocab type       = SPM
0.00.589.959 I llm_load_print_meta: n_vocab          = 256000
0.00.589.961 I llm_load_print_meta: n_merges         = 0
0.00.589.961 I llm_load_print_meta: vocab_only       = 0
0.00.589.962 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.962 I llm_load_print_meta: n_embd           = 2048
0.00.589.962 I llm_load_print_meta: n_layer          = 18
0.00.590.024 I llm_load_print_meta: n_head           = 8
0.00.590.051 I llm_load_print_meta: n_head_kv        = 1
0.00.590.052 I llm_load_print_meta: n_rot            = 256
0.00.590.053 I llm_load_print_meta: n_swa            = 0
0.00.590.053 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.053 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.058 I llm_load_print_meta: n_gqa            = 8
0.00.590.063 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.068 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.069 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.071 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.072 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.072 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.073 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.077 I llm_load_print_meta: n_ff             = 16384
0.00.590.078 I llm_load_print_meta: n_expert         = 0
0.00.590.078 I llm_load_print_meta: n_expert_used    = 0
0.00.590.078 I llm_load_print_meta: causal attn      = 1
0.00.590.079 I llm_load_print_meta: pooling type     = 0
0.00.590.080 I llm_load_print_meta: rope type        = 2
0.00.590.080 I llm_load_print_meta: rope scaling     = linear
0.00.590.081 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.082 I llm_load_print_meta: freq_scale_train = 1
0.00.590.082 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.083 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.084 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.084 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.084 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.085 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.085 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.086 I llm_load_print_meta: model type       = 2B
0.00.590.087 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.088 I llm_load_print_meta: model params     = 2.51 B
0.00.590.089 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.089 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.090 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.091 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.091 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.092 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.092 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.093 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.099 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.100 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.101 I llm_load_print_meta: max token length = 93
0.00.590.268 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.667.953 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.667.963 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.667.964 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.667.964 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.667.965 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.667.966 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.673.507 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.512 I llama_new_context_with_model: n_batch    = 2048
0.00.673.513 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.513 I llama_new_context_with_model: flash_attn = 0
0.00.673.516 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.517 I llama_new_context_with_model: freq_scale = 1
0.00.702.480 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.523 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.640 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.999 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.004 I llama_new_context_with_model: graph nodes  = 601
0.00.704.005 I llama_new_context_with_model: graph splits = 1
0.00.704.021 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.363 I main: llama threadpool init, n_threads = 4
0.01.317.374 I 
0.01.317.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.483 I 
0.01.317.660 I sampler seed: 1162266150
0.01.317.670 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.676 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.317.677 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.678 I 
 increasities, a phrase used to describe a person's behavior when they are intoxicated.

The phrase "zipperies" is used to describe a situation

0.14.837.119 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.83 tokens per second)
0.14.837.122 I llama_perf_context_print:        load time =    1314.18 ms
0.14.837.123 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.837.136 I llama_perf_context_print:        eval time =   13437.94 ms /    32 runs   (  419.94 ms per token,     2.38 tokens per second)
0.14.837.138 I llama_perf_context_print:       total time =   13519.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3912 (edc26566) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.024.931 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.142 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.243 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.257 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.261 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.265 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.267 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.268 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.270 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.271 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.282 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.288 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.289 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.252 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.505 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.721 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.730 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.731 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.732 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.733 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.734 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.735 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.739 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.740 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.741 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.742 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.743 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.752 I llama_model_loader: - type  f32:   37 tensors
0.00.269.756 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.681 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.006 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.016 I llm_load_vocab: special tokens cache size = 5
0.00.597.838 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.911 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.912 I llm_load_print_meta: arch             = gemma
0.00.597.913 I llm_load_print_meta: vocab type       = SPM
0.00.597.913 I llm_load_print_meta: n_vocab          = 256000
0.00.597.916 I llm_load_print_meta: n_merges         = 0
0.00.597.916 I llm_load_print_meta: vocab_only       = 0
0.00.597.916 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.917 I llm_load_print_meta: n_embd           = 2048
0.00.597.917 I llm_load_print_meta: n_layer          = 18
0.00.597.982 I llm_load_print_meta: n_head           = 8
0.00.597.989 I llm_load_print_meta: n_head_kv        = 1
0.00.597.990 I llm_load_print_meta: n_rot            = 256
0.00.597.990 I llm_load_print_meta: n_swa            = 0
0.00.597.990 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.991 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.995 I llm_load_print_meta: n_gqa            = 8
0.00.598.000 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.006 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.011 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.012 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.013 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.014 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.014 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.019 I llm_load_print_meta: n_ff             = 16384
0.00.598.020 I llm_load_print_meta: n_expert         = 0
0.00.598.020 I llm_load_print_meta: n_expert_used    = 0
0.00.598.021 I llm_load_print_meta: causal attn      = 1
0.00.598.022 I llm_load_print_meta: pooling type     = 0
0.00.598.032 I llm_load_print_meta: rope type        = 2
0.00.598.048 I llm_load_print_meta: rope scaling     = linear
0.00.598.053 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.053 I llm_load_print_meta: freq_scale_train = 1
0.00.598.054 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.054 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.054 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.055 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.055 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.055 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.056 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.056 I llm_load_print_meta: model type       = 2B
0.00.598.057 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.058 I llm_load_print_meta: model params     = 2.51 B
0.00.598.059 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.059 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.071 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.072 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.073 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.073 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.074 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.081 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.083 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.083 I llm_load_print_meta: max token length = 93
0.00.598.265 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.860 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.669.868 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.675.642 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.649 I llama_new_context_with_model: n_batch    = 2048
0.00.675.650 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.650 I llama_new_context_with_model: flash_attn = 0
0.00.675.653 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.654 I llama_new_context_with_model: freq_scale = 1
0.00.704.503 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.555 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.667 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.034 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.039 I llama_new_context_with_model: graph nodes  = 601
0.00.706.040 I llama_new_context_with_model: graph splits = 1
0.00.706.054 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.255 I main: llama threadpool init, n_threads = 4
0.01.317.269 I 
0.01.317.381 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.385 I 
0.01.317.568 I sampler seed: 294113831
0.01.317.579 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.585 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.317.586 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.587 I 
 increasements with a powerful voice and a commanding presence.

The air crackled with tension as the gladiators faced off. The clash of blades resonated through

0.14.856.699 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.25 tokens per second)
0.14.856.702 I llama_perf_context_print:        load time =    1314.33 ms
0.14.856.705 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.856.707 I llama_perf_context_print:        eval time =   13457.72 ms /    32 runs   (  420.55 ms per token,     2.38 tokens per second)
0.14.856.708 I llama_perf_context_print:       total time =   13539.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.725s
user	3m49.478s
sys	0m9.299s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3912 (edc26566)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198311.87 ms
main:    total time = 198311.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3912 (edc26566) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.765 I main: load the model and apply lora adapter, if any
0.00.024.621 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.820 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.906 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.917 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.919 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.923 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.924 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.925 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.927 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.928 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.929 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.935 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.936 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.945 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.949 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.950 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.522 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.655 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.880 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.888 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.889 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.890 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.891 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.893 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.898 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.898 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.900 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.900 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.902 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.910 I llama_model_loader: - type  f32:   37 tensors
0.00.267.914 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.916 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.482 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.611 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.497.596 I llm_load_vocab: special tokens cache size = 5
0.00.592.739 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.809 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.813 I llm_load_print_meta: arch             = gemma
0.00.592.814 I llm_load_print_meta: vocab type       = SPM
0.00.592.815 I llm_load_print_meta: n_vocab          = 256000
0.00.592.817 I llm_load_print_meta: n_merges         = 0
0.00.592.818 I llm_load_print_meta: vocab_only       = 0
0.00.592.818 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.819 I llm_load_print_meta: n_embd           = 2048
0.00.592.819 I llm_load_print_meta: n_layer          = 18
0.00.592.882 I llm_load_print_meta: n_head           = 8
0.00.592.892 I llm_load_print_meta: n_head_kv        = 1
0.00.592.893 I llm_load_print_meta: n_rot            = 256
0.00.592.894 I llm_load_print_meta: n_swa            = 0
0.00.592.895 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.896 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.901 I llm_load_print_meta: n_gqa            = 8
0.00.592.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.912 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.913 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.915 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.915 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.916 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.921 I llm_load_print_meta: n_ff             = 16384
0.00.592.922 I llm_load_print_meta: n_expert         = 0
0.00.592.923 I llm_load_print_meta: n_expert_used    = 0
0.00.592.923 I llm_load_print_meta: causal attn      = 1
0.00.592.924 I llm_load_print_meta: pooling type     = 0
0.00.592.924 I llm_load_print_meta: rope type        = 2
0.00.592.924 I llm_load_print_meta: rope scaling     = linear
0.00.592.935 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.938 I llm_load_print_meta: freq_scale_train = 1
0.00.592.939 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.939 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.939 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.940 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.940 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.940 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.941 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.941 I llm_load_print_meta: model type       = 2B
0.00.592.942 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.592.943 I llm_load_print_meta: model params     = 2.51 B
0.00.592.944 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.592.945 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.945 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.946 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.947 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.947 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.948 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.948 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.954 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.956 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.956 I llm_load_print_meta: max token length = 93
0.00.593.121 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.313 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.653.321 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.653.322 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.653.323 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.653.324 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.653.324 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.658.824 I llama_new_context_with_model: n_ctx      = 8192
0.00.658.831 I llama_new_context_with_model: n_batch    = 2048
0.00.658.832 I llama_new_context_with_model: n_ubatch   = 512
0.00.658.833 I llama_new_context_with_model: flash_attn = 0
0.00.658.835 I llama_new_context_with_model: freq_base  = 10000.0
0.00.658.836 I llama_new_context_with_model: freq_scale = 1
0.00.687.673 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.726 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.687.838 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.689.218 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.223 I llama_new_context_with_model: graph nodes  = 601
0.00.689.223 I llama_new_context_with_model: graph splits = 1
0.00.689.239 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.361 I main: llama threadpool init, n_threads = 4
0.01.272.373 I 
0.01.272.484 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.488 I 
0.01.272.662 I sampler seed: 1535339262
0.01.272.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.683 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.686 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.687 I 
 seconally with the word 'and' to show connection.

The importance of physical activity cannot be overstated. It provides numerous benefits for both the body and

0.12.207.439 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.43 tokens per second)
0.12.207.442 I llama_perf_context_print:        load time =    1269.51 ms
0.12.207.467 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.207.469 I llama_perf_context_print:        eval time =   10853.62 ms /    32 runs   (  339.18 ms per token,     2.95 tokens per second)
0.12.207.470 I llama_perf_context_print:       total time =   10935.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3912 (edc26566)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198232.59 ms
main:    total time = 198232.59 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3912 (edc26566) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.024.902 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.012 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.027 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.031 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.036 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.037 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.038 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.039 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.040 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.041 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.049 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.050 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.052 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.053 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.238 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.796 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.992 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.009 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.010 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.011 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.012 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.013 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.014 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.018 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.026 I llama_model_loader: - type  f32:   37 tensors
0.00.269.030 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.031 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.660 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.673 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.663 I llm_load_vocab: special tokens cache size = 5
0.00.617.728 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.797 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.798 I llm_load_print_meta: arch             = gemma
0.00.617.799 I llm_load_print_meta: vocab type       = SPM
0.00.617.800 I llm_load_print_meta: n_vocab          = 256000
0.00.617.802 I llm_load_print_meta: n_merges         = 0
0.00.617.803 I llm_load_print_meta: vocab_only       = 0
0.00.617.803 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.804 I llm_load_print_meta: n_embd           = 2048
0.00.617.804 I llm_load_print_meta: n_layer          = 18
0.00.617.868 I llm_load_print_meta: n_head           = 8
0.00.617.875 I llm_load_print_meta: n_head_kv        = 1
0.00.617.876 I llm_load_print_meta: n_rot            = 256
0.00.617.876 I llm_load_print_meta: n_swa            = 0
0.00.617.877 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.878 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.883 I llm_load_print_meta: n_gqa            = 8
0.00.617.897 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.903 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.905 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.907 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.908 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.908 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.908 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.913 I llm_load_print_meta: n_ff             = 16384
0.00.617.914 I llm_load_print_meta: n_expert         = 0
0.00.617.915 I llm_load_print_meta: n_expert_used    = 0
0.00.617.915 I llm_load_print_meta: causal attn      = 1
0.00.617.915 I llm_load_print_meta: pooling type     = 0
0.00.617.916 I llm_load_print_meta: rope type        = 2
0.00.617.916 I llm_load_print_meta: rope scaling     = linear
0.00.617.919 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.919 I llm_load_print_meta: freq_scale_train = 1
0.00.617.931 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.932 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.933 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.933 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.935 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.935 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.942 I llm_load_print_meta: model type       = 2B
0.00.617.944 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.617.945 I llm_load_print_meta: model params     = 2.51 B
0.00.617.945 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.617.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.947 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.948 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.951 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.952 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.952 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.958 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.960 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.960 I llm_load_print_meta: max token length = 93
0.00.618.133 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.676.877 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.682.475 I llama_new_context_with_model: n_ctx      = 8192
0.00.682.482 I llama_new_context_with_model: n_batch    = 2048
0.00.682.482 I llama_new_context_with_model: n_ubatch   = 512
0.00.682.483 I llama_new_context_with_model: flash_attn = 0
0.00.682.485 I llama_new_context_with_model: freq_base  = 10000.0
0.00.682.486 I llama_new_context_with_model: freq_scale = 1
0.00.711.394 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.439 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.546 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.892 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.897 I llama_new_context_with_model: graph nodes  = 601
0.00.712.897 I llama_new_context_with_model: graph splits = 1
0.00.712.912 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.292.200 I main: llama threadpool init, n_threads = 4
0.01.292.211 I 
0.01.292.315 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.319 I 
0.01.292.487 I sampler seed: 1537077998
0.01.292.497 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.504 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.292.505 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.505 I 
 encompsively in its entirety, the text presents a compelling argument for the transformative power of education. It emphasizes that education empowers individuals to learn, grow, and adapt

0.12.335.438 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.45 tokens per second)
0.12.335.441 I llama_perf_context_print:        load time =    1289.33 ms
0.12.335.454 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.335.457 I llama_perf_context_print:        eval time =   10961.64 ms /    32 runs   (  342.55 ms per token,     2.92 tokens per second)
0.12.335.458 I llama_perf_context_print:       total time =   11043.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.999s
user	50m5.540s
sys	0m6.331s
