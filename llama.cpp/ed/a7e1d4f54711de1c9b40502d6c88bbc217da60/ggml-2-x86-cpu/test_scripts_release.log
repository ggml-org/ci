+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4112 (eda7e1d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.602 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.612 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.620 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.629 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.633 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.637 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.638 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.639 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.639 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.639 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.646 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.646 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.647 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.648 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.648 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.980 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.167 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.039 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.047 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.048 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.049 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.050 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.051 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.052 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.056 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.056 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.057 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.058 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.059 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.063 I llama_model_loader: - type  f32:   37 tensors
0.00.131.064 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.739 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.595 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.205 I llm_load_vocab: special tokens cache size = 5
0.00.271.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.354 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.355 I llm_load_print_meta: arch             = gemma
0.00.271.355 I llm_load_print_meta: vocab type       = SPM
0.00.271.356 I llm_load_print_meta: n_vocab          = 256000
0.00.271.357 I llm_load_print_meta: n_merges         = 0
0.00.271.357 I llm_load_print_meta: vocab_only       = 0
0.00.271.357 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.358 I llm_load_print_meta: n_embd           = 2048
0.00.271.358 I llm_load_print_meta: n_layer          = 18
0.00.271.369 I llm_load_print_meta: n_head           = 8
0.00.271.370 I llm_load_print_meta: n_head_kv        = 1
0.00.271.370 I llm_load_print_meta: n_rot            = 256
0.00.271.370 I llm_load_print_meta: n_swa            = 0
0.00.271.371 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.371 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.372 I llm_load_print_meta: n_gqa            = 8
0.00.271.373 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.374 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.375 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.376 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.376 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.377 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.377 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.378 I llm_load_print_meta: n_ff             = 16384
0.00.271.378 I llm_load_print_meta: n_expert         = 0
0.00.271.378 I llm_load_print_meta: n_expert_used    = 0
0.00.271.379 I llm_load_print_meta: causal attn      = 1
0.00.271.379 I llm_load_print_meta: pooling type     = 0
0.00.271.380 I llm_load_print_meta: rope type        = 2
0.00.271.380 I llm_load_print_meta: rope scaling     = linear
0.00.271.381 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.382 I llm_load_print_meta: freq_scale_train = 1
0.00.271.382 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.383 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.383 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.383 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.383 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.384 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.384 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.384 I llm_load_print_meta: model type       = 2B
0.00.271.385 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.386 I llm_load_print_meta: model params     = 2.51 B
0.00.271.386 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.387 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.387 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.388 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.388 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.389 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.389 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.389 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.390 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.390 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.390 I llm_load_print_meta: max token length = 93
0.00.370.418 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.422 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.423 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.424 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.424 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.425 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.795 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.802 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.802 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.803 I llama_new_context_with_model: n_batch       = 2048
0.00.375.803 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.803 I llama_new_context_with_model: flash_attn    = 0
0.00.375.806 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.807 I llama_new_context_with_model: freq_scale    = 1
0.00.375.808 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.486 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.499 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.592 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.870 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.877 I llama_new_context_with_model: graph nodes  = 601
0.00.391.877 I llama_new_context_with_model: graph splits = 1
0.00.391.879 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.757 I main: llama threadpool init, n_threads = 4
0.00.476.771 I 
0.00.476.845 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.476.848 I 
0.00.476.889 I sampler seed: 1463387923
0.00.476.900 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.904 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.904 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.905 I 
 maneuvled, a whimsical and playful take on the classic nursery rhyme.

**Verse 1**
Little bunny hopping round,
Wiggling nose and

0.02.718.599 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6483.30 tokens per second)
0.02.718.602 I llama_perf_context_print:        load time =     475.99 ms
0.02.718.603 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.718.605 I llama_perf_context_print:        eval time =    2222.34 ms /    32 runs   (   69.45 ms per token,    14.40 tokens per second)
0.02.718.606 I llama_perf_context_print:       total time =    2241.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 4112 (eda7e1d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.024.615 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.629 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.637 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.638 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.641 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.642 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.642 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.643 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.643 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.644 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.649 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.649 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.650 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.650 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.652 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.497 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.614 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.452 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.457 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.458 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.458 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.459 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.460 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.460 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.463 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.463 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.464 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.464 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.134.465 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.468 I llama_model_loader: - type  f32:   37 tensors
0.00.134.469 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.831 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.039 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.752 I llm_load_vocab: special tokens cache size = 5
0.00.274.986 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.005 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.005 I llm_load_print_meta: arch             = gemma
0.00.275.006 I llm_load_print_meta: vocab type       = SPM
0.00.275.006 I llm_load_print_meta: n_vocab          = 256000
0.00.275.007 I llm_load_print_meta: n_merges         = 0
0.00.275.007 I llm_load_print_meta: vocab_only       = 0
0.00.275.007 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.008 I llm_load_print_meta: n_embd           = 2048
0.00.275.008 I llm_load_print_meta: n_layer          = 18
0.00.275.019 I llm_load_print_meta: n_head           = 8
0.00.275.020 I llm_load_print_meta: n_head_kv        = 1
0.00.275.021 I llm_load_print_meta: n_rot            = 256
0.00.275.021 I llm_load_print_meta: n_swa            = 0
0.00.275.021 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.022 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.023 I llm_load_print_meta: n_gqa            = 8
0.00.275.024 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.025 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.026 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.028 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.028 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.028 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.029 I llm_load_print_meta: n_ff             = 16384
0.00.275.029 I llm_load_print_meta: n_expert         = 0
0.00.275.030 I llm_load_print_meta: n_expert_used    = 0
0.00.275.030 I llm_load_print_meta: causal attn      = 1
0.00.275.030 I llm_load_print_meta: pooling type     = 0
0.00.275.031 I llm_load_print_meta: rope type        = 2
0.00.275.031 I llm_load_print_meta: rope scaling     = linear
0.00.275.033 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.033 I llm_load_print_meta: freq_scale_train = 1
0.00.275.034 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.034 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.034 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.035 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.035 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.035 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.036 I llm_load_print_meta: model type       = 2B
0.00.275.036 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.037 I llm_load_print_meta: model params     = 2.51 B
0.00.275.038 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.038 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.039 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.039 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.040 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.040 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.041 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.041 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.041 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.042 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.042 I llm_load_print_meta: max token length = 93
0.00.369.258 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.374.405 I llama_new_context_with_model: n_seq_max     = 1
0.00.374.410 I llama_new_context_with_model: n_ctx         = 4096
0.00.374.411 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.374.411 I llama_new_context_with_model: n_batch       = 2048
0.00.374.411 I llama_new_context_with_model: n_ubatch      = 512
0.00.374.412 I llama_new_context_with_model: flash_attn    = 0
0.00.374.414 I llama_new_context_with_model: freq_base     = 10000.0
0.00.374.415 I llama_new_context_with_model: freq_scale    = 1
0.00.374.416 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.779 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.794 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.882 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.105 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.110 I llama_new_context_with_model: graph nodes  = 601
0.00.391.111 I llama_new_context_with_model: graph splits = 1
0.00.391.113 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.340 I main: llama threadpool init, n_threads = 4
0.00.472.354 I 
0.00.472.434 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.437 I 
0.00.472.483 I sampler seed: 1840433537
0.00.472.494 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.497 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.498 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.499 I 
 increasities, and other forms of inappropriate behavior that violate departmental policies and may result in disciplinary action, termination, or other consequences. [end of text]


0.02.300.499 I llama_perf_sampler_print:    sampling time =       3.92 ms /    28 runs   (    0.14 ms per token,  7151.98 tokens per second)
0.02.300.501 I llama_perf_context_print:        load time =     471.59 ms
0.02.300.503 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.300.505 I llama_perf_context_print:        eval time =    1812.35 ms /    27 runs   (   67.12 ms per token,    14.90 tokens per second)
0.02.300.507 I llama_perf_context_print:       total time =    1828.17 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 4112 (eda7e1d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.155 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.166 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.173 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.178 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.179 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.182 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.183 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.184 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.185 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.185 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.186 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.190 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.191 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.191 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.192 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.192 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.436 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.876 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.713 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.719 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.720 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.721 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.722 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.723 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.724 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.727 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.728 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.729 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.730 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.731 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.735 I llama_model_loader: - type  f32:   37 tensors
0.00.130.736 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.946 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.197 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.750 I llm_load_vocab: special tokens cache size = 5
0.00.262.689 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.704 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.705 I llm_load_print_meta: arch             = gemma
0.00.262.706 I llm_load_print_meta: vocab type       = SPM
0.00.262.706 I llm_load_print_meta: n_vocab          = 256000
0.00.262.707 I llm_load_print_meta: n_merges         = 0
0.00.262.707 I llm_load_print_meta: vocab_only       = 0
0.00.262.707 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.707 I llm_load_print_meta: n_embd           = 2048
0.00.262.708 I llm_load_print_meta: n_layer          = 18
0.00.262.720 I llm_load_print_meta: n_head           = 8
0.00.262.721 I llm_load_print_meta: n_head_kv        = 1
0.00.262.721 I llm_load_print_meta: n_rot            = 256
0.00.262.722 I llm_load_print_meta: n_swa            = 0
0.00.262.722 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.723 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.723 I llm_load_print_meta: n_gqa            = 8
0.00.262.724 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.725 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.726 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.728 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.729 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.729 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.729 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.730 I llm_load_print_meta: n_ff             = 16384
0.00.262.730 I llm_load_print_meta: n_expert         = 0
0.00.262.730 I llm_load_print_meta: n_expert_used    = 0
0.00.262.731 I llm_load_print_meta: causal attn      = 1
0.00.262.731 I llm_load_print_meta: pooling type     = 0
0.00.262.731 I llm_load_print_meta: rope type        = 2
0.00.262.732 I llm_load_print_meta: rope scaling     = linear
0.00.262.733 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.734 I llm_load_print_meta: freq_scale_train = 1
0.00.262.734 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.734 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.735 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.735 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.735 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.735 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.736 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.736 I llm_load_print_meta: model type       = 2B
0.00.262.736 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.737 I llm_load_print_meta: model params     = 2.51 B
0.00.262.738 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.738 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.739 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.739 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.740 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.740 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.741 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.741 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.741 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.742 I llm_load_print_meta: max token length = 93
0.00.338.471 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.338.478 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.479 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.338.480 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.338.480 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.338.481 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.343.754 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.761 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.761 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.761 I llama_new_context_with_model: n_batch       = 2048
0.00.343.762 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.762 I llama_new_context_with_model: flash_attn    = 0
0.00.343.764 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.765 I llama_new_context_with_model: freq_scale    = 1
0.00.343.766 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.130 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.143 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.238 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.538 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.542 I llama_new_context_with_model: graph nodes  = 601
0.00.359.542 I llama_new_context_with_model: graph splits = 1
0.00.359.544 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.476 I main: llama threadpool init, n_threads = 4
0.00.445.490 I 
0.00.445.565 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.568 I 
0.00.445.618 I sampler seed: 3068444894
0.00.445.629 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.634 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.634 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.634 I 
 increasities, but these are not the focus of this question.

**Question:** Discuss the role of the hippocampus in memory formation and retrieval.

**Discussion

0.02.675.483 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  6998.94 tokens per second)
0.02.675.485 I llama_perf_context_print:        load time =     444.69 ms
0.02.675.487 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.675.489 I llama_perf_context_print:        eval time =    2210.92 ms /    32 runs   (   69.09 ms per token,    14.47 tokens per second)
0.02.675.490 I llama_perf_context_print:       total time =    2230.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.532 I build: 4112 (eda7e1d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.600 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.609 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.618 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.629 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.631 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.635 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.639 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.640 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.640 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.641 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.642 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.647 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.648 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.649 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.650 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.651 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.140 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.096 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.167 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.172 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.173 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.174 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.174 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.175 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.176 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.178 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.179 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.179 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.180 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.137.181 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.185 I llama_model_loader: - type  f32:   37 tensors
0.00.137.186 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.388 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.235 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.945 I llm_load_vocab: special tokens cache size = 5
0.00.289.155 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.172 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.172 I llm_load_print_meta: arch             = gemma
0.00.289.173 I llm_load_print_meta: vocab type       = SPM
0.00.289.174 I llm_load_print_meta: n_vocab          = 256000
0.00.289.174 I llm_load_print_meta: n_merges         = 0
0.00.289.174 I llm_load_print_meta: vocab_only       = 0
0.00.289.175 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.175 I llm_load_print_meta: n_embd           = 2048
0.00.289.175 I llm_load_print_meta: n_layer          = 18
0.00.289.187 I llm_load_print_meta: n_head           = 8
0.00.289.187 I llm_load_print_meta: n_head_kv        = 1
0.00.289.188 I llm_load_print_meta: n_rot            = 256
0.00.289.188 I llm_load_print_meta: n_swa            = 0
0.00.289.188 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.189 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.190 I llm_load_print_meta: n_gqa            = 8
0.00.289.191 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.192 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.192 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.193 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.194 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.194 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.194 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.195 I llm_load_print_meta: n_ff             = 16384
0.00.289.196 I llm_load_print_meta: n_expert         = 0
0.00.289.196 I llm_load_print_meta: n_expert_used    = 0
0.00.289.196 I llm_load_print_meta: causal attn      = 1
0.00.289.196 I llm_load_print_meta: pooling type     = 0
0.00.289.197 I llm_load_print_meta: rope type        = 2
0.00.289.197 I llm_load_print_meta: rope scaling     = linear
0.00.289.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.199 I llm_load_print_meta: freq_scale_train = 1
0.00.289.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.200 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.200 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.200 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.200 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.201 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.201 I llm_load_print_meta: model type       = 2B
0.00.289.201 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.202 I llm_load_print_meta: model params     = 2.51 B
0.00.289.203 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.203 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.205 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.206 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.207 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.207 I llm_load_print_meta: max token length = 93
0.00.360.555 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.360.562 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.365.950 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.956 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.957 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.957 I llama_new_context_with_model: n_batch       = 2048
0.00.365.958 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.958 I llama_new_context_with_model: flash_attn    = 0
0.00.365.960 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.961 I llama_new_context_with_model: freq_scale    = 1
0.00.365.962 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.711 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.726 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.828 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.207 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.214 I llama_new_context_with_model: graph nodes  = 601
0.00.382.214 I llama_new_context_with_model: graph splits = 1
0.00.382.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.762 I main: llama threadpool init, n_threads = 4
0.00.470.776 I 
0.00.470.865 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.869 I 
0.00.470.920 I sampler seed: 3194066739
0.00.470.932 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.936 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.939 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.940 I 
 increasities in the world. [end of text]


0.01.000.583 I llama_perf_sampler_print:    sampling time =       1.13 ms /     8 runs   (    0.14 ms per token,  7079.65 tokens per second)
0.01.000.586 I llama_perf_context_print:        load time =     469.98 ms
0.01.000.587 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.000.588 I llama_perf_context_print:        eval time =     524.49 ms /     7 runs   (   74.93 ms per token,    13.35 tokens per second)
0.01.000.589 I llama_perf_context_print:       total time =     529.83 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.412s
user	0m30.256s
sys	0m9.275s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4112 (eda7e1d4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40305.37 ms
main:    total time = 40305.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.569 I build: 4112 (eda7e1d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.500 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.509 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.517 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.523 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.524 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.528 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.529 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.531 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.532 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.536 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.537 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.537 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.537 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.538 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.512 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.627 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.413 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.419 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.419 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.420 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.420 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.421 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.422 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.424 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.425 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.425 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.427 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.427 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.430 I llama_model_loader: - type  f32:   37 tensors
0.00.131.431 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.432 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.856 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.473 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.935 I llm_load_vocab: special tokens cache size = 5
0.00.260.785 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.801 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.802 I llm_load_print_meta: arch             = gemma
0.00.260.802 I llm_load_print_meta: vocab type       = SPM
0.00.260.803 I llm_load_print_meta: n_vocab          = 256000
0.00.260.803 I llm_load_print_meta: n_merges         = 0
0.00.260.804 I llm_load_print_meta: vocab_only       = 0
0.00.260.804 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.804 I llm_load_print_meta: n_embd           = 2048
0.00.260.805 I llm_load_print_meta: n_layer          = 18
0.00.260.816 I llm_load_print_meta: n_head           = 8
0.00.260.817 I llm_load_print_meta: n_head_kv        = 1
0.00.260.817 I llm_load_print_meta: n_rot            = 256
0.00.260.818 I llm_load_print_meta: n_swa            = 0
0.00.260.818 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.818 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.819 I llm_load_print_meta: n_gqa            = 8
0.00.260.820 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.821 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.822 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.823 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.824 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.824 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.824 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.825 I llm_load_print_meta: n_ff             = 16384
0.00.260.826 I llm_load_print_meta: n_expert         = 0
0.00.260.826 I llm_load_print_meta: n_expert_used    = 0
0.00.260.826 I llm_load_print_meta: causal attn      = 1
0.00.260.827 I llm_load_print_meta: pooling type     = 0
0.00.260.827 I llm_load_print_meta: rope type        = 2
0.00.260.827 I llm_load_print_meta: rope scaling     = linear
0.00.260.829 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.829 I llm_load_print_meta: freq_scale_train = 1
0.00.260.830 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.830 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.830 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.830 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.831 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.831 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.831 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.832 I llm_load_print_meta: model type       = 2B
0.00.260.832 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.833 I llm_load_print_meta: model params     = 2.51 B
0.00.260.834 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.834 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.834 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.835 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.835 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.835 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.836 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.836 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.836 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.837 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.837 I llm_load_print_meta: max token length = 93
0.00.320.210 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.320.216 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.320.217 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.320.218 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.320.218 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.320.219 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.325.423 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.428 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.429 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.429 I llama_new_context_with_model: n_batch       = 2048
0.00.325.430 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.430 I llama_new_context_with_model: flash_attn    = 0
0.00.325.432 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.433 I llama_new_context_with_model: freq_scale    = 1
0.00.325.434 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.442 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.455 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.804 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.810 I llama_new_context_with_model: graph nodes  = 601
0.00.340.810 I llama_new_context_with_model: graph splits = 1
0.00.340.812 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.144 I main: llama threadpool init, n_threads = 4
0.00.415.156 I 
0.00.415.228 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.415.231 I 
0.00.415.272 I sampler seed: 2655854349
0.00.415.283 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.286 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.287 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.287 I 
 fufilling.

I am unable to generate a response to your query because it contains sexually suggestive or inappropriate content that I am not allowed to provide. [end of text]


0.01.913.163 I llama_perf_sampler_print:    sampling time =       5.01 ms /    32 runs   (    0.16 ms per token,  6391.05 tokens per second)
0.01.913.166 I llama_perf_context_print:        load time =     414.36 ms
0.01.913.167 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.913.169 I llama_perf_context_print:        eval time =    1480.18 ms /    31 runs   (   47.75 ms per token,    20.94 tokens per second)
0.01.913.169 I llama_perf_context_print:       total time =    1498.03 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4112 (eda7e1d4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40166.44 ms
main:    total time = 40166.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.567 I build: 4112 (eda7e1d4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.479 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.495 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.501 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.505 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.508 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.509 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.510 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.511 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.512 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.512 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.517 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.517 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.518 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.519 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.749 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.743 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.613 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.620 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.621 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.621 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.622 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.623 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.623 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.626 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.627 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.631 I llama_model_loader: - type  f32:   37 tensors
0.00.131.632 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.633 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.876 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.182 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.619 I llm_load_vocab: special tokens cache size = 5
0.00.266.727 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.745 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.746 I llm_load_print_meta: arch             = gemma
0.00.266.747 I llm_load_print_meta: vocab type       = SPM
0.00.266.747 I llm_load_print_meta: n_vocab          = 256000
0.00.266.748 I llm_load_print_meta: n_merges         = 0
0.00.266.748 I llm_load_print_meta: vocab_only       = 0
0.00.266.748 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.749 I llm_load_print_meta: n_embd           = 2048
0.00.266.749 I llm_load_print_meta: n_layer          = 18
0.00.266.762 I llm_load_print_meta: n_head           = 8
0.00.266.763 I llm_load_print_meta: n_head_kv        = 1
0.00.266.764 I llm_load_print_meta: n_rot            = 256
0.00.266.764 I llm_load_print_meta: n_swa            = 0
0.00.266.764 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.765 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.766 I llm_load_print_meta: n_gqa            = 8
0.00.266.767 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.768 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.768 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.770 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.770 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.771 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.772 I llm_load_print_meta: n_ff             = 16384
0.00.266.774 I llm_load_print_meta: n_expert         = 0
0.00.266.774 I llm_load_print_meta: n_expert_used    = 0
0.00.266.774 I llm_load_print_meta: causal attn      = 1
0.00.266.774 I llm_load_print_meta: pooling type     = 0
0.00.266.775 I llm_load_print_meta: rope type        = 2
0.00.266.776 I llm_load_print_meta: rope scaling     = linear
0.00.266.778 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.778 I llm_load_print_meta: freq_scale_train = 1
0.00.266.779 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.780 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.780 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.780 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.781 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.781 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.781 I llm_load_print_meta: model type       = 2B
0.00.266.782 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.783 I llm_load_print_meta: model params     = 2.51 B
0.00.266.784 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.784 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.785 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.785 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.786 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.786 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.786 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.787 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.787 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.788 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.788 I llm_load_print_meta: max token length = 93
0.00.323.877 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.027 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.033 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.033 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.034 I llama_new_context_with_model: n_batch       = 2048
0.00.329.034 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.034 I llama_new_context_with_model: flash_attn    = 0
0.00.329.036 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.037 I llama_new_context_with_model: freq_scale    = 1
0.00.329.038 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.834 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.851 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.949 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.250 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.256 I llama_new_context_with_model: graph nodes  = 601
0.00.345.256 I llama_new_context_with_model: graph splits = 1
0.00.345.258 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.636 I main: llama threadpool init, n_threads = 4
0.00.418.649 I 
0.00.418.730 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.733 I 
0.00.418.775 I sampler seed: 147019140
0.00.418.786 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.789 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.789 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.790 I 
 seconal. The other day, the sun shone brightly, but today it is cloudy with a drizzle.

**Meaning:**

* The weather is cloudy today

0.01.955.790 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6852.16 tokens per second)
0.01.955.793 I llama_perf_context_print:        load time =     417.85 ms
0.01.955.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.955.795 I llama_perf_context_print:        eval time =    1519.21 ms /    32 runs   (   47.48 ms per token,    21.06 tokens per second)
0.01.955.796 I llama_perf_context_print:       total time =    1537.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.122s
user	10m23.525s
sys	0m6.937s
