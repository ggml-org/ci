+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.001.843 I main: load the model and apply lora adapter, if any
0.00.022.280 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.329 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.337 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.342 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.343 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.350 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.350 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.351 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.355 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.355 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.356 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.357 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.357 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.293 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.980 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.987 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.988 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.989 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.989 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.990 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.991 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.993 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.994 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.994 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.996 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.997 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.001 I llama_model_loader: - type  f32:   37 tensors
0.00.133.004 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.920 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.583 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.240.859 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.244.771 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.252.907 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.459 I llm_load_vocab: special tokens cache size = 5
0.00.273.997 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.011 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.012 I llm_load_print_meta: arch             = gemma
0.00.274.012 I llm_load_print_meta: vocab type       = SPM
0.00.274.013 I llm_load_print_meta: n_vocab          = 256000
0.00.274.014 I llm_load_print_meta: n_merges         = 0
0.00.274.014 I llm_load_print_meta: vocab_only       = 0
0.00.274.015 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.015 I llm_load_print_meta: n_embd           = 2048
0.00.274.015 I llm_load_print_meta: n_layer          = 18
0.00.274.026 I llm_load_print_meta: n_head           = 8
0.00.274.027 I llm_load_print_meta: n_head_kv        = 1
0.00.274.028 I llm_load_print_meta: n_rot            = 256
0.00.274.028 I llm_load_print_meta: n_swa            = 0
0.00.274.028 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.029 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.030 I llm_load_print_meta: n_gqa            = 8
0.00.274.031 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.032 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.032 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.034 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.034 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.034 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.035 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.036 I llm_load_print_meta: n_ff             = 16384
0.00.274.036 I llm_load_print_meta: n_expert         = 0
0.00.274.036 I llm_load_print_meta: n_expert_used    = 0
0.00.274.037 I llm_load_print_meta: causal attn      = 1
0.00.274.037 I llm_load_print_meta: pooling type     = 0
0.00.274.038 I llm_load_print_meta: rope type        = 2
0.00.274.038 I llm_load_print_meta: rope scaling     = linear
0.00.274.039 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.040 I llm_load_print_meta: freq_scale_train = 1
0.00.274.040 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.041 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.041 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.041 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.041 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.041 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.042 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.042 I llm_load_print_meta: model type       = 2B
0.00.274.043 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.043 I llm_load_print_meta: model params     = 2.51 B
0.00.274.044 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.045 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.045 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.045 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.046 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.046 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.046 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.047 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.047 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.047 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.048 I llm_load_print_meta: max token length = 93
0.00.274.073 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.373.568 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.373.576 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.373.577 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.373.578 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.373.578 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.373.579 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.378.699 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.705 I llama_new_context_with_model: n_batch    = 2048
0.00.378.705 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.706 I llama_new_context_with_model: flash_attn = 0
0.00.378.708 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.709 I llama_new_context_with_model: freq_scale = 1
0.00.406.813 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.827 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.918 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.801 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.809 I llama_new_context_with_model: graph nodes  = 601
0.00.407.810 I llama_new_context_with_model: graph splits = 1
0.00.407.811 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.742 I main: llama threadpool init, n_threads = 4
0.00.500.757 I 
0.00.500.831 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.500.835 I 
0.00.500.873 I sampler seed: 2163195882
0.00.500.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.886 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.500.886 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.886 I 
 increasels. 

**Instructions:**

1. Write a short story about the journey of the starfish.
2. Include sensory details and vivid descriptions.

0.02.747.533 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6918.24 tokens per second)
0.02.747.536 I llama_perf_context_print:        load time =     498.88 ms
0.02.747.537 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.747.539 I llama_perf_context_print:        eval time =    2228.83 ms /    32 runs   (   69.65 ms per token,    14.36 tokens per second)
0.02.747.539 I llama_perf_context_print:       total time =    2246.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.528 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.830 I main: load the model and apply lora adapter, if any
0.00.021.857 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.872 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.879 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.880 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.886 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.889 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.889 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.890 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.890 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.891 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.896 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.897 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.897 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.898 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.429 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.525 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.327 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.333 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.334 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.334 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.335 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.336 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.339 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.339 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.340 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.340 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.341 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.345 I llama_model_loader: - type  f32:   37 tensors
0.00.132.348 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.324 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.234.470 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.235.672 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.239.282 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.246.373 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.875 I llm_load_vocab: special tokens cache size = 5
0.00.267.372 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.388 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.389 I llm_load_print_meta: arch             = gemma
0.00.267.389 I llm_load_print_meta: vocab type       = SPM
0.00.267.390 I llm_load_print_meta: n_vocab          = 256000
0.00.267.390 I llm_load_print_meta: n_merges         = 0
0.00.267.391 I llm_load_print_meta: vocab_only       = 0
0.00.267.391 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.391 I llm_load_print_meta: n_embd           = 2048
0.00.267.392 I llm_load_print_meta: n_layer          = 18
0.00.267.405 I llm_load_print_meta: n_head           = 8
0.00.267.406 I llm_load_print_meta: n_head_kv        = 1
0.00.267.407 I llm_load_print_meta: n_rot            = 256
0.00.267.407 I llm_load_print_meta: n_swa            = 0
0.00.267.407 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.407 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.408 I llm_load_print_meta: n_gqa            = 8
0.00.267.409 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.410 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.411 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.412 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.413 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.413 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.413 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.414 I llm_load_print_meta: n_ff             = 16384
0.00.267.415 I llm_load_print_meta: n_expert         = 0
0.00.267.415 I llm_load_print_meta: n_expert_used    = 0
0.00.267.416 I llm_load_print_meta: causal attn      = 1
0.00.267.417 I llm_load_print_meta: pooling type     = 0
0.00.267.417 I llm_load_print_meta: rope type        = 2
0.00.267.418 I llm_load_print_meta: rope scaling     = linear
0.00.267.419 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.420 I llm_load_print_meta: freq_scale_train = 1
0.00.267.421 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.422 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.426 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.426 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.426 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.427 I llm_load_print_meta: model type       = 2B
0.00.267.427 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.429 I llm_load_print_meta: model params     = 2.51 B
0.00.267.430 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.430 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.431 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.431 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.431 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.433 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.433 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.433 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.434 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.434 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.434 I llm_load_print_meta: max token length = 93
0.00.267.454 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.362.013 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.367.034 I llama_new_context_with_model: n_ctx      = 8192
0.00.367.040 I llama_new_context_with_model: n_batch    = 2048
0.00.367.040 I llama_new_context_with_model: n_ubatch   = 512
0.00.367.041 I llama_new_context_with_model: flash_attn = 0
0.00.367.043 I llama_new_context_with_model: freq_base  = 10000.0
0.00.367.044 I llama_new_context_with_model: freq_scale = 1
0.00.395.336 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.352 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.395.441 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.330 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.396.338 I llama_new_context_with_model: graph nodes  = 601
0.00.396.339 I llama_new_context_with_model: graph splits = 1
0.00.396.341 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.558 I main: llama threadpool init, n_threads = 4
0.00.482.570 I 
0.00.482.648 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.651 I 
0.00.482.693 I sampler seed: 2789370352
0.00.482.703 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.706 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.482.706 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.706 I 
 increasities.  The answer is: "The Trojan War."

The Trojan War was a legendary conflict between the Greeks and the Trojans, believed to have taken

0.02.653.332 I llama_perf_sampler_print:    sampling time =       4.64 ms /    33 runs   (    0.14 ms per token,  7110.54 tokens per second)
0.02.653.335 I llama_perf_context_print:        load time =     480.71 ms
0.02.653.336 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.653.338 I llama_perf_context_print:        eval time =    2153.27 ms /    32 runs   (   67.29 ms per token,    14.86 tokens per second)
0.02.653.339 I llama_perf_context_print:       total time =    2170.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.526 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.716 I main: llama backend init
0.00.001.829 I main: load the model and apply lora adapter, if any
0.00.021.756 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.806 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.816 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.825 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.826 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.829 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.832 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.833 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.834 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.834 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.835 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.839 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.841 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.842 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.842 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.843 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.689 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.970 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.153 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.155 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.156 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.156 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.157 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.160 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.161 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.162 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.165 I llama_model_loader: - type  f32:   37 tensors
0.00.134.169 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.808 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.402 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.243.746 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.247.832 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.256.353 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.931 I llm_load_vocab: special tokens cache size = 5
0.00.277.613 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.630 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.631 I llm_load_print_meta: arch             = gemma
0.00.277.632 I llm_load_print_meta: vocab type       = SPM
0.00.277.632 I llm_load_print_meta: n_vocab          = 256000
0.00.277.633 I llm_load_print_meta: n_merges         = 0
0.00.277.633 I llm_load_print_meta: vocab_only       = 0
0.00.277.634 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.634 I llm_load_print_meta: n_embd           = 2048
0.00.277.634 I llm_load_print_meta: n_layer          = 18
0.00.277.646 I llm_load_print_meta: n_head           = 8
0.00.277.647 I llm_load_print_meta: n_head_kv        = 1
0.00.277.647 I llm_load_print_meta: n_rot            = 256
0.00.277.648 I llm_load_print_meta: n_swa            = 0
0.00.277.648 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.649 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.650 I llm_load_print_meta: n_gqa            = 8
0.00.277.651 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.652 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.654 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.655 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.656 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.656 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.656 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.657 I llm_load_print_meta: n_ff             = 16384
0.00.277.658 I llm_load_print_meta: n_expert         = 0
0.00.277.658 I llm_load_print_meta: n_expert_used    = 0
0.00.277.658 I llm_load_print_meta: causal attn      = 1
0.00.277.659 I llm_load_print_meta: pooling type     = 0
0.00.277.663 I llm_load_print_meta: rope type        = 2
0.00.277.663 I llm_load_print_meta: rope scaling     = linear
0.00.277.665 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.666 I llm_load_print_meta: freq_scale_train = 1
0.00.277.666 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.667 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.667 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.667 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.667 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.667 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.668 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.669 I llm_load_print_meta: model type       = 2B
0.00.277.669 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.670 I llm_load_print_meta: model params     = 2.51 B
0.00.277.672 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.672 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.673 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.674 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.674 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.675 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.676 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.676 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.676 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.677 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.677 I llm_load_print_meta: max token length = 93
0.00.277.700 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.352.349 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.352.356 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.352.357 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.352.358 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.352.358 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.352.359 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.357.430 I llama_new_context_with_model: n_ctx      = 8192
0.00.357.436 I llama_new_context_with_model: n_batch    = 2048
0.00.357.436 I llama_new_context_with_model: n_ubatch   = 512
0.00.357.437 I llama_new_context_with_model: flash_attn = 0
0.00.357.439 I llama_new_context_with_model: freq_base  = 10000.0
0.00.357.440 I llama_new_context_with_model: freq_scale = 1
0.00.386.306 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.386.324 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.386.417 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.298 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.387.306 I llama_new_context_with_model: graph nodes  = 601
0.00.387.306 I llama_new_context_with_model: graph splits = 1
0.00.387.308 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.614 I main: llama threadpool init, n_threads = 4
0.00.478.628 I 
0.00.478.708 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.478.712 I 
0.00.478.751 I sampler seed: 2785231814
0.00.478.761 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.478.764 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.478.764 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.478.764 I 
 increamically. 

The answer is: extremely quickly.

The adverb clause "extremely quickly" modifies the verb "incredibly" and indicates how quickly something

0.02.759.379 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6826.64 tokens per second)
0.02.759.382 I llama_perf_context_print:        load time =     476.76 ms
0.02.759.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.759.385 I llama_perf_context_print:        eval time =    2261.85 ms /    32 runs   (   70.68 ms per token,    14.15 tokens per second)
0.02.759.386 I llama_perf_context_print:       total time =    2280.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.560 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.001.849 I main: load the model and apply lora adapter, if any
0.00.021.604 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.654 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.661 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.667 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.668 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.671 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.675 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.675 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.676 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.676 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.677 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.681 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.682 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.682 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.683 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.683 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.215 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.715 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.574 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.581 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.582 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.582 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.583 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.584 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.585 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.587 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.588 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.588 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.589 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.590 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.594 I llama_model_loader: - type  f32:   37 tensors
0.00.132.597 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.895 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.423 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.248.755 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.252.940 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.261.895 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.526 I llm_load_vocab: special tokens cache size = 5
0.00.283.151 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.168 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.168 I llm_load_print_meta: arch             = gemma
0.00.283.169 I llm_load_print_meta: vocab type       = SPM
0.00.283.169 I llm_load_print_meta: n_vocab          = 256000
0.00.283.170 I llm_load_print_meta: n_merges         = 0
0.00.283.170 I llm_load_print_meta: vocab_only       = 0
0.00.283.170 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.170 I llm_load_print_meta: n_embd           = 2048
0.00.283.171 I llm_load_print_meta: n_layer          = 18
0.00.283.181 I llm_load_print_meta: n_head           = 8
0.00.283.182 I llm_load_print_meta: n_head_kv        = 1
0.00.283.183 I llm_load_print_meta: n_rot            = 256
0.00.283.183 I llm_load_print_meta: n_swa            = 0
0.00.283.183 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.183 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.184 I llm_load_print_meta: n_gqa            = 8
0.00.283.185 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.186 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.187 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.188 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.188 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.189 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.189 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.190 I llm_load_print_meta: n_ff             = 16384
0.00.283.190 I llm_load_print_meta: n_expert         = 0
0.00.283.190 I llm_load_print_meta: n_expert_used    = 0
0.00.283.191 I llm_load_print_meta: causal attn      = 1
0.00.283.191 I llm_load_print_meta: pooling type     = 0
0.00.283.191 I llm_load_print_meta: rope type        = 2
0.00.283.192 I llm_load_print_meta: rope scaling     = linear
0.00.283.193 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.194 I llm_load_print_meta: freq_scale_train = 1
0.00.283.194 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.194 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.194 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.195 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.195 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.195 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.195 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.196 I llm_load_print_meta: model type       = 2B
0.00.283.197 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.197 I llm_load_print_meta: model params     = 2.51 B
0.00.283.198 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.199 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.199 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.199 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.200 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.200 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.200 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.201 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.201 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.201 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.202 I llm_load_print_meta: max token length = 93
0.00.283.228 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.353.107 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.353.114 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.358.026 I llama_new_context_with_model: n_ctx      = 8192
0.00.358.033 I llama_new_context_with_model: n_batch    = 2048
0.00.358.033 I llama_new_context_with_model: n_ubatch   = 512
0.00.358.033 I llama_new_context_with_model: flash_attn = 0
0.00.358.036 I llama_new_context_with_model: freq_base  = 10000.0
0.00.358.036 I llama_new_context_with_model: freq_scale = 1
0.00.386.506 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.386.520 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.386.610 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.455 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.387.464 I llama_new_context_with_model: graph nodes  = 601
0.00.387.464 I llama_new_context_with_model: graph splits = 1
0.00.387.467 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.891 I main: llama threadpool init, n_threads = 4
0.00.481.905 I 
0.00.481.987 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.481.990 I 
0.00.482.032 I sampler seed: 1010328083
0.00.482.043 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.046 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.482.046 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.046 I 
 increasities. [end of text]


0.00.786.945 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8051.53 tokens per second)
0.00.786.947 I llama_perf_context_print:        load time =     480.02 ms
0.00.786.948 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.786.950 I llama_perf_context_print:        eval time =     301.59 ms /     4 runs   (   75.40 ms per token,    13.26 tokens per second)
0.00.786.950 I llama_perf_context_print:       total time =     305.06 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.326s
user	0m30.943s
sys	0m9.457s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3933 (2d3fc54a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32320.92 ms
main:    total time = 32320.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.884 I main: load the model and apply lora adapter, if any
0.00.022.314 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.362 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.370 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.375 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.376 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.380 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.380 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.381 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.382 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.383 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.384 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.387 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.388 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.389 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.389 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.390 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.098 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.028 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.821 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.822 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.822 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.823 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.824 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.824 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.827 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.827 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.828 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.834 I llama_model_loader: - type  f32:   37 tensors
0.00.132.837 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.837 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.698 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.578 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.245.909 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.249.771 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.257.664 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.221 I llm_load_vocab: special tokens cache size = 5
0.00.278.787 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.803 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.803 I llm_load_print_meta: arch             = gemma
0.00.278.804 I llm_load_print_meta: vocab type       = SPM
0.00.278.804 I llm_load_print_meta: n_vocab          = 256000
0.00.278.805 I llm_load_print_meta: n_merges         = 0
0.00.278.805 I llm_load_print_meta: vocab_only       = 0
0.00.278.805 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.805 I llm_load_print_meta: n_embd           = 2048
0.00.278.806 I llm_load_print_meta: n_layer          = 18
0.00.278.817 I llm_load_print_meta: n_head           = 8
0.00.278.818 I llm_load_print_meta: n_head_kv        = 1
0.00.278.818 I llm_load_print_meta: n_rot            = 256
0.00.278.819 I llm_load_print_meta: n_swa            = 0
0.00.278.819 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.819 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.820 I llm_load_print_meta: n_gqa            = 8
0.00.278.821 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.822 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.823 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.824 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.825 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.825 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.825 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.826 I llm_load_print_meta: n_ff             = 16384
0.00.278.826 I llm_load_print_meta: n_expert         = 0
0.00.278.827 I llm_load_print_meta: n_expert_used    = 0
0.00.278.827 I llm_load_print_meta: causal attn      = 1
0.00.278.827 I llm_load_print_meta: pooling type     = 0
0.00.278.828 I llm_load_print_meta: rope type        = 2
0.00.278.828 I llm_load_print_meta: rope scaling     = linear
0.00.278.830 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.830 I llm_load_print_meta: freq_scale_train = 1
0.00.278.830 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.831 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.831 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.831 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.831 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.832 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.832 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.832 I llm_load_print_meta: model type       = 2B
0.00.278.833 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.834 I llm_load_print_meta: model params     = 2.51 B
0.00.278.834 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.835 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.835 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.835 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.835 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.836 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.836 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.836 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.836 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.837 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.837 I llm_load_print_meta: max token length = 93
0.00.278.857 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.337.295 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.337.301 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.337.302 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.337.302 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.337.303 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.337.303 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.342.362 I llama_new_context_with_model: n_ctx      = 8192
0.00.342.368 I llama_new_context_with_model: n_batch    = 2048
0.00.342.368 I llama_new_context_with_model: n_ubatch   = 512
0.00.342.368 I llama_new_context_with_model: flash_attn = 0
0.00.342.370 I llama_new_context_with_model: freq_base  = 10000.0
0.00.342.371 I llama_new_context_with_model: freq_scale = 1
0.00.370.640 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.370.654 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.745 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.618 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.371.626 I llama_new_context_with_model: graph nodes  = 601
0.00.371.626 I llama_new_context_with_model: graph splits = 1
0.00.371.628 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.203 I main: llama threadpool init, n_threads = 4
0.00.451.217 I 
0.00.451.293 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.296 I 
0.00.451.336 I sampler seed: 889525422
0.00.451.346 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.349 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.451.349 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.349 I 
 seconded by the words 'in the' and 'on the' suggests that:
A) the events happened in the past
B) the events happened

0.02.014.225 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6823.82 tokens per second)
0.02.014.227 I llama_perf_context_print:        load time =     449.30 ms
0.02.014.228 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.014.229 I llama_perf_context_print:        eval time =    1544.71 ms /    32 runs   (   48.27 ms per token,    20.72 tokens per second)
0.02.014.230 I llama_perf_context_print:       total time =    1563.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3933 (2d3fc54a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32015.17 ms
main:    total time = 32015.17 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.583 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.001.873 I main: load the model and apply lora adapter, if any
0.00.022.235 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.247 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.258 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.259 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.260 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.260 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.265 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.266 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.266 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.267 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.737 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.715 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.495 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.501 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.502 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.502 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.503 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.504 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.505 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.507 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.508 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.512 I llama_model_loader: - type  f32:   37 tensors
0.00.131.514 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.515 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.849 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.904 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.238.336 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.242.734 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.251.481 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.033 I llm_load_vocab: special tokens cache size = 5
0.00.272.524 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.539 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.539 I llm_load_print_meta: arch             = gemma
0.00.272.540 I llm_load_print_meta: vocab type       = SPM
0.00.272.540 I llm_load_print_meta: n_vocab          = 256000
0.00.272.541 I llm_load_print_meta: n_merges         = 0
0.00.272.541 I llm_load_print_meta: vocab_only       = 0
0.00.272.541 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.542 I llm_load_print_meta: n_embd           = 2048
0.00.272.542 I llm_load_print_meta: n_layer          = 18
0.00.272.552 I llm_load_print_meta: n_head           = 8
0.00.272.553 I llm_load_print_meta: n_head_kv        = 1
0.00.272.554 I llm_load_print_meta: n_rot            = 256
0.00.272.554 I llm_load_print_meta: n_swa            = 0
0.00.272.554 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.555 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.556 I llm_load_print_meta: n_gqa            = 8
0.00.272.557 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.558 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.558 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.560 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.560 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.560 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.561 I llm_load_print_meta: n_ff             = 16384
0.00.272.562 I llm_load_print_meta: n_expert         = 0
0.00.272.562 I llm_load_print_meta: n_expert_used    = 0
0.00.272.562 I llm_load_print_meta: causal attn      = 1
0.00.272.563 I llm_load_print_meta: pooling type     = 0
0.00.272.563 I llm_load_print_meta: rope type        = 2
0.00.272.563 I llm_load_print_meta: rope scaling     = linear
0.00.272.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.565 I llm_load_print_meta: freq_scale_train = 1
0.00.272.566 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.566 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.566 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.567 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.567 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.567 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.567 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.568 I llm_load_print_meta: model type       = 2B
0.00.272.568 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.569 I llm_load_print_meta: model params     = 2.51 B
0.00.272.570 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.570 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.571 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.571 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.572 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.572 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.573 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.573 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.573 I llm_load_print_meta: max token length = 93
0.00.272.602 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.328.737 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.333.811 I llama_new_context_with_model: n_ctx      = 8192
0.00.333.818 I llama_new_context_with_model: n_batch    = 2048
0.00.333.819 I llama_new_context_with_model: n_ubatch   = 512
0.00.333.819 I llama_new_context_with_model: flash_attn = 0
0.00.333.823 I llama_new_context_with_model: freq_base  = 10000.0
0.00.333.824 I llama_new_context_with_model: freq_scale = 1
0.00.363.731 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.363.746 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.363.838 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.690 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.364.699 I llama_new_context_with_model: graph nodes  = 601
0.00.364.699 I llama_new_context_with_model: graph splits = 1
0.00.364.701 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.283 I main: llama threadpool init, n_threads = 4
0.00.444.297 I 
0.00.444.377 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.380 I 
0.00.444.419 I sampler seed: 1799859019
0.00.444.429 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.432 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.444.432 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.433 I 
 increase. The correct answer is:

a) COVID-19

b) SARS-CoV-2

c) Ebola

d) HIV



0.02.010.450 I llama_perf_sampler_print:    sampling time =       5.29 ms /    33 runs   (    0.16 ms per token,  6232.29 tokens per second)
0.02.010.452 I llama_perf_context_print:        load time =     442.39 ms
0.02.010.454 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.010.455 I llama_perf_context_print:        eval time =    1546.74 ms /    32 runs   (   48.34 ms per token,    20.69 tokens per second)
0.02.010.456 I llama_perf_context_print:       total time =    1566.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.751s
user	8m14.254s
sys	0m6.868s
