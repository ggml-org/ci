+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.002.748 I main: load the model and apply lora adapter, if any
0.00.024.743 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.947 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.030 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.040 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.041 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.045 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.046 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.047 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.048 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.049 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.050 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.057 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.059 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.060 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.061 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.144 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.140 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.863 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.870 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.871 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.872 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.873 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.874 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.875 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.879 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.880 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.881 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.881 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.883 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.891 I llama_model_loader: - type  f32:   37 tensors
0.00.264.895 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.839 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.134 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.489.972 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.495.520 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.507.334 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.315 I llm_load_vocab: special tokens cache size = 5
0.00.612.876 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.946 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.947 I llm_load_print_meta: arch             = gemma
0.00.612.948 I llm_load_print_meta: vocab type       = SPM
0.00.612.949 I llm_load_print_meta: n_vocab          = 256000
0.00.612.951 I llm_load_print_meta: n_merges         = 0
0.00.612.951 I llm_load_print_meta: vocab_only       = 0
0.00.612.952 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.952 I llm_load_print_meta: n_embd           = 2048
0.00.612.953 I llm_load_print_meta: n_layer          = 18
0.00.613.017 I llm_load_print_meta: n_head           = 8
0.00.613.026 I llm_load_print_meta: n_head_kv        = 1
0.00.613.032 I llm_load_print_meta: n_rot            = 256
0.00.613.032 I llm_load_print_meta: n_swa            = 0
0.00.613.032 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.033 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.038 I llm_load_print_meta: n_gqa            = 8
0.00.613.042 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.047 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.049 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.051 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.051 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.051 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.052 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.057 I llm_load_print_meta: n_ff             = 16384
0.00.613.058 I llm_load_print_meta: n_expert         = 0
0.00.613.058 I llm_load_print_meta: n_expert_used    = 0
0.00.613.059 I llm_load_print_meta: causal attn      = 1
0.00.613.059 I llm_load_print_meta: pooling type     = 0
0.00.613.062 I llm_load_print_meta: rope type        = 2
0.00.613.062 I llm_load_print_meta: rope scaling     = linear
0.00.613.064 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.064 I llm_load_print_meta: freq_scale_train = 1
0.00.613.065 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.065 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.065 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.065 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.066 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.067 I llm_load_print_meta: model type       = 2B
0.00.613.068 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.068 I llm_load_print_meta: model params     = 2.51 B
0.00.613.069 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.080 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.081 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.082 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.083 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.083 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.084 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.085 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.090 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.092 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.092 I llm_load_print_meta: max token length = 93
0.00.613.258 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.714.455 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.714.467 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.714.468 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.714.469 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.714.470 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.714.470 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.720.240 I llama_new_context_with_model: n_ctx      = 8192
0.00.720.247 I llama_new_context_with_model: n_batch    = 2048
0.00.720.247 I llama_new_context_with_model: n_ubatch   = 512
0.00.720.248 I llama_new_context_with_model: flash_attn = 0
0.00.720.250 I llama_new_context_with_model: freq_base  = 10000.0
0.00.720.251 I llama_new_context_with_model: freq_scale = 1
0.00.749.154 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.749.197 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.749.310 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.750.718 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.750.723 I llama_new_context_with_model: graph nodes  = 601
0.00.750.723 I llama_new_context_with_model: graph splits = 1
0.00.750.740 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.059 I main: llama threadpool init, n_threads = 4
0.01.359.071 I 
0.01.359.175 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.179 I 
0.01.359.357 I sampler seed: 523594018
0.01.359.368 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.359.375 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.359.377 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.359.377 I 
 increasities from various sources, including books, websites, and social media.

**Discussion:**

* Identify the key themes and messages conveyed in the given information

0.14.769.893 I llama_perf_sampler_print:    sampling time =      48.15 ms /    33 runs   (    1.46 ms per token,   685.36 tokens per second)
0.14.769.896 I llama_perf_context_print:        load time =    1356.23 ms
0.14.769.898 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.769.912 I llama_perf_context_print:        eval time =   13329.52 ms /    32 runs   (  416.55 ms per token,     2.40 tokens per second)
0.14.769.914 I llama_perf_context_print:       total time =   13410.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.024.949 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.044 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.058 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.064 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.069 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.078 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.083 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.085 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.086 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.089 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.099 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.100 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.102 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.104 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.106 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.248 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.272 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.073 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.074 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.075 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.076 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.078 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.079 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.082 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.083 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.084 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.085 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.264.086 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.094 I llama_model_loader: - type  f32:   37 tensors
0.00.264.098 I llama_model_loader: - type q8_0:  127 tensors
0.00.435.555 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.481.105 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.483.298 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.489.906 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.503.266 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.252 I llm_load_vocab: special tokens cache size = 5
0.00.598.593 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.663 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.664 I llm_load_print_meta: arch             = gemma
0.00.598.665 I llm_load_print_meta: vocab type       = SPM
0.00.598.666 I llm_load_print_meta: n_vocab          = 256000
0.00.598.668 I llm_load_print_meta: n_merges         = 0
0.00.598.669 I llm_load_print_meta: vocab_only       = 0
0.00.598.669 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.669 I llm_load_print_meta: n_embd           = 2048
0.00.598.670 I llm_load_print_meta: n_layer          = 18
0.00.598.748 I llm_load_print_meta: n_head           = 8
0.00.598.758 I llm_load_print_meta: n_head_kv        = 1
0.00.598.759 I llm_load_print_meta: n_rot            = 256
0.00.598.760 I llm_load_print_meta: n_swa            = 0
0.00.598.761 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.768 I llm_load_print_meta: n_gqa            = 8
0.00.598.775 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.781 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.783 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.785 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.786 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.787 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.788 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.795 I llm_load_print_meta: n_ff             = 16384
0.00.598.799 I llm_load_print_meta: n_expert         = 0
0.00.598.799 I llm_load_print_meta: n_expert_used    = 0
0.00.598.800 I llm_load_print_meta: causal attn      = 1
0.00.598.800 I llm_load_print_meta: pooling type     = 0
0.00.598.801 I llm_load_print_meta: rope type        = 2
0.00.598.802 I llm_load_print_meta: rope scaling     = linear
0.00.598.804 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.805 I llm_load_print_meta: freq_scale_train = 1
0.00.598.805 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.806 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.806 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.808 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.809 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.810 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.812 I llm_load_print_meta: model type       = 2B
0.00.598.813 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.815 I llm_load_print_meta: model params     = 2.51 B
0.00.598.817 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.818 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.819 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.821 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.821 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.822 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.823 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.830 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.832 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.833 I llm_load_print_meta: max token length = 93
0.00.599.008 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.693.906 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.699.799 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.807 I llama_new_context_with_model: n_batch    = 2048
0.00.699.807 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.808 I llama_new_context_with_model: flash_attn = 0
0.00.699.810 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.810 I llama_new_context_with_model: freq_scale = 1
0.00.729.444 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.492 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.618 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.026 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.731.031 I llama_new_context_with_model: graph nodes  = 601
0.00.731.032 I llama_new_context_with_model: graph splits = 1
0.00.731.050 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.366 I main: llama threadpool init, n_threads = 4
0.01.341.381 I 
0.01.341.506 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.510 I 
0.01.341.698 I sampler seed: 2097488238
0.01.341.709 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.717 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.341.718 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.719 I 
 increamically.

Answer: Incredibly.

Explanation:

The given sentence is a hyperbolic statement that emphasizes how impressively something is. It suggests that something is

0.14.891.356 I llama_perf_sampler_print:    sampling time =      48.72 ms /    33 runs   (    1.48 ms per token,   677.33 tokens per second)
0.14.891.372 I llama_perf_context_print:        load time =    1338.44 ms
0.14.891.374 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.891.376 I llama_perf_context_print:        eval time =   13468.15 ms /    32 runs   (  420.88 ms per token,     2.38 tokens per second)
0.14.891.378 I llama_perf_context_print:       total time =   13550.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.918 I main: llama backend init
0.00.002.896 I main: load the model and apply lora adapter, if any
0.00.024.632 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.834 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.925 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.937 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.940 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.945 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.950 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.952 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.954 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.955 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.957 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.967 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.972 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.979 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.984 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.631 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.870 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.632 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.640 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.641 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.642 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.642 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.644 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.645 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.648 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.649 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.650 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.263.651 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.263.652 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.263.660 I llama_model_loader: - type  f32:   37 tensors
0.00.263.664 I llama_model_loader: - type q8_0:  127 tensors
0.00.436.491 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.785 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.480.591 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.486.207 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.498.276 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.259 I llm_load_vocab: special tokens cache size = 5
0.00.593.784 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.857 I llm_load_print_meta: arch             = gemma
0.00.593.858 I llm_load_print_meta: vocab type       = SPM
0.00.593.859 I llm_load_print_meta: n_vocab          = 256000
0.00.593.861 I llm_load_print_meta: n_merges         = 0
0.00.593.862 I llm_load_print_meta: vocab_only       = 0
0.00.593.862 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.862 I llm_load_print_meta: n_embd           = 2048
0.00.593.862 I llm_load_print_meta: n_layer          = 18
0.00.593.925 I llm_load_print_meta: n_head           = 8
0.00.593.931 I llm_load_print_meta: n_head_kv        = 1
0.00.593.932 I llm_load_print_meta: n_rot            = 256
0.00.593.933 I llm_load_print_meta: n_swa            = 0
0.00.593.933 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.933 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.940 I llm_load_print_meta: n_gqa            = 8
0.00.593.947 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.954 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.961 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.963 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.964 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.966 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.973 I llm_load_print_meta: n_ff             = 16384
0.00.593.977 I llm_load_print_meta: n_expert         = 0
0.00.593.978 I llm_load_print_meta: n_expert_used    = 0
0.00.593.978 I llm_load_print_meta: causal attn      = 1
0.00.593.979 I llm_load_print_meta: pooling type     = 0
0.00.593.979 I llm_load_print_meta: rope type        = 2
0.00.593.980 I llm_load_print_meta: rope scaling     = linear
0.00.593.982 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.983 I llm_load_print_meta: freq_scale_train = 1
0.00.593.983 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.986 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.987 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.988 I llm_load_print_meta: model type       = 2B
0.00.593.990 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.002 I llm_load_print_meta: model params     = 2.51 B
0.00.594.004 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.005 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.009 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.009 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.010 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.011 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.011 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.012 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.019 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.021 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.022 I llm_load_print_meta: max token length = 93
0.00.594.220 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.861 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.669.872 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.669.873 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.669.873 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.669.874 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.669.875 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.675.676 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.683 I llama_new_context_with_model: n_batch    = 2048
0.00.675.683 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.684 I llama_new_context_with_model: flash_attn = 0
0.00.675.686 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.687 I llama_new_context_with_model: freq_scale = 1
0.00.704.658 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.704.703 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.704.817 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.253 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.258 I llama_new_context_with_model: graph nodes  = 601
0.00.706.259 I llama_new_context_with_model: graph splits = 1
0.00.706.277 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.157 I main: llama threadpool init, n_threads = 4
0.01.315.169 I 
0.01.315.284 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.288 I 
0.01.315.473 I sampler seed: 3435702264
0.01.315.484 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.493 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.315.494 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.315.494 I 
 increasities, but also love and companionship.

The poem speaks of the duality of human nature, the capacity for both great cruelty and great compassion. It explores

0.14.839.658 I llama_perf_sampler_print:    sampling time =      48.39 ms /    33 runs   (    1.47 ms per token,   681.94 tokens per second)
0.14.839.660 I llama_perf_context_print:        load time =    1312.17 ms
0.14.839.662 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.839.684 I llama_perf_context_print:        eval time =   13443.70 ms /    32 runs   (  420.12 ms per token,     2.38 tokens per second)
0.14.839.687 I llama_perf_context_print:       total time =   13524.51 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.024.615 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.830 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.936 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.953 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.954 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.955 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.956 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.957 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.958 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.967 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.972 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.973 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.976 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.479 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.923 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.814 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.821 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.822 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.823 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.824 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.826 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.827 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.830 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.831 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.832 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.263.833 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.263.834 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.263.841 I llama_model_loader: - type  f32:   37 tensors
0.00.263.845 I llama_model_loader: - type q8_0:  127 tensors
0.00.431.822 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.241 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.472.872 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.477.657 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.487.531 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.488.451 I llm_load_vocab: special tokens cache size = 5
0.00.595.968 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.037 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.037 I llm_load_print_meta: arch             = gemma
0.00.596.038 I llm_load_print_meta: vocab type       = SPM
0.00.596.039 I llm_load_print_meta: n_vocab          = 256000
0.00.596.041 I llm_load_print_meta: n_merges         = 0
0.00.596.041 I llm_load_print_meta: vocab_only       = 0
0.00.596.041 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.042 I llm_load_print_meta: n_embd           = 2048
0.00.596.042 I llm_load_print_meta: n_layer          = 18
0.00.596.105 I llm_load_print_meta: n_head           = 8
0.00.596.111 I llm_load_print_meta: n_head_kv        = 1
0.00.596.112 I llm_load_print_meta: n_rot            = 256
0.00.596.112 I llm_load_print_meta: n_swa            = 0
0.00.596.113 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.114 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.119 I llm_load_print_meta: n_gqa            = 8
0.00.596.123 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.129 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.130 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.132 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.132 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.133 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.133 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.138 I llm_load_print_meta: n_ff             = 16384
0.00.596.140 I llm_load_print_meta: n_expert         = 0
0.00.596.140 I llm_load_print_meta: n_expert_used    = 0
0.00.596.149 I llm_load_print_meta: causal attn      = 1
0.00.596.150 I llm_load_print_meta: pooling type     = 0
0.00.596.167 I llm_load_print_meta: rope type        = 2
0.00.596.168 I llm_load_print_meta: rope scaling     = linear
0.00.596.170 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.170 I llm_load_print_meta: freq_scale_train = 1
0.00.596.171 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.171 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.172 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.172 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.172 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.172 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.173 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.173 I llm_load_print_meta: model type       = 2B
0.00.596.174 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.175 I llm_load_print_meta: model params     = 2.51 B
0.00.596.176 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.177 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.178 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.187 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.188 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.189 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.190 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.190 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.195 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.197 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.197 I llm_load_print_meta: max token length = 93
0.00.596.373 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.058 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.668.069 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.673.844 I llama_new_context_with_model: n_ctx      = 8192
0.00.673.851 I llama_new_context_with_model: n_batch    = 2048
0.00.673.852 I llama_new_context_with_model: n_ubatch   = 512
0.00.673.852 I llama_new_context_with_model: flash_attn = 0
0.00.673.855 I llama_new_context_with_model: freq_base  = 10000.0
0.00.673.856 I llama_new_context_with_model: freq_scale = 1
0.00.702.866 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.908 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.703.020 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.374 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.378 I llama_new_context_with_model: graph nodes  = 601
0.00.704.379 I llama_new_context_with_model: graph splits = 1
0.00.704.395 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.313.691 I main: llama threadpool init, n_threads = 4
0.01.313.703 I 
0.01.313.821 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.313.826 I 
0.01.314.018 I sampler seed: 1351241862
0.01.314.030 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.037 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.314.038 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.038 I 
 seconded brackets in the code snippet are causing issues.

```python
def calculate_metrics(data):
    total_count = data.shape[

0.14.853.208 I llama_perf_sampler_print:    sampling time =      48.32 ms /    33 runs   (    1.46 ms per token,   682.99 tokens per second)
0.14.853.212 I llama_perf_context_print:        load time =    1310.79 ms
0.14.853.213 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.853.216 I llama_perf_context_print:        eval time =   13457.96 ms /    32 runs   (  420.56 ms per token,     2.38 tokens per second)
0.14.853.217 I llama_perf_context_print:       total time =   13539.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.596s
user	3m48.658s
sys	0m9.424s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3933 (2d3fc54a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198858.25 ms
main:    total time = 198858.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.025.081 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.291 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.381 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.394 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.395 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.399 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.401 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.402 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.403 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.404 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.405 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.410 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.411 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.412 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.413 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.414 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.555 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.917 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.661 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.670 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.671 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.672 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.673 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.674 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.676 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.680 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.681 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.682 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.683 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.264.684 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.693 I llama_model_loader: - type  f32:   37 tensors
0.00.264.697 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.698 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.779 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.152 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.477.814 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.483.541 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.497.193 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.200 I llm_load_vocab: special tokens cache size = 5
0.00.592.922 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.994 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.995 I llm_load_print_meta: arch             = gemma
0.00.592.995 I llm_load_print_meta: vocab type       = SPM
0.00.592.996 I llm_load_print_meta: n_vocab          = 256000
0.00.592.998 I llm_load_print_meta: n_merges         = 0
0.00.592.999 I llm_load_print_meta: vocab_only       = 0
0.00.592.999 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.000 I llm_load_print_meta: n_embd           = 2048
0.00.593.000 I llm_load_print_meta: n_layer          = 18
0.00.593.064 I llm_load_print_meta: n_head           = 8
0.00.593.071 I llm_load_print_meta: n_head_kv        = 1
0.00.593.072 I llm_load_print_meta: n_rot            = 256
0.00.593.072 I llm_load_print_meta: n_swa            = 0
0.00.593.073 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.073 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.077 I llm_load_print_meta: n_gqa            = 8
0.00.593.083 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.088 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.089 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.090 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.091 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.091 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.092 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.097 I llm_load_print_meta: n_ff             = 16384
0.00.593.098 I llm_load_print_meta: n_expert         = 0
0.00.593.098 I llm_load_print_meta: n_expert_used    = 0
0.00.593.099 I llm_load_print_meta: causal attn      = 1
0.00.593.100 I llm_load_print_meta: pooling type     = 0
0.00.593.100 I llm_load_print_meta: rope type        = 2
0.00.593.101 I llm_load_print_meta: rope scaling     = linear
0.00.593.102 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.103 I llm_load_print_meta: freq_scale_train = 1
0.00.593.104 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.104 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.105 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.105 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.105 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.121 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.122 I llm_load_print_meta: model type       = 2B
0.00.593.123 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.593.124 I llm_load_print_meta: model params     = 2.51 B
0.00.593.125 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.593.126 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.127 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.138 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.140 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.140 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.141 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.142 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.149 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.151 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.151 I llm_load_print_meta: max token length = 93
0.00.593.320 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.887 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.653.896 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.653.897 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.653.898 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.653.898 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.653.899 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.659.583 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.591 I llama_new_context_with_model: n_batch    = 2048
0.00.659.591 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.592 I llama_new_context_with_model: flash_attn = 0
0.00.659.595 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.595 I llama_new_context_with_model: freq_scale = 1
0.00.689.130 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.689.174 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.689.284 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.690.655 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.690.660 I llama_new_context_with_model: graph nodes  = 601
0.00.690.660 I llama_new_context_with_model: graph splits = 1
0.00.690.675 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.413 I main: llama threadpool init, n_threads = 4
0.01.271.426 I 
0.01.271.530 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.534 I 
0.01.271.714 I sampler seed: 585887355
0.01.271.726 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.271.734 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.271.735 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.271.735 I 
 strick the following sentences:

"The future belongs to those who believe in the beauty of their dreams." - Eleanor Roosevelt
"We are not meant to merely

0.12.193.387 I llama_perf_sampler_print:    sampling time =      48.31 ms /    33 runs   (    1.46 ms per token,   683.12 tokens per second)
0.12.193.409 I llama_perf_context_print:        load time =    1268.56 ms
0.12.193.411 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.193.412 I llama_perf_context_print:        eval time =   10841.47 ms /    32 runs   (  338.80 ms per token,     2.95 tokens per second)
0.12.193.413 I llama_perf_context_print:       total time =   10921.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3933 (2d3fc54a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199130.70 ms
main:    total time = 199130.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3933 (2d3fc54a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.766 I main: load the model and apply lora adapter, if any
0.00.024.709 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.807 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.822 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.824 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.828 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.830 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.831 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.832 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.833 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.833 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.840 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.841 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.842 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.843 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.845 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.629 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.691 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.724 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.733 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.734 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.735 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.736 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.737 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.738 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.742 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.743 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.752 I llama_model_loader: - type  f32:   37 tensors
0.00.264.756 I llama_model_loader: - type q4_K:  108 tensors
0.00.264.757 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.441 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.823 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.494.498 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.499.408 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.509.984 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.920 I llm_load_vocab: special tokens cache size = 5
0.00.616.484 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.558 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.559 I llm_load_print_meta: arch             = gemma
0.00.616.559 I llm_load_print_meta: vocab type       = SPM
0.00.616.561 I llm_load_print_meta: n_vocab          = 256000
0.00.616.563 I llm_load_print_meta: n_merges         = 0
0.00.616.563 I llm_load_print_meta: vocab_only       = 0
0.00.616.564 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.564 I llm_load_print_meta: n_embd           = 2048
0.00.616.564 I llm_load_print_meta: n_layer          = 18
0.00.616.629 I llm_load_print_meta: n_head           = 8
0.00.616.636 I llm_load_print_meta: n_head_kv        = 1
0.00.616.636 I llm_load_print_meta: n_rot            = 256
0.00.616.637 I llm_load_print_meta: n_swa            = 0
0.00.616.637 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.639 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.643 I llm_load_print_meta: n_gqa            = 8
0.00.616.648 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.653 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.655 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.657 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.657 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.657 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.667 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.673 I llm_load_print_meta: n_ff             = 16384
0.00.616.674 I llm_load_print_meta: n_expert         = 0
0.00.616.675 I llm_load_print_meta: n_expert_used    = 0
0.00.616.675 I llm_load_print_meta: causal attn      = 1
0.00.616.676 I llm_load_print_meta: pooling type     = 0
0.00.616.687 I llm_load_print_meta: rope type        = 2
0.00.616.690 I llm_load_print_meta: rope scaling     = linear
0.00.616.692 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.693 I llm_load_print_meta: freq_scale_train = 1
0.00.616.693 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.693 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.694 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.694 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.694 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.695 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.695 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.696 I llm_load_print_meta: model type       = 2B
0.00.616.697 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.698 I llm_load_print_meta: model params     = 2.51 B
0.00.616.699 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.707 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.708 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.709 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.710 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.710 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.711 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.717 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.718 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.719 I llm_load_print_meta: max token length = 93
0.00.616.884 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.281 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.679.822 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.829 I llama_new_context_with_model: n_batch    = 2048
0.00.679.829 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.830 I llama_new_context_with_model: flash_attn = 0
0.00.679.832 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.833 I llama_new_context_with_model: freq_scale = 1
0.00.709.240 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.284 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.398 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.710.724 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.730 I llama_new_context_with_model: graph nodes  = 601
0.00.710.730 I llama_new_context_with_model: graph splits = 1
0.00.710.744 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.917 I main: llama threadpool init, n_threads = 4
0.01.291.928 I 
0.01.292.033 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.292.037 I 
0.01.292.212 I sampler seed: 2033933244
0.01.292.224 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.292.231 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.292.232 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.292.233 I 
 seconally.

**Assistant**

I am unable to generate text that is sexually suggestive in nature. My purpose is to assist with tasks and provide information within

0.12.208.847 I llama_perf_sampler_print:    sampling time =      48.09 ms /    33 runs   (    1.46 ms per token,   686.17 tokens per second)
0.12.208.850 I llama_perf_context_print:        load time =    1289.05 ms
0.12.208.851 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.208.853 I llama_perf_context_print:        eval time =   10836.55 ms /    32 runs   (  338.64 ms per token,     2.95 tokens per second)
0.12.208.855 I llama_perf_context_print:       total time =   10916.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.261s
user	50m8.576s
sys	0m6.244s
