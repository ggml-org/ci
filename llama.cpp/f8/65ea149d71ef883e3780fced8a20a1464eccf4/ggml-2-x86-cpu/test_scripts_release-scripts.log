+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.597 I build: 4395 (f865ea14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.000.801 I main: load the model and apply lora adapter, if any
0.00.021.823 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.832 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.840 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.850 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.851 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.854 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.855 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.855 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.856 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.857 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.857 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.861 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.862 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.863 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.864 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.865 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.225 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.224 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.454 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.460 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.461 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.461 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.462 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.463 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.463 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.465 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.466 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.466 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.467 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.467 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.472 I llama_model_loader: - type  f32:   37 tensors
0.00.133.474 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.842 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.286 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.930 I llm_load_vocab: special tokens cache size = 5
0.00.277.910 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.927 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.928 I llm_load_print_meta: arch             = gemma
0.00.277.928 I llm_load_print_meta: vocab type       = SPM
0.00.277.929 I llm_load_print_meta: n_vocab          = 256000
0.00.277.943 I llm_load_print_meta: n_merges         = 0
0.00.277.944 I llm_load_print_meta: vocab_only       = 0
0.00.277.944 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.945 I llm_load_print_meta: n_embd           = 2048
0.00.277.945 I llm_load_print_meta: n_layer          = 18
0.00.277.958 I llm_load_print_meta: n_head           = 8
0.00.277.959 I llm_load_print_meta: n_head_kv        = 1
0.00.277.960 I llm_load_print_meta: n_rot            = 256
0.00.277.960 I llm_load_print_meta: n_swa            = 0
0.00.277.960 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.961 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.962 I llm_load_print_meta: n_gqa            = 8
0.00.277.963 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.964 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.965 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.966 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.967 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.967 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.967 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.968 I llm_load_print_meta: n_ff             = 16384
0.00.277.968 I llm_load_print_meta: n_expert         = 0
0.00.277.971 I llm_load_print_meta: n_expert_used    = 0
0.00.277.972 I llm_load_print_meta: causal attn      = 1
0.00.277.972 I llm_load_print_meta: pooling type     = 0
0.00.277.972 I llm_load_print_meta: rope type        = 2
0.00.277.973 I llm_load_print_meta: rope scaling     = linear
0.00.277.974 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.975 I llm_load_print_meta: freq_scale_train = 1
0.00.277.975 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.976 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.976 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.977 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.977 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.978 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.978 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.979 I llm_load_print_meta: model type       = 2B
0.00.277.979 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.980 I llm_load_print_meta: model params     = 2.51 B
0.00.277.981 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.981 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.982 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.983 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.983 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.983 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.984 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.984 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.984 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.985 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.985 I llm_load_print_meta: max token length = 93
0.00.380.408 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.380.415 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.380.416 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.380.417 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.380.417 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.380.418 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.759 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.764 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.764 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.765 I llama_new_context_with_model: n_batch       = 2048
0.00.385.765 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.766 I llama_new_context_with_model: flash_attn    = 0
0.00.385.768 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.770 I llama_new_context_with_model: freq_scale    = 1
0.00.385.771 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.791 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.400.687 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.400.700 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.400.791 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.108 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.402.114 I llama_new_context_with_model: graph nodes  = 601
0.00.402.114 I llama_new_context_with_model: graph splits = 1
0.00.402.116 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.402.117 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.500.482 I main: llama threadpool init, n_threads = 4
0.00.500.498 I 
0.00.500.570 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.500.573 I 
0.00.500.615 I sampler seed: 2184686496
0.00.500.626 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.500.638 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.500.641 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.500.641 I 
 increamically.

I am sorry, I am unable to generate responses that are sexually suggestive in nature. My purpose is to assist with tasks and questions that are

0.02.762.432 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6432.75 tokens per second)
0.02.762.434 I llama_perf_context_print:        load time =     499.67 ms
0.02.762.435 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.762.437 I llama_perf_context_print:        eval time =    2241.84 ms /    32 runs   (   70.06 ms per token,    14.27 tokens per second)
0.02.762.437 I llama_perf_context_print:       total time =    2261.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.533 I build: 4395 (f865ea14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.195 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.209 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.220 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.224 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.227 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.228 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.228 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.229 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.230 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.230 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.234 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.234 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.235 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.236 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.236 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.577 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.463 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.319 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.326 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.327 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.328 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.329 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.330 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.331 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.335 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.336 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.337 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.338 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.340 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.345 I llama_model_loader: - type  f32:   37 tensors
0.00.131.347 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.676 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.286 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.837 I llm_load_vocab: special tokens cache size = 5
0.00.273.918 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.934 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.935 I llm_load_print_meta: arch             = gemma
0.00.273.936 I llm_load_print_meta: vocab type       = SPM
0.00.273.936 I llm_load_print_meta: n_vocab          = 256000
0.00.273.936 I llm_load_print_meta: n_merges         = 0
0.00.273.937 I llm_load_print_meta: vocab_only       = 0
0.00.273.937 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.937 I llm_load_print_meta: n_embd           = 2048
0.00.273.938 I llm_load_print_meta: n_layer          = 18
0.00.273.949 I llm_load_print_meta: n_head           = 8
0.00.273.950 I llm_load_print_meta: n_head_kv        = 1
0.00.273.950 I llm_load_print_meta: n_rot            = 256
0.00.273.951 I llm_load_print_meta: n_swa            = 0
0.00.273.951 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.951 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.952 I llm_load_print_meta: n_gqa            = 8
0.00.273.953 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.954 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.955 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.957 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.957 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.957 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.957 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.958 I llm_load_print_meta: n_ff             = 16384
0.00.273.958 I llm_load_print_meta: n_expert         = 0
0.00.273.959 I llm_load_print_meta: n_expert_used    = 0
0.00.273.959 I llm_load_print_meta: causal attn      = 1
0.00.273.960 I llm_load_print_meta: pooling type     = 0
0.00.273.960 I llm_load_print_meta: rope type        = 2
0.00.273.960 I llm_load_print_meta: rope scaling     = linear
0.00.273.962 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.962 I llm_load_print_meta: freq_scale_train = 1
0.00.273.963 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.963 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.964 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.964 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.964 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.964 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.964 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.965 I llm_load_print_meta: model type       = 2B
0.00.273.966 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.967 I llm_load_print_meta: model params     = 2.51 B
0.00.273.968 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.968 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.968 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.969 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.969 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.969 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.970 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.970 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.970 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.971 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.971 I llm_load_print_meta: max token length = 93
0.00.369.954 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.375.175 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.181 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.182 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.182 I llama_new_context_with_model: n_batch       = 2048
0.00.375.183 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.183 I llama_new_context_with_model: flash_attn    = 0
0.00.375.186 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.186 I llama_new_context_with_model: freq_scale    = 1
0.00.375.187 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.206 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.389.904 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.918 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.009 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.235 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.239 I llama_new_context_with_model: graph nodes  = 601
0.00.391.239 I llama_new_context_with_model: graph splits = 1
0.00.391.242 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.391.243 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.051 I main: llama threadpool init, n_threads = 4
0.00.474.066 I 
0.00.474.139 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.142 I 
0.00.474.184 I sampler seed: 2784410683
0.00.474.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.197 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.206 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.207 I 
 increably.

I am sorry, I am unable to provide assistance with inappropriate or sexually suggestive content. [end of text]


0.01.979.807 I llama_perf_sampler_print:    sampling time =       3.46 ms /    23 runs   (    0.15 ms per token,  6637.81 tokens per second)
0.01.979.809 I llama_perf_context_print:        load time =     473.30 ms
0.01.979.810 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.979.811 I llama_perf_context_print:        eval time =    1491.96 ms /    22 runs   (   67.82 ms per token,    14.75 tokens per second)
0.01.979.812 I llama_perf_context_print:       total time =    1505.76 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.577 I build: 4395 (f865ea14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.000.799 I main: load the model and apply lora adapter, if any
0.00.021.508 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.518 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.530 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.542 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.547 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.550 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.552 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.554 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.554 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.555 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.556 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.562 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.563 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.564 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.565 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.566 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.935 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.714 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.591 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.600 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.601 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.601 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.602 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.603 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.603 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.606 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.607 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.608 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.609 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.610 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.614 I llama_model_loader: - type  f32:   37 tensors
0.00.131.616 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.271 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.006 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.560 I llm_load_vocab: special tokens cache size = 5
0.00.273.474 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.491 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.491 I llm_load_print_meta: arch             = gemma
0.00.273.492 I llm_load_print_meta: vocab type       = SPM
0.00.273.493 I llm_load_print_meta: n_vocab          = 256000
0.00.273.493 I llm_load_print_meta: n_merges         = 0
0.00.273.493 I llm_load_print_meta: vocab_only       = 0
0.00.273.494 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.494 I llm_load_print_meta: n_embd           = 2048
0.00.273.496 I llm_load_print_meta: n_layer          = 18
0.00.273.510 I llm_load_print_meta: n_head           = 8
0.00.273.511 I llm_load_print_meta: n_head_kv        = 1
0.00.273.512 I llm_load_print_meta: n_rot            = 256
0.00.273.512 I llm_load_print_meta: n_swa            = 0
0.00.273.513 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.513 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.515 I llm_load_print_meta: n_gqa            = 8
0.00.273.516 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.518 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.519 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.523 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.524 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.525 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.526 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.527 I llm_load_print_meta: n_ff             = 16384
0.00.273.528 I llm_load_print_meta: n_expert         = 0
0.00.273.529 I llm_load_print_meta: n_expert_used    = 0
0.00.273.529 I llm_load_print_meta: causal attn      = 1
0.00.273.530 I llm_load_print_meta: pooling type     = 0
0.00.273.531 I llm_load_print_meta: rope type        = 2
0.00.273.532 I llm_load_print_meta: rope scaling     = linear
0.00.273.533 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.534 I llm_load_print_meta: freq_scale_train = 1
0.00.273.535 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.536 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.537 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.537 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.538 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.538 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.539 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.540 I llm_load_print_meta: model type       = 2B
0.00.273.541 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.542 I llm_load_print_meta: model params     = 2.51 B
0.00.273.544 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.544 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.545 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.545 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.546 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.547 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.547 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.547 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.548 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.549 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.550 I llm_load_print_meta: max token length = 93
0.00.351.208 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.215 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.216 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.217 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.217 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.218 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.501 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.507 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.507 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.508 I llama_new_context_with_model: n_batch       = 2048
0.00.356.508 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.509 I llama_new_context_with_model: flash_attn    = 0
0.00.356.511 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.512 I llama_new_context_with_model: freq_scale    = 1
0.00.356.512 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.534 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.370.560 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.573 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.917 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.921 I llama_new_context_with_model: graph nodes  = 601
0.00.371.922 I llama_new_context_with_model: graph splits = 1
0.00.371.924 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.924 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.691 I main: llama threadpool init, n_threads = 4
0.00.455.705 I 
0.00.455.801 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.804 I 
0.00.455.850 I sampler seed: 1620140156
0.00.455.861 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.865 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.866 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.867 I 
 increasities to the current state of the world.

This statement is an example of:

a) Symbolic reasoning
b) Inductive reasoning
c)

0.02.702.695 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6975.27 tokens per second)
0.02.702.698 I llama_perf_context_print:        load time =     454.87 ms
0.02.702.700 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.702.702 I llama_perf_context_print:        eval time =    2228.49 ms /    32 runs   (   69.64 ms per token,    14.36 tokens per second)
0.02.702.703 I llama_perf_context_print:       total time =    2247.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.552 I build: 4395 (f865ea14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.020.805 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.813 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.825 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.833 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.834 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.837 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.838 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.839 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.839 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.840 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.840 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.844 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.844 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.845 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.846 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.846 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.718 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.454 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.305 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.312 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.313 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.313 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.314 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.316 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.316 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.320 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.321 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.322 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.322 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.324 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.327 I llama_model_loader: - type  f32:   37 tensors
0.00.131.328 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.538 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.730 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.285 I llm_load_vocab: special tokens cache size = 5
0.00.271.098 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.115 I llm_load_print_meta: arch             = gemma
0.00.271.116 I llm_load_print_meta: vocab type       = SPM
0.00.271.117 I llm_load_print_meta: n_vocab          = 256000
0.00.271.117 I llm_load_print_meta: n_merges         = 0
0.00.271.118 I llm_load_print_meta: vocab_only       = 0
0.00.271.118 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.118 I llm_load_print_meta: n_embd           = 2048
0.00.271.118 I llm_load_print_meta: n_layer          = 18
0.00.271.130 I llm_load_print_meta: n_head           = 8
0.00.271.131 I llm_load_print_meta: n_head_kv        = 1
0.00.271.131 I llm_load_print_meta: n_rot            = 256
0.00.271.131 I llm_load_print_meta: n_swa            = 0
0.00.271.132 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.132 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.133 I llm_load_print_meta: n_gqa            = 8
0.00.271.134 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.135 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.136 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.137 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.137 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.137 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.138 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.139 I llm_load_print_meta: n_ff             = 16384
0.00.271.139 I llm_load_print_meta: n_expert         = 0
0.00.271.139 I llm_load_print_meta: n_expert_used    = 0
0.00.271.140 I llm_load_print_meta: causal attn      = 1
0.00.271.140 I llm_load_print_meta: pooling type     = 0
0.00.271.140 I llm_load_print_meta: rope type        = 2
0.00.271.141 I llm_load_print_meta: rope scaling     = linear
0.00.271.142 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.143 I llm_load_print_meta: freq_scale_train = 1
0.00.271.143 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.143 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.144 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.144 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.144 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.144 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.145 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.145 I llm_load_print_meta: model type       = 2B
0.00.271.146 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.146 I llm_load_print_meta: model params     = 2.51 B
0.00.271.148 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.148 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.149 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.149 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.150 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.150 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.150 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.150 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.151 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.151 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.151 I llm_load_print_meta: max token length = 93
0.00.342.092 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.098 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.252 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.259 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.259 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.260 I llama_new_context_with_model: n_batch       = 2048
0.00.347.260 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.261 I llama_new_context_with_model: flash_attn    = 0
0.00.347.264 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.265 I llama_new_context_with_model: freq_scale    = 1
0.00.347.265 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.286 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.361.724 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.737 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.831 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.104 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.111 I llama_new_context_with_model: graph nodes  = 601
0.00.363.111 I llama_new_context_with_model: graph splits = 1
0.00.363.114 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.363.114 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.432 I main: llama threadpool init, n_threads = 4
0.00.455.449 I 
0.00.455.527 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.455.530 I 
0.00.455.573 I sampler seed: 548091438
0.00.455.583 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.586 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.586 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.588 I 
 increasities on the web and in social media, and their potential consequences.

## Online Misinformation and Disinformation: A Growing Threat

Online misinformation and disinformation

0.02.875.904 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7076.99 tokens per second)
0.02.875.907 I llama_perf_context_print:        load time =     454.67 ms
0.02.875.908 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.875.909 I llama_perf_context_print:        eval time =    2401.20 ms /    32 runs   (   75.04 ms per token,    13.33 tokens per second)
0.02.875.910 I llama_perf_context_print:       total time =    2420.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.819s
user	0m36.766s
sys	0m9.299s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4395 (f865ea14)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40254.02 ms
main:    total time = 40254.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 4395 (f865ea14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.768 I main: load the model and apply lora adapter, if any
0.00.022.800 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.809 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.817 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.825 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.827 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.830 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.831 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.832 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.833 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.833 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.833 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.837 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.838 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.838 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.840 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.840 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.078 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.532 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.539 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.539 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.540 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.541 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.541 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.542 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.544 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.545 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.546 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.546 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.547 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.552 I llama_model_loader: - type  f32:   37 tensors
0.00.132.553 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.554 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.039 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.767 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.360 I llm_load_vocab: special tokens cache size = 5
0.00.282.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.366 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.366 I llm_load_print_meta: arch             = gemma
0.00.282.367 I llm_load_print_meta: vocab type       = SPM
0.00.282.367 I llm_load_print_meta: n_vocab          = 256000
0.00.282.368 I llm_load_print_meta: n_merges         = 0
0.00.282.368 I llm_load_print_meta: vocab_only       = 0
0.00.282.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.369 I llm_load_print_meta: n_embd           = 2048
0.00.282.369 I llm_load_print_meta: n_layer          = 18
0.00.282.381 I llm_load_print_meta: n_head           = 8
0.00.282.382 I llm_load_print_meta: n_head_kv        = 1
0.00.282.384 I llm_load_print_meta: n_rot            = 256
0.00.282.384 I llm_load_print_meta: n_swa            = 0
0.00.282.384 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.385 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.388 I llm_load_print_meta: n_gqa            = 8
0.00.282.389 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.390 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.391 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.393 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.393 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.394 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.394 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.395 I llm_load_print_meta: n_ff             = 16384
0.00.282.396 I llm_load_print_meta: n_expert         = 0
0.00.282.396 I llm_load_print_meta: n_expert_used    = 0
0.00.282.396 I llm_load_print_meta: causal attn      = 1
0.00.282.397 I llm_load_print_meta: pooling type     = 0
0.00.282.397 I llm_load_print_meta: rope type        = 2
0.00.282.398 I llm_load_print_meta: rope scaling     = linear
0.00.282.400 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.401 I llm_load_print_meta: freq_scale_train = 1
0.00.282.401 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.402 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.404 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.405 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.405 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.405 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.405 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.406 I llm_load_print_meta: model type       = 2B
0.00.282.406 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.282.407 I llm_load_print_meta: model params     = 2.51 B
0.00.282.408 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.282.409 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.409 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.409 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.410 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.410 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.411 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.411 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.411 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.412 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.412 I llm_load_print_meta: max token length = 93
0.00.352.744 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.352.753 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.352.754 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.352.755 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.352.756 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.352.756 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.358.063 I llama_new_context_with_model: n_seq_max     = 1
0.00.358.069 I llama_new_context_with_model: n_ctx         = 4096
0.00.358.070 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.358.070 I llama_new_context_with_model: n_batch       = 2048
0.00.358.071 I llama_new_context_with_model: n_ubatch      = 512
0.00.358.071 I llama_new_context_with_model: flash_attn    = 0
0.00.358.074 I llama_new_context_with_model: freq_base     = 10000.0
0.00.358.074 I llama_new_context_with_model: freq_scale    = 1
0.00.358.075 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.095 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.372.847 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.860 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.957 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.318 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.325 I llama_new_context_with_model: graph nodes  = 601
0.00.374.325 I llama_new_context_with_model: graph splits = 1
0.00.374.327 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.327 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.511 I main: llama threadpool init, n_threads = 4
0.00.451.529 I 
0.00.451.605 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.608 I 
0.00.451.650 I sampler seed: 3650945841
0.00.451.661 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.675 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.679 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.679 I 
 seconde,

I am unable to access my email account due to a technical issue. I am unable to retrieve my login credentials either.

I have contacted

0.02.041.182 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6390.40 tokens per second)
0.02.041.185 I llama_perf_context_print:        load time =     450.72 ms
0.02.041.186 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.041.188 I llama_perf_context_print:        eval time =    1570.86 ms /    32 runs   (   49.09 ms per token,    20.37 tokens per second)
0.02.041.189 I llama_perf_context_print:       total time =    1589.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4395 (f865ea14)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40239.23 ms
main:    total time = 40239.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.527 I build: 4395 (f865ea14) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.720 I main: llama backend init
0.00.000.725 I main: load the model and apply lora adapter, if any
0.00.021.179 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.204 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.208 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.208 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.209 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.209 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.210 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.210 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.214 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.214 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.215 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.215 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.216 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.634 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.466 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.473 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.473 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.474 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.474 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.475 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.476 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.478 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.479 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.483 I llama_model_loader: - type  f32:   37 tensors
0.00.130.484 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.484 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.358 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.859 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.415 I llm_load_vocab: special tokens cache size = 5
0.00.271.419 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.435 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.435 I llm_load_print_meta: arch             = gemma
0.00.271.436 I llm_load_print_meta: vocab type       = SPM
0.00.271.437 I llm_load_print_meta: n_vocab          = 256000
0.00.271.437 I llm_load_print_meta: n_merges         = 0
0.00.271.437 I llm_load_print_meta: vocab_only       = 0
0.00.271.438 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.438 I llm_load_print_meta: n_embd           = 2048
0.00.271.438 I llm_load_print_meta: n_layer          = 18
0.00.271.451 I llm_load_print_meta: n_head           = 8
0.00.271.452 I llm_load_print_meta: n_head_kv        = 1
0.00.271.452 I llm_load_print_meta: n_rot            = 256
0.00.271.452 I llm_load_print_meta: n_swa            = 0
0.00.271.453 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.453 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.454 I llm_load_print_meta: n_gqa            = 8
0.00.271.455 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.456 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.457 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.458 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.458 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.459 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.459 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.460 I llm_load_print_meta: n_ff             = 16384
0.00.271.460 I llm_load_print_meta: n_expert         = 0
0.00.271.460 I llm_load_print_meta: n_expert_used    = 0
0.00.271.461 I llm_load_print_meta: causal attn      = 1
0.00.271.461 I llm_load_print_meta: pooling type     = 0
0.00.271.461 I llm_load_print_meta: rope type        = 2
0.00.271.461 I llm_load_print_meta: rope scaling     = linear
0.00.271.463 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.464 I llm_load_print_meta: freq_scale_train = 1
0.00.271.464 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.464 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.465 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.465 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.465 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.466 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.466 I llm_load_print_meta: model type       = 2B
0.00.271.467 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.467 I llm_load_print_meta: model params     = 2.51 B
0.00.271.468 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.468 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.469 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.469 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.470 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.470 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.471 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.471 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.471 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.472 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.472 I llm_load_print_meta: max token length = 93
0.00.329.828 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.091 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.098 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.099 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.099 I llama_new_context_with_model: n_batch       = 2048
0.00.335.100 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.100 I llama_new_context_with_model: flash_attn    = 0
0.00.335.104 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.105 I llama_new_context_with_model: freq_scale    = 1
0.00.335.106 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.130 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.350.820 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.835 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.937 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.245 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.251 I llama_new_context_with_model: graph nodes  = 601
0.00.352.252 I llama_new_context_with_model: graph splits = 1
0.00.352.254 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.254 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.428.966 I main: llama threadpool init, n_threads = 4
0.00.428.981 I 
0.00.429.058 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.061 I 
0.00.429.104 I sampler seed: 1216639780
0.00.429.115 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.118 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.118 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.118 I 
 seconally, forming a rhythmic, hypnotic melody.

**Answer:**

"The rhythm of life, a hypnotic melody." [end of text]


0.01.693.845 I llama_perf_sampler_print:    sampling time =       4.11 ms /    27 runs   (    0.15 ms per token,  6564.55 tokens per second)
0.01.693.847 I llama_perf_context_print:        load time =     428.22 ms
0.01.693.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.693.850 I llama_perf_context_print:        eval time =    1249.52 ms /    26 runs   (   48.06 ms per token,    20.81 tokens per second)
0.01.693.850 I llama_perf_context_print:       total time =    1264.89 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.025s
user	10m22.960s
sys	0m7.045s
