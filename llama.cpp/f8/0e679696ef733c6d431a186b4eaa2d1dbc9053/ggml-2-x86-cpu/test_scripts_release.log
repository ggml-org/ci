+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 3764 (f80e6796) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.022.153 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.200 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.211 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.217 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.218 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.221 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.224 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.224 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.228 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.229 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.575 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.610 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.498 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.504 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.505 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.505 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.506 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.507 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.508 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.510 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.511 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.512 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.512 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.513 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.517 I llama_model_loader: - type  f32:   37 tensors
0.00.132.520 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.352 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.066 I llm_load_vocab: special tokens cache size = 5
0.00.215.719 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.733 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.733 I llm_load_print_meta: arch             = gemma
0.00.215.734 I llm_load_print_meta: vocab type       = SPM
0.00.215.735 I llm_load_print_meta: n_vocab          = 256000
0.00.215.735 I llm_load_print_meta: n_merges         = 0
0.00.215.735 I llm_load_print_meta: vocab_only       = 0
0.00.215.736 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.736 I llm_load_print_meta: n_embd           = 2048
0.00.215.736 I llm_load_print_meta: n_layer          = 18
0.00.215.748 I llm_load_print_meta: n_head           = 8
0.00.215.749 I llm_load_print_meta: n_head_kv        = 1
0.00.215.749 I llm_load_print_meta: n_rot            = 256
0.00.215.750 I llm_load_print_meta: n_swa            = 0
0.00.215.750 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.750 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.751 I llm_load_print_meta: n_gqa            = 8
0.00.215.752 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.753 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.754 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.755 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.756 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.756 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.756 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.757 I llm_load_print_meta: n_ff             = 16384
0.00.215.757 I llm_load_print_meta: n_expert         = 0
0.00.215.758 I llm_load_print_meta: n_expert_used    = 0
0.00.215.758 I llm_load_print_meta: causal attn      = 1
0.00.215.758 I llm_load_print_meta: pooling type     = 0
0.00.215.759 I llm_load_print_meta: rope type        = 2
0.00.215.759 I llm_load_print_meta: rope scaling     = linear
0.00.215.760 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.761 I llm_load_print_meta: freq_scale_train = 1
0.00.215.761 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.761 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.762 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.762 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.762 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.763 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.763 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.763 I llm_load_print_meta: model type       = 2B
0.00.215.764 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.765 I llm_load_print_meta: model params     = 2.51 B
0.00.215.765 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.766 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.766 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.767 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.767 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.768 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.768 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.768 I llm_load_print_meta: max token length = 93
0.00.215.786 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.314.038 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.314.047 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.314.048 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.314.049 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.314.049 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.314.050 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.319.156 I llama_new_context_with_model: n_ctx      = 8192
0.00.319.163 I llama_new_context_with_model: n_batch    = 2048
0.00.319.164 I llama_new_context_with_model: n_ubatch   = 512
0.00.319.164 I llama_new_context_with_model: flash_attn = 0
0.00.319.166 I llama_new_context_with_model: freq_base  = 10000.0
0.00.319.167 I llama_new_context_with_model: freq_scale = 1
0.00.347.797 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.347.813 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.347.910 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.745 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.348.753 I llama_new_context_with_model: graph nodes  = 601
0.00.348.753 I llama_new_context_with_model: graph splits = 1
0.00.348.756 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.026 I main: llama threadpool init, n_threads = 4
0.00.439.037 I 
0.00.439.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.439.118 I 
0.00.439.170 I sampler seed: 1032444626
0.00.439.179 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.182 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.439.183 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities in the ancient world, especially among the Greeks, Romans, and Egyptians.

**Greek Culture and Practices**

* The Greeks placed a high value

0.02.663.244 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7015.31 tokens per second)
0.02.663.246 I llama_perf_context_print:        load time =     437.14 ms
0.02.663.247 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.663.248 I llama_perf_context_print:        eval time =    2205.91 ms /    32 runs   (   68.93 ms per token,    14.51 tokens per second)
0.02.663.249 I llama_perf_context_print:       total time =    2224.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.545 I build: 3764 (f80e6796) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.001.912 I main: load the model and apply lora adapter, if any
0.00.022.058 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.069 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.076 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.077 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.080 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.081 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.081 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.082 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.082 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.083 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.087 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.088 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.088 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.089 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.090 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.277 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.035 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.916 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.923 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.924 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.925 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.926 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.927 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.928 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.931 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.932 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.933 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.933 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.934 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.938 I llama_model_loader: - type  f32:   37 tensors
0.00.132.941 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.022 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.639 I llm_load_vocab: special tokens cache size = 5
0.00.214.247 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.270 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.271 I llm_load_print_meta: arch             = gemma
0.00.214.272 I llm_load_print_meta: vocab type       = SPM
0.00.214.272 I llm_load_print_meta: n_vocab          = 256000
0.00.214.273 I llm_load_print_meta: n_merges         = 0
0.00.214.274 I llm_load_print_meta: vocab_only       = 0
0.00.214.274 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.275 I llm_load_print_meta: n_embd           = 2048
0.00.214.275 I llm_load_print_meta: n_layer          = 18
0.00.214.287 I llm_load_print_meta: n_head           = 8
0.00.214.288 I llm_load_print_meta: n_head_kv        = 1
0.00.214.288 I llm_load_print_meta: n_rot            = 256
0.00.214.288 I llm_load_print_meta: n_swa            = 0
0.00.214.289 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.289 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.290 I llm_load_print_meta: n_gqa            = 8
0.00.214.291 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.292 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.293 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.294 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.294 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.296 I llm_load_print_meta: n_ff             = 16384
0.00.214.296 I llm_load_print_meta: n_expert         = 0
0.00.214.296 I llm_load_print_meta: n_expert_used    = 0
0.00.214.296 I llm_load_print_meta: causal attn      = 1
0.00.214.297 I llm_load_print_meta: pooling type     = 0
0.00.214.297 I llm_load_print_meta: rope type        = 2
0.00.214.298 I llm_load_print_meta: rope scaling     = linear
0.00.214.299 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.299 I llm_load_print_meta: freq_scale_train = 1
0.00.214.300 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.300 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.300 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.301 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.301 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.301 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.301 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.302 I llm_load_print_meta: model type       = 2B
0.00.214.303 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.303 I llm_load_print_meta: model params     = 2.51 B
0.00.214.304 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.305 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.305 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.305 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.306 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.306 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.306 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.307 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.307 I llm_load_print_meta: max token length = 93
0.00.214.323 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.267 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.314.294 I llama_new_context_with_model: n_ctx      = 8192
0.00.314.299 I llama_new_context_with_model: n_batch    = 2048
0.00.314.300 I llama_new_context_with_model: n_ubatch   = 512
0.00.314.300 I llama_new_context_with_model: flash_attn = 0
0.00.314.302 I llama_new_context_with_model: freq_base  = 10000.0
0.00.314.303 I llama_new_context_with_model: freq_scale = 1
0.00.343.380 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.396 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.485 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.338 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.346 I llama_new_context_with_model: graph nodes  = 601
0.00.344.347 I llama_new_context_with_model: graph splits = 1
0.00.344.349 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.328 I main: llama threadpool init, n_threads = 4
0.00.431.341 I 
0.00.431.417 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.422 I 
0.00.431.471 I sampler seed: 4074446793
0.00.431.482 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.485 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.485 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively through the text, highlighting the key points.

The text is about a scientist's research on bioluminescent algae.

**Key Points:**

0.02.599.175 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6970.85 tokens per second)
0.02.599.177 I llama_perf_context_print:        load time =     429.40 ms
0.02.599.178 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.599.181 I llama_perf_context_print:        eval time =    2149.51 ms /    32 runs   (   67.17 ms per token,    14.89 tokens per second)
0.02.599.182 I llama_perf_context_print:       total time =    2167.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.558 I build: 3764 (f80e6796) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.001.924 I main: load the model and apply lora adapter, if any
0.00.021.837 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.897 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.907 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.912 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.914 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.918 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.922 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.923 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.923 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.924 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.925 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.932 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.932 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.933 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.935 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.936 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.536 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.901 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.755 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.762 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.762 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.763 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.764 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.769 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.770 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.771 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.771 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.772 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.776 I llama_model_loader: - type  f32:   37 tensors
0.00.132.778 I llama_model_loader: - type q8_0:  127 tensors
0.00.196.985 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.659 I llm_load_vocab: special tokens cache size = 5
0.00.216.024 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.038 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.038 I llm_load_print_meta: arch             = gemma
0.00.216.039 I llm_load_print_meta: vocab type       = SPM
0.00.216.040 I llm_load_print_meta: n_vocab          = 256000
0.00.216.040 I llm_load_print_meta: n_merges         = 0
0.00.216.041 I llm_load_print_meta: vocab_only       = 0
0.00.216.041 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.041 I llm_load_print_meta: n_embd           = 2048
0.00.216.042 I llm_load_print_meta: n_layer          = 18
0.00.216.055 I llm_load_print_meta: n_head           = 8
0.00.216.056 I llm_load_print_meta: n_head_kv        = 1
0.00.216.056 I llm_load_print_meta: n_rot            = 256
0.00.216.056 I llm_load_print_meta: n_swa            = 0
0.00.216.057 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.057 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.058 I llm_load_print_meta: n_gqa            = 8
0.00.216.059 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.060 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.060 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.062 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.063 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.064 I llm_load_print_meta: n_ff             = 16384
0.00.216.064 I llm_load_print_meta: n_expert         = 0
0.00.216.064 I llm_load_print_meta: n_expert_used    = 0
0.00.216.065 I llm_load_print_meta: causal attn      = 1
0.00.216.065 I llm_load_print_meta: pooling type     = 0
0.00.216.065 I llm_load_print_meta: rope type        = 2
0.00.216.066 I llm_load_print_meta: rope scaling     = linear
0.00.216.067 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.068 I llm_load_print_meta: freq_scale_train = 1
0.00.216.068 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.069 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.070 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.070 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.071 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.071 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.071 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.072 I llm_load_print_meta: model type       = 2B
0.00.216.073 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.074 I llm_load_print_meta: model params     = 2.51 B
0.00.216.074 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.075 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.075 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.076 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.077 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.077 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.078 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.078 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.079 I llm_load_print_meta: max token length = 93
0.00.216.097 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.289.968 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.289.974 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.289.975 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.289.976 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.289.977 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.289.977 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.294.884 I llama_new_context_with_model: n_ctx      = 8192
0.00.294.890 I llama_new_context_with_model: n_batch    = 2048
0.00.294.891 I llama_new_context_with_model: n_ubatch   = 512
0.00.294.891 I llama_new_context_with_model: flash_attn = 0
0.00.294.894 I llama_new_context_with_model: freq_base  = 10000.0
0.00.294.894 I llama_new_context_with_model: freq_scale = 1
0.00.324.069 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.324.084 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.324.180 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.325.064 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.325.069 I llama_new_context_with_model: graph nodes  = 601
0.00.325.069 I llama_new_context_with_model: graph splits = 1
0.00.325.071 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.416.945 I main: llama threadpool init, n_threads = 4
0.00.416.958 I 
0.00.417.041 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.417.045 I 
0.00.417.109 I sampler seed: 4017295807
0.00.417.120 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.122 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.417.123 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities?

I am unable to answer this question as it contains sexually suggestive and inappropriate content. [end of text]


0.01.931.501 I llama_perf_sampler_print:    sampling time =       3.16 ms /    22 runs   (    0.14 ms per token,  6953.22 tokens per second)
0.01.931.503 I llama_perf_context_print:        load time =     415.00 ms
0.01.931.504 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.931.506 I llama_perf_context_print:        eval time =    1502.71 ms /    21 runs   (   71.56 ms per token,    13.97 tokens per second)
0.01.931.506 I llama_perf_context_print:       total time =    1514.56 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.445 I build: 3764 (f80e6796) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.635 I main: llama backend init
0.00.001.772 I main: load the model and apply lora adapter, if any
0.00.022.030 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.077 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.084 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.090 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.091 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.095 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.097 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.098 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.099 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.099 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.100 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.105 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.106 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.107 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.108 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.440 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.832 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.601 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.606 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.607 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.607 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.608 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.609 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.610 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.612 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.613 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.614 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.615 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.616 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.618 I llama_model_loader: - type  f32:   37 tensors
0.00.132.621 I llama_model_loader: - type q8_0:  127 tensors
0.00.193.981 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.194.549 I llm_load_vocab: special tokens cache size = 5
0.00.212.901 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.915 I llm_load_print_meta: arch             = gemma
0.00.212.916 I llm_load_print_meta: vocab type       = SPM
0.00.212.917 I llm_load_print_meta: n_vocab          = 256000
0.00.212.917 I llm_load_print_meta: n_merges         = 0
0.00.212.917 I llm_load_print_meta: vocab_only       = 0
0.00.212.918 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.918 I llm_load_print_meta: n_embd           = 2048
0.00.212.918 I llm_load_print_meta: n_layer          = 18
0.00.212.930 I llm_load_print_meta: n_head           = 8
0.00.212.931 I llm_load_print_meta: n_head_kv        = 1
0.00.212.932 I llm_load_print_meta: n_rot            = 256
0.00.212.932 I llm_load_print_meta: n_swa            = 0
0.00.212.932 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.932 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.933 I llm_load_print_meta: n_gqa            = 8
0.00.212.934 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.935 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.936 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.937 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.938 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.938 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.938 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.939 I llm_load_print_meta: n_ff             = 16384
0.00.212.939 I llm_load_print_meta: n_expert         = 0
0.00.212.940 I llm_load_print_meta: n_expert_used    = 0
0.00.212.940 I llm_load_print_meta: causal attn      = 1
0.00.212.940 I llm_load_print_meta: pooling type     = 0
0.00.212.941 I llm_load_print_meta: rope type        = 2
0.00.212.941 I llm_load_print_meta: rope scaling     = linear
0.00.212.942 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.943 I llm_load_print_meta: freq_scale_train = 1
0.00.212.943 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.944 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.944 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.944 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.945 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.945 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.945 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.946 I llm_load_print_meta: model type       = 2B
0.00.212.946 I llm_load_print_meta: model ftype      = Q8_0
0.00.212.947 I llm_load_print_meta: model params     = 2.51 B
0.00.212.948 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.212.948 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.949 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.949 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.950 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.950 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.951 I llm_load_print_meta: max token length = 93
0.00.212.969 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.283.399 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.283.406 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.288.434 I llama_new_context_with_model: n_ctx      = 8192
0.00.288.440 I llama_new_context_with_model: n_batch    = 2048
0.00.288.441 I llama_new_context_with_model: n_ubatch   = 512
0.00.288.442 I llama_new_context_with_model: flash_attn = 0
0.00.288.444 I llama_new_context_with_model: freq_base  = 10000.0
0.00.288.445 I llama_new_context_with_model: freq_scale = 1
0.00.316.779 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.316.794 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.316.885 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.317.786 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.317.792 I llama_new_context_with_model: graph nodes  = 601
0.00.317.792 I llama_new_context_with_model: graph splits = 1
0.00.317.795 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.633 I main: llama threadpool init, n_threads = 4
0.00.411.644 I 
0.00.411.716 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.411.719 I 
0.00.411.748 I sampler seed: 117735458
0.00.411.757 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.411.768 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.411.773 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

The answer is:

I scream, you scream, we scream.

This is a collective shout that expresses the shared experience of human beings

0.02.820.660 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6836.54 tokens per second)
0.02.820.663 I llama_perf_context_print:        load time =     409.85 ms
0.02.820.665 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.820.667 I llama_perf_context_print:        eval time =    2390.70 ms /    32 runs   (   74.71 ms per token,    13.39 tokens per second)
0.02.820.669 I llama_perf_context_print:       total time =    2409.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.549s
user	0m35.930s
sys	0m9.259s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3764 (f80e6796)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31997.56 ms
main:    total time = 31997.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 3764 (f80e6796) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.814 I main: load the model and apply lora adapter, if any
0.00.021.923 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.971 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.980 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.985 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.986 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.989 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.990 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.991 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.991 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.992 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.995 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.996 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.996 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.997 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.998 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.688 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.300 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.279 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.280 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.281 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.281 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.283 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.287 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.288 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.289 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.290 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.291 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.295 I llama_model_loader: - type  f32:   37 tensors
0.00.133.298 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.299 I llama_model_loader: - type q6_K:   19 tensors
0.00.199.417 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.171 I llm_load_vocab: special tokens cache size = 5
0.00.218.693 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.218.707 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.218.707 I llm_load_print_meta: arch             = gemma
0.00.218.708 I llm_load_print_meta: vocab type       = SPM
0.00.218.709 I llm_load_print_meta: n_vocab          = 256000
0.00.218.709 I llm_load_print_meta: n_merges         = 0
0.00.218.709 I llm_load_print_meta: vocab_only       = 0
0.00.218.710 I llm_load_print_meta: n_ctx_train      = 8192
0.00.218.710 I llm_load_print_meta: n_embd           = 2048
0.00.218.710 I llm_load_print_meta: n_layer          = 18
0.00.218.723 I llm_load_print_meta: n_head           = 8
0.00.218.724 I llm_load_print_meta: n_head_kv        = 1
0.00.218.724 I llm_load_print_meta: n_rot            = 256
0.00.218.724 I llm_load_print_meta: n_swa            = 0
0.00.218.725 I llm_load_print_meta: n_embd_head_k    = 256
0.00.218.725 I llm_load_print_meta: n_embd_head_v    = 256
0.00.218.726 I llm_load_print_meta: n_gqa            = 8
0.00.218.727 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.218.728 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.218.729 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.218.730 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.218.730 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.218.730 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.218.731 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.218.731 I llm_load_print_meta: n_ff             = 16384
0.00.218.732 I llm_load_print_meta: n_expert         = 0
0.00.218.732 I llm_load_print_meta: n_expert_used    = 0
0.00.218.732 I llm_load_print_meta: causal attn      = 1
0.00.218.733 I llm_load_print_meta: pooling type     = 0
0.00.218.733 I llm_load_print_meta: rope type        = 2
0.00.218.734 I llm_load_print_meta: rope scaling     = linear
0.00.218.735 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.218.736 I llm_load_print_meta: freq_scale_train = 1
0.00.218.736 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.218.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.218.736 I llm_load_print_meta: ssm_d_conv       = 0
0.00.218.737 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.737 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.737 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.737 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.738 I llm_load_print_meta: model type       = 2B
0.00.218.738 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.218.739 I llm_load_print_meta: model params     = 2.51 B
0.00.218.740 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.218.740 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.741 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.742 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.742 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.743 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.743 I llm_load_print_meta: max token length = 93
0.00.218.763 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.277.765 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.277.773 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.277.774 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.277.775 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.277.775 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.277.776 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.283.546 I llama_new_context_with_model: n_ctx      = 8192
0.00.283.552 I llama_new_context_with_model: n_batch    = 2048
0.00.283.552 I llama_new_context_with_model: n_ubatch   = 512
0.00.283.553 I llama_new_context_with_model: flash_attn = 0
0.00.283.555 I llama_new_context_with_model: freq_base  = 10000.0
0.00.283.556 I llama_new_context_with_model: freq_scale = 1
0.00.311.807 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.311.822 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.311.910 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.312.745 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.312.752 I llama_new_context_with_model: graph nodes  = 601
0.00.312.753 I llama_new_context_with_model: graph splits = 1
0.00.312.754 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.395.797 I main: llama threadpool init, n_threads = 4
0.00.395.807 I 
0.00.395.899 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.395.903 I 
0.00.395.933 I sampler seed: 386278755
0.00.395.950 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.395.968 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.395.972 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities?

I am unable to answer the question as it contains sexually suggestive and inappropriate content. [end of text]


0.01.452.782 I llama_perf_sampler_print:    sampling time =       3.06 ms /    22 runs   (    0.14 ms per token,  7198.95 tokens per second)
0.01.452.784 I llama_perf_context_print:        load time =     393.96 ms
0.01.452.785 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.452.787 I llama_perf_context_print:        eval time =    1045.29 ms /    21 runs   (   49.78 ms per token,    20.09 tokens per second)
0.01.452.788 I llama_perf_context_print:       total time =    1057.00 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3764 (f80e6796)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32031.15 ms
main:    total time = 32031.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.572 I build: 3764 (f80e6796) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.001.895 I main: load the model and apply lora adapter, if any
0.00.022.052 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.072 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.073 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.077 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.077 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.079 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.080 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.080 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.085 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.086 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.086 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.107 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.897 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.903 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.904 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.904 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.905 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.906 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.907 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.910 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.910 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.913 I llama_model_loader: - type  f32:   37 tensors
0.00.131.915 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.915 I llama_model_loader: - type q6_K:   19 tensors
0.00.193.333 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.193.927 I llm_load_vocab: special tokens cache size = 5
0.00.212.486 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.212.500 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.212.500 I llm_load_print_meta: arch             = gemma
0.00.212.501 I llm_load_print_meta: vocab type       = SPM
0.00.212.502 I llm_load_print_meta: n_vocab          = 256000
0.00.212.502 I llm_load_print_meta: n_merges         = 0
0.00.212.502 I llm_load_print_meta: vocab_only       = 0
0.00.212.503 I llm_load_print_meta: n_ctx_train      = 8192
0.00.212.503 I llm_load_print_meta: n_embd           = 2048
0.00.212.503 I llm_load_print_meta: n_layer          = 18
0.00.212.515 I llm_load_print_meta: n_head           = 8
0.00.212.516 I llm_load_print_meta: n_head_kv        = 1
0.00.212.516 I llm_load_print_meta: n_rot            = 256
0.00.212.516 I llm_load_print_meta: n_swa            = 0
0.00.212.517 I llm_load_print_meta: n_embd_head_k    = 256
0.00.212.517 I llm_load_print_meta: n_embd_head_v    = 256
0.00.212.518 I llm_load_print_meta: n_gqa            = 8
0.00.212.519 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.212.520 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.212.521 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.212.522 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.212.523 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.212.523 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.212.523 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.212.524 I llm_load_print_meta: n_ff             = 16384
0.00.212.525 I llm_load_print_meta: n_expert         = 0
0.00.212.525 I llm_load_print_meta: n_expert_used    = 0
0.00.212.525 I llm_load_print_meta: causal attn      = 1
0.00.212.525 I llm_load_print_meta: pooling type     = 0
0.00.212.526 I llm_load_print_meta: rope type        = 2
0.00.212.526 I llm_load_print_meta: rope scaling     = linear
0.00.212.528 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.212.529 I llm_load_print_meta: freq_scale_train = 1
0.00.212.529 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.212.529 I llm_load_print_meta: rope_finetuned   = unknown
0.00.212.530 I llm_load_print_meta: ssm_d_conv       = 0
0.00.212.530 I llm_load_print_meta: ssm_d_inner      = 0
0.00.212.530 I llm_load_print_meta: ssm_d_state      = 0
0.00.212.531 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.212.531 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.212.531 I llm_load_print_meta: model type       = 2B
0.00.212.532 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.212.533 I llm_load_print_meta: model params     = 2.51 B
0.00.212.533 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.212.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.212.534 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.212.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.212.535 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.212.535 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.212.536 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.212.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.212.536 I llm_load_print_meta: max token length = 93
0.00.212.555 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.270.032 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.274.979 I llama_new_context_with_model: n_ctx      = 8192
0.00.274.986 I llama_new_context_with_model: n_batch    = 2048
0.00.274.986 I llama_new_context_with_model: n_ubatch   = 512
0.00.274.986 I llama_new_context_with_model: flash_attn = 0
0.00.274.989 I llama_new_context_with_model: freq_base  = 10000.0
0.00.274.990 I llama_new_context_with_model: freq_scale = 1
0.00.305.111 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.305.128 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.305.219 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.306.051 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.306.059 I llama_new_context_with_model: graph nodes  = 601
0.00.306.059 I llama_new_context_with_model: graph splits = 1
0.00.306.062 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.386.604 I main: llama threadpool init, n_threads = 4
0.00.386.617 I 
0.00.386.692 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.386.695 I 
0.00.386.733 I sampler seed: 4025972575
0.00.386.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.386.744 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.386.745 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

A scientist is studying the growth of bacteria in a laboratory. The initial population is 100 bacteria and the population grows exponentially with a

0.01.980.519 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6600.00 tokens per second)
0.01.980.522 I llama_perf_context_print:        load time =     384.69 ms
0.01.980.523 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.980.525 I llama_perf_context_print:        eval time =    1575.58 ms /    32 runs   (   49.24 ms per token,    20.31 tokens per second)
0.01.980.526 I llama_perf_context_print:       total time =    1593.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.214s
user	8m12.116s
sys	0m6.788s
