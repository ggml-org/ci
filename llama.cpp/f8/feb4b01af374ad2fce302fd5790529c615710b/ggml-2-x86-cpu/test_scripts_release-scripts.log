+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.029.825 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.029.833 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.029.841 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.846 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.848 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.850 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.851 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.852 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.852 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.853 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.854 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.858 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.858 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.859 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.860 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.860 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.618 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.959 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.965 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.966 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.967 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.967 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.969 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.970 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.972 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.973 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.973 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.136.975 I llama_model_loader: - type  f32:   37 tensors
0.00.136.976 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.264 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.869 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.332 I llm_load_vocab: special tokens cache size = 5
0.00.267.913 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.930 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.932 I llm_load_print_meta: arch             = gemma
0.00.267.933 I llm_load_print_meta: vocab type       = SPM
0.00.267.933 I llm_load_print_meta: n_vocab          = 256000
0.00.267.934 I llm_load_print_meta: n_merges         = 0
0.00.267.934 I llm_load_print_meta: vocab_only       = 0
0.00.267.934 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.935 I llm_load_print_meta: n_embd           = 2048
0.00.267.935 I llm_load_print_meta: n_layer          = 18
0.00.267.945 I llm_load_print_meta: n_head           = 8
0.00.267.947 I llm_load_print_meta: n_head_kv        = 1
0.00.267.948 I llm_load_print_meta: n_rot            = 256
0.00.267.948 I llm_load_print_meta: n_swa            = 0
0.00.267.948 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.948 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.950 I llm_load_print_meta: n_gqa            = 8
0.00.267.952 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.953 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.954 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.955 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.955 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.956 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.956 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.957 I llm_load_print_meta: n_ff             = 16384
0.00.267.958 I llm_load_print_meta: n_expert         = 0
0.00.267.958 I llm_load_print_meta: n_expert_used    = 0
0.00.267.958 I llm_load_print_meta: causal attn      = 1
0.00.267.958 I llm_load_print_meta: pooling type     = 0
0.00.267.959 I llm_load_print_meta: rope type        = 2
0.00.267.959 I llm_load_print_meta: rope scaling     = linear
0.00.267.960 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.961 I llm_load_print_meta: freq_scale_train = 1
0.00.267.961 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.962 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.962 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.962 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.963 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.963 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.963 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.965 I llm_load_print_meta: model type       = 2B
0.00.267.966 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.967 I llm_load_print_meta: model params     = 2.51 B
0.00.267.968 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.968 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.968 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.969 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.969 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.969 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.970 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.970 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.970 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.970 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.971 I llm_load_print_meta: max token length = 93
0.00.368.931 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.938 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.939 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.939 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.940 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.941 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.306 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.310 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.310 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.311 I llama_new_context_with_model: n_batch       = 2048
0.00.370.311 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.311 I llama_new_context_with_model: flash_attn    = 0
0.00.370.314 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.314 I llama_new_context_with_model: freq_scale    = 1
0.00.370.315 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.333 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.384.410 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.422 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.517 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.708 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.714 I llama_new_context_with_model: graph nodes  = 601
0.00.386.714 I llama_new_context_with_model: graph splits = 1
0.00.386.718 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.386.718 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.568 I main: llama threadpool init, n_threads = 4
0.00.471.581 I 
0.00.471.654 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.657 I 
0.00.471.692 I sampler seed: 3192599819
0.00.471.702 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.705 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.705 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.706 I 
 increasities.

I cannot provide a response that contains sexually suggestive or inappropriate content. [end of text]


0.01.731.773 I llama_perf_sampler_print:    sampling time =       2.83 ms /    19 runs   (    0.15 ms per token,  6701.94 tokens per second)
0.01.731.776 I llama_perf_context_print:        load time =     470.80 ms
0.01.731.777 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.731.779 I llama_perf_context_print:        eval time =    1249.19 ms /    18 runs   (   69.40 ms per token,    14.41 tokens per second)
0.01.731.781 I llama_perf_context_print:       total time =    1260.21 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.607 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.820 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.031.141 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.031.155 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.031.165 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.031.166 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.031.169 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.031.170 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.031.171 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.031.172 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.031.173 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.031.174 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.031.181 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.031.182 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.031.183 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.031.185 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.031.186 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.615 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.650 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.123 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.131 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.131 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.132 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.133 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.134 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.134 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.137 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.141 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.142 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.139.143 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.139.146 I llama_model_loader: - type  f32:   37 tensors
0.00.139.147 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.319 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.501 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.129 I llm_load_vocab: special tokens cache size = 5
0.00.270.053 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.070 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.072 I llm_load_print_meta: arch             = gemma
0.00.270.072 I llm_load_print_meta: vocab type       = SPM
0.00.270.073 I llm_load_print_meta: n_vocab          = 256000
0.00.270.073 I llm_load_print_meta: n_merges         = 0
0.00.270.074 I llm_load_print_meta: vocab_only       = 0
0.00.270.074 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.074 I llm_load_print_meta: n_embd           = 2048
0.00.270.075 I llm_load_print_meta: n_layer          = 18
0.00.270.085 I llm_load_print_meta: n_head           = 8
0.00.270.087 I llm_load_print_meta: n_head_kv        = 1
0.00.270.087 I llm_load_print_meta: n_rot            = 256
0.00.270.088 I llm_load_print_meta: n_swa            = 0
0.00.270.088 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.088 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.090 I llm_load_print_meta: n_gqa            = 8
0.00.270.091 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.093 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.093 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.095 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.095 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.095 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.096 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.097 I llm_load_print_meta: n_ff             = 16384
0.00.270.098 I llm_load_print_meta: n_expert         = 0
0.00.270.098 I llm_load_print_meta: n_expert_used    = 0
0.00.270.098 I llm_load_print_meta: causal attn      = 1
0.00.270.098 I llm_load_print_meta: pooling type     = 0
0.00.270.099 I llm_load_print_meta: rope type        = 2
0.00.270.099 I llm_load_print_meta: rope scaling     = linear
0.00.270.100 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.101 I llm_load_print_meta: freq_scale_train = 1
0.00.270.101 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.102 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.103 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.103 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.103 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.103 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.104 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.106 I llm_load_print_meta: model type       = 2B
0.00.270.107 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.108 I llm_load_print_meta: model params     = 2.51 B
0.00.270.108 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.109 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.109 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.109 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.110 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.110 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.110 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.111 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.111 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.111 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.111 I llm_load_print_meta: max token length = 93
0.00.366.372 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.367.764 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.767 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.768 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.768 I llama_new_context_with_model: n_batch       = 2048
0.00.367.769 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.769 I llama_new_context_with_model: flash_attn    = 0
0.00.367.772 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.772 I llama_new_context_with_model: freq_scale    = 1
0.00.367.773 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.791 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.381.982 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.996 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.091 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.304 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.310 I llama_new_context_with_model: graph nodes  = 601
0.00.384.311 I llama_new_context_with_model: graph splits = 1
0.00.384.315 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.384.315 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.798 I main: llama threadpool init, n_threads = 4
0.00.465.813 I 
0.00.465.894 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.465.897 I 
0.00.465.930 I sampler seed: 243948989
0.00.465.941 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.952 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.955 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.956 I 
 increasities

I am unable to generate results that contain sexually suggestive or inappropriate content. [end of text]


0.01.691.346 I llama_perf_sampler_print:    sampling time =       2.73 ms /    19 runs   (    0.14 ms per token,  6949.52 tokens per second)
0.01.691.349 I llama_perf_context_print:        load time =     464.95 ms
0.01.691.351 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.691.353 I llama_perf_context_print:        eval time =    1214.88 ms /    18 runs   (   67.49 ms per token,    14.82 tokens per second)
0.01.691.354 I llama_perf_context_print:       total time =    1225.56 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.732 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.030.049 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.059 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.067 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.073 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.074 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.076 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.077 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.078 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.078 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.080 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.080 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.085 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.086 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.086 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.087 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.446 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.094 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.757 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.763 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.764 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.765 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.766 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.767 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.768 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.771 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.771 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.772 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.773 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.137.773 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.137.778 I llama_model_loader: - type  f32:   37 tensors
0.00.137.779 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.064 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.329 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.012 I llm_load_vocab: special tokens cache size = 5
0.00.278.197 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.221 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.223 I llm_load_print_meta: arch             = gemma
0.00.278.223 I llm_load_print_meta: vocab type       = SPM
0.00.278.224 I llm_load_print_meta: n_vocab          = 256000
0.00.278.225 I llm_load_print_meta: n_merges         = 0
0.00.278.225 I llm_load_print_meta: vocab_only       = 0
0.00.278.226 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.226 I llm_load_print_meta: n_embd           = 2048
0.00.278.226 I llm_load_print_meta: n_layer          = 18
0.00.278.238 I llm_load_print_meta: n_head           = 8
0.00.278.240 I llm_load_print_meta: n_head_kv        = 1
0.00.278.241 I llm_load_print_meta: n_rot            = 256
0.00.278.241 I llm_load_print_meta: n_swa            = 0
0.00.278.241 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.241 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.243 I llm_load_print_meta: n_gqa            = 8
0.00.278.245 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.247 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.248 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.249 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.250 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.250 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.250 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.252 I llm_load_print_meta: n_ff             = 16384
0.00.278.252 I llm_load_print_meta: n_expert         = 0
0.00.278.253 I llm_load_print_meta: n_expert_used    = 0
0.00.278.253 I llm_load_print_meta: causal attn      = 1
0.00.278.253 I llm_load_print_meta: pooling type     = 0
0.00.278.253 I llm_load_print_meta: rope type        = 2
0.00.278.254 I llm_load_print_meta: rope scaling     = linear
0.00.278.256 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.256 I llm_load_print_meta: freq_scale_train = 1
0.00.278.257 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.257 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.258 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.258 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.258 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.258 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.259 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.260 I llm_load_print_meta: model type       = 2B
0.00.278.261 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.262 I llm_load_print_meta: model params     = 2.51 B
0.00.278.263 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.263 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.264 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.264 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.265 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.266 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.266 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.267 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.267 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.267 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.268 I llm_load_print_meta: max token length = 93
0.00.356.081 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.356.089 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.089 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.356.090 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.356.090 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.356.091 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.357.428 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.432 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.432 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.432 I llama_new_context_with_model: n_batch       = 2048
0.00.357.433 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.433 I llama_new_context_with_model: flash_attn    = 0
0.00.357.435 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.436 I llama_new_context_with_model: freq_scale    = 1
0.00.357.437 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.455 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.372.153 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.167 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.260 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.123 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.128 I llama_new_context_with_model: graph nodes  = 601
0.00.374.129 I llama_new_context_with_model: graph splits = 1
0.00.374.132 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.374.132 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.653 I main: llama threadpool init, n_threads = 4
0.00.459.667 I 
0.00.459.742 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.745 I 
0.00.459.778 I sampler seed: 686581861
0.00.459.787 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.790 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.791 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.794 I 
 increasities is an important aspect of the human experience.

**Discussion Points:**

* What are the biological and psychological mechanisms underlying these experiences?
* How

0.02.721.102 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7048.27 tokens per second)
0.02.721.104 I llama_perf_context_print:        load time =     458.89 ms
0.02.721.105 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.721.106 I llama_perf_context_print:        eval time =    2242.84 ms /    32 runs   (   70.09 ms per token,    14.27 tokens per second)
0.02.721.107 I llama_perf_context_print:       total time =    2261.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.527 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.717 I main: llama backend init
0.00.000.723 I main: load the model and apply lora adapter, if any
0.00.029.856 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.029.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.029.875 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.881 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.882 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.885 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.885 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.886 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.887 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.888 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.889 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.894 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.894 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.895 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.895 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.896 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.149 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.494 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.792 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.798 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.799 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.800 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.800 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.801 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.802 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.804 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.805 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.136.806 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.136.807 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.136.808 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.136.810 I llama_model_loader: - type  f32:   37 tensors
0.00.136.811 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.310 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.762 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.277 I llm_load_vocab: special tokens cache size = 5
0.00.269.283 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.302 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.304 I llm_load_print_meta: arch             = gemma
0.00.269.304 I llm_load_print_meta: vocab type       = SPM
0.00.269.305 I llm_load_print_meta: n_vocab          = 256000
0.00.269.306 I llm_load_print_meta: n_merges         = 0
0.00.269.306 I llm_load_print_meta: vocab_only       = 0
0.00.269.306 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.307 I llm_load_print_meta: n_embd           = 2048
0.00.269.307 I llm_load_print_meta: n_layer          = 18
0.00.269.320 I llm_load_print_meta: n_head           = 8
0.00.269.322 I llm_load_print_meta: n_head_kv        = 1
0.00.269.322 I llm_load_print_meta: n_rot            = 256
0.00.269.322 I llm_load_print_meta: n_swa            = 0
0.00.269.323 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.323 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.325 I llm_load_print_meta: n_gqa            = 8
0.00.269.326 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.328 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.329 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.330 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.331 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.331 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.331 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.333 I llm_load_print_meta: n_ff             = 16384
0.00.269.333 I llm_load_print_meta: n_expert         = 0
0.00.269.334 I llm_load_print_meta: n_expert_used    = 0
0.00.269.334 I llm_load_print_meta: causal attn      = 1
0.00.269.334 I llm_load_print_meta: pooling type     = 0
0.00.269.334 I llm_load_print_meta: rope type        = 2
0.00.269.335 I llm_load_print_meta: rope scaling     = linear
0.00.269.336 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.337 I llm_load_print_meta: freq_scale_train = 1
0.00.269.337 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.338 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.339 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.340 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.341 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.341 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.341 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.344 I llm_load_print_meta: model type       = 2B
0.00.269.345 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.345 I llm_load_print_meta: model params     = 2.51 B
0.00.269.346 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.347 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.348 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.348 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.349 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.349 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.349 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.350 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.350 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.351 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.351 I llm_load_print_meta: max token length = 93
0.00.340.381 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.340.389 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.560 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.564 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.564 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.565 I llama_new_context_with_model: n_batch       = 2048
0.00.341.565 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.565 I llama_new_context_with_model: flash_attn    = 0
0.00.341.567 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.568 I llama_new_context_with_model: freq_scale    = 1
0.00.341.569 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.591 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.356.280 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.293 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.385 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.309 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.314 I llama_new_context_with_model: graph nodes  = 601
0.00.358.314 I llama_new_context_with_model: graph splits = 1
0.00.358.318 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.358.318 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.804 I main: llama threadpool init, n_threads = 4
0.00.461.824 I 
0.00.461.926 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.930 I 
0.00.461.972 I sampler seed: 1071515520
0.00.462.008 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.015 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.016 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.016 I 
 increably! 

I'm ready to embark on a journey, to explore the vast landscapes of knowledge. I'm eager to learn about the world

0.02.887.842 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6602.64 tokens per second)
0.02.887.844 I llama_perf_context_print:        load time =     461.06 ms
0.02.887.845 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.887.847 I llama_perf_context_print:        eval time =    2406.11 ms /    32 runs   (   75.19 ms per token,    13.30 tokens per second)
0.02.887.848 I llama_perf_context_print:       total time =    2426.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.851s
user	0m31.713s
sys	0m9.348s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4453 (f8feb4b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40219.09 ms
main:    total time = 40219.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.575 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.772 I main: load the model and apply lora adapter, if any
0.00.030.186 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.197 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.207 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.215 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.219 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.222 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.223 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.224 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.225 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.225 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.229 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.230 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.231 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.656 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.116 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.413 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.421 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.421 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.422 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.423 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.424 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.428 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.429 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.137.430 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.137.431 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.431 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.137.432 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.435 I llama_model_loader: - type  f32:   37 tensors
0.00.137.436 I llama_model_loader: - type q4_K:  108 tensors
0.00.137.436 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.849 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.694 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.223 I llm_load_vocab: special tokens cache size = 5
0.00.265.284 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.303 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.305 I llm_load_print_meta: arch             = gemma
0.00.265.305 I llm_load_print_meta: vocab type       = SPM
0.00.265.306 I llm_load_print_meta: n_vocab          = 256000
0.00.265.306 I llm_load_print_meta: n_merges         = 0
0.00.265.307 I llm_load_print_meta: vocab_only       = 0
0.00.265.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.307 I llm_load_print_meta: n_embd           = 2048
0.00.265.308 I llm_load_print_meta: n_layer          = 18
0.00.265.320 I llm_load_print_meta: n_head           = 8
0.00.265.322 I llm_load_print_meta: n_head_kv        = 1
0.00.265.322 I llm_load_print_meta: n_rot            = 256
0.00.265.322 I llm_load_print_meta: n_swa            = 0
0.00.265.323 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.323 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.325 I llm_load_print_meta: n_gqa            = 8
0.00.265.326 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.328 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.329 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.330 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.331 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.331 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.331 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.333 I llm_load_print_meta: n_ff             = 16384
0.00.265.333 I llm_load_print_meta: n_expert         = 0
0.00.265.333 I llm_load_print_meta: n_expert_used    = 0
0.00.265.334 I llm_load_print_meta: causal attn      = 1
0.00.265.334 I llm_load_print_meta: pooling type     = 0
0.00.265.335 I llm_load_print_meta: rope type        = 2
0.00.265.335 I llm_load_print_meta: rope scaling     = linear
0.00.265.336 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.337 I llm_load_print_meta: freq_scale_train = 1
0.00.265.337 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.338 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.338 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.339 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.339 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.339 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.339 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.341 I llm_load_print_meta: model type       = 2B
0.00.265.342 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.343 I llm_load_print_meta: model params     = 2.51 B
0.00.265.344 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.344 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.345 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.345 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.345 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.346 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.346 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.346 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.347 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.347 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.347 I llm_load_print_meta: max token length = 93
0.00.325.879 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.325.884 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.325.885 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.325.886 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.325.886 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.325.887 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.200 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.204 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.204 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.205 I llama_new_context_with_model: n_batch       = 2048
0.00.327.205 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.206 I llama_new_context_with_model: flash_attn    = 0
0.00.327.207 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.208 I llama_new_context_with_model: freq_scale    = 1
0.00.327.209 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.327.226 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.341.161 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.175 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.270 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.130 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.137 I llama_new_context_with_model: graph nodes  = 601
0.00.343.137 I llama_new_context_with_model: graph splits = 1
0.00.343.140 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.140 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.089 I main: llama threadpool init, n_threads = 4
0.00.420.104 I 
0.00.420.182 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.420.185 I 
0.00.420.219 I sampler seed: 987789147
0.00.420.230 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.243 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.247 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.247 I 
 seconally.

I cannot answer this question as it contains inappropriate content. I am programmed to adhere to ethical guidelines and cannot engage in conversations that are sexually suggestive

0.02.007.769 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6715.51 tokens per second)
0.02.007.772 I llama_perf_context_print:        load time =     419.30 ms
0.02.007.773 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.007.774 I llama_perf_context_print:        eval time =    1569.14 ms /    32 runs   (   49.04 ms per token,    20.39 tokens per second)
0.02.007.775 I llama_perf_context_print:       total time =    1587.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4453 (f8feb4b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40198.76 ms
main:    total time = 40198.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.547 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.030.109 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.126 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.133 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.134 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.136 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.137 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.138 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.139 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.139 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.143 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.143 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.144 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.144 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.195 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.439 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.136.957 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.136.964 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.136.964 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.136.965 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.136.966 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.136.967 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.136.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.136.969 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.136.970 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.136.971 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.136.974 I llama_model_loader: - type  f32:   37 tensors
0.00.136.975 I llama_model_loader: - type q4_K:  108 tensors
0.00.136.975 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.406 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.988 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.511 I llm_load_vocab: special tokens cache size = 5
0.00.267.275 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.294 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.295 I llm_load_print_meta: arch             = gemma
0.00.267.296 I llm_load_print_meta: vocab type       = SPM
0.00.267.296 I llm_load_print_meta: n_vocab          = 256000
0.00.267.297 I llm_load_print_meta: n_merges         = 0
0.00.267.297 I llm_load_print_meta: vocab_only       = 0
0.00.267.298 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.298 I llm_load_print_meta: n_embd           = 2048
0.00.267.298 I llm_load_print_meta: n_layer          = 18
0.00.267.310 I llm_load_print_meta: n_head           = 8
0.00.267.311 I llm_load_print_meta: n_head_kv        = 1
0.00.267.312 I llm_load_print_meta: n_rot            = 256
0.00.267.312 I llm_load_print_meta: n_swa            = 0
0.00.267.312 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.312 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.314 I llm_load_print_meta: n_gqa            = 8
0.00.267.316 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.317 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.318 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.319 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.320 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.320 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.320 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.322 I llm_load_print_meta: n_ff             = 16384
0.00.267.322 I llm_load_print_meta: n_expert         = 0
0.00.267.323 I llm_load_print_meta: n_expert_used    = 0
0.00.267.323 I llm_load_print_meta: causal attn      = 1
0.00.267.323 I llm_load_print_meta: pooling type     = 0
0.00.267.324 I llm_load_print_meta: rope type        = 2
0.00.267.324 I llm_load_print_meta: rope scaling     = linear
0.00.267.326 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.327 I llm_load_print_meta: freq_scale_train = 1
0.00.267.327 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.328 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.328 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.329 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.329 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.329 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.329 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.331 I llm_load_print_meta: model type       = 2B
0.00.267.332 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.333 I llm_load_print_meta: model params     = 2.51 B
0.00.267.334 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.334 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.334 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.335 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.335 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.335 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.336 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.336 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.336 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.337 I llm_load_print_meta: max token length = 93
0.00.325.708 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.326.945 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.949 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.949 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.950 I llama_new_context_with_model: n_batch       = 2048
0.00.326.950 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.951 I llama_new_context_with_model: flash_attn    = 0
0.00.326.953 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.954 I llama_new_context_with_model: freq_scale    = 1
0.00.326.955 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.326.974 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.341.376 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.391 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.483 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.343.666 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.343.671 I llama_new_context_with_model: graph nodes  = 601
0.00.343.672 I llama_new_context_with_model: graph splits = 1
0.00.343.675 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.343.675 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.620 I main: llama threadpool init, n_threads = 4
0.00.419.631 I 
0.00.419.707 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.419.710 I 
0.00.419.744 I sampler seed: 2251894705
0.00.419.755 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.759 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.760 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.760 I 
 seconally to the sentence "The future belongs to those who believe in the beauty of their dreams."

This revised sentence maintains the original meaning while using more contemporary

0.01.969.297 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6581.57 tokens per second)
0.01.969.300 I llama_perf_context_print:        load time =     418.86 ms
0.01.969.301 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.969.302 I llama_perf_context_print:        eval time =    1531.60 ms /    32 runs   (   47.86 ms per token,    20.89 tokens per second)
0.01.969.303 I llama_perf_context_print:       total time =    1549.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.201s
user	10m24.244s
sys	0m6.822s
