+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.085.577 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.587 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.681 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.699 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.702 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.706 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.713 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.717 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.719 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.720 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.729 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.731 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.732 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.734 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.735 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.276 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.501 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.968 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.980 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.982 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.983 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.985 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.987 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.989 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.993 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.995 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.416.997 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.999 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.001 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.417.009 I llama_model_loader: - type  f32:   37 tensors
0.00.417.011 I llama_model_loader: - type q8_0:  127 tensors
0.00.690.014 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.817.970 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.818.864 I llm_load_vocab: special tokens cache size = 5
0.01.029.466 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.029.544 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.029.549 I llm_load_print_meta: arch             = gemma
0.01.029.549 I llm_load_print_meta: vocab type       = SPM
0.01.029.550 I llm_load_print_meta: n_vocab          = 256000
0.01.029.553 I llm_load_print_meta: n_merges         = 0
0.01.029.553 I llm_load_print_meta: vocab_only       = 0
0.01.029.553 I llm_load_print_meta: n_ctx_train      = 8192
0.01.029.554 I llm_load_print_meta: n_embd           = 2048
0.01.029.554 I llm_load_print_meta: n_layer          = 18
0.01.029.636 I llm_load_print_meta: n_head           = 8
0.01.029.648 I llm_load_print_meta: n_head_kv        = 1
0.01.029.651 I llm_load_print_meta: n_rot            = 256
0.01.029.651 I llm_load_print_meta: n_swa            = 0
0.01.029.651 I llm_load_print_meta: n_embd_head_k    = 256
0.01.029.652 I llm_load_print_meta: n_embd_head_v    = 256
0.01.029.657 I llm_load_print_meta: n_gqa            = 8
0.01.029.662 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.029.667 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.029.668 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.029.670 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.029.670 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.029.671 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.029.672 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.029.677 I llm_load_print_meta: n_ff             = 16384
0.01.029.678 I llm_load_print_meta: n_expert         = 0
0.01.029.679 I llm_load_print_meta: n_expert_used    = 0
0.01.029.679 I llm_load_print_meta: causal attn      = 1
0.01.029.679 I llm_load_print_meta: pooling type     = 0
0.01.029.680 I llm_load_print_meta: rope type        = 2
0.01.029.681 I llm_load_print_meta: rope scaling     = linear
0.01.029.682 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.029.683 I llm_load_print_meta: freq_scale_train = 1
0.01.029.683 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.029.686 I llm_load_print_meta: rope_finetuned   = unknown
0.01.029.686 I llm_load_print_meta: ssm_d_conv       = 0
0.01.029.687 I llm_load_print_meta: ssm_d_inner      = 0
0.01.029.687 I llm_load_print_meta: ssm_d_state      = 0
0.01.029.687 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.029.688 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.029.690 I llm_load_print_meta: model type       = 2B
0.01.029.692 I llm_load_print_meta: model ftype      = Q8_0
0.01.029.693 I llm_load_print_meta: model params     = 2.51 B
0.01.029.701 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.029.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.029.705 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.029.705 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.029.706 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.029.706 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.029.706 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.029.707 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.029.713 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.029.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.029.716 I llm_load_print_meta: max token length = 93
0.01.133.443 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.133.450 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.133.451 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.133.452 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.133.453 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.133.453 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.140.597 I llama_new_context_with_model: n_seq_max     = 1
0.01.140.603 I llama_new_context_with_model: n_ctx         = 4096
0.01.140.604 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.140.604 I llama_new_context_with_model: n_batch       = 2048
0.01.140.604 I llama_new_context_with_model: n_ubatch      = 512
0.01.140.605 I llama_new_context_with_model: flash_attn    = 0
0.01.140.607 I llama_new_context_with_model: freq_base     = 10000.0
0.01.140.607 I llama_new_context_with_model: freq_scale    = 1
0.01.140.608 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.140.689 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.154.711 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.154.749 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.154.873 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.158.138 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.158.142 I llama_new_context_with_model: graph nodes  = 601
0.01.158.142 I llama_new_context_with_model: graph splits = 1
0.01.158.168 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.158.171 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.769.727 I main: llama threadpool init, n_threads = 4
0.01.769.744 I 
0.01.769.872 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.769.876 I 
0.01.770.105 I sampler seed: 2182666774
0.01.770.118 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.770.131 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.770.132 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.770.132 I 
 increamentalism, and the historical development of the concept of the person.

**I. Defining the Person**

* Pre-Socratics: Focus

0.15.232.978 I llama_perf_sampler_print:    sampling time =      48.44 ms /    33 runs   (    1.47 ms per token,   681.30 tokens per second)
0.15.232.981 I llama_perf_context_print:        load time =    1768.78 ms
0.15.232.983 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.232.985 I llama_perf_context_print:        eval time =   13379.13 ms /    32 runs   (  418.10 ms per token,     2.39 tokens per second)
0.15.232.986 I llama_perf_context_print:       total time =   13463.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.085.911 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.013 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.037 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.042 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.047 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.049 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.051 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.052 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.054 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.056 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.063 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.066 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.067 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.069 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.070 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.583 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.630 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.220 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.232 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.234 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.235 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.237 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.241 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.247 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.251 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.253 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.255 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.417.265 I llama_model_loader: - type  f32:   37 tensors
0.00.417.267 I llama_model_loader: - type q8_0:  127 tensors
0.00.676.781 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.797.465 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.798.311 I llm_load_vocab: special tokens cache size = 5
0.01.015.783 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.015.867 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.015.872 I llm_load_print_meta: arch             = gemma
0.01.015.873 I llm_load_print_meta: vocab type       = SPM
0.01.015.874 I llm_load_print_meta: n_vocab          = 256000
0.01.015.876 I llm_load_print_meta: n_merges         = 0
0.01.015.876 I llm_load_print_meta: vocab_only       = 0
0.01.015.877 I llm_load_print_meta: n_ctx_train      = 8192
0.01.015.877 I llm_load_print_meta: n_embd           = 2048
0.01.015.878 I llm_load_print_meta: n_layer          = 18
0.01.015.959 I llm_load_print_meta: n_head           = 8
0.01.015.970 I llm_load_print_meta: n_head_kv        = 1
0.01.015.971 I llm_load_print_meta: n_rot            = 256
0.01.015.971 I llm_load_print_meta: n_swa            = 0
0.01.015.972 I llm_load_print_meta: n_embd_head_k    = 256
0.01.015.972 I llm_load_print_meta: n_embd_head_v    = 256
0.01.015.978 I llm_load_print_meta: n_gqa            = 8
0.01.015.984 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.015.989 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.015.992 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.015.994 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.015.995 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.015.995 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.015.996 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.016.001 I llm_load_print_meta: n_ff             = 16384
0.01.016.002 I llm_load_print_meta: n_expert         = 0
0.01.016.003 I llm_load_print_meta: n_expert_used    = 0
0.01.016.004 I llm_load_print_meta: causal attn      = 1
0.01.016.004 I llm_load_print_meta: pooling type     = 0
0.01.016.004 I llm_load_print_meta: rope type        = 2
0.01.016.028 I llm_load_print_meta: rope scaling     = linear
0.01.016.033 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.016.034 I llm_load_print_meta: freq_scale_train = 1
0.01.016.034 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.016.035 I llm_load_print_meta: rope_finetuned   = unknown
0.01.016.035 I llm_load_print_meta: ssm_d_conv       = 0
0.01.016.036 I llm_load_print_meta: ssm_d_inner      = 0
0.01.016.036 I llm_load_print_meta: ssm_d_state      = 0
0.01.016.036 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.016.037 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.016.040 I llm_load_print_meta: model type       = 2B
0.01.016.042 I llm_load_print_meta: model ftype      = Q8_0
0.01.016.043 I llm_load_print_meta: model params     = 2.51 B
0.01.016.043 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.016.044 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.016.045 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.016.046 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.016.047 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.016.048 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.016.050 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.016.051 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.016.057 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.016.058 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.016.059 I llm_load_print_meta: max token length = 93
0.01.114.560 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.121.545 I llama_new_context_with_model: n_seq_max     = 1
0.01.121.551 I llama_new_context_with_model: n_ctx         = 4096
0.01.121.552 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.121.552 I llama_new_context_with_model: n_batch       = 2048
0.01.121.552 I llama_new_context_with_model: n_ubatch      = 512
0.01.121.553 I llama_new_context_with_model: flash_attn    = 0
0.01.121.555 I llama_new_context_with_model: freq_base     = 10000.0
0.01.121.556 I llama_new_context_with_model: freq_scale    = 1
0.01.121.557 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.121.641 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.137.197 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.137.239 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.137.359 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.140.917 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.140.921 I llama_new_context_with_model: graph nodes  = 601
0.01.140.921 I llama_new_context_with_model: graph splits = 1
0.01.140.945 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.140.948 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.764.370 I main: llama threadpool init, n_threads = 4
0.01.764.388 I 
0.01.764.507 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.764.512 I 
0.01.764.731 I sampler seed: 1413951746
0.01.764.759 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.764.786 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.764.790 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.764.791 I 
 increadibly, and the other day I was told to stop because it was affecting other employees.

I understand that there are concerns about productivity and communication, and

0.15.289.669 I llama_perf_sampler_print:    sampling time =      48.56 ms /    33 runs   (    1.47 ms per token,   679.61 tokens per second)
0.15.289.672 I llama_perf_context_print:        load time =    1763.36 ms
0.15.289.684 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.289.686 I llama_perf_context_print:        eval time =   13441.43 ms /    32 runs   (  420.04 ms per token,     2.38 tokens per second)
0.15.289.688 I llama_perf_context_print:       total time =   13525.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.855 I main: load the model and apply lora adapter, if any
0.00.085.015 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.024 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.115 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.136 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.141 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.145 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.147 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.149 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.151 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.152 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.154 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.161 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.162 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.164 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.166 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.168 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.926 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.394.204 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.793 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.807 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.809 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.811 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.812 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.815 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.816 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.843 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.845 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.418.847 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.858 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.418.861 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.418.871 I llama_model_loader: - type  f32:   37 tensors
0.00.418.873 I llama_model_loader: - type q8_0:  127 tensors
0.00.689.560 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.813.020 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.814.007 I llm_load_vocab: special tokens cache size = 5
0.01.019.695 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.019.774 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.019.779 I llm_load_print_meta: arch             = gemma
0.01.019.780 I llm_load_print_meta: vocab type       = SPM
0.01.019.781 I llm_load_print_meta: n_vocab          = 256000
0.01.019.783 I llm_load_print_meta: n_merges         = 0
0.01.019.784 I llm_load_print_meta: vocab_only       = 0
0.01.019.784 I llm_load_print_meta: n_ctx_train      = 8192
0.01.019.785 I llm_load_print_meta: n_embd           = 2048
0.01.019.785 I llm_load_print_meta: n_layer          = 18
0.01.019.863 I llm_load_print_meta: n_head           = 8
0.01.019.871 I llm_load_print_meta: n_head_kv        = 1
0.01.019.873 I llm_load_print_meta: n_rot            = 256
0.01.019.873 I llm_load_print_meta: n_swa            = 0
0.01.019.874 I llm_load_print_meta: n_embd_head_k    = 256
0.01.019.874 I llm_load_print_meta: n_embd_head_v    = 256
0.01.019.879 I llm_load_print_meta: n_gqa            = 8
0.01.019.884 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.019.889 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.019.891 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.019.892 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.019.893 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.019.905 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.019.906 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.019.912 I llm_load_print_meta: n_ff             = 16384
0.01.019.913 I llm_load_print_meta: n_expert         = 0
0.01.019.913 I llm_load_print_meta: n_expert_used    = 0
0.01.019.914 I llm_load_print_meta: causal attn      = 1
0.01.019.914 I llm_load_print_meta: pooling type     = 0
0.01.019.915 I llm_load_print_meta: rope type        = 2
0.01.019.915 I llm_load_print_meta: rope scaling     = linear
0.01.019.917 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.019.918 I llm_load_print_meta: freq_scale_train = 1
0.01.019.919 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.019.919 I llm_load_print_meta: rope_finetuned   = unknown
0.01.019.919 I llm_load_print_meta: ssm_d_conv       = 0
0.01.019.920 I llm_load_print_meta: ssm_d_inner      = 0
0.01.019.921 I llm_load_print_meta: ssm_d_state      = 0
0.01.019.921 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.019.922 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.019.941 I llm_load_print_meta: model type       = 2B
0.01.019.943 I llm_load_print_meta: model ftype      = Q8_0
0.01.019.944 I llm_load_print_meta: model params     = 2.51 B
0.01.019.945 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.019.946 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.019.946 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.019.947 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.019.948 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.019.949 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.019.949 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.019.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.019.956 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.019.957 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.019.958 I llm_load_print_meta: max token length = 93
0.01.100.632 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.100.644 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.100.644 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.100.645 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.100.646 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.100.647 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.107.571 I llama_new_context_with_model: n_seq_max     = 1
0.01.107.577 I llama_new_context_with_model: n_ctx         = 4096
0.01.107.577 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.107.577 I llama_new_context_with_model: n_batch       = 2048
0.01.107.578 I llama_new_context_with_model: n_ubatch      = 512
0.01.107.578 I llama_new_context_with_model: flash_attn    = 0
0.01.107.581 I llama_new_context_with_model: freq_base     = 10000.0
0.01.107.582 I llama_new_context_with_model: freq_scale    = 1
0.01.107.582 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.107.663 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.123.070 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.123.107 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.123.235 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.126.856 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.126.860 I llama_new_context_with_model: graph nodes  = 601
0.01.126.860 I llama_new_context_with_model: graph splits = 1
0.01.126.884 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.126.887 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.741.760 I main: llama threadpool init, n_threads = 4
0.01.741.776 I 
0.01.741.901 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.741.906 I 
0.01.742.134 I sampler seed: 593020913
0.01.742.150 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.742.159 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.742.162 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.742.163 I 
 increasities with the characters.

I am unable to generate the requested response as it contains sexually suggestive content that is not appropriate for me to provide. [end of text]


0.15.016.871 I llama_perf_sampler_print:    sampling time =      47.12 ms /    32 runs   (    1.47 ms per token,   679.07 tokens per second)
0.15.016.886 I llama_perf_context_print:        load time =    1740.82 ms
0.15.016.888 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.016.890 I llama_perf_context_print:        eval time =   13193.26 ms /    31 runs   (  425.59 ms per token,     2.35 tokens per second)
0.15.016.891 I llama_perf_context_print:       total time =   13275.12 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.694 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.892 I main: llama backend init
0.00.000.900 I main: load the model and apply lora adapter, if any
0.00.085.830 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.841 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.939 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.958 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.961 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.966 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.968 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.970 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.972 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.995 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.005 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.007 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.008 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.010 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.011 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.360 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.378 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.982 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.992 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.994 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.995 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.997 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.001 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.005 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.007 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.418.009 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.011 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.418.013 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.418.021 I llama_model_loader: - type  f32:   37 tensors
0.00.418.023 I llama_model_loader: - type q8_0:  127 tensors
0.00.679.327 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.800.506 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.801.430 I llm_load_vocab: special tokens cache size = 5
0.01.014.712 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.014.795 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.014.803 I llm_load_print_meta: arch             = gemma
0.01.014.804 I llm_load_print_meta: vocab type       = SPM
0.01.014.805 I llm_load_print_meta: n_vocab          = 256000
0.01.014.807 I llm_load_print_meta: n_merges         = 0
0.01.014.808 I llm_load_print_meta: vocab_only       = 0
0.01.014.809 I llm_load_print_meta: n_ctx_train      = 8192
0.01.014.809 I llm_load_print_meta: n_embd           = 2048
0.01.014.810 I llm_load_print_meta: n_layer          = 18
0.01.014.894 I llm_load_print_meta: n_head           = 8
0.01.014.904 I llm_load_print_meta: n_head_kv        = 1
0.01.014.904 I llm_load_print_meta: n_rot            = 256
0.01.014.907 I llm_load_print_meta: n_swa            = 0
0.01.014.907 I llm_load_print_meta: n_embd_head_k    = 256
0.01.014.908 I llm_load_print_meta: n_embd_head_v    = 256
0.01.014.912 I llm_load_print_meta: n_gqa            = 8
0.01.014.917 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.014.923 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.014.935 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.014.939 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.014.939 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.014.940 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.014.940 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.014.945 I llm_load_print_meta: n_ff             = 16384
0.01.014.946 I llm_load_print_meta: n_expert         = 0
0.01.014.946 I llm_load_print_meta: n_expert_used    = 0
0.01.014.947 I llm_load_print_meta: causal attn      = 1
0.01.014.947 I llm_load_print_meta: pooling type     = 0
0.01.014.948 I llm_load_print_meta: rope type        = 2
0.01.014.948 I llm_load_print_meta: rope scaling     = linear
0.01.014.950 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.014.951 I llm_load_print_meta: freq_scale_train = 1
0.01.014.951 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.014.951 I llm_load_print_meta: rope_finetuned   = unknown
0.01.014.952 I llm_load_print_meta: ssm_d_conv       = 0
0.01.014.952 I llm_load_print_meta: ssm_d_inner      = 0
0.01.014.952 I llm_load_print_meta: ssm_d_state      = 0
0.01.014.953 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.014.965 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.014.968 I llm_load_print_meta: model type       = 2B
0.01.014.970 I llm_load_print_meta: model ftype      = Q8_0
0.01.014.971 I llm_load_print_meta: model params     = 2.51 B
0.01.014.974 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.014.974 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.014.975 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.014.976 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.014.976 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.014.977 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.014.978 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.014.978 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.014.985 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.014.986 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.014.986 I llm_load_print_meta: max token length = 93
0.01.087.915 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.087.928 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.094.716 I llama_new_context_with_model: n_seq_max     = 1
0.01.094.723 I llama_new_context_with_model: n_ctx         = 4096
0.01.094.724 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.094.724 I llama_new_context_with_model: n_batch       = 2048
0.01.094.725 I llama_new_context_with_model: n_ubatch      = 512
0.01.094.725 I llama_new_context_with_model: flash_attn    = 0
0.01.094.729 I llama_new_context_with_model: freq_base     = 10000.0
0.01.094.729 I llama_new_context_with_model: freq_scale    = 1
0.01.094.730 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.094.823 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.110.184 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.110.225 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.110.351 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.113.609 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.113.613 I llama_new_context_with_model: graph nodes  = 601
0.01.113.613 I llama_new_context_with_model: graph splits = 1
0.01.113.639 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.113.642 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.724.334 I main: llama threadpool init, n_threads = 4
0.01.724.351 I 
0.01.724.472 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.724.477 I 
0.01.724.694 I sampler seed: 191382251
0.01.724.709 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.724.719 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.724.720 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.724.720 I 
 increably!

I am unable to generate a response as requested because the provided context does not contain any information regarding the generation of responses. [end of text]


0.14.023.976 I llama_perf_sampler_print:    sampling time =      44.23 ms /    30 runs   (    1.47 ms per token,   678.27 tokens per second)
0.14.023.981 I llama_perf_context_print:        load time =    1723.33 ms
0.14.023.983 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.023.984 I llama_perf_context_print:        eval time =   12222.16 ms /    29 runs   (  421.45 ms per token,     2.37 tokens per second)
0.14.023.985 I llama_perf_context_print:       total time =   12299.66 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m11.192s
user	3m46.164s
sys	0m9.350s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4453 (f8feb4b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 189270.96 ms
main:    total time = 189270.96 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.086.065 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.079 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.180 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.204 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.210 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.212 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.214 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.216 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.218 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.220 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.228 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.230 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.232 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.234 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.306.421 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.408.369 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.432.761 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.432.772 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.432.774 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.432.776 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.432.777 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.432.779 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.432.781 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.432.786 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.432.788 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.432.789 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.432.791 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.432.793 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.432.795 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.432.803 I llama_model_loader: - type  f32:   37 tensors
0.00.432.806 I llama_model_loader: - type q4_K:  108 tensors
0.00.432.807 I llama_model_loader: - type q6_K:   19 tensors
0.00.690.356 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.809.291 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.810.211 I llm_load_vocab: special tokens cache size = 5
0.01.029.232 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.029.315 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.029.321 I llm_load_print_meta: arch             = gemma
0.01.029.321 I llm_load_print_meta: vocab type       = SPM
0.01.029.323 I llm_load_print_meta: n_vocab          = 256000
0.01.029.325 I llm_load_print_meta: n_merges         = 0
0.01.029.325 I llm_load_print_meta: vocab_only       = 0
0.01.029.326 I llm_load_print_meta: n_ctx_train      = 8192
0.01.029.326 I llm_load_print_meta: n_embd           = 2048
0.01.029.327 I llm_load_print_meta: n_layer          = 18
0.01.029.407 I llm_load_print_meta: n_head           = 8
0.01.029.414 I llm_load_print_meta: n_head_kv        = 1
0.01.029.414 I llm_load_print_meta: n_rot            = 256
0.01.029.415 I llm_load_print_meta: n_swa            = 0
0.01.029.415 I llm_load_print_meta: n_embd_head_k    = 256
0.01.029.418 I llm_load_print_meta: n_embd_head_v    = 256
0.01.029.423 I llm_load_print_meta: n_gqa            = 8
0.01.029.427 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.029.432 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.029.434 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.029.435 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.029.436 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.029.436 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.029.437 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.029.442 I llm_load_print_meta: n_ff             = 16384
0.01.029.442 I llm_load_print_meta: n_expert         = 0
0.01.029.443 I llm_load_print_meta: n_expert_used    = 0
0.01.029.444 I llm_load_print_meta: causal attn      = 1
0.01.029.444 I llm_load_print_meta: pooling type     = 0
0.01.029.445 I llm_load_print_meta: rope type        = 2
0.01.029.445 I llm_load_print_meta: rope scaling     = linear
0.01.029.446 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.029.448 I llm_load_print_meta: freq_scale_train = 1
0.01.029.448 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.029.448 I llm_load_print_meta: rope_finetuned   = unknown
0.01.029.448 I llm_load_print_meta: ssm_d_conv       = 0
0.01.029.449 I llm_load_print_meta: ssm_d_inner      = 0
0.01.029.449 I llm_load_print_meta: ssm_d_state      = 0
0.01.029.449 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.029.450 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.029.452 I llm_load_print_meta: model type       = 2B
0.01.029.454 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.029.455 I llm_load_print_meta: model params     = 2.51 B
0.01.029.455 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.029.456 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.029.457 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.029.458 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.029.458 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.029.459 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.029.459 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.029.460 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.029.466 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.029.468 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.029.468 I llm_load_print_meta: max token length = 93
0.01.091.259 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.091.272 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.091.272 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.091.273 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.091.274 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.091.275 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.098.326 I llama_new_context_with_model: n_seq_max     = 1
0.01.098.334 I llama_new_context_with_model: n_ctx         = 4096
0.01.098.335 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.098.335 I llama_new_context_with_model: n_batch       = 2048
0.01.098.335 I llama_new_context_with_model: n_ubatch      = 512
0.01.098.336 I llama_new_context_with_model: flash_attn    = 0
0.01.098.339 I llama_new_context_with_model: freq_base     = 10000.0
0.01.098.340 I llama_new_context_with_model: freq_scale    = 1
0.01.098.341 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.098.431 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.113.397 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.113.442 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.113.561 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.116.794 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.116.798 I llama_new_context_with_model: graph nodes  = 601
0.01.116.798 I llama_new_context_with_model: graph splits = 1
0.01.116.822 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.116.824 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.697.754 I main: llama threadpool init, n_threads = 4
0.01.697.771 I 
0.01.697.889 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.697.893 I 
0.01.698.113 I sampler seed: 256838705
0.01.698.127 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.698.140 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.698.141 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.698.141 I 
 seconded the question.

**Question:**

Discuss the impact of social media on human cognition.

**Discussion:**

**1. Enhanced Information Processing:**

0.12.805.947 I llama_perf_sampler_print:    sampling time =      48.61 ms /    33 runs   (    1.47 ms per token,   678.84 tokens per second)
0.12.805.950 I llama_perf_context_print:        load time =    1696.77 ms
0.12.805.962 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.805.965 I llama_perf_context_print:        eval time =   11024.02 ms /    32 runs   (  344.50 ms per token,     2.90 tokens per second)
0.12.805.966 I llama_perf_context_print:       total time =   11108.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4453 (f8feb4b0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187818.15 ms
main:    total time = 187818.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4453 (f8feb4b0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.085.094 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.207 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.228 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.233 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.238 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.240 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.245 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.247 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.248 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.254 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.256 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.258 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.260 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.291.109 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.272 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.810 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.821 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.823 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.825 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.827 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.829 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.831 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.835 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.837 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.417.839 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.417.847 I llama_model_loader: - type  f32:   37 tensors
0.00.417.850 I llama_model_loader: - type q4_K:  108 tensors
0.00.417.851 I llama_model_loader: - type q6_K:   19 tensors
0.00.687.297 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.812.527 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.813.441 I llm_load_vocab: special tokens cache size = 5
0.01.030.052 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.030.129 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.030.135 I llm_load_print_meta: arch             = gemma
0.01.030.135 I llm_load_print_meta: vocab type       = SPM
0.01.030.136 I llm_load_print_meta: n_vocab          = 256000
0.01.030.138 I llm_load_print_meta: n_merges         = 0
0.01.030.139 I llm_load_print_meta: vocab_only       = 0
0.01.030.139 I llm_load_print_meta: n_ctx_train      = 8192
0.01.030.140 I llm_load_print_meta: n_embd           = 2048
0.01.030.140 I llm_load_print_meta: n_layer          = 18
0.01.030.221 I llm_load_print_meta: n_head           = 8
0.01.030.230 I llm_load_print_meta: n_head_kv        = 1
0.01.030.232 I llm_load_print_meta: n_rot            = 256
0.01.030.232 I llm_load_print_meta: n_swa            = 0
0.01.030.232 I llm_load_print_meta: n_embd_head_k    = 256
0.01.030.233 I llm_load_print_meta: n_embd_head_v    = 256
0.01.030.237 I llm_load_print_meta: n_gqa            = 8
0.01.030.242 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.030.250 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.030.251 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.030.252 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.030.254 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.030.255 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.030.255 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.030.261 I llm_load_print_meta: n_ff             = 16384
0.01.030.261 I llm_load_print_meta: n_expert         = 0
0.01.030.262 I llm_load_print_meta: n_expert_used    = 0
0.01.030.263 I llm_load_print_meta: causal attn      = 1
0.01.030.263 I llm_load_print_meta: pooling type     = 0
0.01.030.263 I llm_load_print_meta: rope type        = 2
0.01.030.264 I llm_load_print_meta: rope scaling     = linear
0.01.030.265 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.030.266 I llm_load_print_meta: freq_scale_train = 1
0.01.030.266 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.030.266 I llm_load_print_meta: rope_finetuned   = unknown
0.01.030.267 I llm_load_print_meta: ssm_d_conv       = 0
0.01.030.267 I llm_load_print_meta: ssm_d_inner      = 0
0.01.030.268 I llm_load_print_meta: ssm_d_state      = 0
0.01.030.269 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.030.269 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.030.272 I llm_load_print_meta: model type       = 2B
0.01.030.274 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.030.275 I llm_load_print_meta: model params     = 2.51 B
0.01.030.276 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.030.276 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.030.277 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.030.277 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.030.278 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.030.278 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.030.279 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.030.279 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.030.285 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.030.286 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.030.287 I llm_load_print_meta: max token length = 93
0.01.089.199 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.096.203 I llama_new_context_with_model: n_seq_max     = 1
0.01.096.208 I llama_new_context_with_model: n_ctx         = 4096
0.01.096.209 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.096.209 I llama_new_context_with_model: n_batch       = 2048
0.01.096.209 I llama_new_context_with_model: n_ubatch      = 512
0.01.096.210 I llama_new_context_with_model: flash_attn    = 0
0.01.096.213 I llama_new_context_with_model: freq_base     = 10000.0
0.01.096.213 I llama_new_context_with_model: freq_scale    = 1
0.01.096.214 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.096.297 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.111.880 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.111.922 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.112.049 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.115.320 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.115.324 I llama_new_context_with_model: graph nodes  = 601
0.01.115.324 I llama_new_context_with_model: graph splits = 1
0.01.115.350 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.115.353 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.701.040 I main: llama threadpool init, n_threads = 4
0.01.701.056 I 
0.01.701.183 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.701.187 I 
0.01.701.418 I sampler seed: 2732467486
0.01.701.431 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.701.441 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.701.444 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.701.444 I 
 effe, but with a different twist.

The twist is that the stories of the characters are intertwined, forming a tapestry of interconnected destinies.

Each character possesses

0.12.833.044 I llama_perf_sampler_print:    sampling time =      48.49 ms /    33 runs   (    1.47 ms per token,   680.54 tokens per second)
0.12.833.048 I llama_perf_context_print:        load time =    1700.11 ms
0.12.833.059 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.833.062 I llama_perf_context_print:        eval time =   11047.92 ms /    32 runs   (  345.25 ms per token,     2.90 tokens per second)
0.12.833.063 I llama_perf_context_print:       total time =   11132.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m45.951s
user	46m58.399s
sys	0m6.362s
