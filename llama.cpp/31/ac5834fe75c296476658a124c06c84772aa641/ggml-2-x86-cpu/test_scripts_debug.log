+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.602 I build: 3818 (31ac5834) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.799 I main: llama backend init
0.00.002.731 I main: load the model and apply lora adapter, if any
0.00.024.427 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.613 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.693 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.705 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.709 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.710 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.711 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.712 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.713 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.714 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.729 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.737 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.739 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.398 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.243 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.359 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.366 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.367 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.368 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.368 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.370 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.371 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.373 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.374 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.375 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.376 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.377 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.384 I llama_model_loader: - type  f32:   37 tensors
0.00.196.388 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.323 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.569 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.577 I llm_load_vocab: special tokens cache size = 5
0.00.563.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.544 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.545 I llm_load_print_meta: arch             = gemma
0.00.563.546 I llm_load_print_meta: vocab type       = SPM
0.00.563.547 I llm_load_print_meta: n_vocab          = 256000
0.00.563.550 I llm_load_print_meta: n_merges         = 0
0.00.563.550 I llm_load_print_meta: vocab_only       = 0
0.00.563.551 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.551 I llm_load_print_meta: n_embd           = 2048
0.00.563.551 I llm_load_print_meta: n_layer          = 18
0.00.563.586 I llm_load_print_meta: n_head           = 8
0.00.563.594 I llm_load_print_meta: n_head_kv        = 1
0.00.563.595 I llm_load_print_meta: n_rot            = 256
0.00.563.596 I llm_load_print_meta: n_swa            = 0
0.00.563.596 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.597 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.601 I llm_load_print_meta: n_gqa            = 8
0.00.563.606 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.610 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.611 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.612 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.613 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.613 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.614 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.619 I llm_load_print_meta: n_ff             = 16384
0.00.563.619 I llm_load_print_meta: n_expert         = 0
0.00.563.620 I llm_load_print_meta: n_expert_used    = 0
0.00.563.620 I llm_load_print_meta: causal attn      = 1
0.00.563.621 I llm_load_print_meta: pooling type     = 0
0.00.563.622 I llm_load_print_meta: rope type        = 2
0.00.563.623 I llm_load_print_meta: rope scaling     = linear
0.00.563.624 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.624 I llm_load_print_meta: freq_scale_train = 1
0.00.563.625 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.625 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.626 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.627 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.627 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.627 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.628 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.629 I llm_load_print_meta: model type       = 2B
0.00.563.630 I llm_load_print_meta: model ftype      = Q8_0
0.00.563.630 I llm_load_print_meta: model params     = 2.51 B
0.00.563.632 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.563.632 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.633 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.633 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.652 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.653 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.654 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.654 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.659 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.563.661 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.563.661 I llm_load_print_meta: max token length = 93
0.00.563.838 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.370 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.666.378 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.666.379 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.666.380 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.666.381 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.666.381 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.671.943 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.949 I llama_new_context_with_model: n_batch    = 2048
0.00.671.949 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.950 I llama_new_context_with_model: flash_attn = 0
0.00.671.952 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.953 I llama_new_context_with_model: freq_scale = 1
0.00.700.986 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.030 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.147 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.702.532 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.538 I llama_new_context_with_model: graph nodes  = 601
0.00.702.538 I llama_new_context_with_model: graph splits = 1
0.00.702.554 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.167 I main: llama threadpool init, n_threads = 4
0.01.316.178 I 
0.01.316.275 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.316.279 I 
0.01.316.449 I sampler seed: 685878257
0.01.316.461 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.316.466 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.316.467 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.316.467 I 
 increasities, and other forms of flattery.

Flattery is a subtle but powerful tool for achieving success, respect, and admiration in various aspects of life.

0.14.927.528 I llama_perf_sampler_print:    sampling time =      49.69 ms /    33 runs   (    1.51 ms per token,   664.14 tokens per second)
0.14.927.532 I llama_perf_context_print:        load time =    1313.35 ms
0.14.927.533 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.927.536 I llama_perf_context_print:        eval time =   13528.19 ms /    32 runs   (  422.76 ms per token,     2.37 tokens per second)
0.14.927.538 I llama_perf_context_print:       total time =   13611.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.640 I build: 3818 (31ac5834) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.024.940 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.031 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.045 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.048 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.052 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.053 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.054 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.055 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.056 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.057 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.063 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.064 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.065 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.066 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.067 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.632 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.713 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.720 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.721 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.722 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.723 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.725 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.729 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.729 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.731 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.731 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.732 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.740 I llama_model_loader: - type  f32:   37 tensors
0.00.197.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.490.298 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.712 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.732 I llm_load_vocab: special tokens cache size = 5
0.00.574.519 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.574.579 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.574.584 I llm_load_print_meta: arch             = gemma
0.00.574.584 I llm_load_print_meta: vocab type       = SPM
0.00.574.585 I llm_load_print_meta: n_vocab          = 256000
0.00.574.587 I llm_load_print_meta: n_merges         = 0
0.00.574.588 I llm_load_print_meta: vocab_only       = 0
0.00.574.588 I llm_load_print_meta: n_ctx_train      = 8192
0.00.574.589 I llm_load_print_meta: n_embd           = 2048
0.00.574.589 I llm_load_print_meta: n_layer          = 18
0.00.574.627 I llm_load_print_meta: n_head           = 8
0.00.574.636 I llm_load_print_meta: n_head_kv        = 1
0.00.574.637 I llm_load_print_meta: n_rot            = 256
0.00.574.637 I llm_load_print_meta: n_swa            = 0
0.00.574.638 I llm_load_print_meta: n_embd_head_k    = 256
0.00.574.638 I llm_load_print_meta: n_embd_head_v    = 256
0.00.574.643 I llm_load_print_meta: n_gqa            = 8
0.00.574.649 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.574.656 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.574.657 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.574.658 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.574.659 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.574.659 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.574.660 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.574.666 I llm_load_print_meta: n_ff             = 16384
0.00.574.666 I llm_load_print_meta: n_expert         = 0
0.00.574.667 I llm_load_print_meta: n_expert_used    = 0
0.00.574.678 I llm_load_print_meta: causal attn      = 1
0.00.574.680 I llm_load_print_meta: pooling type     = 0
0.00.574.681 I llm_load_print_meta: rope type        = 2
0.00.574.681 I llm_load_print_meta: rope scaling     = linear
0.00.574.683 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.574.683 I llm_load_print_meta: freq_scale_train = 1
0.00.574.683 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.574.684 I llm_load_print_meta: rope_finetuned   = unknown
0.00.574.684 I llm_load_print_meta: ssm_d_conv       = 0
0.00.574.684 I llm_load_print_meta: ssm_d_inner      = 0
0.00.574.685 I llm_load_print_meta: ssm_d_state      = 0
0.00.574.685 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.574.685 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.574.686 I llm_load_print_meta: model type       = 2B
0.00.574.687 I llm_load_print_meta: model ftype      = Q8_0
0.00.574.688 I llm_load_print_meta: model params     = 2.51 B
0.00.574.689 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.574.690 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.574.691 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.574.692 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.574.692 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.574.692 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.574.693 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.574.696 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.574.702 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.574.704 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.574.704 I llm_load_print_meta: max token length = 93
0.00.574.881 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.670.605 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.676.155 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.162 I llama_new_context_with_model: n_batch    = 2048
0.00.676.162 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.163 I llama_new_context_with_model: flash_attn = 0
0.00.676.165 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.166 I llama_new_context_with_model: freq_scale = 1
0.00.705.363 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.410 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.535 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.706.919 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.924 I llama_new_context_with_model: graph nodes  = 601
0.00.706.925 I llama_new_context_with_model: graph splits = 1
0.00.706.940 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.899 I main: llama threadpool init, n_threads = 4
0.01.319.911 I 
0.01.320.005 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.320.009 I 
0.01.320.177 I sampler seed: 2159709402
0.01.320.190 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.198 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.320.199 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.199 I 
 seconally.

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.10.611.558 I llama_perf_sampler_print:    sampling time =      33.94 ms /    23 runs   (    1.48 ms per token,   677.71 tokens per second)
0.10.611.562 I llama_perf_context_print:        load time =    1316.99 ms
0.10.611.564 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.611.566 I llama_perf_context_print:        eval time =    9234.26 ms /    22 runs   (  419.74 ms per token,     2.38 tokens per second)
0.10.611.567 I llama_perf_context_print:       total time =    9291.67 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.626 I build: 3818 (31ac5834) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.024.743 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.924 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.008 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.019 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.020 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.024 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.025 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.026 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.026 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.027 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.028 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.034 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.035 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.037 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.038 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.038 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.986 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.825 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.052 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.059 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.060 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.061 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.061 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.062 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.063 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.066 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.067 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.068 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.068 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.069 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.076 I llama_model_loader: - type  f32:   37 tensors
0.00.197.080 I llama_model_loader: - type q8_0:  127 tensors
0.00.490.990 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.565 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.570 I llm_load_vocab: special tokens cache size = 5
0.00.574.783 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.574.836 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.574.837 I llm_load_print_meta: arch             = gemma
0.00.574.838 I llm_load_print_meta: vocab type       = SPM
0.00.574.839 I llm_load_print_meta: n_vocab          = 256000
0.00.574.841 I llm_load_print_meta: n_merges         = 0
0.00.574.842 I llm_load_print_meta: vocab_only       = 0
0.00.574.842 I llm_load_print_meta: n_ctx_train      = 8192
0.00.574.843 I llm_load_print_meta: n_embd           = 2048
0.00.574.843 I llm_load_print_meta: n_layer          = 18
0.00.574.877 I llm_load_print_meta: n_head           = 8
0.00.574.884 I llm_load_print_meta: n_head_kv        = 1
0.00.574.884 I llm_load_print_meta: n_rot            = 256
0.00.574.885 I llm_load_print_meta: n_swa            = 0
0.00.574.885 I llm_load_print_meta: n_embd_head_k    = 256
0.00.574.885 I llm_load_print_meta: n_embd_head_v    = 256
0.00.574.890 I llm_load_print_meta: n_gqa            = 8
0.00.574.895 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.574.900 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.574.901 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.574.902 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.574.902 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.574.903 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.574.903 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.574.908 I llm_load_print_meta: n_ff             = 16384
0.00.574.908 I llm_load_print_meta: n_expert         = 0
0.00.574.909 I llm_load_print_meta: n_expert_used    = 0
0.00.574.909 I llm_load_print_meta: causal attn      = 1
0.00.574.909 I llm_load_print_meta: pooling type     = 0
0.00.574.910 I llm_load_print_meta: rope type        = 2
0.00.574.910 I llm_load_print_meta: rope scaling     = linear
0.00.574.912 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.574.912 I llm_load_print_meta: freq_scale_train = 1
0.00.574.913 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.574.913 I llm_load_print_meta: rope_finetuned   = unknown
0.00.574.913 I llm_load_print_meta: ssm_d_conv       = 0
0.00.574.913 I llm_load_print_meta: ssm_d_inner      = 0
0.00.574.914 I llm_load_print_meta: ssm_d_state      = 0
0.00.574.914 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.574.914 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.574.915 I llm_load_print_meta: model type       = 2B
0.00.574.916 I llm_load_print_meta: model ftype      = Q8_0
0.00.574.916 I llm_load_print_meta: model params     = 2.51 B
0.00.574.917 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.574.918 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.574.918 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.574.919 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.574.919 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.574.919 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.574.920 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.574.920 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.574.926 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.574.928 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.574.928 I llm_load_print_meta: max token length = 93
0.00.575.109 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.652.971 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.652.980 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.652.981 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.652.982 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.652.982 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.652.983 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.658.510 I llama_new_context_with_model: n_ctx      = 8192
0.00.658.517 I llama_new_context_with_model: n_batch    = 2048
0.00.658.517 I llama_new_context_with_model: n_ubatch   = 512
0.00.658.518 I llama_new_context_with_model: flash_attn = 0
0.00.658.520 I llama_new_context_with_model: freq_base  = 10000.0
0.00.658.521 I llama_new_context_with_model: freq_scale = 1
0.00.687.556 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.597 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.687.735 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.689.113 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.119 I llama_new_context_with_model: graph nodes  = 601
0.00.689.120 I llama_new_context_with_model: graph splits = 1
0.00.689.135 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.923 I main: llama threadpool init, n_threads = 4
0.01.301.935 I 
0.01.302.029 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.302.033 I 
0.01.302.197 I sampler seed: 618775669
0.01.302.208 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.213 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.302.214 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.214 I 
 increasities, and the allure of the unknown.

This is what drew me to the stars, the endless tapestry of the universe woven into the fabric of my

0.14.821.401 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.17 tokens per second)
0.14.821.404 I llama_perf_context_print:        load time =    1299.02 ms
0.14.821.406 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.821.431 I llama_perf_context_print:        eval time =   13437.57 ms /    32 runs   (  419.92 ms per token,     2.38 tokens per second)
0.14.821.432 I llama_perf_context_print:       total time =   13519.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.678 I build: 3818 (31ac5834) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.882 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.024.634 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.823 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.909 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.919 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.921 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.925 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.926 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.927 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.928 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.928 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.929 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.939 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.943 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.944 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.312 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.982 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.186 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.194 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.194 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.195 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.196 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.197 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.198 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.201 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.202 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.204 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.204 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.206 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.213 I llama_model_loader: - type  f32:   37 tensors
0.00.197.217 I llama_model_loader: - type q8_0:  127 tensors
0.00.476.772 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.440 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.540 I llm_load_vocab: special tokens cache size = 5
0.00.558.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.558.383 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.558.384 I llm_load_print_meta: arch             = gemma
0.00.558.385 I llm_load_print_meta: vocab type       = SPM
0.00.558.386 I llm_load_print_meta: n_vocab          = 256000
0.00.558.388 I llm_load_print_meta: n_merges         = 0
0.00.558.389 I llm_load_print_meta: vocab_only       = 0
0.00.558.389 I llm_load_print_meta: n_ctx_train      = 8192
0.00.558.390 I llm_load_print_meta: n_embd           = 2048
0.00.558.390 I llm_load_print_meta: n_layer          = 18
0.00.558.424 I llm_load_print_meta: n_head           = 8
0.00.558.431 I llm_load_print_meta: n_head_kv        = 1
0.00.558.431 I llm_load_print_meta: n_rot            = 256
0.00.558.432 I llm_load_print_meta: n_swa            = 0
0.00.558.432 I llm_load_print_meta: n_embd_head_k    = 256
0.00.558.432 I llm_load_print_meta: n_embd_head_v    = 256
0.00.558.437 I llm_load_print_meta: n_gqa            = 8
0.00.558.442 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.558.447 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.558.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.558.449 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.558.450 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.558.450 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.558.451 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.558.456 I llm_load_print_meta: n_ff             = 16384
0.00.558.456 I llm_load_print_meta: n_expert         = 0
0.00.558.457 I llm_load_print_meta: n_expert_used    = 0
0.00.558.457 I llm_load_print_meta: causal attn      = 1
0.00.558.457 I llm_load_print_meta: pooling type     = 0
0.00.558.458 I llm_load_print_meta: rope type        = 2
0.00.558.458 I llm_load_print_meta: rope scaling     = linear
0.00.558.459 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.558.460 I llm_load_print_meta: freq_scale_train = 1
0.00.558.460 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.558.461 I llm_load_print_meta: rope_finetuned   = unknown
0.00.558.461 I llm_load_print_meta: ssm_d_conv       = 0
0.00.558.461 I llm_load_print_meta: ssm_d_inner      = 0
0.00.558.462 I llm_load_print_meta: ssm_d_state      = 0
0.00.558.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.558.462 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.558.463 I llm_load_print_meta: model type       = 2B
0.00.558.464 I llm_load_print_meta: model ftype      = Q8_0
0.00.558.465 I llm_load_print_meta: model params     = 2.51 B
0.00.558.466 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.558.466 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.558.468 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.558.469 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.558.469 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.558.470 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.558.471 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.558.471 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.558.477 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.558.479 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.558.479 I llm_load_print_meta: max token length = 93
0.00.558.650 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.629.391 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.629.403 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.635.114 I llama_new_context_with_model: n_ctx      = 8192
0.00.635.122 I llama_new_context_with_model: n_batch    = 2048
0.00.635.122 I llama_new_context_with_model: n_ubatch   = 512
0.00.635.123 I llama_new_context_with_model: flash_attn = 0
0.00.635.126 I llama_new_context_with_model: freq_base  = 10000.0
0.00.635.127 I llama_new_context_with_model: freq_scale = 1
0.00.664.548 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.664.589 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.664.700 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.666.086 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.666.093 I llama_new_context_with_model: graph nodes  = 601
0.00.666.093 I llama_new_context_with_model: graph splits = 1
0.00.666.110 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.036 I main: llama threadpool init, n_threads = 4
0.01.279.047 I 
0.01.279.141 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.145 I 
0.01.279.310 I sampler seed: 3613171365
0.01.279.322 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.328 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.279.329 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.279.329 I 
 increasities

I'm not sure what you're trying to say. Can you please provide more context or clarify your question? [end of text]


0.13.097.921 I llama_perf_sampler_print:    sampling time =      42.96 ms /    29 runs   (    1.48 ms per token,   675.02 tokens per second)
0.13.097.924 I llama_perf_context_print:        load time =    1276.10 ms
0.13.097.925 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.097.927 I llama_perf_context_print:        eval time =   11746.91 ms /    28 runs   (  419.53 ms per token,     2.38 tokens per second)
0.13.097.928 I llama_perf_context_print:       total time =   11818.90 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.627s
user	3m25.426s
sys	0m9.427s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3818 (31ac5834)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199525.60 ms
main:    total time = 199525.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.614 I build: 3818 (31ac5834) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.810 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.024.547 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.728 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.807 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.817 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.818 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.821 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.822 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.823 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.825 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.826 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.827 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.832 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.832 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.833 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.834 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.835 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.195 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.448 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.637 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.638 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.639 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.640 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.641 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.642 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.646 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.647 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.649 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.649 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.651 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.659 I llama_model_loader: - type  f32:   37 tensors
0.00.197.665 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.666 I llama_model_loader: - type q6_K:   19 tensors
0.00.480.611 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.932 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.978 I llm_load_vocab: special tokens cache size = 5
0.00.564.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.564.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.564.933 I llm_load_print_meta: arch             = gemma
0.00.564.934 I llm_load_print_meta: vocab type       = SPM
0.00.564.934 I llm_load_print_meta: n_vocab          = 256000
0.00.564.937 I llm_load_print_meta: n_merges         = 0
0.00.564.938 I llm_load_print_meta: vocab_only       = 0
0.00.564.938 I llm_load_print_meta: n_ctx_train      = 8192
0.00.564.938 I llm_load_print_meta: n_embd           = 2048
0.00.564.939 I llm_load_print_meta: n_layer          = 18
0.00.564.974 I llm_load_print_meta: n_head           = 8
0.00.564.981 I llm_load_print_meta: n_head_kv        = 1
0.00.564.982 I llm_load_print_meta: n_rot            = 256
0.00.564.982 I llm_load_print_meta: n_swa            = 0
0.00.564.983 I llm_load_print_meta: n_embd_head_k    = 256
0.00.564.983 I llm_load_print_meta: n_embd_head_v    = 256
0.00.564.988 I llm_load_print_meta: n_gqa            = 8
0.00.564.993 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.564.998 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.564.999 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.565.000 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.565.001 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.565.002 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.565.003 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.565.008 I llm_load_print_meta: n_ff             = 16384
0.00.565.009 I llm_load_print_meta: n_expert         = 0
0.00.565.009 I llm_load_print_meta: n_expert_used    = 0
0.00.565.010 I llm_load_print_meta: causal attn      = 1
0.00.565.019 I llm_load_print_meta: pooling type     = 0
0.00.565.020 I llm_load_print_meta: rope type        = 2
0.00.565.021 I llm_load_print_meta: rope scaling     = linear
0.00.565.022 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.565.023 I llm_load_print_meta: freq_scale_train = 1
0.00.565.024 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.565.037 I llm_load_print_meta: rope_finetuned   = unknown
0.00.565.046 I llm_load_print_meta: ssm_d_conv       = 0
0.00.565.047 I llm_load_print_meta: ssm_d_inner      = 0
0.00.565.055 I llm_load_print_meta: ssm_d_state      = 0
0.00.565.055 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.565.056 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.565.057 I llm_load_print_meta: model type       = 2B
0.00.565.058 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.565.059 I llm_load_print_meta: model params     = 2.51 B
0.00.565.059 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.565.060 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.565.061 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.565.061 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.565.061 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.565.062 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.565.062 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.565.063 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.565.068 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.565.070 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.565.071 I llm_load_print_meta: max token length = 93
0.00.565.252 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.624.451 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.624.463 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.624.464 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.624.464 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.624.465 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.624.465 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.629.974 I llama_new_context_with_model: n_ctx      = 8192
0.00.629.980 I llama_new_context_with_model: n_batch    = 2048
0.00.629.980 I llama_new_context_with_model: n_ubatch   = 512
0.00.629.981 I llama_new_context_with_model: flash_attn = 0
0.00.629.984 I llama_new_context_with_model: freq_base  = 10000.0
0.00.629.984 I llama_new_context_with_model: freq_scale = 1
0.00.658.924 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.658.968 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.659.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.660.474 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.660.480 I llama_new_context_with_model: graph nodes  = 601
0.00.660.480 I llama_new_context_with_model: graph splits = 1
0.00.660.496 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.239.664 I main: llama threadpool init, n_threads = 4
0.01.239.675 I 
0.01.239.770 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.239.774 I 
0.01.239.934 I sampler seed: 216396195
0.01.239.944 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.239.948 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.239.949 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.239.949 I 
 increamically.

I am unable to access the text or context of the problem. Therefore, I am unable to provide a solution or answer. [end of text]


0.11.484.164 I llama_perf_sampler_print:    sampling time =      46.08 ms /    31 runs   (    1.49 ms per token,   672.73 tokens per second)
0.11.484.167 I llama_perf_context_print:        load time =    1236.81 ms
0.11.484.168 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.484.182 I llama_perf_context_print:        eval time =   10167.46 ms /    30 runs   (  338.92 ms per token,     2.95 tokens per second)
0.11.484.183 I llama_perf_context_print:       total time =   10244.51 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3818 (31ac5834)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199686.94 ms
main:    total time = 199686.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.610 I build: 3818 (31ac5834) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.024.850 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.950 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.967 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.971 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.976 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.977 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.977 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.978 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.979 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.980 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.986 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.987 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.988 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.989 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.989 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.913 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.620 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.722 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.728 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.729 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.730 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.731 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.732 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.734 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.737 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.738 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.746 I llama_model_loader: - type  f32:   37 tensors
0.00.196.750 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.751 I llama_model_loader: - type q6_K:   19 tensors
0.00.483.122 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.545 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.599 I llm_load_vocab: special tokens cache size = 5
0.00.566.322 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.566.381 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.566.382 I llm_load_print_meta: arch             = gemma
0.00.566.382 I llm_load_print_meta: vocab type       = SPM
0.00.566.383 I llm_load_print_meta: n_vocab          = 256000
0.00.566.386 I llm_load_print_meta: n_merges         = 0
0.00.566.386 I llm_load_print_meta: vocab_only       = 0
0.00.566.387 I llm_load_print_meta: n_ctx_train      = 8192
0.00.566.387 I llm_load_print_meta: n_embd           = 2048
0.00.566.388 I llm_load_print_meta: n_layer          = 18
0.00.566.424 I llm_load_print_meta: n_head           = 8
0.00.566.431 I llm_load_print_meta: n_head_kv        = 1
0.00.566.432 I llm_load_print_meta: n_rot            = 256
0.00.566.432 I llm_load_print_meta: n_swa            = 0
0.00.566.433 I llm_load_print_meta: n_embd_head_k    = 256
0.00.566.433 I llm_load_print_meta: n_embd_head_v    = 256
0.00.566.438 I llm_load_print_meta: n_gqa            = 8
0.00.566.444 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.566.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.566.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.566.451 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.566.452 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.566.452 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.566.452 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.566.457 I llm_load_print_meta: n_ff             = 16384
0.00.566.457 I llm_load_print_meta: n_expert         = 0
0.00.566.458 I llm_load_print_meta: n_expert_used    = 0
0.00.566.458 I llm_load_print_meta: causal attn      = 1
0.00.566.458 I llm_load_print_meta: pooling type     = 0
0.00.566.459 I llm_load_print_meta: rope type        = 2
0.00.566.459 I llm_load_print_meta: rope scaling     = linear
0.00.566.461 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.566.461 I llm_load_print_meta: freq_scale_train = 1
0.00.566.462 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.566.462 I llm_load_print_meta: rope_finetuned   = unknown
0.00.566.462 I llm_load_print_meta: ssm_d_conv       = 0
0.00.566.463 I llm_load_print_meta: ssm_d_inner      = 0
0.00.566.463 I llm_load_print_meta: ssm_d_state      = 0
0.00.566.463 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.566.464 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.566.464 I llm_load_print_meta: model type       = 2B
0.00.566.465 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.566.467 I llm_load_print_meta: model params     = 2.51 B
0.00.566.468 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.566.468 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.566.469 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.566.470 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.566.470 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.566.471 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.566.481 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.566.483 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.566.489 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.566.491 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.566.491 I llm_load_print_meta: max token length = 93
0.00.566.676 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.625.457 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.630.922 I llama_new_context_with_model: n_ctx      = 8192
0.00.630.928 I llama_new_context_with_model: n_batch    = 2048
0.00.630.928 I llama_new_context_with_model: n_ubatch   = 512
0.00.630.929 I llama_new_context_with_model: flash_attn = 0
0.00.630.931 I llama_new_context_with_model: freq_base  = 10000.0
0.00.630.932 I llama_new_context_with_model: freq_scale = 1
0.00.660.384 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.660.428 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.660.545 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.661.927 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.661.933 I llama_new_context_with_model: graph nodes  = 601
0.00.661.933 I llama_new_context_with_model: graph splits = 1
0.00.661.949 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.240.352 I main: llama threadpool init, n_threads = 4
0.01.240.363 I 
0.01.240.455 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.240.459 I 
0.01.240.620 I sampler seed: 2326074440
0.01.240.630 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.240.635 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.240.635 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.240.636 I 
 seconally.

I am unable to generate a response due to the lack of sufficient information. Please provide the necessary context or details so I can assist you.

0.12.238.598 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.18 tokens per second)
0.12.238.612 I llama_perf_context_print:        load time =    1237.49 ms
0.12.238.614 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.238.616 I llama_perf_context_print:        eval time =   10916.84 ms /    32 runs   (  341.15 ms per token,     2.93 tokens per second)
0.12.238.618 I llama_perf_context_print:       total time =   10998.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.856s
user	50m16.335s
sys	0m6.397s
