+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4017 (9830b692) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.025.235 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.245 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.334 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.345 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.346 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.351 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.355 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.357 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.358 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.359 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.360 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.366 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.368 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.369 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.370 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.372 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.000 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.551 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.076 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.077 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.078 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.079 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.080 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.081 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.085 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.086 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.088 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.088 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.090 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.097 I llama_model_loader: - type  f32:   37 tensors
0.00.266.100 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.727 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.774 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.684 I llm_load_vocab: special tokens cache size = 5
0.00.598.330 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.399 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.400 I llm_load_print_meta: arch             = gemma
0.00.598.401 I llm_load_print_meta: vocab type       = SPM
0.00.598.402 I llm_load_print_meta: n_vocab          = 256000
0.00.598.404 I llm_load_print_meta: n_merges         = 0
0.00.598.405 I llm_load_print_meta: vocab_only       = 0
0.00.598.405 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.406 I llm_load_print_meta: n_embd           = 2048
0.00.598.406 I llm_load_print_meta: n_layer          = 18
0.00.598.472 I llm_load_print_meta: n_head           = 8
0.00.598.479 I llm_load_print_meta: n_head_kv        = 1
0.00.598.480 I llm_load_print_meta: n_rot            = 256
0.00.598.481 I llm_load_print_meta: n_swa            = 0
0.00.598.481 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.482 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.487 I llm_load_print_meta: n_gqa            = 8
0.00.598.492 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.502 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.503 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.504 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.505 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.505 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.510 I llm_load_print_meta: n_ff             = 16384
0.00.598.511 I llm_load_print_meta: n_expert         = 0
0.00.598.511 I llm_load_print_meta: n_expert_used    = 0
0.00.598.512 I llm_load_print_meta: causal attn      = 1
0.00.598.512 I llm_load_print_meta: pooling type     = 0
0.00.598.513 I llm_load_print_meta: rope type        = 2
0.00.598.514 I llm_load_print_meta: rope scaling     = linear
0.00.598.515 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.516 I llm_load_print_meta: freq_scale_train = 1
0.00.598.516 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.520 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.520 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.520 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.520 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.521 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.521 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.522 I llm_load_print_meta: model type       = 2B
0.00.598.523 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.523 I llm_load_print_meta: model params     = 2.51 B
0.00.598.532 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.532 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.533 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.534 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.534 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.535 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.535 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.536 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.542 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.543 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.545 I llm_load_print_meta: max token length = 93
0.00.703.842 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.703.851 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.703.852 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.703.853 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.703.854 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.703.854 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.709.687 I llama_new_context_with_model: n_seq_max     = 1
0.00.709.695 I llama_new_context_with_model: n_ctx         = 4096
0.00.709.696 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.709.696 I llama_new_context_with_model: n_batch       = 2048
0.00.709.697 I llama_new_context_with_model: n_ubatch      = 512
0.00.709.697 I llama_new_context_with_model: flash_attn    = 0
0.00.709.700 I llama_new_context_with_model: freq_base     = 10000.0
0.00.709.701 I llama_new_context_with_model: freq_scale    = 1
0.00.709.702 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.724.958 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.724.999 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.725.131 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.714 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.727.718 I llama_new_context_with_model: graph nodes  = 601
0.00.727.718 I llama_new_context_with_model: graph splits = 1
0.00.727.745 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.975 I main: llama threadpool init, n_threads = 4
0.01.332.986 I 
0.01.333.084 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.085 I 
0.01.333.322 I sampler seed: 1050954250
0.01.333.336 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.343 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.333.344 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.344 I 
 increasively, highlighting the escalating risks and consequences of inaction.

The escalating risks and consequences of inaction regarding climate change are undeniable. Rising global temperatures are disrupting ecosystems

0.14.801.339 I llama_perf_sampler_print:    sampling time =      49.01 ms /    33 runs   (    1.49 ms per token,   673.32 tokens per second)
0.14.801.343 I llama_perf_context_print:        load time =    1330.09 ms
0.14.801.345 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.801.346 I llama_perf_context_print:        eval time =   13378.49 ms /    32 runs   (  418.08 ms per token,     2.39 tokens per second)
0.14.801.347 I llama_perf_context_print:       total time =   13468.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4017 (9830b692) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.779 I main: load the model and apply lora adapter, if any
0.00.025.293 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.385 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.398 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.412 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.419 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.420 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.421 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.422 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.424 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.425 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.431 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.432 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.433 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.434 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.442 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.669 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.560 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.025 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.035 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.038 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.039 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.041 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.046 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.047 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.048 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.049 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.051 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.059 I llama_model_loader: - type  f32:   37 tensors
0.00.266.061 I llama_model_loader: - type q8_0:  127 tensors
0.00.457.073 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.808 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.752 I llm_load_vocab: special tokens cache size = 5
0.00.616.417 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.485 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.486 I llm_load_print_meta: arch             = gemma
0.00.616.487 I llm_load_print_meta: vocab type       = SPM
0.00.616.488 I llm_load_print_meta: n_vocab          = 256000
0.00.616.491 I llm_load_print_meta: n_merges         = 0
0.00.616.492 I llm_load_print_meta: vocab_only       = 0
0.00.616.492 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.493 I llm_load_print_meta: n_embd           = 2048
0.00.616.493 I llm_load_print_meta: n_layer          = 18
0.00.616.560 I llm_load_print_meta: n_head           = 8
0.00.616.567 I llm_load_print_meta: n_head_kv        = 1
0.00.616.568 I llm_load_print_meta: n_rot            = 256
0.00.616.568 I llm_load_print_meta: n_swa            = 0
0.00.616.568 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.569 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.574 I llm_load_print_meta: n_gqa            = 8
0.00.616.578 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.583 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.585 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.586 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.587 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.592 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.592 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.597 I llm_load_print_meta: n_ff             = 16384
0.00.616.598 I llm_load_print_meta: n_expert         = 0
0.00.616.599 I llm_load_print_meta: n_expert_used    = 0
0.00.616.599 I llm_load_print_meta: causal attn      = 1
0.00.616.599 I llm_load_print_meta: pooling type     = 0
0.00.616.600 I llm_load_print_meta: rope type        = 2
0.00.616.600 I llm_load_print_meta: rope scaling     = linear
0.00.616.601 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.602 I llm_load_print_meta: freq_scale_train = 1
0.00.616.603 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.603 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.603 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.603 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.604 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.604 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.604 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.605 I llm_load_print_meta: model type       = 2B
0.00.616.606 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.607 I llm_load_print_meta: model params     = 2.51 B
0.00.616.616 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.617 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.617 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.618 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.618 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.619 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.619 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.619 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.625 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.627 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.628 I llm_load_print_meta: max token length = 93
0.00.716.556 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.722.375 I llama_new_context_with_model: n_seq_max     = 1
0.00.722.382 I llama_new_context_with_model: n_ctx         = 4096
0.00.722.382 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.722.383 I llama_new_context_with_model: n_batch       = 2048
0.00.722.383 I llama_new_context_with_model: n_ubatch      = 512
0.00.722.384 I llama_new_context_with_model: flash_attn    = 0
0.00.722.385 I llama_new_context_with_model: freq_base     = 10000.0
0.00.722.386 I llama_new_context_with_model: freq_scale    = 1
0.00.722.387 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.165 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.202 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.354 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.862 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.866 I llama_new_context_with_model: graph nodes  = 601
0.00.739.866 I llama_new_context_with_model: graph splits = 1
0.00.739.892 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.342.697 I main: llama threadpool init, n_threads = 4
0.01.342.709 I 
0.01.342.818 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.342.821 I 
0.01.343.049 I sampler seed: 792548140
0.01.343.061 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.068 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.068 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.069 I 
 increasities

The provided text does not contain any information about "crepuscular shenanigans", so I am unable to answer this question from the provided context. [end of text]


0.14.955.246 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.58 tokens per second)
0.14.955.249 I llama_perf_context_print:        load time =    1339.83 ms
0.14.955.265 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.955.266 I llama_perf_context_print:        eval time =   13522.91 ms /    32 runs   (  422.59 ms per token,     2.37 tokens per second)
0.14.955.267 I llama_perf_context_print:       total time =   13612.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.611 I build: 4017 (9830b692) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.002.745 I main: load the model and apply lora adapter, if any
0.00.025.266 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.277 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.360 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.370 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.372 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.376 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.382 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.383 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.392 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.393 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.394 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.395 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.836 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.351 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.730 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.737 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.739 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.740 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.741 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.742 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.743 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.747 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.748 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.749 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.750 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.264.751 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.759 I llama_model_loader: - type  f32:   37 tensors
0.00.264.761 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.150 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.366 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.300 I llm_load_vocab: special tokens cache size = 5
0.00.606.356 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.428 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.429 I llm_load_print_meta: arch             = gemma
0.00.606.430 I llm_load_print_meta: vocab type       = SPM
0.00.606.431 I llm_load_print_meta: n_vocab          = 256000
0.00.606.433 I llm_load_print_meta: n_merges         = 0
0.00.606.434 I llm_load_print_meta: vocab_only       = 0
0.00.606.434 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.434 I llm_load_print_meta: n_embd           = 2048
0.00.606.435 I llm_load_print_meta: n_layer          = 18
0.00.606.499 I llm_load_print_meta: n_head           = 8
0.00.606.506 I llm_load_print_meta: n_head_kv        = 1
0.00.606.507 I llm_load_print_meta: n_rot            = 256
0.00.606.507 I llm_load_print_meta: n_swa            = 0
0.00.606.508 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.509 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.514 I llm_load_print_meta: n_gqa            = 8
0.00.606.520 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.525 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.536 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.541 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.542 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.542 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.543 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.549 I llm_load_print_meta: n_ff             = 16384
0.00.606.550 I llm_load_print_meta: n_expert         = 0
0.00.606.551 I llm_load_print_meta: n_expert_used    = 0
0.00.606.552 I llm_load_print_meta: causal attn      = 1
0.00.606.552 I llm_load_print_meta: pooling type     = 0
0.00.606.552 I llm_load_print_meta: rope type        = 2
0.00.606.564 I llm_load_print_meta: rope scaling     = linear
0.00.606.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.574 I llm_load_print_meta: freq_scale_train = 1
0.00.606.575 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.575 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.576 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.576 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.577 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.577 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.578 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.579 I llm_load_print_meta: model type       = 2B
0.00.606.580 I llm_load_print_meta: model ftype      = Q8_0
0.00.606.580 I llm_load_print_meta: model params     = 2.51 B
0.00.606.589 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.606.589 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.590 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.591 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.592 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.592 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.593 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.599 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.600 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.601 I llm_load_print_meta: max token length = 93
0.00.704.591 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.704.599 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.704.600 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.704.601 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.704.601 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.704.602 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.710.471 I llama_new_context_with_model: n_seq_max     = 1
0.00.710.478 I llama_new_context_with_model: n_ctx         = 4096
0.00.710.478 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.710.479 I llama_new_context_with_model: n_batch       = 2048
0.00.710.479 I llama_new_context_with_model: n_ubatch      = 512
0.00.710.480 I llama_new_context_with_model: flash_attn    = 0
0.00.710.482 I llama_new_context_with_model: freq_base     = 10000.0
0.00.710.482 I llama_new_context_with_model: freq_scale    = 1
0.00.710.483 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.724.641 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.724.678 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.724.806 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.357 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.727.361 I llama_new_context_with_model: graph nodes  = 601
0.00.727.362 I llama_new_context_with_model: graph splits = 1
0.00.727.387 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.331.396 I main: llama threadpool init, n_threads = 4
0.01.331.408 I 
0.01.331.511 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.515 I 
0.01.331.747 I sampler seed: 266509444
0.01.331.760 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.766 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.331.770 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.770 I 
 increasities on social media and their potential consequences.

**Introduction:**

In the digital landscape, social media platforms have become integral to our daily lives, connecting

0.14.882.653 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.06 tokens per second)
0.14.882.656 I llama_perf_context_print:        load time =    1328.55 ms
0.14.882.670 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.882.672 I llama_perf_context_print:        eval time =   13460.67 ms /    32 runs   (  420.65 ms per token,     2.38 tokens per second)
0.14.882.674 I llama_perf_context_print:       total time =   13551.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.700 I build: 4017 (9830b692) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.905 I main: llama backend init
0.00.002.856 I main: load the model and apply lora adapter, if any
0.00.025.850 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.862 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.957 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.969 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.971 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.976 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.980 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.981 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.982 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.984 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.985 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.993 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.994 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.995 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.997 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.012 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.437 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.729 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.737 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.738 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.739 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.742 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.743 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.747 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.748 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.749 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.750 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.762 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.771 I llama_model_loader: - type  f32:   37 tensors
0.00.267.773 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.843 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.152 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.075 I llm_load_vocab: special tokens cache size = 5
0.00.619.682 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.750 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.751 I llm_load_print_meta: arch             = gemma
0.00.619.752 I llm_load_print_meta: vocab type       = SPM
0.00.619.753 I llm_load_print_meta: n_vocab          = 256000
0.00.619.755 I llm_load_print_meta: n_merges         = 0
0.00.619.756 I llm_load_print_meta: vocab_only       = 0
0.00.619.757 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.757 I llm_load_print_meta: n_embd           = 2048
0.00.619.757 I llm_load_print_meta: n_layer          = 18
0.00.619.825 I llm_load_print_meta: n_head           = 8
0.00.619.832 I llm_load_print_meta: n_head_kv        = 1
0.00.619.834 I llm_load_print_meta: n_rot            = 256
0.00.619.834 I llm_load_print_meta: n_swa            = 0
0.00.619.836 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.837 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.842 I llm_load_print_meta: n_gqa            = 8
0.00.619.855 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.861 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.862 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.875 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.877 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.883 I llm_load_print_meta: n_ff             = 16384
0.00.619.883 I llm_load_print_meta: n_expert         = 0
0.00.619.884 I llm_load_print_meta: n_expert_used    = 0
0.00.619.884 I llm_load_print_meta: causal attn      = 1
0.00.619.885 I llm_load_print_meta: pooling type     = 0
0.00.619.885 I llm_load_print_meta: rope type        = 2
0.00.619.886 I llm_load_print_meta: rope scaling     = linear
0.00.619.890 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.891 I llm_load_print_meta: freq_scale_train = 1
0.00.619.891 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.892 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.892 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.892 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.892 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.893 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.893 I llm_load_print_meta: model type       = 2B
0.00.619.894 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.895 I llm_load_print_meta: model params     = 2.51 B
0.00.619.904 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.905 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.906 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.906 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.907 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.907 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.908 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.909 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.915 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.916 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.917 I llm_load_print_meta: max token length = 93
0.00.693.597 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.693.605 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.699.383 I llama_new_context_with_model: n_seq_max     = 1
0.00.699.390 I llama_new_context_with_model: n_ctx         = 4096
0.00.699.391 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.699.391 I llama_new_context_with_model: n_batch       = 2048
0.00.699.391 I llama_new_context_with_model: n_ubatch      = 512
0.00.699.392 I llama_new_context_with_model: flash_attn    = 0
0.00.699.394 I llama_new_context_with_model: freq_base     = 10000.0
0.00.699.395 I llama_new_context_with_model: freq_scale    = 1
0.00.699.395 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.713.795 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.713.832 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.713.956 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.435 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.716.439 I llama_new_context_with_model: graph nodes  = 601
0.00.716.440 I llama_new_context_with_model: graph splits = 1
0.00.716.465 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.320.822 I main: llama threadpool init, n_threads = 4
0.01.320.834 I 
0.01.320.936 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.320.939 I 
0.01.321.169 I sampler seed: 430434449
0.01.321.182 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.321.188 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.321.191 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.321.191 I 
 increasities with a sense of longing and yearning for something more. 

The lyrics express a desire for connection, intimacy, and a deeper understanding of oneself and

0.14.831.474 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.43 tokens per second)
0.14.831.491 I llama_perf_context_print:        load time =    1317.86 ms
0.14.831.493 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.831.494 I llama_perf_context_print:        eval time =   13420.62 ms /    32 runs   (  419.39 ms per token,     2.38 tokens per second)
0.14.831.495 I llama_perf_context_print:       total time =   13510.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.620s
user	3m49.229s
sys	0m9.447s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (9830b692)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199221.07 ms
main:    total time = 199221.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4017 (9830b692) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.802 I main: load the model and apply lora adapter, if any
0.00.025.470 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.481 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.569 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.581 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.583 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.587 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.588 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.589 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.598 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.599 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.600 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.610 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.619 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.620 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.621 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.623 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.215 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.287 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.700 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.712 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.713 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.715 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.717 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.718 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.723 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.724 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.726 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.726 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.728 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.737 I llama_model_loader: - type  f32:   37 tensors
0.00.266.739 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.740 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.283 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.145 I llm_load_vocab: special tokens cache size = 5
0.00.593.676 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.745 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.746 I llm_load_print_meta: arch             = gemma
0.00.593.747 I llm_load_print_meta: vocab type       = SPM
0.00.593.748 I llm_load_print_meta: n_vocab          = 256000
0.00.593.750 I llm_load_print_meta: n_merges         = 0
0.00.593.751 I llm_load_print_meta: vocab_only       = 0
0.00.593.751 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.752 I llm_load_print_meta: n_embd           = 2048
0.00.593.752 I llm_load_print_meta: n_layer          = 18
0.00.593.817 I llm_load_print_meta: n_head           = 8
0.00.593.824 I llm_load_print_meta: n_head_kv        = 1
0.00.593.825 I llm_load_print_meta: n_rot            = 256
0.00.593.825 I llm_load_print_meta: n_swa            = 0
0.00.593.826 I llm_load_print_meta: n_embd_head_k    = 256
0.00.593.827 I llm_load_print_meta: n_embd_head_v    = 256
0.00.593.832 I llm_load_print_meta: n_gqa            = 8
0.00.593.837 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.593.842 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.593.844 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.593.846 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.593.847 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.593.847 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.593.848 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.593.853 I llm_load_print_meta: n_ff             = 16384
0.00.593.853 I llm_load_print_meta: n_expert         = 0
0.00.593.854 I llm_load_print_meta: n_expert_used    = 0
0.00.593.866 I llm_load_print_meta: causal attn      = 1
0.00.593.867 I llm_load_print_meta: pooling type     = 0
0.00.593.867 I llm_load_print_meta: rope type        = 2
0.00.593.867 I llm_load_print_meta: rope scaling     = linear
0.00.593.869 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.593.870 I llm_load_print_meta: freq_scale_train = 1
0.00.593.870 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.593.870 I llm_load_print_meta: rope_finetuned   = unknown
0.00.593.871 I llm_load_print_meta: ssm_d_conv       = 0
0.00.593.871 I llm_load_print_meta: ssm_d_inner      = 0
0.00.593.872 I llm_load_print_meta: ssm_d_state      = 0
0.00.593.876 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.593.876 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.593.877 I llm_load_print_meta: model type       = 2B
0.00.593.890 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.593.891 I llm_load_print_meta: model params     = 2.51 B
0.00.593.902 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.593.902 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.593.902 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.593.903 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.593.910 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.593.911 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.593.912 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.593.914 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.593.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.593.922 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.593.923 I llm_load_print_meta: max token length = 93
0.00.657.636 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.657.649 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.657.650 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.657.650 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.657.651 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.657.652 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.663.615 I llama_new_context_with_model: n_seq_max     = 1
0.00.663.623 I llama_new_context_with_model: n_ctx         = 4096
0.00.663.624 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.663.624 I llama_new_context_with_model: n_batch       = 2048
0.00.663.624 I llama_new_context_with_model: n_ubatch      = 512
0.00.663.625 I llama_new_context_with_model: flash_attn    = 0
0.00.663.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.663.629 I llama_new_context_with_model: freq_scale    = 1
0.00.663.630 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.679.225 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.679.265 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.679.390 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.681.934 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.681.938 I llama_new_context_with_model: graph nodes  = 601
0.00.681.939 I llama_new_context_with_model: graph splits = 1
0.00.681.964 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.472 I main: llama threadpool init, n_threads = 4
0.01.251.484 I 
0.01.251.586 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.590 I 
0.01.251.819 I sampler seed: 1475945687
0.01.251.831 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.839 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.251.840 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.251.840 I 
 maneuvously. 

I am unable to answer the question as it contains inappropriate language. [end of text]


0.08.011.573 I llama_perf_sampler_print:    sampling time =      30.72 ms /    21 runs   (    1.46 ms per token,   683.66 tokens per second)
0.08.011.579 I llama_perf_context_print:        load time =    1248.57 ms
0.08.011.581 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.011.583 I llama_perf_context_print:        eval time =    6703.01 ms /    20 runs   (  335.15 ms per token,     2.98 tokens per second)
0.08.011.584 I llama_perf_context_print:       total time =    6760.11 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (9830b692)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198955.72 ms
main:    total time = 198955.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4017 (9830b692) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.801 I main: load the model and apply lora adapter, if any
0.00.026.811 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.916 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.931 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.933 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.937 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.939 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.940 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.943 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.956 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.966 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.967 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.968 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.969 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.971 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.416 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.922 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.933 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.934 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.935 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.937 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.938 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.939 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.943 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.945 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.952 I llama_model_loader: - type  f32:   37 tensors
0.00.267.955 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.956 I llama_model_loader: - type q6_K:   19 tensors
0.00.458.751 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.274 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.257 I llm_load_vocab: special tokens cache size = 5
0.00.641.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.641.562 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.641.566 I llm_load_print_meta: arch             = gemma
0.00.641.567 I llm_load_print_meta: vocab type       = SPM
0.00.641.568 I llm_load_print_meta: n_vocab          = 256000
0.00.641.570 I llm_load_print_meta: n_merges         = 0
0.00.641.570 I llm_load_print_meta: vocab_only       = 0
0.00.641.571 I llm_load_print_meta: n_ctx_train      = 8192
0.00.641.571 I llm_load_print_meta: n_embd           = 2048
0.00.641.572 I llm_load_print_meta: n_layer          = 18
0.00.641.638 I llm_load_print_meta: n_head           = 8
0.00.641.648 I llm_load_print_meta: n_head_kv        = 1
0.00.641.649 I llm_load_print_meta: n_rot            = 256
0.00.641.649 I llm_load_print_meta: n_swa            = 0
0.00.641.650 I llm_load_print_meta: n_embd_head_k    = 256
0.00.641.652 I llm_load_print_meta: n_embd_head_v    = 256
0.00.641.657 I llm_load_print_meta: n_gqa            = 8
0.00.641.662 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.641.668 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.641.669 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.641.671 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.641.671 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.641.691 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.641.695 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.641.703 I llm_load_print_meta: n_ff             = 16384
0.00.641.712 I llm_load_print_meta: n_expert         = 0
0.00.641.715 I llm_load_print_meta: n_expert_used    = 0
0.00.641.716 I llm_load_print_meta: causal attn      = 1
0.00.641.716 I llm_load_print_meta: pooling type     = 0
0.00.641.717 I llm_load_print_meta: rope type        = 2
0.00.641.717 I llm_load_print_meta: rope scaling     = linear
0.00.641.719 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.641.719 I llm_load_print_meta: freq_scale_train = 1
0.00.641.720 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.641.720 I llm_load_print_meta: rope_finetuned   = unknown
0.00.641.721 I llm_load_print_meta: ssm_d_conv       = 0
0.00.641.728 I llm_load_print_meta: ssm_d_inner      = 0
0.00.641.729 I llm_load_print_meta: ssm_d_state      = 0
0.00.641.729 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.641.730 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.641.730 I llm_load_print_meta: model type       = 2B
0.00.641.731 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.641.733 I llm_load_print_meta: model params     = 2.51 B
0.00.641.740 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.641.741 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.641.742 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.641.743 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.641.744 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.641.745 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.641.745 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.641.746 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.641.753 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.641.754 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.641.755 I llm_load_print_meta: max token length = 93
0.00.702.718 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.708.486 I llama_new_context_with_model: n_seq_max     = 1
0.00.708.493 I llama_new_context_with_model: n_ctx         = 4096
0.00.708.493 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.708.493 I llama_new_context_with_model: n_batch       = 2048
0.00.708.494 I llama_new_context_with_model: n_ubatch      = 512
0.00.708.494 I llama_new_context_with_model: flash_attn    = 0
0.00.708.507 I llama_new_context_with_model: freq_base     = 10000.0
0.00.708.508 I llama_new_context_with_model: freq_scale    = 1
0.00.708.509 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.723.344 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.388 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.723.512 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.072 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.075 I llama_new_context_with_model: graph nodes  = 601
0.00.726.076 I llama_new_context_with_model: graph splits = 1
0.00.726.101 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.952 I main: llama threadpool init, n_threads = 4
0.01.296.965 I 
0.01.297.070 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.074 I 
0.01.297.305 I sampler seed: 3234077488
0.01.297.317 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.323 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.297.326 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.327 I 
 increasities with their unique characteristics.

**a) What is the meaning of the term "reciprocity"?**

**b) Explain how reciprocity contributes

0.12.156.680 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.66 tokens per second)
0.12.156.684 I llama_perf_context_print:        load time =    1294.05 ms
0.12.156.685 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.156.687 I llama_perf_context_print:        eval time =   10769.59 ms /    32 runs   (  336.55 ms per token,     2.97 tokens per second)
0.12.156.689 I llama_perf_context_print:       total time =   10859.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m1.275s
user	49m52.553s
sys	0m6.276s
