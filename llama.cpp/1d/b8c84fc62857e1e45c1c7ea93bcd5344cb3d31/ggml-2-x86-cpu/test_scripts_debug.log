+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 3946 (1db8c84f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.002.807 I main: load the model and apply lora adapter, if any
0.00.025.077 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.296 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.392 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.404 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.406 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.411 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.412 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.413 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.414 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.415 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.415 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.424 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.425 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.426 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.427 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.429 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.223 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.390 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.676 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.684 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.685 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.686 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.687 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.688 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.689 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.693 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.694 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.695 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.696 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.697 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.707 I llama_model_loader: - type  f32:   37 tensors
0.00.267.712 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.597 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.534 I llm_load_vocab: special tokens cache size = 5
0.00.603.738 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.811 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.812 I llm_load_print_meta: arch             = gemma
0.00.603.813 I llm_load_print_meta: vocab type       = SPM
0.00.603.813 I llm_load_print_meta: n_vocab          = 256000
0.00.603.815 I llm_load_print_meta: n_merges         = 0
0.00.603.816 I llm_load_print_meta: vocab_only       = 0
0.00.603.816 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.817 I llm_load_print_meta: n_embd           = 2048
0.00.603.817 I llm_load_print_meta: n_layer          = 18
0.00.603.882 I llm_load_print_meta: n_head           = 8
0.00.603.889 I llm_load_print_meta: n_head_kv        = 1
0.00.603.890 I llm_load_print_meta: n_rot            = 256
0.00.603.891 I llm_load_print_meta: n_swa            = 0
0.00.603.891 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.891 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.896 I llm_load_print_meta: n_gqa            = 8
0.00.603.901 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.906 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.907 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.909 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.909 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.916 I llm_load_print_meta: n_ff             = 16384
0.00.603.917 I llm_load_print_meta: n_expert         = 0
0.00.603.917 I llm_load_print_meta: n_expert_used    = 0
0.00.603.938 I llm_load_print_meta: causal attn      = 1
0.00.603.938 I llm_load_print_meta: pooling type     = 0
0.00.603.947 I llm_load_print_meta: rope type        = 2
0.00.603.948 I llm_load_print_meta: rope scaling     = linear
0.00.603.950 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.950 I llm_load_print_meta: freq_scale_train = 1
0.00.603.951 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.958 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.962 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.963 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.963 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.974 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.975 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.976 I llm_load_print_meta: model type       = 2B
0.00.603.979 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.980 I llm_load_print_meta: model params     = 2.51 B
0.00.603.981 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.981 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.982 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.982 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.983 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.983 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.984 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.984 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.990 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.991 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.992 I llm_load_print_meta: max token length = 93
0.00.604.161 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.705.771 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.705.782 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.705.783 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.705.784 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.705.784 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.705.785 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.711.484 I llama_new_context_with_model: n_ctx      = 8192
0.00.711.491 I llama_new_context_with_model: n_batch    = 2048
0.00.711.492 I llama_new_context_with_model: n_ubatch   = 512
0.00.711.492 I llama_new_context_with_model: flash_attn = 0
0.00.711.494 I llama_new_context_with_model: freq_base  = 10000.0
0.00.711.495 I llama_new_context_with_model: freq_scale = 1
0.00.740.642 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.740.682 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.740.803 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.206 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.210 I llama_new_context_with_model: graph nodes  = 601
0.00.742.211 I llama_new_context_with_model: graph splits = 1
0.00.742.226 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.893 I main: llama threadpool init, n_threads = 4
0.01.356.906 I 
0.01.357.018 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.022 I 
0.01.357.207 I sampler seed: 1655012180
0.01.357.220 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.227 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.357.231 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.231 I 
 increasities. [end of text]


0.03.042.072 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.98 tokens per second)
0.03.042.076 I llama_perf_context_print:        load time =    1354.00 ms
0.03.042.102 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.042.104 I llama_perf_context_print:        eval time =    1671.13 ms /     4 runs   (  417.78 ms per token,     2.39 tokens per second)
0.03.042.109 I llama_perf_context_print:       total time =    1685.19 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 3946 (1db8c84f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.643 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.730 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.745 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.749 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.752 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.753 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.754 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.755 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.756 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.763 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.764 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.766 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.767 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.768 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.087 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.597 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.809 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.817 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.818 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.819 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.820 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.822 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.823 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.826 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.827 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.828 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.829 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.830 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.839 I llama_model_loader: - type  f32:   37 tensors
0.00.266.844 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.803 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.173 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.077 I llm_load_vocab: special tokens cache size = 5
0.00.594.261 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.334 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.335 I llm_load_print_meta: arch             = gemma
0.00.594.336 I llm_load_print_meta: vocab type       = SPM
0.00.594.336 I llm_load_print_meta: n_vocab          = 256000
0.00.594.339 I llm_load_print_meta: n_merges         = 0
0.00.594.339 I llm_load_print_meta: vocab_only       = 0
0.00.594.340 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.340 I llm_load_print_meta: n_embd           = 2048
0.00.594.340 I llm_load_print_meta: n_layer          = 18
0.00.594.405 I llm_load_print_meta: n_head           = 8
0.00.594.412 I llm_load_print_meta: n_head_kv        = 1
0.00.594.412 I llm_load_print_meta: n_rot            = 256
0.00.594.413 I llm_load_print_meta: n_swa            = 0
0.00.594.413 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.413 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.418 I llm_load_print_meta: n_gqa            = 8
0.00.594.422 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.427 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.429 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.446 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.447 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.447 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.448 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.453 I llm_load_print_meta: n_ff             = 16384
0.00.594.454 I llm_load_print_meta: n_expert         = 0
0.00.594.454 I llm_load_print_meta: n_expert_used    = 0
0.00.594.455 I llm_load_print_meta: causal attn      = 1
0.00.594.455 I llm_load_print_meta: pooling type     = 0
0.00.594.456 I llm_load_print_meta: rope type        = 2
0.00.594.456 I llm_load_print_meta: rope scaling     = linear
0.00.594.458 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.459 I llm_load_print_meta: freq_scale_train = 1
0.00.594.459 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.469 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.471 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.471 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.480 I llm_load_print_meta: model type       = 2B
0.00.594.482 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.483 I llm_load_print_meta: model params     = 2.51 B
0.00.594.484 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.484 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.493 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.494 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.501 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.509 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.517 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.518 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.524 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.526 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.526 I llm_load_print_meta: max token length = 93
0.00.594.694 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.904 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.697.621 I llama_new_context_with_model: n_ctx      = 8192
0.00.697.628 I llama_new_context_with_model: n_batch    = 2048
0.00.697.628 I llama_new_context_with_model: n_ubatch   = 512
0.00.697.629 I llama_new_context_with_model: flash_attn = 0
0.00.697.632 I llama_new_context_with_model: freq_base  = 10000.0
0.00.697.633 I llama_new_context_with_model: freq_scale = 1
0.00.729.219 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.262 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.385 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.785 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.790 I llama_new_context_with_model: graph nodes  = 601
0.00.730.790 I llama_new_context_with_model: graph splits = 1
0.00.730.807 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.267 I main: llama threadpool init, n_threads = 4
0.01.340.281 I 
0.01.340.394 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.399 I 
0.01.340.594 I sampler seed: 1197749438
0.01.340.605 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.613 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.340.614 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.614 I 
 increamentalism and the evolution of human cognition.

**Question:** How does the evolution of human cognition relate to the development of increamentalism?

**

0.14.894.000 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.17 tokens per second)
0.14.894.016 I llama_perf_context_print:        load time =    1337.38 ms
0.14.894.018 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.894.020 I llama_perf_context_print:        eval time =   13459.09 ms /    32 runs   (  420.60 ms per token,     2.38 tokens per second)
0.14.894.022 I llama_perf_context_print:       total time =   13553.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 3946 (1db8c84f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.853 I main: load the model and apply lora adapter, if any
0.00.025.025 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.240 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.327 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.338 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.346 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.350 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.351 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.353 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.354 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.355 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.363 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.365 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.366 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.368 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.377 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.115 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.438 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.675 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.683 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.684 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.685 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.686 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.688 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.689 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.692 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.693 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.694 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.695 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.696 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.704 I llama_model_loader: - type  f32:   37 tensors
0.00.268.709 I llama_model_loader: - type q8_0:  127 tensors
0.00.458.888 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.852 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.837 I llm_load_vocab: special tokens cache size = 5
0.00.617.365 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.617.438 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.617.439 I llm_load_print_meta: arch             = gemma
0.00.617.439 I llm_load_print_meta: vocab type       = SPM
0.00.617.440 I llm_load_print_meta: n_vocab          = 256000
0.00.617.442 I llm_load_print_meta: n_merges         = 0
0.00.617.443 I llm_load_print_meta: vocab_only       = 0
0.00.617.443 I llm_load_print_meta: n_ctx_train      = 8192
0.00.617.443 I llm_load_print_meta: n_embd           = 2048
0.00.617.444 I llm_load_print_meta: n_layer          = 18
0.00.617.512 I llm_load_print_meta: n_head           = 8
0.00.617.519 I llm_load_print_meta: n_head_kv        = 1
0.00.617.520 I llm_load_print_meta: n_rot            = 256
0.00.617.521 I llm_load_print_meta: n_swa            = 0
0.00.617.521 I llm_load_print_meta: n_embd_head_k    = 256
0.00.617.521 I llm_load_print_meta: n_embd_head_v    = 256
0.00.617.526 I llm_load_print_meta: n_gqa            = 8
0.00.617.531 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.617.535 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.617.536 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.617.538 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.617.538 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.617.538 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.617.539 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.617.544 I llm_load_print_meta: n_ff             = 16384
0.00.617.545 I llm_load_print_meta: n_expert         = 0
0.00.617.546 I llm_load_print_meta: n_expert_used    = 0
0.00.617.546 I llm_load_print_meta: causal attn      = 1
0.00.617.546 I llm_load_print_meta: pooling type     = 0
0.00.617.548 I llm_load_print_meta: rope type        = 2
0.00.617.548 I llm_load_print_meta: rope scaling     = linear
0.00.617.550 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.617.550 I llm_load_print_meta: freq_scale_train = 1
0.00.617.555 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.617.556 I llm_load_print_meta: rope_finetuned   = unknown
0.00.617.556 I llm_load_print_meta: ssm_d_conv       = 0
0.00.617.556 I llm_load_print_meta: ssm_d_inner      = 0
0.00.617.556 I llm_load_print_meta: ssm_d_state      = 0
0.00.617.557 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.617.557 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.617.559 I llm_load_print_meta: model type       = 2B
0.00.617.560 I llm_load_print_meta: model ftype      = Q8_0
0.00.617.561 I llm_load_print_meta: model params     = 2.51 B
0.00.617.562 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.617.562 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.617.563 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.617.564 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.617.565 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.617.577 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.617.578 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.617.592 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.617.598 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.617.600 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.617.600 I llm_load_print_meta: max token length = 93
0.00.617.769 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.584 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.694.594 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.694.594 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.694.595 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.694.596 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.694.596 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.700.193 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.200 I llama_new_context_with_model: n_batch    = 2048
0.00.700.200 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.201 I llama_new_context_with_model: flash_attn = 0
0.00.700.203 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.204 I llama_new_context_with_model: freq_scale = 1
0.00.729.133 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.178 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.296 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.748 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.753 I llama_new_context_with_model: graph nodes  = 601
0.00.730.754 I llama_new_context_with_model: graph splits = 1
0.00.730.771 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.341.196 I main: llama threadpool init, n_threads = 4
0.01.341.209 I 
0.01.341.314 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.341.319 I 
0.01.341.512 I sampler seed: 3982428557
0.01.341.534 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.546 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.341.547 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.548 I 
 increably!

I am unable to access the provided text. Please provide the text so I can understand and respond accordingly. [end of text]


0.12.300.697 I llama_perf_sampler_print:    sampling time =      40.17 ms /    27 runs   (    1.49 ms per token,   672.08 tokens per second)
0.12.300.701 I llama_perf_context_print:        load time =    1338.26 ms
0.12.300.703 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.300.705 I llama_perf_context_print:        eval time =   10881.86 ms /    26 runs   (  418.53 ms per token,     2.39 tokens per second)
0.12.300.706 I llama_perf_context_print:       total time =   10959.51 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3946 (1db8c84f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.024.707 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.930 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.024 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.035 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.036 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.040 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.044 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.046 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.047 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.049 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.050 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.059 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.061 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.063 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.065 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.067 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.882 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.120 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.131 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.132 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.133 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.137 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.138 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.139 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.140 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.141 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.150 I llama_model_loader: - type  f32:   37 tensors
0.00.267.154 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.387 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.969 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.013 I llm_load_vocab: special tokens cache size = 5
0.00.594.454 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.528 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.529 I llm_load_print_meta: arch             = gemma
0.00.594.530 I llm_load_print_meta: vocab type       = SPM
0.00.594.531 I llm_load_print_meta: n_vocab          = 256000
0.00.594.533 I llm_load_print_meta: n_merges         = 0
0.00.594.534 I llm_load_print_meta: vocab_only       = 0
0.00.594.535 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.535 I llm_load_print_meta: n_embd           = 2048
0.00.594.535 I llm_load_print_meta: n_layer          = 18
0.00.594.598 I llm_load_print_meta: n_head           = 8
0.00.594.605 I llm_load_print_meta: n_head_kv        = 1
0.00.594.606 I llm_load_print_meta: n_rot            = 256
0.00.594.606 I llm_load_print_meta: n_swa            = 0
0.00.594.607 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.607 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.612 I llm_load_print_meta: n_gqa            = 8
0.00.594.616 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.621 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.623 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.624 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.624 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.625 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.625 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.630 I llm_load_print_meta: n_ff             = 16384
0.00.594.631 I llm_load_print_meta: n_expert         = 0
0.00.594.631 I llm_load_print_meta: n_expert_used    = 0
0.00.594.632 I llm_load_print_meta: causal attn      = 1
0.00.594.632 I llm_load_print_meta: pooling type     = 0
0.00.594.632 I llm_load_print_meta: rope type        = 2
0.00.594.633 I llm_load_print_meta: rope scaling     = linear
0.00.594.634 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.635 I llm_load_print_meta: freq_scale_train = 1
0.00.594.636 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.636 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.637 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.637 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.637 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.637 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.638 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.638 I llm_load_print_meta: model type       = 2B
0.00.594.639 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.640 I llm_load_print_meta: model params     = 2.51 B
0.00.594.641 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.641 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.642 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.642 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.654 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.655 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.656 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.656 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.663 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.664 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.665 I llm_load_print_meta: max token length = 93
0.00.594.834 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.656 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.665.663 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.671.403 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.412 I llama_new_context_with_model: n_batch    = 2048
0.00.671.412 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.413 I llama_new_context_with_model: flash_attn = 0
0.00.671.415 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.415 I llama_new_context_with_model: freq_scale = 1
0.00.700.540 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.700.583 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.700.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.083 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.088 I llama_new_context_with_model: graph nodes  = 601
0.00.702.088 I llama_new_context_with_model: graph splits = 1
0.00.702.104 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.706 I main: llama threadpool init, n_threads = 4
0.01.311.718 I 
0.01.311.825 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.825 I 
0.01.312.001 I sampler seed: 2794178721
0.01.312.014 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.312.022 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.312.024 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.312.025 I 
 seconary to the primary source.

I am unable to access the primary source document. Therefore, I am relying on secondary sources to provide information regarding the historical

0.14.759.868 I llama_perf_sampler_print:    sampling time =      49.37 ms /    33 runs   (    1.50 ms per token,   668.37 tokens per second)
0.14.759.882 I llama_perf_context_print:        load time =    1308.79 ms
0.14.759.884 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.759.885 I llama_perf_context_print:        eval time =   13352.77 ms /    32 runs   (  417.27 ms per token,     2.40 tokens per second)
0.14.759.886 I llama_perf_context_print:       total time =   13448.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.798s
user	2m51.240s
sys	0m9.344s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3946 (1db8c84f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198353.72 ms
main:    total time = 198353.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 3946 (1db8c84f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.787 I main: load the model and apply lora adapter, if any
0.00.024.503 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.713 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.804 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.815 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.816 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.821 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.823 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.824 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.825 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.826 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.827 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.833 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.834 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.836 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.837 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.839 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.154 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.656 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.871 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.879 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.880 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.881 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.882 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.883 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.884 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.888 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.889 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.890 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.891 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.892 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.899 I llama_model_loader: - type  f32:   37 tensors
0.00.265.902 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.903 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.507 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.406 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.326 I llm_load_vocab: special tokens cache size = 5
0.00.599.166 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.235 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.236 I llm_load_print_meta: arch             = gemma
0.00.599.237 I llm_load_print_meta: vocab type       = SPM
0.00.599.238 I llm_load_print_meta: n_vocab          = 256000
0.00.599.240 I llm_load_print_meta: n_merges         = 0
0.00.599.241 I llm_load_print_meta: vocab_only       = 0
0.00.599.241 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.242 I llm_load_print_meta: n_embd           = 2048
0.00.599.242 I llm_load_print_meta: n_layer          = 18
0.00.599.306 I llm_load_print_meta: n_head           = 8
0.00.599.313 I llm_load_print_meta: n_head_kv        = 1
0.00.599.314 I llm_load_print_meta: n_rot            = 256
0.00.599.315 I llm_load_print_meta: n_swa            = 0
0.00.599.316 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.316 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.321 I llm_load_print_meta: n_gqa            = 8
0.00.599.326 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.331 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.333 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.334 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.335 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.335 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.336 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.341 I llm_load_print_meta: n_ff             = 16384
0.00.599.342 I llm_load_print_meta: n_expert         = 0
0.00.599.342 I llm_load_print_meta: n_expert_used    = 0
0.00.599.343 I llm_load_print_meta: causal attn      = 1
0.00.599.343 I llm_load_print_meta: pooling type     = 0
0.00.599.344 I llm_load_print_meta: rope type        = 2
0.00.599.345 I llm_load_print_meta: rope scaling     = linear
0.00.599.346 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.347 I llm_load_print_meta: freq_scale_train = 1
0.00.599.348 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.348 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.348 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.349 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.349 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.350 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.350 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.360 I llm_load_print_meta: model type       = 2B
0.00.599.361 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.599.362 I llm_load_print_meta: model params     = 2.51 B
0.00.599.363 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.599.363 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.364 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.365 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.365 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.365 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.366 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.366 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.372 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.374 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.375 I llm_load_print_meta: max token length = 93
0.00.599.547 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.659.530 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.659.539 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.659.540 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.659.541 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.659.541 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.659.542 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.665.023 I llama_new_context_with_model: n_ctx      = 8192
0.00.665.030 I llama_new_context_with_model: n_batch    = 2048
0.00.665.031 I llama_new_context_with_model: n_ubatch   = 512
0.00.665.031 I llama_new_context_with_model: flash_attn = 0
0.00.665.033 I llama_new_context_with_model: freq_base  = 10000.0
0.00.665.034 I llama_new_context_with_model: freq_scale = 1
0.00.694.009 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.694.051 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.694.165 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.546 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.551 I llama_new_context_with_model: graph nodes  = 601
0.00.695.552 I llama_new_context_with_model: graph splits = 1
0.00.695.567 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.276.734 I main: llama threadpool init, n_threads = 4
0.01.276.746 I 
0.01.276.856 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.276.860 I 
0.01.277.037 I sampler seed: 2292490923
0.01.277.050 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.057 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.277.060 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.277.060 I 
 maneuvously.

I am unable to generate a response that includes inappropriate or sexually suggestive content. [end of text]


0.08.434.038 I llama_perf_sampler_print:    sampling time =      32.53 ms /    22 runs   (    1.48 ms per token,   676.38 tokens per second)
0.08.434.042 I llama_perf_context_print:        load time =    1273.86 ms
0.08.434.043 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.434.055 I llama_perf_context_print:        eval time =    7094.28 ms /    21 runs   (  337.82 ms per token,     2.96 tokens per second)
0.08.434.057 I llama_perf_context_print:       total time =    7157.31 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3946 (1db8c84f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198366.47 ms
main:    total time = 198366.47 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 3946 (1db8c84f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.024.672 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.770 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.784 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.786 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.789 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.791 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.792 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.794 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.795 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.796 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.802 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.803 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.804 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.805 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.806 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.959 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.072 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.446 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.454 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.455 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.456 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.457 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.459 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.460 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.463 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.464 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.472 I llama_model_loader: - type  f32:   37 tensors
0.00.270.475 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.476 I llama_model_loader: - type q6_K:   19 tensors
0.00.439.618 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.577 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.522 I llm_load_vocab: special tokens cache size = 5
0.00.607.931 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.001 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.002 I llm_load_print_meta: arch             = gemma
0.00.608.003 I llm_load_print_meta: vocab type       = SPM
0.00.608.004 I llm_load_print_meta: n_vocab          = 256000
0.00.608.006 I llm_load_print_meta: n_merges         = 0
0.00.608.006 I llm_load_print_meta: vocab_only       = 0
0.00.608.007 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.007 I llm_load_print_meta: n_embd           = 2048
0.00.608.007 I llm_load_print_meta: n_layer          = 18
0.00.608.072 I llm_load_print_meta: n_head           = 8
0.00.608.079 I llm_load_print_meta: n_head_kv        = 1
0.00.608.080 I llm_load_print_meta: n_rot            = 256
0.00.608.080 I llm_load_print_meta: n_swa            = 0
0.00.608.081 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.081 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.086 I llm_load_print_meta: n_gqa            = 8
0.00.608.090 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.095 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.096 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.098 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.098 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.099 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.099 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.104 I llm_load_print_meta: n_ff             = 16384
0.00.608.104 I llm_load_print_meta: n_expert         = 0
0.00.608.106 I llm_load_print_meta: n_expert_used    = 0
0.00.608.107 I llm_load_print_meta: causal attn      = 1
0.00.608.107 I llm_load_print_meta: pooling type     = 0
0.00.608.117 I llm_load_print_meta: rope type        = 2
0.00.608.130 I llm_load_print_meta: rope scaling     = linear
0.00.608.133 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.134 I llm_load_print_meta: freq_scale_train = 1
0.00.608.134 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.134 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.135 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.135 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.136 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.137 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.137 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.138 I llm_load_print_meta: model type       = 2B
0.00.608.139 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.608.140 I llm_load_print_meta: model params     = 2.51 B
0.00.608.141 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.608.141 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.150 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.151 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.151 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.151 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.166 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.172 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.174 I llm_load_print_meta: max token length = 93
0.00.608.342 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.666.290 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.671.828 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.835 I llama_new_context_with_model: n_batch    = 2048
0.00.671.835 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.836 I llama_new_context_with_model: flash_attn = 0
0.00.671.838 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.839 I llama_new_context_with_model: freq_scale = 1
0.00.701.265 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.307 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.421 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.740 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.744 I llama_new_context_with_model: graph nodes  = 601
0.00.702.745 I llama_new_context_with_model: graph splits = 1
0.00.702.762 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.227 I main: llama threadpool init, n_threads = 4
0.01.284.240 I 
0.01.284.347 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.351 I 
0.01.284.528 I sampler seed: 3693992533
0.01.284.539 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.546 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.284.547 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.547 I 
 squaRED BULLS! 💥

That's right folks! The squawking squad is back and fiercer than ever! 🔥

Get ready for

0.12.267.037 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.22 tokens per second)
0.12.267.040 I llama_perf_context_print:        load time =    1281.36 ms
0.12.267.042 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.267.055 I llama_perf_context_print:        eval time =   10888.00 ms /    32 runs   (  340.25 ms per token,     2.94 tokens per second)
0.12.267.057 I llama_perf_context_print:       total time =   10982.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m0.308s
user	49m51.011s
sys	0m6.317s
