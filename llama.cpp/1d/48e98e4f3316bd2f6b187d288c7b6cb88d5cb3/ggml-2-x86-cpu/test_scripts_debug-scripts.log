+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.649 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.025.017 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.233 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.337 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.350 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.351 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.356 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.358 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.359 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.360 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.361 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.362 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.372 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.374 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.375 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.376 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.377 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.867 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.299 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.501 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.510 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.511 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.511 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.512 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.514 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.514 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.518 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.518 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.520 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.520 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.521 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.530 I llama_model_loader: - type  f32:   37 tensors
0.00.198.534 I llama_model_loader: - type q8_0:  127 tensors
0.00.505.934 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.982 I llm_load_vocab: special tokens cache size = 5
0.00.565.665 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.565.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.565.730 I llm_load_print_meta: arch             = gemma
0.00.565.731 I llm_load_print_meta: vocab type       = SPM
0.00.565.732 I llm_load_print_meta: n_vocab          = 256000
0.00.565.734 I llm_load_print_meta: n_merges         = 0
0.00.565.735 I llm_load_print_meta: vocab_only       = 0
0.00.565.735 I llm_load_print_meta: n_ctx_train      = 8192
0.00.565.736 I llm_load_print_meta: n_embd           = 2048
0.00.565.736 I llm_load_print_meta: n_layer          = 18
0.00.565.772 I llm_load_print_meta: n_head           = 8
0.00.565.778 I llm_load_print_meta: n_head_kv        = 1
0.00.565.779 I llm_load_print_meta: n_rot            = 256
0.00.565.780 I llm_load_print_meta: n_swa            = 0
0.00.565.780 I llm_load_print_meta: n_embd_head_k    = 256
0.00.565.780 I llm_load_print_meta: n_embd_head_v    = 256
0.00.565.786 I llm_load_print_meta: n_gqa            = 8
0.00.565.806 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.565.811 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.565.813 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.565.814 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.565.815 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.565.815 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.565.815 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.565.820 I llm_load_print_meta: n_ff             = 16384
0.00.565.821 I llm_load_print_meta: n_expert         = 0
0.00.565.827 I llm_load_print_meta: n_expert_used    = 0
0.00.565.828 I llm_load_print_meta: causal attn      = 1
0.00.565.828 I llm_load_print_meta: pooling type     = 0
0.00.565.829 I llm_load_print_meta: rope type        = 2
0.00.565.833 I llm_load_print_meta: rope scaling     = linear
0.00.565.835 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.565.845 I llm_load_print_meta: freq_scale_train = 1
0.00.565.852 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.565.853 I llm_load_print_meta: rope_finetuned   = unknown
0.00.565.854 I llm_load_print_meta: ssm_d_conv       = 0
0.00.565.854 I llm_load_print_meta: ssm_d_inner      = 0
0.00.565.854 I llm_load_print_meta: ssm_d_state      = 0
0.00.565.855 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.565.855 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.565.856 I llm_load_print_meta: model type       = 2B
0.00.565.857 I llm_load_print_meta: model ftype      = Q8_0
0.00.565.858 I llm_load_print_meta: model params     = 2.51 B
0.00.565.859 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.565.859 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.565.860 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.565.861 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.565.861 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.565.862 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.565.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.565.863 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.565.863 I llm_load_print_meta: max token length = 93
0.00.566.059 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.664.154 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.664.165 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.664.166 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.664.167 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.664.168 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.664.168 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.670.027 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.037 I llama_new_context_with_model: n_batch    = 2048
0.00.670.038 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.039 I llama_new_context_with_model: flash_attn = 0
0.00.670.042 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.043 I llama_new_context_with_model: freq_scale = 1
0.00.700.620 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.700.661 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.700.773 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.702.178 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.186 I llama_new_context_with_model: graph nodes  = 601
0.00.702.187 I llama_new_context_with_model: graph splits = 1
0.00.702.204 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.315.465 I main: llama threadpool init, n_threads = 4
0.01.315.477 I 
0.01.315.573 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.315.577 I 
0.01.315.755 I sampler seed: 3394284606
0.01.315.765 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.315.770 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.315.771 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and the effects of these on the child.

**Answer:**

**Childhood experiences and their effects on children:**

**1. Socialization:**

0.14.997.990 I llama_perf_sampler_print:    sampling time =      48.20 ms /    33 runs   (    1.46 ms per token,   684.62 tokens per second)
0.14.997.993 I llama_perf_context_print:        load time =    1312.57 ms
0.14.997.995 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.997.996 I llama_perf_context_print:        eval time =   13601.94 ms /    32 runs   (  425.06 ms per token,     2.35 tokens per second)
0.14.997.997 I llama_perf_context_print:       total time =   13682.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.658 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.856 I main: llama backend init
0.00.002.780 I main: load the model and apply lora adapter, if any
0.00.027.425 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.027.520 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.534 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.536 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.540 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.541 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.542 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.544 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.545 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.545 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.553 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.554 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.554 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.556 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.556 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.765 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.187.917 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.200.099 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.200.106 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.200.107 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.200.108 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.200.109 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.200.110 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.200.111 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.200.114 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.200.115 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.200.116 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.200.116 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.200.118 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.200.126 I llama_model_loader: - type  f32:   37 tensors
0.00.200.130 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.394 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.398 I llm_load_vocab: special tokens cache size = 5
0.00.533.179 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.533.240 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.533.241 I llm_load_print_meta: arch             = gemma
0.00.533.242 I llm_load_print_meta: vocab type       = SPM
0.00.533.243 I llm_load_print_meta: n_vocab          = 256000
0.00.533.245 I llm_load_print_meta: n_merges         = 0
0.00.533.245 I llm_load_print_meta: vocab_only       = 0
0.00.533.246 I llm_load_print_meta: n_ctx_train      = 8192
0.00.533.246 I llm_load_print_meta: n_embd           = 2048
0.00.533.246 I llm_load_print_meta: n_layer          = 18
0.00.533.281 I llm_load_print_meta: n_head           = 8
0.00.533.288 I llm_load_print_meta: n_head_kv        = 1
0.00.533.288 I llm_load_print_meta: n_rot            = 256
0.00.533.289 I llm_load_print_meta: n_swa            = 0
0.00.533.289 I llm_load_print_meta: n_embd_head_k    = 256
0.00.533.289 I llm_load_print_meta: n_embd_head_v    = 256
0.00.533.317 I llm_load_print_meta: n_gqa            = 8
0.00.533.322 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.533.327 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.533.328 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.533.330 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.533.331 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.533.331 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.533.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.533.354 I llm_load_print_meta: n_ff             = 16384
0.00.533.355 I llm_load_print_meta: n_expert         = 0
0.00.533.355 I llm_load_print_meta: n_expert_used    = 0
0.00.533.356 I llm_load_print_meta: causal attn      = 1
0.00.533.356 I llm_load_print_meta: pooling type     = 0
0.00.533.357 I llm_load_print_meta: rope type        = 2
0.00.533.358 I llm_load_print_meta: rope scaling     = linear
0.00.533.359 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.533.360 I llm_load_print_meta: freq_scale_train = 1
0.00.533.360 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.533.361 I llm_load_print_meta: rope_finetuned   = unknown
0.00.533.361 I llm_load_print_meta: ssm_d_conv       = 0
0.00.533.361 I llm_load_print_meta: ssm_d_inner      = 0
0.00.533.362 I llm_load_print_meta: ssm_d_state      = 0
0.00.533.362 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.533.367 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.533.367 I llm_load_print_meta: model type       = 2B
0.00.533.368 I llm_load_print_meta: model ftype      = Q8_0
0.00.533.369 I llm_load_print_meta: model params     = 2.51 B
0.00.533.370 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.533.370 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.533.371 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.533.371 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.533.372 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.533.372 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.533.373 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.533.374 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.533.374 I llm_load_print_meta: max token length = 93
0.00.533.549 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.628.739 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.634.430 I llama_new_context_with_model: n_ctx      = 8192
0.00.634.439 I llama_new_context_with_model: n_batch    = 2048
0.00.634.439 I llama_new_context_with_model: n_ubatch   = 512
0.00.634.440 I llama_new_context_with_model: flash_attn = 0
0.00.634.443 I llama_new_context_with_model: freq_base  = 10000.0
0.00.634.443 I llama_new_context_with_model: freq_scale = 1
0.00.665.903 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.665.948 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.666.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.667.490 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.667.497 I llama_new_context_with_model: graph nodes  = 601
0.00.667.497 I llama_new_context_with_model: graph splits = 1
0.00.667.514 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.753 I main: llama threadpool init, n_threads = 4
0.01.279.764 I 
0.01.279.854 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.857 I 
0.01.280.015 I sampler seed: 291253762
0.01.280.026 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.030 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.280.031 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I'm unable to generate a response for this query as it requires generating text that is inappropriate or sexually suggestive in nature. [end of text]


0.14.051.406 I llama_perf_sampler_print:    sampling time =      46.01 ms /    31 runs   (    1.48 ms per token,   673.71 tokens per second)
0.14.051.409 I llama_perf_context_print:        load time =    1276.89 ms
0.14.051.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.051.433 I llama_perf_context_print:        eval time =   12693.33 ms /    30 runs   (  423.11 ms per token,     2.36 tokens per second)
0.14.051.443 I llama_perf_context_print:       total time =   12771.66 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.658 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.025.195 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.396 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.493 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.505 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.506 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.511 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.514 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.515 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.516 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.518 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.519 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.526 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.528 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.528 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.530 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.530 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.314 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.511 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.520 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.521 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.522 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.523 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.524 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.524 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.527 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.528 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.541 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.544 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.546 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.555 I llama_model_loader: - type  f32:   37 tensors
0.00.198.561 I llama_model_loader: - type q8_0:  127 tensors
0.00.488.500 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.489.537 I llm_load_vocab: special tokens cache size = 5
0.00.547.966 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.548.025 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.548.028 I llm_load_print_meta: arch             = gemma
0.00.548.029 I llm_load_print_meta: vocab type       = SPM
0.00.548.030 I llm_load_print_meta: n_vocab          = 256000
0.00.548.032 I llm_load_print_meta: n_merges         = 0
0.00.548.033 I llm_load_print_meta: vocab_only       = 0
0.00.548.034 I llm_load_print_meta: n_ctx_train      = 8192
0.00.548.035 I llm_load_print_meta: n_embd           = 2048
0.00.548.035 I llm_load_print_meta: n_layer          = 18
0.00.548.069 I llm_load_print_meta: n_head           = 8
0.00.548.079 I llm_load_print_meta: n_head_kv        = 1
0.00.548.080 I llm_load_print_meta: n_rot            = 256
0.00.548.080 I llm_load_print_meta: n_swa            = 0
0.00.548.080 I llm_load_print_meta: n_embd_head_k    = 256
0.00.548.081 I llm_load_print_meta: n_embd_head_v    = 256
0.00.548.086 I llm_load_print_meta: n_gqa            = 8
0.00.548.091 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.548.096 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.548.100 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.548.101 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.548.101 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.548.102 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.548.102 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.548.107 I llm_load_print_meta: n_ff             = 16384
0.00.548.107 I llm_load_print_meta: n_expert         = 0
0.00.548.108 I llm_load_print_meta: n_expert_used    = 0
0.00.548.120 I llm_load_print_meta: causal attn      = 1
0.00.548.124 I llm_load_print_meta: pooling type     = 0
0.00.548.125 I llm_load_print_meta: rope type        = 2
0.00.548.125 I llm_load_print_meta: rope scaling     = linear
0.00.548.127 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.548.128 I llm_load_print_meta: freq_scale_train = 1
0.00.548.128 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.548.129 I llm_load_print_meta: rope_finetuned   = unknown
0.00.548.129 I llm_load_print_meta: ssm_d_conv       = 0
0.00.548.129 I llm_load_print_meta: ssm_d_inner      = 0
0.00.548.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.548.130 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.548.131 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.548.132 I llm_load_print_meta: model type       = 2B
0.00.548.132 I llm_load_print_meta: model ftype      = Q8_0
0.00.548.134 I llm_load_print_meta: model params     = 2.51 B
0.00.548.134 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.548.135 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.548.136 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.548.136 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.548.137 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.548.137 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.548.138 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.548.138 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.548.139 I llm_load_print_meta: max token length = 93
0.00.548.320 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.625.444 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.625.458 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.625.459 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.625.459 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.625.460 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.625.461 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.631.266 I llama_new_context_with_model: n_ctx      = 8192
0.00.631.275 I llama_new_context_with_model: n_batch    = 2048
0.00.631.275 I llama_new_context_with_model: n_ubatch   = 512
0.00.631.276 I llama_new_context_with_model: flash_attn = 0
0.00.631.279 I llama_new_context_with_model: freq_base  = 10000.0
0.00.631.280 I llama_new_context_with_model: freq_scale = 1
0.00.662.874 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.662.913 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.663.024 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.664.450 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.664.456 I llama_new_context_with_model: graph nodes  = 601
0.00.664.456 I llama_new_context_with_model: graph splits = 1
0.00.664.473 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.166 I main: llama threadpool init, n_threads = 4
0.01.279.177 I 
0.01.279.268 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.273 I 
0.01.279.439 I sampler seed: 15106238
0.01.279.448 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.453 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.279.453 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.09.338.270 I llama_perf_sampler_print:    sampling time =      28.39 ms /    20 runs   (    1.42 ms per token,   704.35 tokens per second)
0.09.338.274 I llama_perf_context_print:        load time =    1276.27 ms
0.09.338.276 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.338.278 I llama_perf_context_print:        eval time =    8010.35 ms /    19 runs   (  421.60 ms per token,     2.37 tokens per second)
0.09.338.279 I llama_perf_context_print:       total time =    8059.11 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.642 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.024.820 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.013 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.104 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.117 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.119 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.123 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.126 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.127 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.128 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.129 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.130 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.140 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.141 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.141 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.143 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.144 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.618 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.637 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.808 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.816 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.817 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.818 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.818 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.820 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.821 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.825 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.826 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.827 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.828 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.836 I llama_model_loader: - type  f32:   37 tensors
0.00.197.841 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.687 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.715 I llm_load_vocab: special tokens cache size = 5
0.00.544.146 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.544.206 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.544.207 I llm_load_print_meta: arch             = gemma
0.00.544.208 I llm_load_print_meta: vocab type       = SPM
0.00.544.209 I llm_load_print_meta: n_vocab          = 256000
0.00.544.211 I llm_load_print_meta: n_merges         = 0
0.00.544.212 I llm_load_print_meta: vocab_only       = 0
0.00.544.212 I llm_load_print_meta: n_ctx_train      = 8192
0.00.544.213 I llm_load_print_meta: n_embd           = 2048
0.00.544.213 I llm_load_print_meta: n_layer          = 18
0.00.544.247 I llm_load_print_meta: n_head           = 8
0.00.544.254 I llm_load_print_meta: n_head_kv        = 1
0.00.544.255 I llm_load_print_meta: n_rot            = 256
0.00.544.255 I llm_load_print_meta: n_swa            = 0
0.00.544.255 I llm_load_print_meta: n_embd_head_k    = 256
0.00.544.256 I llm_load_print_meta: n_embd_head_v    = 256
0.00.544.260 I llm_load_print_meta: n_gqa            = 8
0.00.544.265 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.544.270 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.544.271 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.544.272 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.544.272 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.544.273 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.544.273 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.544.278 I llm_load_print_meta: n_ff             = 16384
0.00.544.279 I llm_load_print_meta: n_expert         = 0
0.00.544.279 I llm_load_print_meta: n_expert_used    = 0
0.00.544.280 I llm_load_print_meta: causal attn      = 1
0.00.544.280 I llm_load_print_meta: pooling type     = 0
0.00.544.280 I llm_load_print_meta: rope type        = 2
0.00.544.281 I llm_load_print_meta: rope scaling     = linear
0.00.544.282 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.544.283 I llm_load_print_meta: freq_scale_train = 1
0.00.544.283 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.544.283 I llm_load_print_meta: rope_finetuned   = unknown
0.00.544.284 I llm_load_print_meta: ssm_d_conv       = 0
0.00.544.284 I llm_load_print_meta: ssm_d_inner      = 0
0.00.544.284 I llm_load_print_meta: ssm_d_state      = 0
0.00.544.284 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.544.285 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.544.286 I llm_load_print_meta: model type       = 2B
0.00.544.287 I llm_load_print_meta: model ftype      = Q8_0
0.00.544.288 I llm_load_print_meta: model params     = 2.51 B
0.00.544.289 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.544.289 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.544.290 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.544.290 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.544.290 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.544.291 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.544.291 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.544.292 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.544.292 I llm_load_print_meta: max token length = 93
0.00.544.466 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.615.497 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.615.508 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.621.033 I llama_new_context_with_model: n_ctx      = 8192
0.00.621.040 I llama_new_context_with_model: n_batch    = 2048
0.00.621.041 I llama_new_context_with_model: n_ubatch   = 512
0.00.621.041 I llama_new_context_with_model: flash_attn = 0
0.00.621.044 I llama_new_context_with_model: freq_base  = 10000.0
0.00.621.045 I llama_new_context_with_model: freq_scale = 1
0.00.651.393 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.651.437 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.548 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.652.944 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.652.951 I llama_new_context_with_model: graph nodes  = 601
0.00.652.951 I llama_new_context_with_model: graph splits = 1
0.00.652.969 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.092 I main: llama threadpool init, n_threads = 4
0.01.267.103 I 
0.01.267.199 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.203 I 
0.01.267.362 I sampler seed: 2182596595
0.01.267.373 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.267.377 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.267.378 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvled

I understand that you are unable to provide medical advice. However, I am experiencing some concerning symptoms and I would like to seek guidance from a

0.14.796.142 I llama_perf_sampler_print:    sampling time =      47.87 ms /    33 runs   (    1.45 ms per token,   689.34 tokens per second)
0.14.796.145 I llama_perf_context_print:        load time =    1264.22 ms
0.14.796.147 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.796.159 I llama_perf_context_print:        eval time =   13447.76 ms /    32 runs   (  420.24 ms per token,     2.38 tokens per second)
0.14.796.160 I llama_perf_context_print:       total time =   13529.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m2.996s
user	3m24.633s
sys	0m9.590s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3810 (1d48e98e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200043.27 ms
main:    total time = 200043.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.654 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.024.632 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.821 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.910 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.922 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.923 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.927 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.930 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.931 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.932 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.933 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.940 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.941 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.941 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.216 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.388 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.721 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.732 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.733 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.734 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.735 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.736 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.737 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.740 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.741 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.742 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.743 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.744 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.753 I llama_model_loader: - type  f32:   37 tensors
0.00.197.758 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.758 I llama_model_loader: - type q6_K:   19 tensors
0.00.484.629 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.617 I llm_load_vocab: special tokens cache size = 5
0.00.544.413 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.544.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.544.470 I llm_load_print_meta: arch             = gemma
0.00.544.470 I llm_load_print_meta: vocab type       = SPM
0.00.544.471 I llm_load_print_meta: n_vocab          = 256000
0.00.544.474 I llm_load_print_meta: n_merges         = 0
0.00.544.474 I llm_load_print_meta: vocab_only       = 0
0.00.544.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.544.475 I llm_load_print_meta: n_embd           = 2048
0.00.544.475 I llm_load_print_meta: n_layer          = 18
0.00.544.508 I llm_load_print_meta: n_head           = 8
0.00.544.515 I llm_load_print_meta: n_head_kv        = 1
0.00.544.515 I llm_load_print_meta: n_rot            = 256
0.00.544.515 I llm_load_print_meta: n_swa            = 0
0.00.544.516 I llm_load_print_meta: n_embd_head_k    = 256
0.00.544.516 I llm_load_print_meta: n_embd_head_v    = 256
0.00.544.521 I llm_load_print_meta: n_gqa            = 8
0.00.544.525 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.544.530 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.544.531 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.544.532 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.544.533 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.544.533 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.544.533 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.544.538 I llm_load_print_meta: n_ff             = 16384
0.00.544.539 I llm_load_print_meta: n_expert         = 0
0.00.544.540 I llm_load_print_meta: n_expert_used    = 0
0.00.544.540 I llm_load_print_meta: causal attn      = 1
0.00.544.563 I llm_load_print_meta: pooling type     = 0
0.00.544.563 I llm_load_print_meta: rope type        = 2
0.00.544.564 I llm_load_print_meta: rope scaling     = linear
0.00.544.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.544.566 I llm_load_print_meta: freq_scale_train = 1
0.00.544.567 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.544.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.544.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.544.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.544.576 I llm_load_print_meta: ssm_d_state      = 0
0.00.544.577 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.544.578 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.544.579 I llm_load_print_meta: model type       = 2B
0.00.544.580 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.544.581 I llm_load_print_meta: model params     = 2.51 B
0.00.544.582 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.544.582 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.544.590 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.544.591 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.544.591 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.544.592 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.544.592 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.544.593 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.544.593 I llm_load_print_meta: max token length = 93
0.00.544.764 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.604.558 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.604.568 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.604.569 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.604.570 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.604.570 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.604.571 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.610.069 I llama_new_context_with_model: n_ctx      = 8192
0.00.610.077 I llama_new_context_with_model: n_batch    = 2048
0.00.610.077 I llama_new_context_with_model: n_ubatch   = 512
0.00.610.078 I llama_new_context_with_model: flash_attn = 0
0.00.610.081 I llama_new_context_with_model: freq_base  = 10000.0
0.00.610.081 I llama_new_context_with_model: freq_scale = 1
0.00.639.476 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.639.517 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.639.627 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.640.986 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.640.992 I llama_new_context_with_model: graph nodes  = 601
0.00.640.993 I llama_new_context_with_model: graph splits = 1
0.00.641.009 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.221.278 I main: llama threadpool init, n_threads = 4
0.01.221.291 I 
0.01.221.381 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.221.384 I 
0.01.221.540 I sampler seed: 2091623219
0.01.221.550 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.221.555 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.221.556 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am unable to generate a response as I am unable to generate text that is sexually suggestive in nature. [end of text]


0.10.153.530 I llama_perf_sampler_print:    sampling time =      38.88 ms /    27 runs   (    1.44 ms per token,   694.48 tokens per second)
0.10.153.534 I llama_perf_context_print:        load time =    1218.40 ms
0.10.153.535 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.153.537 I llama_perf_context_print:        eval time =    8866.55 ms /    26 runs   (  341.02 ms per token,     2.93 tokens per second)
0.10.153.538 I llama_perf_context_print:       total time =    8932.26 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3810 (1d48e98e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199987.07 ms
main:    total time = 199987.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.697 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.002.835 I main: load the model and apply lora adapter, if any
0.00.025.084 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.185 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.201 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.209 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.211 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.212 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.213 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.214 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.215 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.222 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.225 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.226 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.599 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.978 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.329 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.337 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.337 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.338 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.339 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.340 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.341 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.344 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.345 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.354 I llama_model_loader: - type  f32:   37 tensors
0.00.197.357 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.358 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.624 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.649 I llm_load_vocab: special tokens cache size = 5
0.00.537.206 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.537.262 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.537.262 I llm_load_print_meta: arch             = gemma
0.00.537.263 I llm_load_print_meta: vocab type       = SPM
0.00.537.264 I llm_load_print_meta: n_vocab          = 256000
0.00.537.267 I llm_load_print_meta: n_merges         = 0
0.00.537.267 I llm_load_print_meta: vocab_only       = 0
0.00.537.268 I llm_load_print_meta: n_ctx_train      = 8192
0.00.537.268 I llm_load_print_meta: n_embd           = 2048
0.00.537.269 I llm_load_print_meta: n_layer          = 18
0.00.537.302 I llm_load_print_meta: n_head           = 8
0.00.537.308 I llm_load_print_meta: n_head_kv        = 1
0.00.537.308 I llm_load_print_meta: n_rot            = 256
0.00.537.309 I llm_load_print_meta: n_swa            = 0
0.00.537.309 I llm_load_print_meta: n_embd_head_k    = 256
0.00.537.309 I llm_load_print_meta: n_embd_head_v    = 256
0.00.537.314 I llm_load_print_meta: n_gqa            = 8
0.00.537.318 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.537.323 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.537.324 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.537.325 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.537.326 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.537.326 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.537.327 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.537.332 I llm_load_print_meta: n_ff             = 16384
0.00.537.332 I llm_load_print_meta: n_expert         = 0
0.00.537.333 I llm_load_print_meta: n_expert_used    = 0
0.00.537.333 I llm_load_print_meta: causal attn      = 1
0.00.537.333 I llm_load_print_meta: pooling type     = 0
0.00.537.334 I llm_load_print_meta: rope type        = 2
0.00.537.334 I llm_load_print_meta: rope scaling     = linear
0.00.537.335 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.537.336 I llm_load_print_meta: freq_scale_train = 1
0.00.537.336 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.537.337 I llm_load_print_meta: rope_finetuned   = unknown
0.00.537.337 I llm_load_print_meta: ssm_d_conv       = 0
0.00.537.337 I llm_load_print_meta: ssm_d_inner      = 0
0.00.537.338 I llm_load_print_meta: ssm_d_state      = 0
0.00.537.338 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.537.338 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.537.339 I llm_load_print_meta: model type       = 2B
0.00.537.340 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.537.341 I llm_load_print_meta: model params     = 2.51 B
0.00.537.341 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.537.342 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.537.342 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.537.343 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.537.343 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.537.343 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.537.344 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.537.344 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.537.345 I llm_load_print_meta: max token length = 93
0.00.537.529 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.594.976 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.600.569 I llama_new_context_with_model: n_ctx      = 8192
0.00.600.576 I llama_new_context_with_model: n_batch    = 2048
0.00.600.577 I llama_new_context_with_model: n_ubatch   = 512
0.00.600.577 I llama_new_context_with_model: flash_attn = 0
0.00.600.580 I llama_new_context_with_model: freq_base  = 10000.0
0.00.600.581 I llama_new_context_with_model: freq_scale = 1
0.00.630.833 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.630.880 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.630.991 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.632.348 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.632.355 I llama_new_context_with_model: graph nodes  = 601
0.00.632.355 I llama_new_context_with_model: graph splits = 1
0.00.632.371 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.213.176 I main: llama threadpool init, n_threads = 4
0.01.213.187 I 
0.01.213.282 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.213.286 I 
0.01.213.448 I sampler seed: 805284653
0.01.213.459 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.213.464 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.213.465 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically.

I am unable to generate a response as requested because I am unable to exhibit personality traits or engage in actions that may be perceived as imitating others

0.12.210.402 I llama_perf_sampler_print:    sampling time =      48.18 ms /    33 runs   (    1.46 ms per token,   685.00 tokens per second)
0.12.210.405 I llama_perf_context_print:        load time =    1210.25 ms
0.12.210.406 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.210.408 I llama_perf_context_print:        eval time =   10915.49 ms /    32 runs   (  341.11 ms per token,     2.93 tokens per second)
0.12.210.409 I llama_perf_context_print:       total time =   10997.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.316s
user	50m15.279s
sys	0m6.510s
