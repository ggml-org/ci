+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.001.880 I main: load the model and apply lora adapter, if any
0.00.022.109 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.157 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.164 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.169 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.170 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.173 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.174 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.174 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.175 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.176 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.178 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.183 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.184 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.185 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.186 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.900 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.647 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.460 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.465 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.466 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.466 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.467 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.468 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.468 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.471 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.471 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.472 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.472 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.473 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.477 I llama_model_loader: - type  f32:   37 tensors
0.00.132.479 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.902 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.653 I llm_load_vocab: special tokens cache size = 5
0.00.219.066 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.080 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.081 I llm_load_print_meta: arch             = gemma
0.00.219.081 I llm_load_print_meta: vocab type       = SPM
0.00.219.082 I llm_load_print_meta: n_vocab          = 256000
0.00.219.083 I llm_load_print_meta: n_merges         = 0
0.00.219.083 I llm_load_print_meta: vocab_only       = 0
0.00.219.083 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.083 I llm_load_print_meta: n_embd           = 2048
0.00.219.084 I llm_load_print_meta: n_layer          = 18
0.00.219.096 I llm_load_print_meta: n_head           = 8
0.00.219.097 I llm_load_print_meta: n_head_kv        = 1
0.00.219.098 I llm_load_print_meta: n_rot            = 256
0.00.219.098 I llm_load_print_meta: n_swa            = 0
0.00.219.098 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.098 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.099 I llm_load_print_meta: n_gqa            = 8
0.00.219.100 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.101 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.104 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.104 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.104 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.105 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.106 I llm_load_print_meta: n_ff             = 16384
0.00.219.106 I llm_load_print_meta: n_expert         = 0
0.00.219.106 I llm_load_print_meta: n_expert_used    = 0
0.00.219.107 I llm_load_print_meta: causal attn      = 1
0.00.219.107 I llm_load_print_meta: pooling type     = 0
0.00.219.107 I llm_load_print_meta: rope type        = 2
0.00.219.108 I llm_load_print_meta: rope scaling     = linear
0.00.219.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.110 I llm_load_print_meta: freq_scale_train = 1
0.00.219.110 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.111 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.111 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.111 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.112 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.112 I llm_load_print_meta: model type       = 2B
0.00.219.113 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.114 I llm_load_print_meta: model params     = 2.51 B
0.00.219.114 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.115 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.115 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.116 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.116 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.116 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.117 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.117 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.117 I llm_load_print_meta: max token length = 93
0.00.219.143 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.317.157 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.317.168 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.317.169 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.317.169 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.317.170 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.317.170 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.322.283 I llama_new_context_with_model: n_ctx      = 8192
0.00.322.290 I llama_new_context_with_model: n_batch    = 2048
0.00.322.290 I llama_new_context_with_model: n_ubatch   = 512
0.00.322.291 I llama_new_context_with_model: flash_attn = 0
0.00.322.293 I llama_new_context_with_model: freq_base  = 10000.0
0.00.322.294 I llama_new_context_with_model: freq_scale = 1
0.00.351.934 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.351.947 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.352.038 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.908 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.352.917 I llama_new_context_with_model: graph nodes  = 601
0.00.352.917 I llama_new_context_with_model: graph splits = 1
0.00.352.920 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.559 I main: llama threadpool init, n_threads = 4
0.00.445.570 I 
0.00.445.644 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.647 I 
0.00.445.675 I sampler seed: 2817556536
0.00.445.685 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.698 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.445.702 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities and provide a compelling narrative for a thrilling escape room experience.

The setting: A crumbling Victorian mansion perched atop a desolate mountain range, shrouded in mist

0.02.730.019 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6586.83 tokens per second)
0.02.730.022 I llama_perf_context_print:        load time =     443.66 ms
0.02.730.023 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.730.025 I llama_perf_context_print:        eval time =    2265.37 ms /    32 runs   (   70.79 ms per token,    14.13 tokens per second)
0.02.730.026 I llama_perf_context_print:       total time =    2284.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.605 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.796 I main: llama backend init
0.00.001.933 I main: load the model and apply lora adapter, if any
0.00.022.080 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.093 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.101 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.102 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.106 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.107 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.108 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.108 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.113 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.114 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.115 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.116 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.116 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.198 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.076 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.926 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.932 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.933 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.934 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.935 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.936 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.937 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.940 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.940 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.941 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.942 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.943 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.947 I llama_model_loader: - type  f32:   37 tensors
0.00.132.949 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.374 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.104 I llm_load_vocab: special tokens cache size = 5
0.00.219.410 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.427 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.427 I llm_load_print_meta: arch             = gemma
0.00.219.428 I llm_load_print_meta: vocab type       = SPM
0.00.219.429 I llm_load_print_meta: n_vocab          = 256000
0.00.219.429 I llm_load_print_meta: n_merges         = 0
0.00.219.430 I llm_load_print_meta: vocab_only       = 0
0.00.219.430 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.430 I llm_load_print_meta: n_embd           = 2048
0.00.219.431 I llm_load_print_meta: n_layer          = 18
0.00.219.443 I llm_load_print_meta: n_head           = 8
0.00.219.444 I llm_load_print_meta: n_head_kv        = 1
0.00.219.445 I llm_load_print_meta: n_rot            = 256
0.00.219.445 I llm_load_print_meta: n_swa            = 0
0.00.219.446 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.446 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.447 I llm_load_print_meta: n_gqa            = 8
0.00.219.448 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.451 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.451 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.452 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.452 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.453 I llm_load_print_meta: n_ff             = 16384
0.00.219.453 I llm_load_print_meta: n_expert         = 0
0.00.219.454 I llm_load_print_meta: n_expert_used    = 0
0.00.219.454 I llm_load_print_meta: causal attn      = 1
0.00.219.454 I llm_load_print_meta: pooling type     = 0
0.00.219.455 I llm_load_print_meta: rope type        = 2
0.00.219.455 I llm_load_print_meta: rope scaling     = linear
0.00.219.456 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.457 I llm_load_print_meta: freq_scale_train = 1
0.00.219.457 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.458 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.458 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.458 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.459 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.459 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.460 I llm_load_print_meta: model type       = 2B
0.00.219.460 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.461 I llm_load_print_meta: model params     = 2.51 B
0.00.219.462 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.462 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.463 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.463 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.464 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.465 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.465 I llm_load_print_meta: max token length = 93
0.00.219.488 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.313.164 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.318.207 I llama_new_context_with_model: n_ctx      = 8192
0.00.318.214 I llama_new_context_with_model: n_batch    = 2048
0.00.318.215 I llama_new_context_with_model: n_ubatch   = 512
0.00.318.216 I llama_new_context_with_model: flash_attn = 0
0.00.318.218 I llama_new_context_with_model: freq_base  = 10000.0
0.00.318.219 I llama_new_context_with_model: freq_scale = 1
0.00.348.673 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.348.688 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.348.782 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.628 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.349.636 I llama_new_context_with_model: graph nodes  = 601
0.00.349.636 I llama_new_context_with_model: graph splits = 1
0.00.349.638 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.902 I main: llama threadpool init, n_threads = 4
0.00.436.915 I 
0.00.436.987 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.990 I 
0.00.437.017 I sampler seed: 2957688594
0.00.437.026 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.437.031 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.437.032 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly fast. I was wondering if there was a way to slow down the process?

**Possible solutions:**

1. **Use a slower computer:**

0.02.646.538 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6957.62 tokens per second)
0.02.646.541 I llama_perf_context_print:        load time =     434.95 ms
0.02.646.543 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.646.544 I llama_perf_context_print:        eval time =    2191.38 ms /    32 runs   (   68.48 ms per token,    14.60 tokens per second)
0.02.646.545 I llama_perf_context_print:       total time =    2209.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.547 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.839 I main: load the model and apply lora adapter, if any
0.00.023.722 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.770 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.783 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.789 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.801 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.805 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.805 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.807 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.807 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.808 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.812 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.814 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.814 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.815 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.816 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.902 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.687 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.537 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.537 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.538 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.539 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.540 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.540 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.543 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.544 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.545 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.547 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.548 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.552 I llama_model_loader: - type  f32:   37 tensors
0.00.134.555 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.188 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.206.929 I llm_load_vocab: special tokens cache size = 5
0.00.225.202 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.225.216 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.225.217 I llm_load_print_meta: arch             = gemma
0.00.225.217 I llm_load_print_meta: vocab type       = SPM
0.00.225.218 I llm_load_print_meta: n_vocab          = 256000
0.00.225.218 I llm_load_print_meta: n_merges         = 0
0.00.225.218 I llm_load_print_meta: vocab_only       = 0
0.00.225.219 I llm_load_print_meta: n_ctx_train      = 8192
0.00.225.219 I llm_load_print_meta: n_embd           = 2048
0.00.225.220 I llm_load_print_meta: n_layer          = 18
0.00.225.232 I llm_load_print_meta: n_head           = 8
0.00.225.233 I llm_load_print_meta: n_head_kv        = 1
0.00.225.234 I llm_load_print_meta: n_rot            = 256
0.00.225.235 I llm_load_print_meta: n_swa            = 0
0.00.225.235 I llm_load_print_meta: n_embd_head_k    = 256
0.00.225.236 I llm_load_print_meta: n_embd_head_v    = 256
0.00.225.237 I llm_load_print_meta: n_gqa            = 8
0.00.225.238 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.225.239 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.225.240 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.225.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.225.243 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.225.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.225.244 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.225.245 I llm_load_print_meta: n_ff             = 16384
0.00.225.245 I llm_load_print_meta: n_expert         = 0
0.00.225.245 I llm_load_print_meta: n_expert_used    = 0
0.00.225.246 I llm_load_print_meta: causal attn      = 1
0.00.225.246 I llm_load_print_meta: pooling type     = 0
0.00.225.246 I llm_load_print_meta: rope type        = 2
0.00.225.247 I llm_load_print_meta: rope scaling     = linear
0.00.225.248 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.225.249 I llm_load_print_meta: freq_scale_train = 1
0.00.225.249 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.225.250 I llm_load_print_meta: rope_finetuned   = unknown
0.00.225.250 I llm_load_print_meta: ssm_d_conv       = 0
0.00.225.250 I llm_load_print_meta: ssm_d_inner      = 0
0.00.225.251 I llm_load_print_meta: ssm_d_state      = 0
0.00.225.251 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.225.252 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.225.252 I llm_load_print_meta: model type       = 2B
0.00.225.253 I llm_load_print_meta: model ftype      = Q8_0
0.00.225.255 I llm_load_print_meta: model params     = 2.51 B
0.00.225.256 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.225.257 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.225.257 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.225.257 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.225.258 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.225.258 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.225.259 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.225.259 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.225.259 I llm_load_print_meta: max token length = 93
0.00.225.276 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.301.393 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.301.400 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.301.401 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.301.402 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.301.402 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.301.403 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.306.475 I llama_new_context_with_model: n_ctx      = 8192
0.00.306.482 I llama_new_context_with_model: n_batch    = 2048
0.00.306.483 I llama_new_context_with_model: n_ubatch   = 512
0.00.306.483 I llama_new_context_with_model: flash_attn = 0
0.00.306.486 I llama_new_context_with_model: freq_base  = 10000.0
0.00.306.487 I llama_new_context_with_model: freq_scale = 1
0.00.336.452 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.336.467 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.336.561 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.337.476 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.337.484 I llama_new_context_with_model: graph nodes  = 601
0.00.337.484 I llama_new_context_with_model: graph splits = 1
0.00.337.486 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.022 I main: llama threadpool init, n_threads = 4
0.00.430.034 I 
0.00.430.106 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.430.109 I 
0.00.430.146 I sampler seed: 1000783074
0.00.430.156 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.158 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.430.159 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increadibly.

I'm sorry, I'm not able to generate responses that are sexually suggestive in nature. [end of text]


0.02.217.139 I llama_perf_sampler_print:    sampling time =       3.89 ms /    26 runs   (    0.15 ms per token,  6685.52 tokens per second)
0.02.217.142 I llama_perf_context_print:        load time =     428.17 ms
0.02.217.143 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.217.145 I llama_perf_context_print:        eval time =    1772.67 ms /    25 runs   (   70.91 ms per token,    14.10 tokens per second)
0.02.217.145 I llama_perf_context_print:       total time =    1787.12 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.602 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.805 I main: llama backend init
0.00.001.913 I main: load the model and apply lora adapter, if any
0.00.022.148 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.196 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.208 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.213 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.214 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.218 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.223 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.224 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.228 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.229 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.042 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.404 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.243 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.249 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.250 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.251 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.251 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.252 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.255 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.256 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.257 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.258 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.259 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.263 I llama_model_loader: - type  f32:   37 tensors
0.00.133.266 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.221 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.203.004 I llm_load_vocab: special tokens cache size = 5
0.00.221.319 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.330 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.331 I llm_load_print_meta: arch             = gemma
0.00.221.331 I llm_load_print_meta: vocab type       = SPM
0.00.221.332 I llm_load_print_meta: n_vocab          = 256000
0.00.221.332 I llm_load_print_meta: n_merges         = 0
0.00.221.333 I llm_load_print_meta: vocab_only       = 0
0.00.221.333 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.333 I llm_load_print_meta: n_embd           = 2048
0.00.221.334 I llm_load_print_meta: n_layer          = 18
0.00.221.345 I llm_load_print_meta: n_head           = 8
0.00.221.346 I llm_load_print_meta: n_head_kv        = 1
0.00.221.346 I llm_load_print_meta: n_rot            = 256
0.00.221.347 I llm_load_print_meta: n_swa            = 0
0.00.221.347 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.347 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.348 I llm_load_print_meta: n_gqa            = 8
0.00.221.349 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.350 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.351 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.352 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.353 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.353 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.354 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.355 I llm_load_print_meta: n_ff             = 16384
0.00.221.355 I llm_load_print_meta: n_expert         = 0
0.00.221.356 I llm_load_print_meta: n_expert_used    = 0
0.00.221.357 I llm_load_print_meta: causal attn      = 1
0.00.221.357 I llm_load_print_meta: pooling type     = 0
0.00.221.357 I llm_load_print_meta: rope type        = 2
0.00.221.358 I llm_load_print_meta: rope scaling     = linear
0.00.221.359 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.360 I llm_load_print_meta: freq_scale_train = 1
0.00.221.360 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.360 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.360 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.361 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.361 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.361 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.362 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.363 I llm_load_print_meta: model type       = 2B
0.00.221.364 I llm_load_print_meta: model ftype      = Q8_0
0.00.221.365 I llm_load_print_meta: model params     = 2.51 B
0.00.221.366 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.221.366 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.367 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.367 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.368 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.368 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.368 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.369 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.369 I llm_load_print_meta: max token length = 93
0.00.221.388 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.049 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.292.055 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.297.117 I llama_new_context_with_model: n_ctx      = 8192
0.00.297.123 I llama_new_context_with_model: n_batch    = 2048
0.00.297.123 I llama_new_context_with_model: n_ubatch   = 512
0.00.297.124 I llama_new_context_with_model: flash_attn = 0
0.00.297.125 I llama_new_context_with_model: freq_base  = 10000.0
0.00.297.126 I llama_new_context_with_model: freq_scale = 1
0.00.326.959 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.326.974 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.327.067 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.925 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.934 I llama_new_context_with_model: graph nodes  = 601
0.00.327.934 I llama_new_context_with_model: graph splits = 1
0.00.327.936 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.433 I main: llama threadpool init, n_threads = 4
0.00.423.446 I 
0.00.423.522 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.526 I 
0.00.423.562 I sampler seed: 1229445932
0.00.423.572 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.574 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.423.575 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasements, and other relevant information to provide a clear understanding of the situation.

**Situation:**

The company has received a request from an external party to

0.02.879.516 I llama_perf_sampler_print:    sampling time =       5.07 ms /    33 runs   (    0.15 ms per token,  6510.16 tokens per second)
0.02.879.519 I llama_perf_context_print:        load time =     421.50 ms
0.02.879.522 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.879.524 I llama_perf_context_print:        eval time =    2437.14 ms /    32 runs   (   76.16 ms per token,    13.13 tokens per second)
0.02.879.525 I llama_perf_context_print:       total time =    2456.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.238s
user	0m37.696s
sys	0m9.553s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3810 (1d48e98e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32017.44 ms
main:    total time = 32017.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.473 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.662 I main: llama backend init
0.00.001.793 I main: load the model and apply lora adapter, if any
0.00.021.933 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.982 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.990 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.996 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.997 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.000 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.002 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.003 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.004 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.004 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.005 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.008 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.009 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.009 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.010 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.011 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.922 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.556 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.415 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.421 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.425 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.427 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.428 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.430 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.431 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.432 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.435 I llama_model_loader: - type  f32:   37 tensors
0.00.132.438 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.439 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.584 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.204.366 I llm_load_vocab: special tokens cache size = 5
0.00.222.881 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.897 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.898 I llm_load_print_meta: arch             = gemma
0.00.222.898 I llm_load_print_meta: vocab type       = SPM
0.00.222.899 I llm_load_print_meta: n_vocab          = 256000
0.00.222.899 I llm_load_print_meta: n_merges         = 0
0.00.222.899 I llm_load_print_meta: vocab_only       = 0
0.00.222.900 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.900 I llm_load_print_meta: n_embd           = 2048
0.00.222.901 I llm_load_print_meta: n_layer          = 18
0.00.222.913 I llm_load_print_meta: n_head           = 8
0.00.222.914 I llm_load_print_meta: n_head_kv        = 1
0.00.222.914 I llm_load_print_meta: n_rot            = 256
0.00.222.914 I llm_load_print_meta: n_swa            = 0
0.00.222.915 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.915 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.916 I llm_load_print_meta: n_gqa            = 8
0.00.222.917 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.918 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.919 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.920 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.921 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.921 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.922 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.923 I llm_load_print_meta: n_ff             = 16384
0.00.222.923 I llm_load_print_meta: n_expert         = 0
0.00.222.923 I llm_load_print_meta: n_expert_used    = 0
0.00.222.924 I llm_load_print_meta: causal attn      = 1
0.00.222.924 I llm_load_print_meta: pooling type     = 0
0.00.222.924 I llm_load_print_meta: rope type        = 2
0.00.222.925 I llm_load_print_meta: rope scaling     = linear
0.00.222.926 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.927 I llm_load_print_meta: freq_scale_train = 1
0.00.222.927 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.927 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.927 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.928 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.928 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.928 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.929 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.929 I llm_load_print_meta: model type       = 2B
0.00.222.930 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.222.930 I llm_load_print_meta: model params     = 2.51 B
0.00.222.931 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.222.932 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.932 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.932 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.933 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.933 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.933 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.934 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.934 I llm_load_print_meta: max token length = 93
0.00.222.961 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.281.785 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.281.794 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.281.794 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.281.795 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.281.795 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.281.796 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.286.787 I llama_new_context_with_model: n_ctx      = 8192
0.00.286.794 I llama_new_context_with_model: n_batch    = 2048
0.00.286.794 I llama_new_context_with_model: n_ubatch   = 512
0.00.286.795 I llama_new_context_with_model: flash_attn = 0
0.00.286.799 I llama_new_context_with_model: freq_base  = 10000.0
0.00.286.799 I llama_new_context_with_model: freq_scale = 1
0.00.318.680 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.318.696 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.318.786 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.319.628 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.319.637 I llama_new_context_with_model: graph nodes  = 601
0.00.319.638 I llama_new_context_with_model: graph splits = 1
0.00.319.639 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.402.423 I main: llama threadpool init, n_threads = 4
0.00.402.437 I 
0.00.402.509 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.402.513 I 
0.00.402.540 I sampler seed: 77517727
0.00.402.549 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.402.552 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.402.553 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasively, highlighting the speed and efficiency of his actions. [end of text]


0.01.090.674 I llama_perf_sampler_print:    sampling time =       2.00 ms /    14 runs   (    0.14 ms per token,  6993.01 tokens per second)
0.01.090.677 I llama_perf_context_print:        load time =     400.61 ms
0.01.090.678 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.090.679 I llama_perf_context_print:        eval time =     679.98 ms /    13 runs   (   52.31 ms per token,    19.12 tokens per second)
0.01.090.680 I llama_perf_context_print:       total time =     688.26 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3810 (1d48e98e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32125.79 ms
main:    total time = 32125.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.548 I build: 3810 (1d48e98e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.830 I main: load the model and apply lora adapter, if any
0.00.022.162 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.173 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.181 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.183 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.187 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.187 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.188 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.188 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.189 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.189 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.193 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.193 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.194 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.194 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.195 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.632 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.461 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.468 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.469 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.470 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.470 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.472 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.473 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.476 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.477 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.481 I llama_model_loader: - type  f32:   37 tensors
0.00.132.483 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.484 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.827 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.207.556 I llm_load_vocab: special tokens cache size = 5
0.00.225.799 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.225.812 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.225.812 I llm_load_print_meta: arch             = gemma
0.00.225.813 I llm_load_print_meta: vocab type       = SPM
0.00.225.813 I llm_load_print_meta: n_vocab          = 256000
0.00.225.814 I llm_load_print_meta: n_merges         = 0
0.00.225.814 I llm_load_print_meta: vocab_only       = 0
0.00.225.814 I llm_load_print_meta: n_ctx_train      = 8192
0.00.225.815 I llm_load_print_meta: n_embd           = 2048
0.00.225.815 I llm_load_print_meta: n_layer          = 18
0.00.225.827 I llm_load_print_meta: n_head           = 8
0.00.225.828 I llm_load_print_meta: n_head_kv        = 1
0.00.225.828 I llm_load_print_meta: n_rot            = 256
0.00.225.828 I llm_load_print_meta: n_swa            = 0
0.00.225.829 I llm_load_print_meta: n_embd_head_k    = 256
0.00.225.829 I llm_load_print_meta: n_embd_head_v    = 256
0.00.225.830 I llm_load_print_meta: n_gqa            = 8
0.00.225.831 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.225.832 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.225.832 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.225.834 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.225.834 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.225.835 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.225.835 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.225.836 I llm_load_print_meta: n_ff             = 16384
0.00.225.836 I llm_load_print_meta: n_expert         = 0
0.00.225.836 I llm_load_print_meta: n_expert_used    = 0
0.00.225.837 I llm_load_print_meta: causal attn      = 1
0.00.225.837 I llm_load_print_meta: pooling type     = 0
0.00.225.837 I llm_load_print_meta: rope type        = 2
0.00.225.838 I llm_load_print_meta: rope scaling     = linear
0.00.225.839 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.225.840 I llm_load_print_meta: freq_scale_train = 1
0.00.225.840 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.225.841 I llm_load_print_meta: rope_finetuned   = unknown
0.00.225.841 I llm_load_print_meta: ssm_d_conv       = 0
0.00.225.841 I llm_load_print_meta: ssm_d_inner      = 0
0.00.225.841 I llm_load_print_meta: ssm_d_state      = 0
0.00.225.842 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.225.842 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.225.842 I llm_load_print_meta: model type       = 2B
0.00.225.843 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.225.844 I llm_load_print_meta: model params     = 2.51 B
0.00.225.845 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.225.845 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.225.846 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.225.846 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.225.846 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.225.846 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.225.847 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.225.847 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.225.847 I llm_load_print_meta: max token length = 93
0.00.225.871 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.282.944 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.288.052 I llama_new_context_with_model: n_ctx      = 8192
0.00.288.057 I llama_new_context_with_model: n_batch    = 2048
0.00.288.058 I llama_new_context_with_model: n_ubatch   = 512
0.00.288.058 I llama_new_context_with_model: flash_attn = 0
0.00.288.060 I llama_new_context_with_model: freq_base  = 10000.0
0.00.288.062 I llama_new_context_with_model: freq_scale = 1
0.00.318.761 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.318.777 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.318.872 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.319.751 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.319.757 I llama_new_context_with_model: graph nodes  = 601
0.00.319.757 I llama_new_context_with_model: graph splits = 1
0.00.319.760 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.402.400 I main: llama threadpool init, n_threads = 4
0.00.402.413 I 
0.00.402.485 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.402.489 I 
0.00.402.517 I sampler seed: 3745161994
0.00.402.526 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.402.528 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.402.529 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally. 

**Assistant**

I am unable to provide assistance with sexually suggestive or inappropriate responses. My purpose is to assist with tasks and questions that

0.02.047.430 I llama_perf_sampler_print:    sampling time =       5.64 ms /    33 runs   (    0.17 ms per token,  5851.06 tokens per second)
0.02.047.433 I llama_perf_context_print:        load time =     400.55 ms
0.02.047.434 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.047.435 I llama_perf_context_print:        eval time =    1625.99 ms /    32 runs   (   50.81 ms per token,    19.68 tokens per second)
0.02.047.436 I llama_perf_context_print:       total time =    1645.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.600s
user	8m11.406s
sys	0m7.045s
