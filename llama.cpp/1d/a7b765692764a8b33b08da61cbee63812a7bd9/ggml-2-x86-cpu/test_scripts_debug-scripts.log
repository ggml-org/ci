+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.000.870 I main: load the model and apply lora adapter, if any
0.00.023.855 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.869 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.965 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.980 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.987 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.992 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.993 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.994 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.996 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.997 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.004 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.006 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.008 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.009 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.011 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.662 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.008 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.478 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.489 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.490 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.491 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.493 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.494 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.496 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.499 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.501 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.502 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.503 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.354.505 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.514 I llama_model_loader: - type  f32:   37 tensors
0.00.354.516 I llama_model_loader: - type q8_0:  127 tensors
0.00.578.978 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.093 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.035 I llm_load_vocab: special tokens cache size = 5
0.00.841.270 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.841.345 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.841.349 I llm_load_print_meta: arch             = gemma
0.00.841.350 I llm_load_print_meta: vocab type       = SPM
0.00.841.351 I llm_load_print_meta: n_vocab          = 256000
0.00.841.354 I llm_load_print_meta: n_merges         = 0
0.00.841.354 I llm_load_print_meta: vocab_only       = 0
0.00.841.354 I llm_load_print_meta: n_ctx_train      = 8192
0.00.841.355 I llm_load_print_meta: n_embd           = 2048
0.00.841.355 I llm_load_print_meta: n_layer          = 18
0.00.841.420 I llm_load_print_meta: n_head           = 8
0.00.841.431 I llm_load_print_meta: n_head_kv        = 1
0.00.841.432 I llm_load_print_meta: n_rot            = 256
0.00.841.432 I llm_load_print_meta: n_swa            = 0
0.00.841.433 I llm_load_print_meta: n_embd_head_k    = 256
0.00.841.433 I llm_load_print_meta: n_embd_head_v    = 256
0.00.841.438 I llm_load_print_meta: n_gqa            = 8
0.00.841.443 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.841.450 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.841.451 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.841.453 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.841.453 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.841.454 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.841.454 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.841.460 I llm_load_print_meta: n_ff             = 16384
0.00.841.460 I llm_load_print_meta: n_expert         = 0
0.00.841.475 I llm_load_print_meta: n_expert_used    = 0
0.00.841.478 I llm_load_print_meta: causal attn      = 1
0.00.841.479 I llm_load_print_meta: pooling type     = 0
0.00.841.479 I llm_load_print_meta: rope type        = 2
0.00.841.479 I llm_load_print_meta: rope scaling     = linear
0.00.841.481 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.841.482 I llm_load_print_meta: freq_scale_train = 1
0.00.841.482 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.841.482 I llm_load_print_meta: rope_finetuned   = unknown
0.00.841.483 I llm_load_print_meta: ssm_d_conv       = 0
0.00.841.483 I llm_load_print_meta: ssm_d_inner      = 0
0.00.841.484 I llm_load_print_meta: ssm_d_state      = 0
0.00.841.484 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.841.484 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.841.485 I llm_load_print_meta: model type       = 2B
0.00.841.486 I llm_load_print_meta: model ftype      = Q8_0
0.00.841.487 I llm_load_print_meta: model params     = 2.51 B
0.00.841.488 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.841.490 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.841.491 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.841.491 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.841.492 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.841.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.841.493 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.841.493 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.841.500 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.841.501 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.841.502 I llm_load_print_meta: max token length = 93
0.00.943.841 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.943.853 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.943.854 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.943.855 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.943.856 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.943.857 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.950.026 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.033 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.033 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.034 I llama_new_context_with_model: n_batch       = 2048
0.00.950.034 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.035 I llama_new_context_with_model: flash_attn    = 0
0.00.950.039 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.039 I llama_new_context_with_model: freq_scale    = 1
0.00.950.040 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.965.378 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.965.423 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.965.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.968.139 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.968.143 I llama_new_context_with_model: graph nodes  = 601
0.00.968.143 I llama_new_context_with_model: graph splits = 1
0.00.968.166 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.577.730 I main: llama threadpool init, n_threads = 4
0.01.577.747 I 
0.01.577.868 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.577.872 I 
0.01.578.148 I sampler seed: 3578842509
0.01.578.161 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.578.171 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.578.174 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.578.175 I 
 seconally with the following:

**1. Write a short paragraph about the importance of effective communication in the workplace.**

**2. Discuss the impact of

0.15.257.677 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.43 tokens per second)
0.15.257.681 I llama_perf_context_print:        load time =    1576.76 ms
0.15.257.683 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.257.685 I llama_perf_context_print:        eval time =   13588.21 ms /    32 runs   (  424.63 ms per token,     2.35 tokens per second)
0.15.257.686 I llama_perf_context_print:       total time =   13679.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.023.295 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.392 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.405 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.407 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.412 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.416 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.418 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.419 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.420 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.422 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.428 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.429 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.430 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.432 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.433 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.212 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.829 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.353.207 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.353.215 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.353.217 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.353.218 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.353.219 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.353.221 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.353.222 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.353.226 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.353.227 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.353.229 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.353.230 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.353.232 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.353.240 I llama_model_loader: - type  f32:   37 tensors
0.00.353.243 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.630 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.668.560 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.669.493 I llm_load_vocab: special tokens cache size = 5
0.00.858.276 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.348 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.352 I llm_load_print_meta: arch             = gemma
0.00.858.353 I llm_load_print_meta: vocab type       = SPM
0.00.858.353 I llm_load_print_meta: n_vocab          = 256000
0.00.858.356 I llm_load_print_meta: n_merges         = 0
0.00.858.356 I llm_load_print_meta: vocab_only       = 0
0.00.858.357 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.357 I llm_load_print_meta: n_embd           = 2048
0.00.858.358 I llm_load_print_meta: n_layer          = 18
0.00.858.424 I llm_load_print_meta: n_head           = 8
0.00.858.433 I llm_load_print_meta: n_head_kv        = 1
0.00.858.435 I llm_load_print_meta: n_rot            = 256
0.00.858.436 I llm_load_print_meta: n_swa            = 0
0.00.858.436 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.448 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.455 I llm_load_print_meta: n_gqa            = 8
0.00.858.463 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.468 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.469 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.473 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.474 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.474 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.479 I llm_load_print_meta: n_ff             = 16384
0.00.858.480 I llm_load_print_meta: n_expert         = 0
0.00.858.480 I llm_load_print_meta: n_expert_used    = 0
0.00.858.480 I llm_load_print_meta: causal attn      = 1
0.00.858.481 I llm_load_print_meta: pooling type     = 0
0.00.858.493 I llm_load_print_meta: rope type        = 2
0.00.858.493 I llm_load_print_meta: rope scaling     = linear
0.00.858.495 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.496 I llm_load_print_meta: freq_scale_train = 1
0.00.858.497 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.497 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.497 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.500 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.501 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.501 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.501 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.502 I llm_load_print_meta: model type       = 2B
0.00.858.503 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.504 I llm_load_print_meta: model params     = 2.51 B
0.00.858.504 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.505 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.505 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.514 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.515 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.522 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.523 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.524 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.531 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.533 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.534 I llm_load_print_meta: max token length = 93
0.00.956.402 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.962.486 I llama_new_context_with_model: n_seq_max     = 1
0.00.962.492 I llama_new_context_with_model: n_ctx         = 4096
0.00.962.493 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.962.493 I llama_new_context_with_model: n_batch       = 2048
0.00.962.494 I llama_new_context_with_model: n_ubatch      = 512
0.00.962.494 I llama_new_context_with_model: flash_attn    = 0
0.00.962.498 I llama_new_context_with_model: freq_base     = 10000.0
0.00.962.498 I llama_new_context_with_model: freq_scale    = 1
0.00.962.499 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.978.212 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.978.253 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.978.376 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.980.982 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.980.986 I llama_new_context_with_model: graph nodes  = 601
0.00.980.987 I llama_new_context_with_model: graph splits = 1
0.00.981.009 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.630.406 I main: llama threadpool init, n_threads = 4
0.01.630.422 I 
0.01.630.548 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.630.552 I 
0.01.630.801 I sampler seed: 682899892
0.01.630.816 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.630.825 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.630.828 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.630.828 I 
 increasities
**Answer:** I am unable to provide an answer as the provided prompt contains inappropriate and sexually suggestive content. [end of text]


0.12.268.141 I llama_perf_sampler_print:    sampling time =      38.63 ms /    26 runs   (    1.49 ms per token,   673.10 tokens per second)
0.12.268.145 I llama_perf_context_print:        load time =    1629.47 ms
0.12.268.147 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.268.158 I llama_perf_context_print:        eval time =   10566.36 ms /    25 runs   (  422.65 ms per token,     2.37 tokens per second)
0.12.268.160 I llama_perf_context_print:       total time =   10637.74 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.026.457 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.471 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.568 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.581 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.583 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.591 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.595 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.597 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.598 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.599 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.600 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.608 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.610 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.611 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.612 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.614 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.555 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.288 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.549 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.559 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.560 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.562 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.563 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.564 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.566 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.570 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.571 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.573 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.574 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.576 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.585 I llama_model_loader: - type  f32:   37 tensors
0.00.354.588 I llama_model_loader: - type q8_0:  127 tensors
0.00.601.744 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.672.115 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.673.118 I llm_load_vocab: special tokens cache size = 5
0.00.859.497 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.859.575 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.859.576 I llm_load_print_meta: arch             = gemma
0.00.859.577 I llm_load_print_meta: vocab type       = SPM
0.00.859.577 I llm_load_print_meta: n_vocab          = 256000
0.00.859.580 I llm_load_print_meta: n_merges         = 0
0.00.859.581 I llm_load_print_meta: vocab_only       = 0
0.00.859.582 I llm_load_print_meta: n_ctx_train      = 8192
0.00.859.582 I llm_load_print_meta: n_embd           = 2048
0.00.859.582 I llm_load_print_meta: n_layer          = 18
0.00.859.649 I llm_load_print_meta: n_head           = 8
0.00.859.657 I llm_load_print_meta: n_head_kv        = 1
0.00.859.658 I llm_load_print_meta: n_rot            = 256
0.00.859.658 I llm_load_print_meta: n_swa            = 0
0.00.859.659 I llm_load_print_meta: n_embd_head_k    = 256
0.00.859.659 I llm_load_print_meta: n_embd_head_v    = 256
0.00.859.664 I llm_load_print_meta: n_gqa            = 8
0.00.859.668 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.859.674 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.859.675 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.859.677 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.859.678 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.859.678 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.859.679 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.859.684 I llm_load_print_meta: n_ff             = 16384
0.00.859.685 I llm_load_print_meta: n_expert         = 0
0.00.859.685 I llm_load_print_meta: n_expert_used    = 0
0.00.859.686 I llm_load_print_meta: causal attn      = 1
0.00.859.686 I llm_load_print_meta: pooling type     = 0
0.00.859.687 I llm_load_print_meta: rope type        = 2
0.00.859.687 I llm_load_print_meta: rope scaling     = linear
0.00.859.689 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.859.690 I llm_load_print_meta: freq_scale_train = 1
0.00.859.690 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.859.690 I llm_load_print_meta: rope_finetuned   = unknown
0.00.859.696 I llm_load_print_meta: ssm_d_conv       = 0
0.00.859.697 I llm_load_print_meta: ssm_d_inner      = 0
0.00.859.697 I llm_load_print_meta: ssm_d_state      = 0
0.00.859.697 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.859.698 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.859.698 I llm_load_print_meta: model type       = 2B
0.00.859.699 I llm_load_print_meta: model ftype      = Q8_0
0.00.859.700 I llm_load_print_meta: model params     = 2.51 B
0.00.859.701 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.859.703 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.859.704 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.859.704 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.859.705 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.859.705 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.859.706 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.859.706 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.859.713 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.859.714 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.859.714 I llm_load_print_meta: max token length = 93
0.00.937.643 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.937.654 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.937.655 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.937.656 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.937.657 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.937.657 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.943.413 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.419 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.419 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.419 I llama_new_context_with_model: n_batch       = 2048
0.00.943.420 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.421 I llama_new_context_with_model: flash_attn    = 0
0.00.943.424 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.425 I llama_new_context_with_model: freq_scale    = 1
0.00.943.425 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.958.137 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.958.177 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.958.296 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.960.898 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.960.901 I llama_new_context_with_model: graph nodes  = 601
0.00.960.902 I llama_new_context_with_model: graph splits = 1
0.00.960.925 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.273 I main: llama threadpool init, n_threads = 4
0.01.571.288 I 
0.01.571.407 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.571.411 I 
0.01.571.649 I sampler seed: 279982350
0.01.571.663 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.672 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.675 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.676 I 
 increably. I shall now speak to you of the wondrous things I have witnessed in the land of the rising sun.

**Questions:**
- What wondrous

0.15.236.990 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.64 tokens per second)
0.15.236.994 I llama_perf_context_print:        load time =    1570.28 ms
0.15.236.995 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.236.997 I llama_perf_context_print:        eval time =   13575.40 ms /    32 runs   (  424.23 ms per token,     2.36 tokens per second)
0.15.236.998 I llama_perf_context_print:       total time =   13665.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.676 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.023.764 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.777 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.872 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.887 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.891 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.899 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.903 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.905 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.906 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.907 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.908 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.916 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.920 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.921 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.923 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.925 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.263 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.167 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.465 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.474 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.476 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.477 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.480 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.482 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.486 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.488 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.490 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.491 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.500 I llama_model_loader: - type  f32:   37 tensors
0.00.351.502 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.249 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.647.431 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.648.403 I llm_load_vocab: special tokens cache size = 5
0.00.842.517 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.590 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.595 I llm_load_print_meta: arch             = gemma
0.00.842.595 I llm_load_print_meta: vocab type       = SPM
0.00.842.596 I llm_load_print_meta: n_vocab          = 256000
0.00.842.599 I llm_load_print_meta: n_merges         = 0
0.00.842.599 I llm_load_print_meta: vocab_only       = 0
0.00.842.600 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.600 I llm_load_print_meta: n_embd           = 2048
0.00.842.601 I llm_load_print_meta: n_layer          = 18
0.00.842.664 I llm_load_print_meta: n_head           = 8
0.00.842.673 I llm_load_print_meta: n_head_kv        = 1
0.00.842.674 I llm_load_print_meta: n_rot            = 256
0.00.842.674 I llm_load_print_meta: n_swa            = 0
0.00.842.674 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.675 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.679 I llm_load_print_meta: n_gqa            = 8
0.00.842.684 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.689 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.690 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.692 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.692 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.693 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.693 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.698 I llm_load_print_meta: n_ff             = 16384
0.00.842.698 I llm_load_print_meta: n_expert         = 0
0.00.842.698 I llm_load_print_meta: n_expert_used    = 0
0.00.842.699 I llm_load_print_meta: causal attn      = 1
0.00.842.699 I llm_load_print_meta: pooling type     = 0
0.00.842.699 I llm_load_print_meta: rope type        = 2
0.00.842.700 I llm_load_print_meta: rope scaling     = linear
0.00.842.701 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.702 I llm_load_print_meta: freq_scale_train = 1
0.00.842.702 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.703 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.703 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.703 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.704 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.704 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.704 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.705 I llm_load_print_meta: model type       = 2B
0.00.842.706 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.706 I llm_load_print_meta: model params     = 2.51 B
0.00.842.707 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.707 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.708 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.709 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.710 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.710 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.716 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.717 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.717 I llm_load_print_meta: max token length = 93
0.00.915.740 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.915.751 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.921.655 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.663 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.663 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.663 I llama_new_context_with_model: n_batch       = 2048
0.00.921.664 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.664 I llama_new_context_with_model: flash_attn    = 0
0.00.921.668 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.669 I llama_new_context_with_model: freq_scale    = 1
0.00.921.670 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.936.585 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.625 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.744 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.939.341 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.939.345 I llama_new_context_with_model: graph nodes  = 601
0.00.939.345 I llama_new_context_with_model: graph splits = 1
0.00.939.369 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.548.396 I main: llama threadpool init, n_threads = 4
0.01.548.412 I 
0.01.548.535 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.548.539 I 
0.01.548.780 I sampler seed: 657393568
0.01.548.795 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.805 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.808 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.808 I 
 increasities, and the resulting social and economic consequences in different countries. [end of text]


0.07.917.095 I llama_perf_sampler_print:    sampling time =      23.22 ms /    16 runs   (    1.45 ms per token,   689.06 tokens per second)
0.07.917.097 I llama_perf_context_print:        load time =    1547.39 ms
0.07.917.113 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.917.115 I llama_perf_context_print:        eval time =    6325.46 ms /    15 runs   (  421.70 ms per token,     2.37 tokens per second)
0.07.917.116 I llama_perf_context_print:       total time =    6368.71 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m0.544s
user	3m11.203s
sys	0m9.612s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4266 (1da7b765)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185714.65 ms
main:    total time = 185714.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.023.452 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.462 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.561 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.574 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.578 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.586 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.588 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.590 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.592 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.593 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.594 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.601 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.605 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.606 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.608 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.610 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.123 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.009 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.542 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.553 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.556 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.558 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.559 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.561 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.565 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.566 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.567 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.569 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.350.571 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.579 I llama_model_loader: - type  f32:   37 tensors
0.00.350.582 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.582 I llama_model_loader: - type q6_K:   19 tensors
0.00.596.056 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.682 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.663.617 I llm_load_vocab: special tokens cache size = 5
0.00.868.440 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.868.515 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.868.516 I llm_load_print_meta: arch             = gemma
0.00.868.516 I llm_load_print_meta: vocab type       = SPM
0.00.868.517 I llm_load_print_meta: n_vocab          = 256000
0.00.868.520 I llm_load_print_meta: n_merges         = 0
0.00.868.521 I llm_load_print_meta: vocab_only       = 0
0.00.868.521 I llm_load_print_meta: n_ctx_train      = 8192
0.00.868.521 I llm_load_print_meta: n_embd           = 2048
0.00.868.522 I llm_load_print_meta: n_layer          = 18
0.00.868.585 I llm_load_print_meta: n_head           = 8
0.00.868.592 I llm_load_print_meta: n_head_kv        = 1
0.00.868.593 I llm_load_print_meta: n_rot            = 256
0.00.868.593 I llm_load_print_meta: n_swa            = 0
0.00.868.593 I llm_load_print_meta: n_embd_head_k    = 256
0.00.868.594 I llm_load_print_meta: n_embd_head_v    = 256
0.00.868.598 I llm_load_print_meta: n_gqa            = 8
0.00.868.603 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.868.608 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.868.609 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.868.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.868.611 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.868.611 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.868.612 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.868.617 I llm_load_print_meta: n_ff             = 16384
0.00.868.617 I llm_load_print_meta: n_expert         = 0
0.00.868.617 I llm_load_print_meta: n_expert_used    = 0
0.00.868.618 I llm_load_print_meta: causal attn      = 1
0.00.868.618 I llm_load_print_meta: pooling type     = 0
0.00.868.618 I llm_load_print_meta: rope type        = 2
0.00.868.619 I llm_load_print_meta: rope scaling     = linear
0.00.868.620 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.868.621 I llm_load_print_meta: freq_scale_train = 1
0.00.868.621 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.868.622 I llm_load_print_meta: rope_finetuned   = unknown
0.00.868.622 I llm_load_print_meta: ssm_d_conv       = 0
0.00.868.622 I llm_load_print_meta: ssm_d_inner      = 0
0.00.868.623 I llm_load_print_meta: ssm_d_state      = 0
0.00.868.623 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.868.623 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.868.624 I llm_load_print_meta: model type       = 2B
0.00.868.625 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.868.635 I llm_load_print_meta: model params     = 2.51 B
0.00.868.636 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.868.637 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.868.637 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.868.638 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.868.638 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.868.639 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.868.639 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.868.639 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.868.645 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.868.647 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.868.647 I llm_load_print_meta: max token length = 93
0.00.930.421 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.930.432 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.930.433 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.930.434 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.930.434 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.930.435 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.937.657 I llama_new_context_with_model: n_seq_max     = 1
0.00.937.665 I llama_new_context_with_model: n_ctx         = 4096
0.00.937.666 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.937.666 I llama_new_context_with_model: n_batch       = 2048
0.00.937.667 I llama_new_context_with_model: n_ubatch      = 512
0.00.937.668 I llama_new_context_with_model: flash_attn    = 0
0.00.937.671 I llama_new_context_with_model: freq_base     = 10000.0
0.00.937.672 I llama_new_context_with_model: freq_scale    = 1
0.00.937.673 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.953.178 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.953.218 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.953.342 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.955.962 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.955.967 I llama_new_context_with_model: graph nodes  = 601
0.00.955.967 I llama_new_context_with_model: graph splits = 1
0.00.955.990 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.542.964 I main: llama threadpool init, n_threads = 4
0.01.542.982 I 
0.01.543.103 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.543.107 I 
0.01.543.347 I sampler seed: 2415065098
0.01.543.362 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.543.371 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.543.374 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.543.375 I 
 increamically.

I am not sure how to approach this problem. Can you help me?

**Problem:**

A company has 100 employees

0.12.634.303 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.75 tokens per second)
0.12.634.306 I llama_perf_context_print:        load time =    1542.04 ms
0.12.634.308 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.634.323 I llama_perf_context_print:        eval time =   11001.06 ms /    32 runs   (  343.78 ms per token,     2.91 tokens per second)
0.12.634.324 I llama_perf_context_print:       total time =   11091.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4266 (1da7b765)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185790.81 ms
main:    total time = 185790.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.023.408 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.513 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.528 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.530 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.537 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.544 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.545 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.547 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.548 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.549 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.567 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.569 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.570 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.572 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.573 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.290 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.882 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.205 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.220 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.221 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.222 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.226 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.230 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.231 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.241 I llama_model_loader: - type  f32:   37 tensors
0.00.352.244 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.245 I llama_model_loader: - type q6_K:   19 tensors
0.00.580.009 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.649.123 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.650.060 I llm_load_vocab: special tokens cache size = 5
0.00.845.980 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.055 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.056 I llm_load_print_meta: arch             = gemma
0.00.846.057 I llm_load_print_meta: vocab type       = SPM
0.00.846.058 I llm_load_print_meta: n_vocab          = 256000
0.00.846.061 I llm_load_print_meta: n_merges         = 0
0.00.846.061 I llm_load_print_meta: vocab_only       = 0
0.00.846.062 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.062 I llm_load_print_meta: n_embd           = 2048
0.00.846.062 I llm_load_print_meta: n_layer          = 18
0.00.846.126 I llm_load_print_meta: n_head           = 8
0.00.846.134 I llm_load_print_meta: n_head_kv        = 1
0.00.846.135 I llm_load_print_meta: n_rot            = 256
0.00.846.135 I llm_load_print_meta: n_swa            = 0
0.00.846.136 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.142 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.147 I llm_load_print_meta: n_gqa            = 8
0.00.846.152 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.157 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.158 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.160 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.161 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.161 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.162 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.167 I llm_load_print_meta: n_ff             = 16384
0.00.846.168 I llm_load_print_meta: n_expert         = 0
0.00.846.168 I llm_load_print_meta: n_expert_used    = 0
0.00.846.168 I llm_load_print_meta: causal attn      = 1
0.00.846.169 I llm_load_print_meta: pooling type     = 0
0.00.846.169 I llm_load_print_meta: rope type        = 2
0.00.846.170 I llm_load_print_meta: rope scaling     = linear
0.00.846.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.172 I llm_load_print_meta: freq_scale_train = 1
0.00.846.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.174 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.175 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.176 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.177 I llm_load_print_meta: model type       = 2B
0.00.846.178 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.846.178 I llm_load_print_meta: model params     = 2.51 B
0.00.846.179 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.846.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.180 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.181 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.181 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.182 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.182 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.183 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.190 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.191 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.192 I llm_load_print_meta: max token length = 93
0.00.905.372 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.911.243 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.251 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.251 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.252 I llama_new_context_with_model: n_batch       = 2048
0.00.911.252 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.253 I llama_new_context_with_model: flash_attn    = 0
0.00.911.256 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.256 I llama_new_context_with_model: freq_scale    = 1
0.00.911.257 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.291 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.334 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.451 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.928.912 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.928.916 I llama_new_context_with_model: graph nodes  = 601
0.00.928.917 I llama_new_context_with_model: graph splits = 1
0.00.928.939 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.516.286 I main: llama threadpool init, n_threads = 4
0.01.516.304 I 
0.01.516.423 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.516.427 I 
0.01.516.668 I sampler seed: 1683025733
0.01.516.682 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.516.691 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.516.695 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.516.695 I 
 increasities, and other types of sexually transmitted infections are on the rise.

**a) What are the factors contributing to the rise of sexually transmitted infections?

0.12.631.641 I llama_perf_sampler_print:    sampling time =      49.38 ms /    33 runs   (    1.50 ms per token,   668.33 tokens per second)
0.12.631.644 I llama_perf_context_print:        load time =    1515.36 ms
0.12.631.645 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.631.647 I llama_perf_context_print:        eval time =   11025.80 ms /    32 runs   (  344.56 ms per token,     2.90 tokens per second)
0.12.631.648 I llama_perf_context_print:       total time =   11115.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.687s
user	46m46.303s
sys	0m6.315s
