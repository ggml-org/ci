+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.180 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.379 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.021.037 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.049 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.058 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.064 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.065 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.070 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.071 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.071 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.072 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.072 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.073 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.078 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.078 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.079 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.080 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.080 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.834 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.163 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.034 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.039 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.040 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.041 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.042 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.043 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.045 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.046 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.046 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.047 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.048 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.052 I llama_model_loader: - type  f32:   37 tensors
0.00.132.053 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.579 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.570 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.097 I llm_load_vocab: special tokens cache size = 5
0.00.275.066 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.083 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.084 I llm_load_print_meta: arch             = gemma
0.00.275.084 I llm_load_print_meta: vocab type       = SPM
0.00.275.085 I llm_load_print_meta: n_vocab          = 256000
0.00.275.085 I llm_load_print_meta: n_merges         = 0
0.00.275.085 I llm_load_print_meta: vocab_only       = 0
0.00.275.086 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.086 I llm_load_print_meta: n_embd           = 2048
0.00.275.086 I llm_load_print_meta: n_layer          = 18
0.00.275.099 I llm_load_print_meta: n_head           = 8
0.00.275.100 I llm_load_print_meta: n_head_kv        = 1
0.00.275.100 I llm_load_print_meta: n_rot            = 256
0.00.275.100 I llm_load_print_meta: n_swa            = 0
0.00.275.100 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.101 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.102 I llm_load_print_meta: n_gqa            = 8
0.00.275.103 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.104 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.105 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.106 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.107 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.107 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.107 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.108 I llm_load_print_meta: n_ff             = 16384
0.00.275.108 I llm_load_print_meta: n_expert         = 0
0.00.275.109 I llm_load_print_meta: n_expert_used    = 0
0.00.275.109 I llm_load_print_meta: causal attn      = 1
0.00.275.109 I llm_load_print_meta: pooling type     = 0
0.00.275.109 I llm_load_print_meta: rope type        = 2
0.00.275.110 I llm_load_print_meta: rope scaling     = linear
0.00.275.111 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.111 I llm_load_print_meta: freq_scale_train = 1
0.00.275.112 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.112 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.112 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.113 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.113 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.113 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.113 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.114 I llm_load_print_meta: model type       = 2B
0.00.275.114 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.115 I llm_load_print_meta: model params     = 2.51 B
0.00.275.116 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.116 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.117 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.117 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.117 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.118 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.118 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.118 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.119 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.119 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.119 I llm_load_print_meta: max token length = 93
0.00.377.103 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.377.108 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.377.109 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.377.110 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.377.111 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.377.111 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.382.467 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.474 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.474 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.475 I llama_new_context_with_model: n_batch       = 2048
0.00.382.476 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.476 I llama_new_context_with_model: flash_attn    = 0
0.00.382.478 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.479 I llama_new_context_with_model: freq_scale    = 1
0.00.382.480 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.619 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.633 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.396.725 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.397.971 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.397.978 I llama_new_context_with_model: graph nodes  = 601
0.00.397.978 I llama_new_context_with_model: graph splits = 1
0.00.397.981 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.036 I main: llama threadpool init, n_threads = 4
0.00.483.053 I 
0.00.483.139 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.483.143 I 
0.00.483.206 I sampler seed: 2944710306
0.00.483.218 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.483.229 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.483.234 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.483.234 I 
 increasities

The text contains a number of inappropriate and potentially sexually suggestive expressions. I am unable to provide a response that includes sexually suggestive or inappropriate content. [end of text]


0.02.749.651 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6351.04 tokens per second)
0.02.749.654 I llama_perf_context_print:        load time =     482.63 ms
0.02.749.655 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.749.656 I llama_perf_context_print:        eval time =    2246.24 ms /    32 runs   (   70.20 ms per token,    14.25 tokens per second)
0.02.749.659 I llama_perf_context_print:       total time =    2266.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.583 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.790 I main: load the model and apply lora adapter, if any
0.00.021.904 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.917 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.924 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.925 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.929 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.930 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.930 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.931 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.931 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.931 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.937 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.937 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.938 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.938 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.939 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.664 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.264 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.148 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.156 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.157 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.157 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.158 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.158 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.159 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.163 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.163 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.164 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.164 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.165 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.169 I llama_model_loader: - type  f32:   37 tensors
0.00.133.170 I llama_model_loader: - type q8_0:  127 tensors
0.00.229.293 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.282.716 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.283.423 I llm_load_vocab: special tokens cache size = 5
0.00.304.671 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.304.690 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.304.691 I llm_load_print_meta: arch             = gemma
0.00.304.691 I llm_load_print_meta: vocab type       = SPM
0.00.304.692 I llm_load_print_meta: n_vocab          = 256000
0.00.304.692 I llm_load_print_meta: n_merges         = 0
0.00.304.693 I llm_load_print_meta: vocab_only       = 0
0.00.304.693 I llm_load_print_meta: n_ctx_train      = 8192
0.00.304.693 I llm_load_print_meta: n_embd           = 2048
0.00.304.693 I llm_load_print_meta: n_layer          = 18
0.00.304.706 I llm_load_print_meta: n_head           = 8
0.00.304.707 I llm_load_print_meta: n_head_kv        = 1
0.00.304.707 I llm_load_print_meta: n_rot            = 256
0.00.304.707 I llm_load_print_meta: n_swa            = 0
0.00.304.707 I llm_load_print_meta: n_embd_head_k    = 256
0.00.304.708 I llm_load_print_meta: n_embd_head_v    = 256
0.00.304.708 I llm_load_print_meta: n_gqa            = 8
0.00.304.709 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.304.710 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.304.711 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.304.713 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.304.714 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.304.714 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.304.714 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.304.715 I llm_load_print_meta: n_ff             = 16384
0.00.304.715 I llm_load_print_meta: n_expert         = 0
0.00.304.715 I llm_load_print_meta: n_expert_used    = 0
0.00.304.716 I llm_load_print_meta: causal attn      = 1
0.00.304.716 I llm_load_print_meta: pooling type     = 0
0.00.304.716 I llm_load_print_meta: rope type        = 2
0.00.304.716 I llm_load_print_meta: rope scaling     = linear
0.00.304.718 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.304.718 I llm_load_print_meta: freq_scale_train = 1
0.00.304.719 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.304.719 I llm_load_print_meta: rope_finetuned   = unknown
0.00.304.720 I llm_load_print_meta: ssm_d_conv       = 0
0.00.304.720 I llm_load_print_meta: ssm_d_inner      = 0
0.00.304.721 I llm_load_print_meta: ssm_d_state      = 0
0.00.304.721 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.304.722 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.304.734 I llm_load_print_meta: model type       = 2B
0.00.304.735 I llm_load_print_meta: model ftype      = Q8_0
0.00.304.736 I llm_load_print_meta: model params     = 2.51 B
0.00.304.737 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.304.738 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.304.739 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.304.739 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.304.740 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.304.740 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.304.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.304.741 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.304.742 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.304.742 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.304.743 I llm_load_print_meta: max token length = 93
0.00.397.985 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.403.350 I llama_new_context_with_model: n_seq_max     = 1
0.00.403.357 I llama_new_context_with_model: n_ctx         = 4096
0.00.403.358 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.403.359 I llama_new_context_with_model: n_batch       = 2048
0.00.403.359 I llama_new_context_with_model: n_ubatch      = 512
0.00.403.359 I llama_new_context_with_model: flash_attn    = 0
0.00.403.363 I llama_new_context_with_model: freq_base     = 10000.0
0.00.403.363 I llama_new_context_with_model: freq_scale    = 1
0.00.403.364 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.418.788 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.418.801 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.418.894 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.420.231 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.420.238 I llama_new_context_with_model: graph nodes  = 601
0.00.420.238 I llama_new_context_with_model: graph splits = 1
0.00.420.240 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.503.578 I main: llama threadpool init, n_threads = 4
0.00.503.593 I 
0.00.503.667 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.503.670 I 
0.00.503.720 I sampler seed: 4278238979
0.00.503.732 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.503.743 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.503.747 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.503.747 I 
 seconded by a large number of people and possessing a unique combination of features that make it desirable to many users.

This product or service is currently being marketed

0.02.757.669 I llama_perf_sampler_print:    sampling time =       5.90 ms /    33 runs   (    0.18 ms per token,  5597.01 tokens per second)
0.02.757.671 I llama_perf_context_print:        load time =     502.77 ms
0.02.757.673 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.757.674 I llama_perf_context_print:        eval time =    2233.26 ms /    32 runs   (   69.79 ms per token,    14.33 tokens per second)
0.02.757.675 I llama_perf_context_print:       total time =    2254.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.263 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.273 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.289 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.293 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.296 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.297 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.298 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.298 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.299 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.299 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.304 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.304 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.305 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.306 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.307 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.821 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.739 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.547 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.555 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.556 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.557 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.562 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.563 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.564 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.565 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.569 I llama_model_loader: - type  f32:   37 tensors
0.00.131.570 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.959 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.786 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.444 I llm_load_vocab: special tokens cache size = 5
0.00.266.564 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.581 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.582 I llm_load_print_meta: arch             = gemma
0.00.266.582 I llm_load_print_meta: vocab type       = SPM
0.00.266.583 I llm_load_print_meta: n_vocab          = 256000
0.00.266.584 I llm_load_print_meta: n_merges         = 0
0.00.266.584 I llm_load_print_meta: vocab_only       = 0
0.00.266.585 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.585 I llm_load_print_meta: n_embd           = 2048
0.00.266.585 I llm_load_print_meta: n_layer          = 18
0.00.266.597 I llm_load_print_meta: n_head           = 8
0.00.266.598 I llm_load_print_meta: n_head_kv        = 1
0.00.266.598 I llm_load_print_meta: n_rot            = 256
0.00.266.598 I llm_load_print_meta: n_swa            = 0
0.00.266.599 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.599 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.600 I llm_load_print_meta: n_gqa            = 8
0.00.266.601 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.602 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.603 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.604 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.605 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.606 I llm_load_print_meta: n_ff             = 16384
0.00.266.606 I llm_load_print_meta: n_expert         = 0
0.00.266.606 I llm_load_print_meta: n_expert_used    = 0
0.00.266.607 I llm_load_print_meta: causal attn      = 1
0.00.266.607 I llm_load_print_meta: pooling type     = 0
0.00.266.607 I llm_load_print_meta: rope type        = 2
0.00.266.607 I llm_load_print_meta: rope scaling     = linear
0.00.266.609 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.609 I llm_load_print_meta: freq_scale_train = 1
0.00.266.610 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.610 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.611 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.611 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.611 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.612 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.612 I llm_load_print_meta: model type       = 2B
0.00.266.612 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.613 I llm_load_print_meta: model params     = 2.51 B
0.00.266.614 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.614 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.615 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.615 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.616 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.616 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.616 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.617 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.617 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.617 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.618 I llm_load_print_meta: max token length = 93
0.00.342.401 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.410 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.411 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.412 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.412 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.413 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.813 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.820 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.820 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.821 I llama_new_context_with_model: n_batch       = 2048
0.00.347.821 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.822 I llama_new_context_with_model: flash_attn    = 0
0.00.347.825 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.826 I llama_new_context_with_model: freq_scale    = 1
0.00.347.827 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.434 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.449 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.820 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.827 I llama_new_context_with_model: graph nodes  = 601
0.00.364.828 I llama_new_context_with_model: graph splits = 1
0.00.364.830 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.674 I main: llama threadpool init, n_threads = 4
0.00.449.689 I 
0.00.449.761 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.449.767 I 
0.00.449.809 I sampler seed: 4273625111
0.00.449.817 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.819 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.820 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.820 I 
 increasities.

I'm not sure what this means. Can you please explain?

I apologize, but I am unable to provide an explanation as the

0.02.723.536 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6993.01 tokens per second)
0.02.723.538 I llama_perf_context_print:        load time =     448.91 ms
0.02.723.540 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.541 I llama_perf_context_print:        eval time =    2254.27 ms /    32 runs   (   70.45 ms per token,    14.20 tokens per second)
0.02.723.542 I llama_perf_context_print:       total time =    2273.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.521 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.961 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.972 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.980 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.986 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.987 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.991 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.992 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.993 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.993 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.994 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.995 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.999 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.000 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.001 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.002 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.003 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.457 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.053 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.911 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.917 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.918 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.918 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.919 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.920 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.920 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.923 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.925 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.926 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.927 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.930 I llama_model_loader: - type  f32:   37 tensors
0.00.132.932 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.332 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.750 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.378 I llm_load_vocab: special tokens cache size = 5
0.00.282.415 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.433 I llm_load_print_meta: arch             = gemma
0.00.282.433 I llm_load_print_meta: vocab type       = SPM
0.00.282.434 I llm_load_print_meta: n_vocab          = 256000
0.00.282.435 I llm_load_print_meta: n_merges         = 0
0.00.282.435 I llm_load_print_meta: vocab_only       = 0
0.00.282.436 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.436 I llm_load_print_meta: n_embd           = 2048
0.00.282.436 I llm_load_print_meta: n_layer          = 18
0.00.282.449 I llm_load_print_meta: n_head           = 8
0.00.282.450 I llm_load_print_meta: n_head_kv        = 1
0.00.282.450 I llm_load_print_meta: n_rot            = 256
0.00.282.450 I llm_load_print_meta: n_swa            = 0
0.00.282.451 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.451 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.452 I llm_load_print_meta: n_gqa            = 8
0.00.282.453 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.454 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.455 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.456 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.456 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.457 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.457 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.458 I llm_load_print_meta: n_ff             = 16384
0.00.282.458 I llm_load_print_meta: n_expert         = 0
0.00.282.458 I llm_load_print_meta: n_expert_used    = 0
0.00.282.459 I llm_load_print_meta: causal attn      = 1
0.00.282.459 I llm_load_print_meta: pooling type     = 0
0.00.282.459 I llm_load_print_meta: rope type        = 2
0.00.282.459 I llm_load_print_meta: rope scaling     = linear
0.00.282.460 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.461 I llm_load_print_meta: freq_scale_train = 1
0.00.282.462 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.462 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.462 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.462 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.463 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.463 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.463 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.464 I llm_load_print_meta: model type       = 2B
0.00.282.464 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.465 I llm_load_print_meta: model params     = 2.51 B
0.00.282.466 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.466 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.466 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.467 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.467 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.468 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.468 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.468 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.469 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.469 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.469 I llm_load_print_meta: max token length = 93
0.00.357.050 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.357.056 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.362.209 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.216 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.216 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.217 I llama_new_context_with_model: n_batch       = 2048
0.00.362.217 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.218 I llama_new_context_with_model: flash_attn    = 0
0.00.362.221 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.221 I llama_new_context_with_model: freq_scale    = 1
0.00.362.223 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.755 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.772 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.868 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.182 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.189 I llama_new_context_with_model: graph nodes  = 601
0.00.378.190 I llama_new_context_with_model: graph splits = 1
0.00.378.192 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.013 I main: llama threadpool init, n_threads = 4
0.00.467.029 I 
0.00.467.101 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.104 I 
0.00.467.146 I sampler seed: 1534349730
0.00.467.157 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.169 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.172 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.173 I 
 increasities and other vulnerabilities in information systems.

**Answer:**

**Cybersecurity is a critical aspect of modern life, and it is imperative to prioritize cybersecurity

0.02.888.527 I llama_perf_sampler_print:    sampling time =       5.18 ms /    33 runs   (    0.16 ms per token,  6369.43 tokens per second)
0.02.888.529 I llama_perf_context_print:        load time =     466.25 ms
0.02.888.530 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.888.532 I llama_perf_context_print:        eval time =    2402.17 ms /    32 runs   (   75.07 ms per token,    13.32 tokens per second)
0.02.888.532 I llama_perf_context_print:       total time =    2421.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.665s
user	0m39.786s
sys	0m9.415s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4266 (1da7b765)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40232.15 ms
main:    total time = 40232.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.544 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.021.178 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.186 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.195 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.199 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.200 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.203 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.206 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.207 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.210 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.211 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.212 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.212 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.213 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.662 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.572 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.363 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.370 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.370 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.371 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.371 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.372 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.373 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.375 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.376 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.376 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.377 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.378 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.381 I llama_model_loader: - type  f32:   37 tensors
0.00.131.381 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.382 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.200 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.517 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.060 I llm_load_vocab: special tokens cache size = 5
0.00.263.989 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.004 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.005 I llm_load_print_meta: arch             = gemma
0.00.264.006 I llm_load_print_meta: vocab type       = SPM
0.00.264.006 I llm_load_print_meta: n_vocab          = 256000
0.00.264.007 I llm_load_print_meta: n_merges         = 0
0.00.264.007 I llm_load_print_meta: vocab_only       = 0
0.00.264.018 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.019 I llm_load_print_meta: n_embd           = 2048
0.00.264.020 I llm_load_print_meta: n_layer          = 18
0.00.264.030 I llm_load_print_meta: n_head           = 8
0.00.264.032 I llm_load_print_meta: n_head_kv        = 1
0.00.264.034 I llm_load_print_meta: n_rot            = 256
0.00.264.035 I llm_load_print_meta: n_swa            = 0
0.00.264.035 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.035 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.036 I llm_load_print_meta: n_gqa            = 8
0.00.264.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.038 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.039 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.041 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.042 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.042 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.042 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.043 I llm_load_print_meta: n_ff             = 16384
0.00.264.044 I llm_load_print_meta: n_expert         = 0
0.00.264.044 I llm_load_print_meta: n_expert_used    = 0
0.00.264.044 I llm_load_print_meta: causal attn      = 1
0.00.264.044 I llm_load_print_meta: pooling type     = 0
0.00.264.045 I llm_load_print_meta: rope type        = 2
0.00.264.046 I llm_load_print_meta: rope scaling     = linear
0.00.264.047 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.048 I llm_load_print_meta: freq_scale_train = 1
0.00.264.048 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.049 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.050 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.050 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.050 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.050 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.051 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.051 I llm_load_print_meta: model type       = 2B
0.00.264.052 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.053 I llm_load_print_meta: model params     = 2.51 B
0.00.264.053 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.054 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.054 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.055 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.055 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.056 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.056 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.056 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.057 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.058 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.058 I llm_load_print_meta: max token length = 93
0.00.324.262 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.324.269 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.324.270 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.324.270 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.324.271 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.324.272 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.329.571 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.577 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.577 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.578 I llama_new_context_with_model: n_batch       = 2048
0.00.329.578 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.579 I llama_new_context_with_model: flash_attn    = 0
0.00.329.581 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.582 I llama_new_context_with_model: freq_scale    = 1
0.00.329.582 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.409 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.424 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.516 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.782 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.787 I llama_new_context_with_model: graph nodes  = 601
0.00.345.787 I llama_new_context_with_model: graph splits = 1
0.00.345.789 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.927 I main: llama threadpool init, n_threads = 4
0.00.421.944 I 
0.00.422.019 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.422.022 I 
0.00.422.071 I sampler seed: 1692084023
0.00.422.084 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.088 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.098 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.101 I 
 increasities in the novel.

The novel "The Great Gatsby" is renowned for its vivid descriptions and exploration of themes like materialism, social hierarchy, and the

0.02.041.130 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6730.57 tokens per second)
0.02.041.132 I llama_perf_context_print:        load time =     421.17 ms
0.02.041.136 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.041.137 I llama_perf_context_print:        eval time =    1600.47 ms /    32 runs   (   50.01 ms per token,    19.99 tokens per second)
0.02.041.138 I llama_perf_context_print:       total time =    1619.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4266 (1da7b765)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40217.14 ms
main:    total time = 40217.14 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.548 I build: 4266 (1da7b765) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.045 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.061 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.067 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.068 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.072 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.073 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.075 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.075 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.076 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.080 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.080 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.081 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.081 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.082 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.990 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.990 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.881 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.890 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.891 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.891 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.892 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.893 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.893 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.896 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.896 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.900 I llama_model_loader: - type  f32:   37 tensors
0.00.131.901 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.901 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.780 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.824 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.363 I llm_load_vocab: special tokens cache size = 5
0.00.285.831 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.849 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.850 I llm_load_print_meta: arch             = gemma
0.00.285.851 I llm_load_print_meta: vocab type       = SPM
0.00.285.851 I llm_load_print_meta: n_vocab          = 256000
0.00.285.851 I llm_load_print_meta: n_merges         = 0
0.00.285.852 I llm_load_print_meta: vocab_only       = 0
0.00.285.852 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.853 I llm_load_print_meta: n_embd           = 2048
0.00.285.853 I llm_load_print_meta: n_layer          = 18
0.00.285.865 I llm_load_print_meta: n_head           = 8
0.00.285.866 I llm_load_print_meta: n_head_kv        = 1
0.00.285.866 I llm_load_print_meta: n_rot            = 256
0.00.285.866 I llm_load_print_meta: n_swa            = 0
0.00.285.867 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.867 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.868 I llm_load_print_meta: n_gqa            = 8
0.00.285.869 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.869 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.871 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.872 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.872 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.873 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.873 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.874 I llm_load_print_meta: n_ff             = 16384
0.00.285.874 I llm_load_print_meta: n_expert         = 0
0.00.285.874 I llm_load_print_meta: n_expert_used    = 0
0.00.285.875 I llm_load_print_meta: causal attn      = 1
0.00.285.875 I llm_load_print_meta: pooling type     = 0
0.00.285.875 I llm_load_print_meta: rope type        = 2
0.00.285.876 I llm_load_print_meta: rope scaling     = linear
0.00.285.877 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.878 I llm_load_print_meta: freq_scale_train = 1
0.00.285.878 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.878 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.879 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.879 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.879 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.879 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.880 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.880 I llm_load_print_meta: model type       = 2B
0.00.285.881 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.881 I llm_load_print_meta: model params     = 2.51 B
0.00.285.882 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.882 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.883 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.883 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.883 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.884 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.884 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.884 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.885 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.886 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.886 I llm_load_print_meta: max token length = 93
0.00.342.580 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.347.719 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.726 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.726 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.727 I llama_new_context_with_model: n_batch       = 2048
0.00.347.727 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.728 I llama_new_context_with_model: flash_attn    = 0
0.00.347.731 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.732 I llama_new_context_with_model: freq_scale    = 1
0.00.347.733 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.070 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.085 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.177 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.419 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.425 I llama_new_context_with_model: graph nodes  = 601
0.00.364.425 I llama_new_context_with_model: graph splits = 1
0.00.364.427 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.990 I main: llama threadpool init, n_threads = 4
0.00.441.007 I 
0.00.441.082 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.441.086 I 
0.00.441.132 I sampler seed: 2805168483
0.00.441.143 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.150 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.154 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.154 I 
 strick, a young man, is a victim of circumstance and has lost everything. He has been through immense pain and loss, but he has emerged stronger and wiser

0.02.055.168 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6457.93 tokens per second)
0.02.055.170 I llama_perf_context_print:        load time =     440.22 ms
0.02.055.172 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.055.175 I llama_perf_context_print:        eval time =    1594.48 ms /    32 runs   (   49.83 ms per token,    20.07 tokens per second)
0.02.055.175 I llama_perf_context_print:       total time =    1614.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.426s
user	10m24.850s
sys	0m6.815s
