+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.581 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.001.869 I main: load the model and apply lora adapter, if any
0.00.022.227 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.277 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.291 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.292 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.296 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.297 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.298 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.298 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.299 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.300 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.305 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.306 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.306 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.307 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.307 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.500 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.365 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.281 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.288 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.289 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.290 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.291 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.292 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.293 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.296 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.297 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.298 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.299 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.300 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.305 I llama_model_loader: - type  f32:   37 tensors
0.00.134.307 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.586 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.218.189 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.219.006 I llm_load_vocab: special tokens cache size = 5
0.00.240.511 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.240.528 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.240.528 I llm_load_print_meta: arch             = gemma
0.00.240.529 I llm_load_print_meta: vocab type       = SPM
0.00.240.529 I llm_load_print_meta: n_vocab          = 256000
0.00.240.530 I llm_load_print_meta: n_merges         = 0
0.00.240.530 I llm_load_print_meta: vocab_only       = 0
0.00.240.531 I llm_load_print_meta: n_ctx_train      = 8192
0.00.240.531 I llm_load_print_meta: n_embd           = 2048
0.00.240.531 I llm_load_print_meta: n_layer          = 18
0.00.240.544 I llm_load_print_meta: n_head           = 8
0.00.240.545 I llm_load_print_meta: n_head_kv        = 1
0.00.240.546 I llm_load_print_meta: n_rot            = 256
0.00.240.546 I llm_load_print_meta: n_swa            = 0
0.00.240.546 I llm_load_print_meta: n_embd_head_k    = 256
0.00.240.546 I llm_load_print_meta: n_embd_head_v    = 256
0.00.240.547 I llm_load_print_meta: n_gqa            = 8
0.00.240.548 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.240.549 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.240.550 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.240.552 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.240.552 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.240.553 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.240.553 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.240.554 I llm_load_print_meta: n_ff             = 16384
0.00.240.554 I llm_load_print_meta: n_expert         = 0
0.00.240.554 I llm_load_print_meta: n_expert_used    = 0
0.00.240.555 I llm_load_print_meta: causal attn      = 1
0.00.240.555 I llm_load_print_meta: pooling type     = 0
0.00.240.555 I llm_load_print_meta: rope type        = 2
0.00.240.555 I llm_load_print_meta: rope scaling     = linear
0.00.240.557 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.240.557 I llm_load_print_meta: freq_scale_train = 1
0.00.240.558 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.240.559 I llm_load_print_meta: rope_finetuned   = unknown
0.00.240.559 I llm_load_print_meta: ssm_d_conv       = 0
0.00.240.559 I llm_load_print_meta: ssm_d_inner      = 0
0.00.240.559 I llm_load_print_meta: ssm_d_state      = 0
0.00.240.560 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.240.560 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.240.560 I llm_load_print_meta: model type       = 2B
0.00.240.561 I llm_load_print_meta: model ftype      = Q8_0
0.00.240.562 I llm_load_print_meta: model params     = 2.51 B
0.00.240.563 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.240.563 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.240.563 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.240.564 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.240.564 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.240.564 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.240.565 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.240.565 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.240.566 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.240.566 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.240.566 I llm_load_print_meta: max token length = 93
0.00.240.588 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.338.696 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.338.706 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.338.706 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.338.707 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.338.708 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.338.708 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.343.909 I llama_new_context_with_model: n_ctx      = 8192
0.00.343.916 I llama_new_context_with_model: n_batch    = 2048
0.00.343.916 I llama_new_context_with_model: n_ubatch   = 512
0.00.343.917 I llama_new_context_with_model: flash_attn = 0
0.00.343.920 I llama_new_context_with_model: freq_base  = 10000.0
0.00.343.921 I llama_new_context_with_model: freq_scale = 1
0.00.374.439 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.374.453 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.374.548 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.515 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.375.523 I llama_new_context_with_model: graph nodes  = 601
0.00.375.523 I llama_new_context_with_model: graph splits = 1
0.00.375.525 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.834 I main: llama threadpool init, n_threads = 4
0.00.470.849 I 
0.00.470.925 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.928 I 
0.00.470.966 I sampler seed: 2200978996
0.00.470.975 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.978 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.470.978 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.979 I 
 increasities for the benefit of the common good.

The statement above is about:

a) Government intervention
b) Economic efficiency
c) Social justice

0.02.789.465 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6889.35 tokens per second)
0.02.789.469 I llama_perf_context_print:        load time =     468.95 ms
0.02.789.470 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.789.472 I llama_perf_context_print:        eval time =    2299.40 ms /    32 runs   (   71.86 ms per token,    13.92 tokens per second)
0.02.789.473 I llama_perf_context_print:       total time =    2318.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.633 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.863 I main: llama backend init
0.00.001.997 I main: load the model and apply lora adapter, if any
0.00.022.331 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.341 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.348 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.349 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.354 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.355 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.355 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.356 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.356 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.357 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.363 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.363 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.364 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.364 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.365 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.160 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.110 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.036 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.044 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.045 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.046 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.047 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.048 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.048 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.051 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.052 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.052 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.134.053 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.056 I llama_model_loader: - type  f32:   37 tensors
0.00.134.059 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.307 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.230.487 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.231.298 I llm_load_vocab: special tokens cache size = 5
0.00.252.723 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.252.742 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.252.743 I llm_load_print_meta: arch             = gemma
0.00.252.743 I llm_load_print_meta: vocab type       = SPM
0.00.252.744 I llm_load_print_meta: n_vocab          = 256000
0.00.252.745 I llm_load_print_meta: n_merges         = 0
0.00.252.745 I llm_load_print_meta: vocab_only       = 0
0.00.252.746 I llm_load_print_meta: n_ctx_train      = 8192
0.00.252.746 I llm_load_print_meta: n_embd           = 2048
0.00.252.746 I llm_load_print_meta: n_layer          = 18
0.00.252.761 I llm_load_print_meta: n_head           = 8
0.00.252.762 I llm_load_print_meta: n_head_kv        = 1
0.00.252.763 I llm_load_print_meta: n_rot            = 256
0.00.252.763 I llm_load_print_meta: n_swa            = 0
0.00.252.763 I llm_load_print_meta: n_embd_head_k    = 256
0.00.252.763 I llm_load_print_meta: n_embd_head_v    = 256
0.00.252.764 I llm_load_print_meta: n_gqa            = 8
0.00.252.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.252.766 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.252.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.252.769 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.252.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.252.770 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.252.770 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.252.771 I llm_load_print_meta: n_ff             = 16384
0.00.252.771 I llm_load_print_meta: n_expert         = 0
0.00.252.771 I llm_load_print_meta: n_expert_used    = 0
0.00.252.772 I llm_load_print_meta: causal attn      = 1
0.00.252.772 I llm_load_print_meta: pooling type     = 0
0.00.252.772 I llm_load_print_meta: rope type        = 2
0.00.252.772 I llm_load_print_meta: rope scaling     = linear
0.00.252.774 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.252.774 I llm_load_print_meta: freq_scale_train = 1
0.00.252.775 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.252.775 I llm_load_print_meta: rope_finetuned   = unknown
0.00.252.775 I llm_load_print_meta: ssm_d_conv       = 0
0.00.252.776 I llm_load_print_meta: ssm_d_inner      = 0
0.00.252.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.252.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.252.777 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.252.777 I llm_load_print_meta: model type       = 2B
0.00.252.778 I llm_load_print_meta: model ftype      = Q8_0
0.00.252.778 I llm_load_print_meta: model params     = 2.51 B
0.00.252.779 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.252.779 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.252.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.252.780 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.252.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.252.781 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.252.781 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.252.782 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.252.782 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.252.783 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.252.783 I llm_load_print_meta: max token length = 93
0.00.252.812 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.345.406 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.350.637 I llama_new_context_with_model: n_ctx      = 8192
0.00.350.645 I llama_new_context_with_model: n_batch    = 2048
0.00.350.645 I llama_new_context_with_model: n_ubatch   = 512
0.00.350.646 I llama_new_context_with_model: flash_attn = 0
0.00.350.649 I llama_new_context_with_model: freq_base  = 10000.0
0.00.350.650 I llama_new_context_with_model: freq_scale = 1
0.00.381.325 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.381.342 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.381.434 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.338 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.382.345 I llama_new_context_with_model: graph nodes  = 601
0.00.382.345 I llama_new_context_with_model: graph splits = 1
0.00.382.348 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.718 I main: llama threadpool init, n_threads = 4
0.00.472.732 I 
0.00.472.809 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.472.812 I 
0.00.472.849 I sampler seed: 1475014986
0.00.472.858 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.861 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.472.861 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.861 I 
 increasities and the ways they have shaped the development of science and technology.

**Answer:**

**The impact of scientific discoveries on societal development through scientific exagger

0.02.728.774 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6556.73 tokens per second)
0.02.728.776 I llama_perf_context_print:        load time =     470.70 ms
0.02.728.777 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.778 I llama_perf_context_print:        eval time =    2237.25 ms /    32 runs   (   69.91 ms per token,    14.30 tokens per second)
0.02.728.779 I llama_perf_context_print:       total time =    2256.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.529 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.001.856 I main: load the model and apply lora adapter, if any
0.00.022.127 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.176 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.183 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.189 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.190 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.194 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.195 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.196 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.196 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.197 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.198 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.202 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.203 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.204 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.205 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.935 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.886 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.762 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.769 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.770 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.771 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.772 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.772 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.774 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.776 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.777 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.778 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.779 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.779 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.783 I llama_model_loader: - type  f32:   37 tensors
0.00.133.786 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.412 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.216.025 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.216.910 I llm_load_vocab: special tokens cache size = 5
0.00.238.348 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.238.364 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.238.365 I llm_load_print_meta: arch             = gemma
0.00.238.365 I llm_load_print_meta: vocab type       = SPM
0.00.238.366 I llm_load_print_meta: n_vocab          = 256000
0.00.238.367 I llm_load_print_meta: n_merges         = 0
0.00.238.367 I llm_load_print_meta: vocab_only       = 0
0.00.238.368 I llm_load_print_meta: n_ctx_train      = 8192
0.00.238.368 I llm_load_print_meta: n_embd           = 2048
0.00.238.368 I llm_load_print_meta: n_layer          = 18
0.00.238.382 I llm_load_print_meta: n_head           = 8
0.00.238.383 I llm_load_print_meta: n_head_kv        = 1
0.00.238.384 I llm_load_print_meta: n_rot            = 256
0.00.238.384 I llm_load_print_meta: n_swa            = 0
0.00.238.384 I llm_load_print_meta: n_embd_head_k    = 256
0.00.238.385 I llm_load_print_meta: n_embd_head_v    = 256
0.00.238.386 I llm_load_print_meta: n_gqa            = 8
0.00.238.387 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.238.388 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.238.388 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.238.389 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.238.390 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.238.390 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.238.391 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.238.392 I llm_load_print_meta: n_ff             = 16384
0.00.238.392 I llm_load_print_meta: n_expert         = 0
0.00.238.392 I llm_load_print_meta: n_expert_used    = 0
0.00.238.392 I llm_load_print_meta: causal attn      = 1
0.00.238.393 I llm_load_print_meta: pooling type     = 0
0.00.238.393 I llm_load_print_meta: rope type        = 2
0.00.238.393 I llm_load_print_meta: rope scaling     = linear
0.00.238.394 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.238.395 I llm_load_print_meta: freq_scale_train = 1
0.00.238.395 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.238.396 I llm_load_print_meta: rope_finetuned   = unknown
0.00.238.396 I llm_load_print_meta: ssm_d_conv       = 0
0.00.238.396 I llm_load_print_meta: ssm_d_inner      = 0
0.00.238.397 I llm_load_print_meta: ssm_d_state      = 0
0.00.238.397 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.238.397 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.238.398 I llm_load_print_meta: model type       = 2B
0.00.238.399 I llm_load_print_meta: model ftype      = Q8_0
0.00.238.399 I llm_load_print_meta: model params     = 2.51 B
0.00.238.400 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.238.400 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.238.401 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.238.401 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.238.402 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.238.402 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.238.403 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.238.403 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.238.403 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.238.404 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.238.404 I llm_load_print_meta: max token length = 93
0.00.238.423 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.314.797 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.314.806 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.314.807 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.314.807 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.314.808 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.314.809 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.319.996 I llama_new_context_with_model: n_ctx      = 8192
0.00.320.003 I llama_new_context_with_model: n_batch    = 2048
0.00.320.004 I llama_new_context_with_model: n_ubatch   = 512
0.00.320.005 I llama_new_context_with_model: flash_attn = 0
0.00.320.008 I llama_new_context_with_model: freq_base  = 10000.0
0.00.320.008 I llama_new_context_with_model: freq_scale = 1
0.00.350.028 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.350.045 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.350.137 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.013 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.351.020 I llama_new_context_with_model: graph nodes  = 601
0.00.351.020 I llama_new_context_with_model: graph splits = 1
0.00.351.022 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.220 I main: llama threadpool init, n_threads = 4
0.00.445.232 I 
0.00.445.311 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.314 I 
0.00.445.350 I sampler seed: 1974598208
0.00.445.361 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.364 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.445.365 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.365 I 
 increasities in a way that does not compromise the safety of the user. [end of text]


0.01.595.362 I llama_perf_sampler_print:    sampling time =       2.42 ms /    17 runs   (    0.14 ms per token,  7013.20 tokens per second)
0.01.595.365 I llama_perf_context_print:        load time =     443.35 ms
0.01.595.368 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.595.370 I llama_perf_context_print:        eval time =    1140.32 ms /    16 runs   (   71.27 ms per token,    14.03 tokens per second)
0.01.595.371 I llama_perf_context_print:       total time =    1150.15 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.579 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.001.906 I main: load the model and apply lora adapter, if any
0.00.022.047 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.095 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.106 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.118 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.119 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.120 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.120 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.124 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.125 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.126 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.126 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.127 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.614 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.436 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.445 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.446 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.446 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.447 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.448 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.449 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.452 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.452 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.453 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.453 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.454 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.458 I llama_model_loader: - type  f32:   37 tensors
0.00.133.461 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.084 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.212.699 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.213.486 I llm_load_vocab: special tokens cache size = 5
0.00.234.892 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.234.908 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.234.908 I llm_load_print_meta: arch             = gemma
0.00.234.909 I llm_load_print_meta: vocab type       = SPM
0.00.234.910 I llm_load_print_meta: n_vocab          = 256000
0.00.234.910 I llm_load_print_meta: n_merges         = 0
0.00.234.911 I llm_load_print_meta: vocab_only       = 0
0.00.234.911 I llm_load_print_meta: n_ctx_train      = 8192
0.00.234.911 I llm_load_print_meta: n_embd           = 2048
0.00.234.911 I llm_load_print_meta: n_layer          = 18
0.00.234.925 I llm_load_print_meta: n_head           = 8
0.00.234.926 I llm_load_print_meta: n_head_kv        = 1
0.00.234.926 I llm_load_print_meta: n_rot            = 256
0.00.234.927 I llm_load_print_meta: n_swa            = 0
0.00.234.927 I llm_load_print_meta: n_embd_head_k    = 256
0.00.234.927 I llm_load_print_meta: n_embd_head_v    = 256
0.00.234.928 I llm_load_print_meta: n_gqa            = 8
0.00.234.929 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.234.930 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.234.931 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.234.933 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.234.933 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.234.933 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.234.934 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.234.935 I llm_load_print_meta: n_ff             = 16384
0.00.234.935 I llm_load_print_meta: n_expert         = 0
0.00.234.935 I llm_load_print_meta: n_expert_used    = 0
0.00.234.935 I llm_load_print_meta: causal attn      = 1
0.00.234.936 I llm_load_print_meta: pooling type     = 0
0.00.234.936 I llm_load_print_meta: rope type        = 2
0.00.234.936 I llm_load_print_meta: rope scaling     = linear
0.00.234.938 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.234.939 I llm_load_print_meta: freq_scale_train = 1
0.00.234.939 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.234.940 I llm_load_print_meta: rope_finetuned   = unknown
0.00.234.940 I llm_load_print_meta: ssm_d_conv       = 0
0.00.234.940 I llm_load_print_meta: ssm_d_inner      = 0
0.00.234.940 I llm_load_print_meta: ssm_d_state      = 0
0.00.234.941 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.234.941 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.234.942 I llm_load_print_meta: model type       = 2B
0.00.234.942 I llm_load_print_meta: model ftype      = Q8_0
0.00.234.943 I llm_load_print_meta: model params     = 2.51 B
0.00.234.944 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.234.944 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.234.944 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.234.945 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.234.945 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.234.945 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.234.946 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.234.947 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.234.947 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.234.948 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.234.948 I llm_load_print_meta: max token length = 93
0.00.234.972 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.305.034 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.305.043 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.310.130 I llama_new_context_with_model: n_ctx      = 8192
0.00.310.137 I llama_new_context_with_model: n_batch    = 2048
0.00.310.137 I llama_new_context_with_model: n_ubatch   = 512
0.00.310.138 I llama_new_context_with_model: flash_attn = 0
0.00.310.140 I llama_new_context_with_model: freq_base  = 10000.0
0.00.310.141 I llama_new_context_with_model: freq_scale = 1
0.00.342.961 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.342.977 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.081 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.052 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.059 I llama_new_context_with_model: graph nodes  = 601
0.00.344.060 I llama_new_context_with_model: graph splits = 1
0.00.344.062 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.737 I main: llama threadpool init, n_threads = 4
0.00.443.749 I 
0.00.443.825 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.828 I 
0.00.443.866 I sampler seed: 1287042321
0.00.443.874 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.881 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.443.882 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.882 I 
 seconded.

**Assistant**

I understand. Please provide me with the necessary information so I can assist you further. [end of text]


0.02.443.904 I llama_perf_sampler_print:    sampling time =       4.19 ms /    27 runs   (    0.16 ms per token,  6448.53 tokens per second)
0.02.443.906 I llama_perf_context_print:        load time =     441.81 ms
0.02.443.907 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.443.909 I llama_perf_context_print:        eval time =    1984.22 ms /    26 runs   (   76.32 ms per token,    13.10 tokens per second)
0.02.443.910 I llama_perf_context_print:       total time =    2000.17 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.393s
user	0m33.746s
sys	0m9.706s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3862 (84facfa4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32111.49 ms
main:    total time = 32111.49 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.866 I main: load the model and apply lora adapter, if any
0.00.022.135 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.186 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.204 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.207 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.208 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.209 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.210 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.210 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.211 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.216 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.216 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.217 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.217 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.217 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.860 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.978 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.899 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.907 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.907 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.908 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.909 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.910 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.910 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.913 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.913 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.914 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.915 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.916 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.920 I llama_model_loader: - type  f32:   37 tensors
0.00.132.923 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.923 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.142 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.221.372 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.222.154 I llm_load_vocab: special tokens cache size = 5
0.00.243.426 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.243.443 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.243.443 I llm_load_print_meta: arch             = gemma
0.00.243.444 I llm_load_print_meta: vocab type       = SPM
0.00.243.445 I llm_load_print_meta: n_vocab          = 256000
0.00.243.445 I llm_load_print_meta: n_merges         = 0
0.00.243.446 I llm_load_print_meta: vocab_only       = 0
0.00.243.446 I llm_load_print_meta: n_ctx_train      = 8192
0.00.243.446 I llm_load_print_meta: n_embd           = 2048
0.00.243.447 I llm_load_print_meta: n_layer          = 18
0.00.243.459 I llm_load_print_meta: n_head           = 8
0.00.243.460 I llm_load_print_meta: n_head_kv        = 1
0.00.243.460 I llm_load_print_meta: n_rot            = 256
0.00.243.461 I llm_load_print_meta: n_swa            = 0
0.00.243.461 I llm_load_print_meta: n_embd_head_k    = 256
0.00.243.462 I llm_load_print_meta: n_embd_head_v    = 256
0.00.243.463 I llm_load_print_meta: n_gqa            = 8
0.00.243.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.243.464 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.243.465 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.243.467 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.243.467 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.243.468 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.243.468 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.243.469 I llm_load_print_meta: n_ff             = 16384
0.00.243.469 I llm_load_print_meta: n_expert         = 0
0.00.243.469 I llm_load_print_meta: n_expert_used    = 0
0.00.243.469 I llm_load_print_meta: causal attn      = 1
0.00.243.470 I llm_load_print_meta: pooling type     = 0
0.00.243.470 I llm_load_print_meta: rope type        = 2
0.00.243.470 I llm_load_print_meta: rope scaling     = linear
0.00.243.472 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.243.473 I llm_load_print_meta: freq_scale_train = 1
0.00.243.474 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.243.474 I llm_load_print_meta: rope_finetuned   = unknown
0.00.243.475 I llm_load_print_meta: ssm_d_conv       = 0
0.00.243.475 I llm_load_print_meta: ssm_d_inner      = 0
0.00.243.475 I llm_load_print_meta: ssm_d_state      = 0
0.00.243.475 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.243.476 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.243.476 I llm_load_print_meta: model type       = 2B
0.00.243.477 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.243.477 I llm_load_print_meta: model params     = 2.51 B
0.00.243.478 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.243.478 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.243.479 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.243.479 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.243.480 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.243.480 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.243.480 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.243.481 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.243.481 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.243.482 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.243.482 I llm_load_print_meta: max token length = 93
0.00.243.510 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.301.828 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.301.838 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.301.839 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.301.839 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.301.840 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.301.841 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.307.047 I llama_new_context_with_model: n_ctx      = 8192
0.00.307.054 I llama_new_context_with_model: n_batch    = 2048
0.00.307.055 I llama_new_context_with_model: n_ubatch   = 512
0.00.307.055 I llama_new_context_with_model: flash_attn = 0
0.00.307.059 I llama_new_context_with_model: freq_base  = 10000.0
0.00.307.060 I llama_new_context_with_model: freq_scale = 1
0.00.338.317 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.338.333 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.338.426 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.312 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.339.319 I llama_new_context_with_model: graph nodes  = 601
0.00.339.319 I llama_new_context_with_model: graph splits = 1
0.00.339.321 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.977 I main: llama threadpool init, n_threads = 4
0.00.422.989 I 
0.00.423.064 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.068 I 
0.00.423.107 I sampler seed: 1614170303
0.00.423.117 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.119 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.423.120 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.120 I 
 increamically.

The answer is:
The answer is excessively.

Explanation:
The sentence is describing the way something is being done is too excessive.

0.02.108.289 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.02.108.291 I llama_perf_context_print:        load time =     421.09 ms
0.02.108.292 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.108.294 I llama_perf_context_print:        eval time =    1665.96 ms /    32 runs   (   52.06 ms per token,    19.21 tokens per second)
0.02.108.294 I llama_perf_context_print:       total time =    1685.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3862 (84facfa4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32157.09 ms
main:    total time = 32157.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.581 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.776 I main: llama backend init
0.00.001.925 I main: load the model and apply lora adapter, if any
0.00.022.238 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.255 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.262 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.263 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.267 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.267 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.268 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.269 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.269 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.270 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.274 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.274 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.276 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.276 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.254 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.098 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.003 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.011 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.011 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.012 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.013 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.014 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.014 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.017 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.017 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.021 I llama_model_loader: - type  f32:   37 tensors
0.00.134.023 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.024 I llama_model_loader: - type q6_K:   19 tensors
0.00.195.080 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.212.132 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.212.946 I llm_load_vocab: special tokens cache size = 5
0.00.234.431 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.234.447 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.234.448 I llm_load_print_meta: arch             = gemma
0.00.234.448 I llm_load_print_meta: vocab type       = SPM
0.00.234.449 I llm_load_print_meta: n_vocab          = 256000
0.00.234.450 I llm_load_print_meta: n_merges         = 0
0.00.234.450 I llm_load_print_meta: vocab_only       = 0
0.00.234.450 I llm_load_print_meta: n_ctx_train      = 8192
0.00.234.450 I llm_load_print_meta: n_embd           = 2048
0.00.234.451 I llm_load_print_meta: n_layer          = 18
0.00.234.463 I llm_load_print_meta: n_head           = 8
0.00.234.464 I llm_load_print_meta: n_head_kv        = 1
0.00.234.465 I llm_load_print_meta: n_rot            = 256
0.00.234.465 I llm_load_print_meta: n_swa            = 0
0.00.234.465 I llm_load_print_meta: n_embd_head_k    = 256
0.00.234.465 I llm_load_print_meta: n_embd_head_v    = 256
0.00.234.466 I llm_load_print_meta: n_gqa            = 8
0.00.234.467 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.234.468 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.234.469 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.234.470 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.234.471 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.234.471 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.234.472 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.234.473 I llm_load_print_meta: n_ff             = 16384
0.00.234.473 I llm_load_print_meta: n_expert         = 0
0.00.234.473 I llm_load_print_meta: n_expert_used    = 0
0.00.234.473 I llm_load_print_meta: causal attn      = 1
0.00.234.474 I llm_load_print_meta: pooling type     = 0
0.00.234.474 I llm_load_print_meta: rope type        = 2
0.00.234.474 I llm_load_print_meta: rope scaling     = linear
0.00.234.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.234.476 I llm_load_print_meta: freq_scale_train = 1
0.00.234.476 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.234.477 I llm_load_print_meta: rope_finetuned   = unknown
0.00.234.477 I llm_load_print_meta: ssm_d_conv       = 0
0.00.234.477 I llm_load_print_meta: ssm_d_inner      = 0
0.00.234.478 I llm_load_print_meta: ssm_d_state      = 0
0.00.234.478 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.234.478 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.234.479 I llm_load_print_meta: model type       = 2B
0.00.234.479 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.234.480 I llm_load_print_meta: model params     = 2.51 B
0.00.234.481 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.234.481 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.234.482 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.234.482 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.234.482 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.234.482 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.234.483 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.234.483 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.234.484 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.234.484 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.234.484 I llm_load_print_meta: max token length = 93
0.00.234.503 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.243 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.297.371 I llama_new_context_with_model: n_ctx      = 8192
0.00.297.377 I llama_new_context_with_model: n_batch    = 2048
0.00.297.378 I llama_new_context_with_model: n_ubatch   = 512
0.00.297.378 I llama_new_context_with_model: flash_attn = 0
0.00.297.381 I llama_new_context_with_model: freq_base  = 10000.0
0.00.297.382 I llama_new_context_with_model: freq_scale = 1
0.00.327.980 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.327.994 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.328.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.328.936 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.328.943 I llama_new_context_with_model: graph nodes  = 601
0.00.328.944 I llama_new_context_with_model: graph splits = 1
0.00.328.946 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.483 I main: llama threadpool init, n_threads = 4
0.00.419.498 I 
0.00.419.573 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.576 I 
0.00.419.614 I sampler seed: 3160597359
0.00.419.623 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.630 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.419.630 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.631 I 
 seconally.

I cannot answer the question as I am unable to access personal or sensitive information. [end of text]


0.01.521.796 I llama_perf_sampler_print:    sampling time =       3.38 ms /    22 runs   (    0.15 ms per token,  6506.95 tokens per second)
0.01.521.799 I llama_perf_context_print:        load time =     417.54 ms
0.01.521.801 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.521.803 I llama_perf_context_print:        eval time =    1089.08 ms /    21 runs   (   51.86 ms per token,    19.28 tokens per second)
0.01.521.804 I llama_perf_context_print:       total time =    1102.32 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.764s
user	8m13.188s
sys	0m7.241s
