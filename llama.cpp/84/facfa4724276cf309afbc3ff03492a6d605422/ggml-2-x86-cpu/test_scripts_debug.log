+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.668 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.829 I main: load the model and apply lora adapter, if any
0.00.025.195 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.398 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.494 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.507 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.508 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.513 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.517 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.518 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.519 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.520 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.521 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.529 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.530 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.531 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.531 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.532 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.613 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.934 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.944 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.945 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.945 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.946 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.948 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.949 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.952 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.953 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.954 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.954 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.955 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.964 I llama_model_loader: - type  f32:   37 tensors
0.00.194.968 I llama_model_loader: - type q8_0:  127 tensors
0.00.370.364 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.400.193 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.401.257 I llm_load_vocab: special tokens cache size = 5
0.00.459.340 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.459.406 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.459.408 I llm_load_print_meta: arch             = gemma
0.00.459.409 I llm_load_print_meta: vocab type       = SPM
0.00.459.409 I llm_load_print_meta: n_vocab          = 256000
0.00.459.412 I llm_load_print_meta: n_merges         = 0
0.00.459.412 I llm_load_print_meta: vocab_only       = 0
0.00.459.413 I llm_load_print_meta: n_ctx_train      = 8192
0.00.459.413 I llm_load_print_meta: n_embd           = 2048
0.00.459.414 I llm_load_print_meta: n_layer          = 18
0.00.459.476 I llm_load_print_meta: n_head           = 8
0.00.459.484 I llm_load_print_meta: n_head_kv        = 1
0.00.459.485 I llm_load_print_meta: n_rot            = 256
0.00.459.485 I llm_load_print_meta: n_swa            = 0
0.00.459.485 I llm_load_print_meta: n_embd_head_k    = 256
0.00.459.486 I llm_load_print_meta: n_embd_head_v    = 256
0.00.459.490 I llm_load_print_meta: n_gqa            = 8
0.00.459.495 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.459.500 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.459.501 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.459.502 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.459.503 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.459.503 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.459.504 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.459.525 I llm_load_print_meta: n_ff             = 16384
0.00.459.526 I llm_load_print_meta: n_expert         = 0
0.00.459.527 I llm_load_print_meta: n_expert_used    = 0
0.00.459.527 I llm_load_print_meta: causal attn      = 1
0.00.459.528 I llm_load_print_meta: pooling type     = 0
0.00.459.528 I llm_load_print_meta: rope type        = 2
0.00.459.528 I llm_load_print_meta: rope scaling     = linear
0.00.459.530 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.459.530 I llm_load_print_meta: freq_scale_train = 1
0.00.459.531 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.459.531 I llm_load_print_meta: rope_finetuned   = unknown
0.00.459.532 I llm_load_print_meta: ssm_d_conv       = 0
0.00.459.532 I llm_load_print_meta: ssm_d_inner      = 0
0.00.459.532 I llm_load_print_meta: ssm_d_state      = 0
0.00.459.533 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.459.533 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.459.534 I llm_load_print_meta: model type       = 2B
0.00.459.535 I llm_load_print_meta: model ftype      = Q8_0
0.00.459.535 I llm_load_print_meta: model params     = 2.51 B
0.00.459.536 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.459.536 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.459.537 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.459.542 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.459.543 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.459.544 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.459.544 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.459.545 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.459.552 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.459.553 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.459.554 I llm_load_print_meta: max token length = 93
0.00.459.738 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.559.245 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.559.259 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.559.260 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.559.260 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.559.261 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.559.262 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.565.110 I llama_new_context_with_model: n_ctx      = 8192
0.00.565.122 I llama_new_context_with_model: n_batch    = 2048
0.00.565.123 I llama_new_context_with_model: n_ubatch   = 512
0.00.565.123 I llama_new_context_with_model: flash_attn = 0
0.00.565.129 I llama_new_context_with_model: freq_base  = 10000.0
0.00.565.130 I llama_new_context_with_model: freq_scale = 1
0.00.596.736 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.596.781 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.596.898 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.598.302 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.598.308 I llama_new_context_with_model: graph nodes  = 601
0.00.598.309 I llama_new_context_with_model: graph splits = 1
0.00.598.326 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.212.943 I main: llama threadpool init, n_threads = 4
0.01.212.957 I 
0.01.213.057 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.213.061 I 
0.01.213.239 I sampler seed: 3274445400
0.01.213.250 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.213.255 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.213.256 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.213.256 I 
 maneupher's theorem in the context of machine learning?

**Theorem:** In machine learning, the risk of overfitting is minimized when the training and test

0.14.552.267 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.67 tokens per second)
0.14.552.271 I llama_perf_context_print:        load time =    1210.02 ms
0.14.552.285 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.552.287 I llama_perf_context_print:        eval time =   13256.66 ms /    32 runs   (  414.27 ms per token,     2.41 tokens per second)
0.14.552.288 I llama_perf_context_print:       total time =   13339.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.678 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.025.231 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.348 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.364 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.368 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.373 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.374 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.375 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.377 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.379 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.380 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.388 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.389 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.390 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.390 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.391 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.913 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.010 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.008 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.017 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.018 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.019 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.019 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.020 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.021 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.025 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.025 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.026 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.027 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.194.028 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.037 I llama_model_loader: - type  f32:   37 tensors
0.00.194.041 I llama_model_loader: - type q8_0:  127 tensors
0.00.356.672 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.388.936 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.390.027 I llm_load_vocab: special tokens cache size = 5
0.00.447.943 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.448.003 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.448.004 I llm_load_print_meta: arch             = gemma
0.00.448.005 I llm_load_print_meta: vocab type       = SPM
0.00.448.006 I llm_load_print_meta: n_vocab          = 256000
0.00.448.009 I llm_load_print_meta: n_merges         = 0
0.00.448.010 I llm_load_print_meta: vocab_only       = 0
0.00.448.010 I llm_load_print_meta: n_ctx_train      = 8192
0.00.448.010 I llm_load_print_meta: n_embd           = 2048
0.00.448.011 I llm_load_print_meta: n_layer          = 18
0.00.448.074 I llm_load_print_meta: n_head           = 8
0.00.448.081 I llm_load_print_meta: n_head_kv        = 1
0.00.448.082 I llm_load_print_meta: n_rot            = 256
0.00.448.082 I llm_load_print_meta: n_swa            = 0
0.00.448.082 I llm_load_print_meta: n_embd_head_k    = 256
0.00.448.083 I llm_load_print_meta: n_embd_head_v    = 256
0.00.448.087 I llm_load_print_meta: n_gqa            = 8
0.00.448.092 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.448.096 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.448.097 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.448.099 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.448.099 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.448.099 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.448.100 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.448.105 I llm_load_print_meta: n_ff             = 16384
0.00.448.106 I llm_load_print_meta: n_expert         = 0
0.00.448.106 I llm_load_print_meta: n_expert_used    = 0
0.00.448.107 I llm_load_print_meta: causal attn      = 1
0.00.448.107 I llm_load_print_meta: pooling type     = 0
0.00.448.107 I llm_load_print_meta: rope type        = 2
0.00.448.108 I llm_load_print_meta: rope scaling     = linear
0.00.448.109 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.448.110 I llm_load_print_meta: freq_scale_train = 1
0.00.448.111 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.448.111 I llm_load_print_meta: rope_finetuned   = unknown
0.00.448.112 I llm_load_print_meta: ssm_d_conv       = 0
0.00.448.112 I llm_load_print_meta: ssm_d_inner      = 0
0.00.448.113 I llm_load_print_meta: ssm_d_state      = 0
0.00.448.114 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.448.114 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.448.128 I llm_load_print_meta: model type       = 2B
0.00.448.134 I llm_load_print_meta: model ftype      = Q8_0
0.00.448.134 I llm_load_print_meta: model params     = 2.51 B
0.00.448.135 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.448.146 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.448.146 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.448.147 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.448.147 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.448.148 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.448.149 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.448.149 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.448.156 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.448.157 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.448.158 I llm_load_print_meta: max token length = 93
0.00.448.345 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.540.400 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.546.165 I llama_new_context_with_model: n_ctx      = 8192
0.00.546.173 I llama_new_context_with_model: n_batch    = 2048
0.00.546.174 I llama_new_context_with_model: n_ubatch   = 512
0.00.546.174 I llama_new_context_with_model: flash_attn = 0
0.00.546.178 I llama_new_context_with_model: freq_base  = 10000.0
0.00.546.179 I llama_new_context_with_model: freq_scale = 1
0.00.575.835 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.575.885 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.576.001 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.577.445 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.577.452 I llama_new_context_with_model: graph nodes  = 601
0.00.577.452 I llama_new_context_with_model: graph splits = 1
0.00.577.468 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.191.773 I main: llama threadpool init, n_threads = 4
0.01.191.785 I 
0.01.191.886 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.191.891 I 
0.01.192.076 I sampler seed: 4252124847
0.01.192.112 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.192.118 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.192.122 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.192.123 I 
 increasels!

I am unable to generate a response that contains inappropriate or sexually suggestive content. [end of text]


0.09.690.958 I llama_perf_sampler_print:    sampling time =      30.91 ms /    21 runs   (    1.47 ms per token,   679.33 tokens per second)
0.09.690.962 I llama_perf_context_print:        load time =    1188.86 ms
0.09.690.964 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.690.966 I llama_perf_context_print:        eval time =    8447.16 ms /    20 runs   (  422.36 ms per token,     2.37 tokens per second)
0.09.690.970 I llama_perf_context_print:       total time =    8499.20 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.677 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.895 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.024.941 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.130 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.226 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.239 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.240 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.248 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.249 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.251 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.252 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.261 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.270 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.273 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.362 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.578 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.631 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.640 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.641 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.641 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.642 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.643 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.644 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.647 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.648 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.649 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.193.649 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.193.650 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.193.658 I llama_model_loader: - type  f32:   37 tensors
0.00.193.663 I llama_model_loader: - type q8_0:  127 tensors
0.00.359.689 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.389.921 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.391.042 I llm_load_vocab: special tokens cache size = 5
0.00.448.669 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.448.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.448.730 I llm_load_print_meta: arch             = gemma
0.00.448.731 I llm_load_print_meta: vocab type       = SPM
0.00.448.732 I llm_load_print_meta: n_vocab          = 256000
0.00.448.734 I llm_load_print_meta: n_merges         = 0
0.00.448.735 I llm_load_print_meta: vocab_only       = 0
0.00.448.735 I llm_load_print_meta: n_ctx_train      = 8192
0.00.448.736 I llm_load_print_meta: n_embd           = 2048
0.00.448.736 I llm_load_print_meta: n_layer          = 18
0.00.448.799 I llm_load_print_meta: n_head           = 8
0.00.448.807 I llm_load_print_meta: n_head_kv        = 1
0.00.448.807 I llm_load_print_meta: n_rot            = 256
0.00.448.807 I llm_load_print_meta: n_swa            = 0
0.00.448.808 I llm_load_print_meta: n_embd_head_k    = 256
0.00.448.808 I llm_load_print_meta: n_embd_head_v    = 256
0.00.448.813 I llm_load_print_meta: n_gqa            = 8
0.00.448.817 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.448.823 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.448.839 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.448.841 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.448.842 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.448.842 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.448.843 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.448.848 I llm_load_print_meta: n_ff             = 16384
0.00.448.848 I llm_load_print_meta: n_expert         = 0
0.00.448.849 I llm_load_print_meta: n_expert_used    = 0
0.00.448.849 I llm_load_print_meta: causal attn      = 1
0.00.448.849 I llm_load_print_meta: pooling type     = 0
0.00.448.849 I llm_load_print_meta: rope type        = 2
0.00.448.850 I llm_load_print_meta: rope scaling     = linear
0.00.448.851 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.448.852 I llm_load_print_meta: freq_scale_train = 1
0.00.448.852 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.448.867 I llm_load_print_meta: rope_finetuned   = unknown
0.00.448.868 I llm_load_print_meta: ssm_d_conv       = 0
0.00.448.868 I llm_load_print_meta: ssm_d_inner      = 0
0.00.448.869 I llm_load_print_meta: ssm_d_state      = 0
0.00.448.873 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.448.873 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.448.874 I llm_load_print_meta: model type       = 2B
0.00.448.875 I llm_load_print_meta: model ftype      = Q8_0
0.00.448.876 I llm_load_print_meta: model params     = 2.51 B
0.00.448.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.448.877 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.448.878 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.448.878 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.448.879 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.448.879 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.448.880 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.448.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.448.886 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.448.887 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.448.888 I llm_load_print_meta: max token length = 93
0.00.449.068 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.526.700 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.526.709 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.526.710 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.526.711 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.526.711 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.526.712 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.532.424 I llama_new_context_with_model: n_ctx      = 8192
0.00.532.432 I llama_new_context_with_model: n_batch    = 2048
0.00.532.433 I llama_new_context_with_model: n_ubatch   = 512
0.00.532.433 I llama_new_context_with_model: flash_attn = 0
0.00.532.436 I llama_new_context_with_model: freq_base  = 10000.0
0.00.532.437 I llama_new_context_with_model: freq_scale = 1
0.00.561.959 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.562.001 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.562.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.563.526 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.563.532 I llama_new_context_with_model: graph nodes  = 601
0.00.563.532 I llama_new_context_with_model: graph splits = 1
0.00.563.549 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.176.698 I main: llama threadpool init, n_threads = 4
0.01.176.709 I 
0.01.176.801 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.176.805 I 
0.01.176.976 I sampler seed: 586630597
0.01.176.987 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.176.994 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.176.995 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.176.995 I 
 increasities, but they do not cause any physical harm, and are harmless. [end of text]


0.08.342.218 I llama_perf_sampler_print:    sampling time =      26.58 ms /    18 runs   (    1.48 ms per token,   677.23 tokens per second)
0.08.342.221 I llama_perf_context_print:        load time =    1173.75 ms
0.08.342.223 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.342.237 I llama_perf_context_print:        eval time =    7120.46 ms /    17 runs   (  418.85 ms per token,     2.39 tokens per second)
0.08.342.239 I llama_perf_context_print:       total time =    7165.53 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.676 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.964 I main: llama backend init
0.00.003.211 I main: load the model and apply lora adapter, if any
0.00.026.196 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.026.478 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.026.579 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.594 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.596 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.602 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.607 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.611 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.612 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.614 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.628 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.630 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.631 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.633 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.636 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.350 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.853 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.966 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.976 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.978 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.978 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.979 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.981 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.982 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.987 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.988 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.989 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.989 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.990 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.001 I llama_model_loader: - type  f32:   37 tensors
0.00.196.007 I llama_model_loader: - type q8_0:  127 tensors
0.00.366.915 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.398.347 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.399.452 I llm_load_vocab: special tokens cache size = 5
0.00.458.139 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.458.204 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.458.206 I llm_load_print_meta: arch             = gemma
0.00.458.206 I llm_load_print_meta: vocab type       = SPM
0.00.458.207 I llm_load_print_meta: n_vocab          = 256000
0.00.458.210 I llm_load_print_meta: n_merges         = 0
0.00.458.210 I llm_load_print_meta: vocab_only       = 0
0.00.458.211 I llm_load_print_meta: n_ctx_train      = 8192
0.00.458.211 I llm_load_print_meta: n_embd           = 2048
0.00.458.211 I llm_load_print_meta: n_layer          = 18
0.00.458.275 I llm_load_print_meta: n_head           = 8
0.00.458.282 I llm_load_print_meta: n_head_kv        = 1
0.00.458.283 I llm_load_print_meta: n_rot            = 256
0.00.458.283 I llm_load_print_meta: n_swa            = 0
0.00.458.283 I llm_load_print_meta: n_embd_head_k    = 256
0.00.458.284 I llm_load_print_meta: n_embd_head_v    = 256
0.00.458.288 I llm_load_print_meta: n_gqa            = 8
0.00.458.293 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.458.297 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.458.299 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.458.300 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.458.300 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.458.301 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.458.301 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.458.306 I llm_load_print_meta: n_ff             = 16384
0.00.458.306 I llm_load_print_meta: n_expert         = 0
0.00.458.307 I llm_load_print_meta: n_expert_used    = 0
0.00.458.307 I llm_load_print_meta: causal attn      = 1
0.00.458.307 I llm_load_print_meta: pooling type     = 0
0.00.458.307 I llm_load_print_meta: rope type        = 2
0.00.458.308 I llm_load_print_meta: rope scaling     = linear
0.00.458.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.458.310 I llm_load_print_meta: freq_scale_train = 1
0.00.458.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.458.310 I llm_load_print_meta: rope_finetuned   = unknown
0.00.458.311 I llm_load_print_meta: ssm_d_conv       = 0
0.00.458.311 I llm_load_print_meta: ssm_d_inner      = 0
0.00.458.311 I llm_load_print_meta: ssm_d_state      = 0
0.00.458.312 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.458.312 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.458.313 I llm_load_print_meta: model type       = 2B
0.00.458.313 I llm_load_print_meta: model ftype      = Q8_0
0.00.458.314 I llm_load_print_meta: model params     = 2.51 B
0.00.458.315 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.458.315 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.458.315 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.458.316 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.458.316 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.458.317 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.458.317 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.458.318 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.458.324 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.458.325 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.458.326 I llm_load_print_meta: max token length = 93
0.00.458.528 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.530.349 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.530.361 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.536.372 I llama_new_context_with_model: n_ctx      = 8192
0.00.536.380 I llama_new_context_with_model: n_batch    = 2048
0.00.536.381 I llama_new_context_with_model: n_ubatch   = 512
0.00.536.381 I llama_new_context_with_model: flash_attn = 0
0.00.536.385 I llama_new_context_with_model: freq_base  = 10000.0
0.00.536.386 I llama_new_context_with_model: freq_scale = 1
0.00.567.493 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.567.539 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.567.657 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.569.100 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.569.108 I llama_new_context_with_model: graph nodes  = 601
0.00.569.109 I llama_new_context_with_model: graph splits = 1
0.00.569.127 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.225.978 I main: llama threadpool init, n_threads = 4
0.01.225.993 I 
0.01.226.105 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.226.110 I 
0.01.226.312 I sampler seed: 1773653449
0.01.226.326 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.226.332 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.226.334 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.226.334 I 
 maneuvously.

I'm unable to generate a response due to the inappropriate nature of the prompt. The prompt is asking me to generate content that is

0.14.631.431 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.57 tokens per second)
0.14.631.433 I llama_perf_context_print:        load time =    1222.67 ms
0.14.631.435 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.631.436 I llama_perf_context_print:        eval time =   13323.31 ms /    32 runs   (  416.35 ms per token,     2.40 tokens per second)
0.14.631.437 I llama_perf_context_print:       total time =   13405.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.093s
user	3m1.802s
sys	0m9.698s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3862 (84facfa4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199400.31 ms
main:    total time = 199400.31 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.637 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
0.00.024.741 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.925 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.016 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.028 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.029 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.034 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.035 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.036 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.039 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.040 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.041 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.047 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.048 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.049 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.051 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.052 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.205 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.432 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.566 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.574 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.575 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.576 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.577 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.578 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.579 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.582 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.583 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.586 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.193.587 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.193.588 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.193.597 I llama_model_loader: - type  f32:   37 tensors
0.00.193.601 I llama_model_loader: - type q4_K:  108 tensors
0.00.193.602 I llama_model_loader: - type q6_K:   19 tensors
0.00.343.723 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.371.871 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.372.901 I llm_load_vocab: special tokens cache size = 5
0.00.430.879 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.430.937 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.430.941 I llm_load_print_meta: arch             = gemma
0.00.430.941 I llm_load_print_meta: vocab type       = SPM
0.00.430.942 I llm_load_print_meta: n_vocab          = 256000
0.00.430.945 I llm_load_print_meta: n_merges         = 0
0.00.430.945 I llm_load_print_meta: vocab_only       = 0
0.00.430.945 I llm_load_print_meta: n_ctx_train      = 8192
0.00.430.946 I llm_load_print_meta: n_embd           = 2048
0.00.430.946 I llm_load_print_meta: n_layer          = 18
0.00.431.008 I llm_load_print_meta: n_head           = 8
0.00.431.017 I llm_load_print_meta: n_head_kv        = 1
0.00.431.018 I llm_load_print_meta: n_rot            = 256
0.00.431.018 I llm_load_print_meta: n_swa            = 0
0.00.431.018 I llm_load_print_meta: n_embd_head_k    = 256
0.00.431.019 I llm_load_print_meta: n_embd_head_v    = 256
0.00.431.024 I llm_load_print_meta: n_gqa            = 8
0.00.431.028 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.431.033 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.431.035 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.431.037 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.431.037 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.431.038 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.431.039 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.431.044 I llm_load_print_meta: n_ff             = 16384
0.00.431.045 I llm_load_print_meta: n_expert         = 0
0.00.431.045 I llm_load_print_meta: n_expert_used    = 0
0.00.431.045 I llm_load_print_meta: causal attn      = 1
0.00.431.046 I llm_load_print_meta: pooling type     = 0
0.00.431.046 I llm_load_print_meta: rope type        = 2
0.00.431.047 I llm_load_print_meta: rope scaling     = linear
0.00.431.049 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.431.050 I llm_load_print_meta: freq_scale_train = 1
0.00.431.050 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.431.051 I llm_load_print_meta: rope_finetuned   = unknown
0.00.431.051 I llm_load_print_meta: ssm_d_conv       = 0
0.00.431.051 I llm_load_print_meta: ssm_d_inner      = 0
0.00.431.052 I llm_load_print_meta: ssm_d_state      = 0
0.00.431.053 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.431.053 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.431.063 I llm_load_print_meta: model type       = 2B
0.00.431.065 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.431.066 I llm_load_print_meta: model params     = 2.51 B
0.00.431.067 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.431.067 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.431.068 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.431.069 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.431.069 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.431.084 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.431.085 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.431.086 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.431.093 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.431.094 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.431.095 I llm_load_print_meta: max token length = 93
0.00.431.269 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.490.768 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.490.780 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.490.780 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.490.781 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.490.782 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.490.782 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.496.296 I llama_new_context_with_model: n_ctx      = 8192
0.00.496.303 I llama_new_context_with_model: n_batch    = 2048
0.00.496.303 I llama_new_context_with_model: n_ubatch   = 512
0.00.496.304 I llama_new_context_with_model: flash_attn = 0
0.00.496.307 I llama_new_context_with_model: freq_base  = 10000.0
0.00.496.308 I llama_new_context_with_model: freq_scale = 1
0.00.526.141 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.526.184 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.526.301 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.527.676 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.527.682 I llama_new_context_with_model: graph nodes  = 601
0.00.527.682 I llama_new_context_with_model: graph splits = 1
0.00.527.697 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.113.432 I main: llama threadpool init, n_threads = 4
0.01.113.445 I 
0.01.113.536 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.113.540 I 
0.01.113.712 I sampler seed: 4156183782
0.01.113.722 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.113.727 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.113.729 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.113.729 I 
 squaRED:

## Introduction to Squaring Roots

Squaring roots is a method for finding the square root of a number. It involves finding the number that

0.12.052.945 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.25 tokens per second)
0.12.052.949 I llama_perf_context_print:        load time =    1110.57 ms
0.12.052.950 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.052.962 I llama_perf_context_print:        eval time =   10857.16 ms /    32 runs   (  339.29 ms per token,     2.95 tokens per second)
0.12.052.964 I llama_perf_context_print:       total time =   10939.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3862 (84facfa4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199190.22 ms
main:    total time = 199190.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.652 I build: 3862 (84facfa4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.024.834 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.937 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.953 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.957 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.962 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.963 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.964 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.965 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.967 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.968 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.976 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.976 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.987 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.990 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.991 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.185 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.308 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.444 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.452 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.453 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.454 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.455 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.456 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.457 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.460 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.461 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.470 I llama_model_loader: - type  f32:   37 tensors
0.00.192.476 I llama_model_loader: - type q4_K:  108 tensors
0.00.192.477 I llama_model_loader: - type q6_K:   19 tensors
0.00.336.686 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.367.060 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.368.112 I llm_load_vocab: special tokens cache size = 5
0.00.425.777 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.425.835 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.425.842 I llm_load_print_meta: arch             = gemma
0.00.425.842 I llm_load_print_meta: vocab type       = SPM
0.00.425.843 I llm_load_print_meta: n_vocab          = 256000
0.00.425.846 I llm_load_print_meta: n_merges         = 0
0.00.425.858 I llm_load_print_meta: vocab_only       = 0
0.00.425.859 I llm_load_print_meta: n_ctx_train      = 8192
0.00.425.860 I llm_load_print_meta: n_embd           = 2048
0.00.425.860 I llm_load_print_meta: n_layer          = 18
0.00.425.926 I llm_load_print_meta: n_head           = 8
0.00.425.937 I llm_load_print_meta: n_head_kv        = 1
0.00.425.937 I llm_load_print_meta: n_rot            = 256
0.00.425.938 I llm_load_print_meta: n_swa            = 0
0.00.425.939 I llm_load_print_meta: n_embd_head_k    = 256
0.00.425.940 I llm_load_print_meta: n_embd_head_v    = 256
0.00.425.944 I llm_load_print_meta: n_gqa            = 8
0.00.425.949 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.425.954 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.425.958 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.425.959 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.425.960 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.425.960 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.425.961 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.425.966 I llm_load_print_meta: n_ff             = 16384
0.00.425.969 I llm_load_print_meta: n_expert         = 0
0.00.425.969 I llm_load_print_meta: n_expert_used    = 0
0.00.425.969 I llm_load_print_meta: causal attn      = 1
0.00.425.970 I llm_load_print_meta: pooling type     = 0
0.00.425.970 I llm_load_print_meta: rope type        = 2
0.00.425.970 I llm_load_print_meta: rope scaling     = linear
0.00.425.971 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.425.972 I llm_load_print_meta: freq_scale_train = 1
0.00.425.972 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.425.973 I llm_load_print_meta: rope_finetuned   = unknown
0.00.425.973 I llm_load_print_meta: ssm_d_conv       = 0
0.00.425.973 I llm_load_print_meta: ssm_d_inner      = 0
0.00.425.974 I llm_load_print_meta: ssm_d_state      = 0
0.00.425.974 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.425.974 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.425.975 I llm_load_print_meta: model type       = 2B
0.00.425.991 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.425.993 I llm_load_print_meta: model params     = 2.51 B
0.00.425.993 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.425.994 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.425.995 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.425.996 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.425.998 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.425.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.426.000 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.426.000 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.426.006 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.426.008 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.426.008 I llm_load_print_meta: max token length = 93
0.00.426.193 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.484.702 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.490.253 I llama_new_context_with_model: n_ctx      = 8192
0.00.490.260 I llama_new_context_with_model: n_batch    = 2048
0.00.490.261 I llama_new_context_with_model: n_ubatch   = 512
0.00.490.261 I llama_new_context_with_model: flash_attn = 0
0.00.490.265 I llama_new_context_with_model: freq_base  = 10000.0
0.00.490.266 I llama_new_context_with_model: freq_scale = 1
0.00.520.062 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.520.106 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.520.220 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.521.587 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.521.593 I llama_new_context_with_model: graph nodes  = 601
0.00.521.594 I llama_new_context_with_model: graph splits = 1
0.00.521.609 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.103.173 I main: llama threadpool init, n_threads = 4
0.01.103.184 I 
0.01.103.273 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.103.277 I 
0.01.103.451 I sampler seed: 2120994195
0.01.103.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.103.468 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.103.470 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.103.470 I 
 susceptability of a set of mutations.

**a) Explain the principle of susceptability.**

**b) Explain the components of a susceptability score.**

0.12.161.574 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.08 tokens per second)
0.12.161.577 I llama_perf_context_print:        load time =    1100.31 ms
0.12.161.578 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.161.580 I llama_perf_context_print:        eval time =   10975.94 ms /    32 runs   (  343.00 ms per token,     2.92 tokens per second)
0.12.161.593 I llama_perf_context_print:       total time =   11058.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.775s
user	50m12.188s
sys	0m6.496s
