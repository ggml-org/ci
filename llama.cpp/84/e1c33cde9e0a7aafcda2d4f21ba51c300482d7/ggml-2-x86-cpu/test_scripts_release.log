+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.567 I build: 4178 (84e1c33c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.660 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.671 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.679 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.686 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.687 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.691 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.692 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.693 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.693 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.693 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.694 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.698 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.699 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.699 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.700 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.700 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.867 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.667 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.588 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.596 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.596 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.597 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.597 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.598 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.599 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.601 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.602 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.603 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.604 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.605 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.609 I llama_model_loader: - type  f32:   37 tensors
0.00.133.610 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.936 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.283 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.991 I llm_load_vocab: special tokens cache size = 5
0.00.287.478 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.498 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.499 I llm_load_print_meta: arch             = gemma
0.00.287.499 I llm_load_print_meta: vocab type       = SPM
0.00.287.500 I llm_load_print_meta: n_vocab          = 256000
0.00.287.500 I llm_load_print_meta: n_merges         = 0
0.00.287.501 I llm_load_print_meta: vocab_only       = 0
0.00.287.501 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.501 I llm_load_print_meta: n_embd           = 2048
0.00.287.501 I llm_load_print_meta: n_layer          = 18
0.00.287.514 I llm_load_print_meta: n_head           = 8
0.00.287.515 I llm_load_print_meta: n_head_kv        = 1
0.00.287.516 I llm_load_print_meta: n_rot            = 256
0.00.287.516 I llm_load_print_meta: n_swa            = 0
0.00.287.516 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.516 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.517 I llm_load_print_meta: n_gqa            = 8
0.00.287.518 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.520 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.520 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.522 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.523 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.523 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.523 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.524 I llm_load_print_meta: n_ff             = 16384
0.00.287.525 I llm_load_print_meta: n_expert         = 0
0.00.287.525 I llm_load_print_meta: n_expert_used    = 0
0.00.287.525 I llm_load_print_meta: causal attn      = 1
0.00.287.526 I llm_load_print_meta: pooling type     = 0
0.00.287.526 I llm_load_print_meta: rope type        = 2
0.00.287.526 I llm_load_print_meta: rope scaling     = linear
0.00.287.528 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.529 I llm_load_print_meta: freq_scale_train = 1
0.00.287.529 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.529 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.530 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.530 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.530 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.530 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.531 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.531 I llm_load_print_meta: model type       = 2B
0.00.287.532 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.533 I llm_load_print_meta: model params     = 2.51 B
0.00.287.534 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.537 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.537 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.538 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.538 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.539 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.539 I llm_load_print_meta: max token length = 93
0.00.387.557 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.387.565 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.387.566 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.387.567 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.387.567 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.387.568 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.392.841 I llama_new_context_with_model: n_seq_max     = 1
0.00.392.848 I llama_new_context_with_model: n_ctx         = 4096
0.00.392.849 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.392.849 I llama_new_context_with_model: n_batch       = 2048
0.00.392.849 I llama_new_context_with_model: n_ubatch      = 512
0.00.392.850 I llama_new_context_with_model: flash_attn    = 0
0.00.392.853 I llama_new_context_with_model: freq_base     = 10000.0
0.00.392.854 I llama_new_context_with_model: freq_scale    = 1
0.00.392.855 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.407.112 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.407.124 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.407.215 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.507 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.408.514 I llama_new_context_with_model: graph nodes  = 601
0.00.408.514 I llama_new_context_with_model: graph splits = 1
0.00.408.516 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.498.391 I main: llama threadpool init, n_threads = 4
0.00.498.407 I 
0.00.498.481 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.498.484 I 
0.00.498.535 I sampler seed: 3917706602
0.00.498.563 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.498.567 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.498.568 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.498.569 I 
 increasities that have been occurring in the city due to its lack of effective waste management.

**Challenges and Causes:**

* **Lack of infrastructure:** Inadequate

0.02.800.619 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6966.43 tokens per second)
0.02.800.621 I llama_perf_context_print:        load time =     497.60 ms
0.02.800.623 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.800.624 I llama_perf_context_print:        eval time =    2283.16 ms /    32 runs   (   71.35 ms per token,    14.02 tokens per second)
0.02.800.625 I llama_perf_context_print:       total time =    2302.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.187 I build: 4178 (84e1c33c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.387 I main: llama backend init
0.00.000.393 I main: load the model and apply lora adapter, if any
0.00.020.801 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.815 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.823 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.824 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.828 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.828 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.829 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.829 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.830 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.830 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.835 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.835 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.835 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.836 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.836 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.973 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.847 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.839 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.847 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.848 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.849 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.849 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.850 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.851 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.854 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.854 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.856 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.856 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.857 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.861 I llama_model_loader: - type  f32:   37 tensors
0.00.131.862 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.497 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.576 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.257 I llm_load_vocab: special tokens cache size = 5
0.00.287.621 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.641 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.641 I llm_load_print_meta: arch             = gemma
0.00.287.642 I llm_load_print_meta: vocab type       = SPM
0.00.287.642 I llm_load_print_meta: n_vocab          = 256000
0.00.287.643 I llm_load_print_meta: n_merges         = 0
0.00.287.643 I llm_load_print_meta: vocab_only       = 0
0.00.287.643 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.644 I llm_load_print_meta: n_embd           = 2048
0.00.287.644 I llm_load_print_meta: n_layer          = 18
0.00.287.657 I llm_load_print_meta: n_head           = 8
0.00.287.657 I llm_load_print_meta: n_head_kv        = 1
0.00.287.658 I llm_load_print_meta: n_rot            = 256
0.00.287.658 I llm_load_print_meta: n_swa            = 0
0.00.287.658 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.659 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.660 I llm_load_print_meta: n_gqa            = 8
0.00.287.661 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.662 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.663 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.664 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.665 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.666 I llm_load_print_meta: n_ff             = 16384
0.00.287.666 I llm_load_print_meta: n_expert         = 0
0.00.287.666 I llm_load_print_meta: n_expert_used    = 0
0.00.287.666 I llm_load_print_meta: causal attn      = 1
0.00.287.667 I llm_load_print_meta: pooling type     = 0
0.00.287.667 I llm_load_print_meta: rope type        = 2
0.00.287.667 I llm_load_print_meta: rope scaling     = linear
0.00.287.669 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.670 I llm_load_print_meta: freq_scale_train = 1
0.00.287.670 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.670 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.671 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.671 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.671 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.672 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.672 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.672 I llm_load_print_meta: model type       = 2B
0.00.287.673 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.674 I llm_load_print_meta: model params     = 2.51 B
0.00.287.675 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.677 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.677 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.677 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.678 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.678 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.679 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.679 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.680 I llm_load_print_meta: max token length = 93
0.00.381.732 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.386.969 I llama_new_context_with_model: n_seq_max     = 1
0.00.386.975 I llama_new_context_with_model: n_ctx         = 4096
0.00.386.976 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.386.976 I llama_new_context_with_model: n_batch       = 2048
0.00.386.977 I llama_new_context_with_model: n_ubatch      = 512
0.00.386.977 I llama_new_context_with_model: flash_attn    = 0
0.00.386.980 I llama_new_context_with_model: freq_base     = 10000.0
0.00.386.981 I llama_new_context_with_model: freq_scale    = 1
0.00.386.982 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.402.204 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.402.219 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.402.311 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.571 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.403.577 I llama_new_context_with_model: graph nodes  = 601
0.00.403.578 I llama_new_context_with_model: graph splits = 1
0.00.403.581 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.734 I main: llama threadpool init, n_threads = 4
0.00.485.751 I 
0.00.485.835 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.485.838 I 
0.00.485.880 I sampler seed: 3949695726
0.00.485.891 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.894 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.485.896 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.896 I 
 maneuvously!

I am unable to generate the requested text due to safety concerns. Creating or promoting harmful or inappropriate content is against my programming guidelines. [end of text]


0.02.706.559 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6896.55 tokens per second)
0.02.706.562 I llama_perf_context_print:        load time =     485.32 ms
0.02.706.564 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.706.565 I llama_perf_context_print:        eval time =    2201.23 ms /    32 runs   (   68.79 ms per token,    14.54 tokens per second)
0.02.706.566 I llama_perf_context_print:       total time =    2220.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.172 I build: 4178 (84e1c33c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.404 I main: llama backend init
0.00.000.410 I main: load the model and apply lora adapter, if any
0.00.021.296 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.307 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.314 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.324 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.330 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.331 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.332 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.333 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.334 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.335 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.341 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.342 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.343 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.344 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.345 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.421 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.443 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.750 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.757 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.758 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.759 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.759 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.760 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.761 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.763 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.764 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.765 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.765 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.767 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.772 I llama_model_loader: - type  f32:   37 tensors
0.00.133.773 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.362 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.923 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.588 I llm_load_vocab: special tokens cache size = 5
0.00.289.107 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.128 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.129 I llm_load_print_meta: arch             = gemma
0.00.289.130 I llm_load_print_meta: vocab type       = SPM
0.00.289.130 I llm_load_print_meta: n_vocab          = 256000
0.00.289.131 I llm_load_print_meta: n_merges         = 0
0.00.289.131 I llm_load_print_meta: vocab_only       = 0
0.00.289.131 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.132 I llm_load_print_meta: n_embd           = 2048
0.00.289.132 I llm_load_print_meta: n_layer          = 18
0.00.289.150 I llm_load_print_meta: n_head           = 8
0.00.289.152 I llm_load_print_meta: n_head_kv        = 1
0.00.289.152 I llm_load_print_meta: n_rot            = 256
0.00.289.153 I llm_load_print_meta: n_swa            = 0
0.00.289.154 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.154 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.156 I llm_load_print_meta: n_gqa            = 8
0.00.289.158 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.159 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.160 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.162 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.162 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.163 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.164 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.165 I llm_load_print_meta: n_ff             = 16384
0.00.289.166 I llm_load_print_meta: n_expert         = 0
0.00.289.166 I llm_load_print_meta: n_expert_used    = 0
0.00.289.167 I llm_load_print_meta: causal attn      = 1
0.00.289.168 I llm_load_print_meta: pooling type     = 0
0.00.289.169 I llm_load_print_meta: rope type        = 2
0.00.289.170 I llm_load_print_meta: rope scaling     = linear
0.00.289.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.173 I llm_load_print_meta: freq_scale_train = 1
0.00.289.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.175 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.175 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.176 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.176 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.177 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.178 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.181 I llm_load_print_meta: model type       = 2B
0.00.289.182 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.183 I llm_load_print_meta: model params     = 2.51 B
0.00.289.184 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.185 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.186 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.187 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.187 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.191 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.192 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.192 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.193 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.194 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.194 I llm_load_print_meta: max token length = 93
0.00.364.715 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.364.720 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.364.721 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.364.722 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.364.722 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.364.723 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.370.019 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.026 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.026 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.027 I llama_new_context_with_model: n_batch       = 2048
0.00.370.027 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.028 I llama_new_context_with_model: flash_attn    = 0
0.00.370.030 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.031 I llama_new_context_with_model: freq_scale    = 1
0.00.370.032 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.584 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.598 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.701 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.941 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.947 I llama_new_context_with_model: graph nodes  = 601
0.00.385.948 I llama_new_context_with_model: graph splits = 1
0.00.385.950 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.472.366 I main: llama threadpool init, n_threads = 4
0.00.472.379 I 
0.00.472.466 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.472.470 I 
0.00.472.527 I sampler seed: 2372128955
0.00.472.537 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.543 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.543 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.544 I 
 increasities, and other forms of sexual harassment.

Sexual harassment is a pervasive problem that affects individuals, organizations, and society as a whole. It undermines the

0.02.778.137 I llama_perf_sampler_print:    sampling time =       5.24 ms /    33 runs   (    0.16 ms per token,  6302.52 tokens per second)
0.02.778.139 I llama_perf_context_print:        load time =     471.93 ms
0.02.778.140 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.778.142 I llama_perf_context_print:        eval time =    2285.45 ms /    32 runs   (   71.42 ms per token,    14.00 tokens per second)
0.02.778.142 I llama_perf_context_print:       total time =    2305.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.562 I build: 4178 (84e1c33c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.793 I main: llama backend init
0.00.000.800 I main: load the model and apply lora adapter, if any
0.00.021.502 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.511 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.520 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.530 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.531 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.539 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.542 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.543 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.545 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.545 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.546 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.552 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.553 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.554 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.555 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.556 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.673 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.340 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.294 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.300 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.301 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.301 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.302 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.303 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.304 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.307 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.307 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.308 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.309 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.310 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.314 I llama_model_loader: - type  f32:   37 tensors
0.00.133.315 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.637 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.919 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.536 I llm_load_vocab: special tokens cache size = 5
0.00.283.774 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.793 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.793 I llm_load_print_meta: arch             = gemma
0.00.283.794 I llm_load_print_meta: vocab type       = SPM
0.00.283.795 I llm_load_print_meta: n_vocab          = 256000
0.00.283.796 I llm_load_print_meta: n_merges         = 0
0.00.283.806 I llm_load_print_meta: vocab_only       = 0
0.00.283.807 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.807 I llm_load_print_meta: n_embd           = 2048
0.00.283.807 I llm_load_print_meta: n_layer          = 18
0.00.283.820 I llm_load_print_meta: n_head           = 8
0.00.283.822 I llm_load_print_meta: n_head_kv        = 1
0.00.283.823 I llm_load_print_meta: n_rot            = 256
0.00.283.824 I llm_load_print_meta: n_swa            = 0
0.00.283.824 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.825 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.827 I llm_load_print_meta: n_gqa            = 8
0.00.283.828 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.830 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.831 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.833 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.833 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.834 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.837 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.839 I llm_load_print_meta: n_ff             = 16384
0.00.283.839 I llm_load_print_meta: n_expert         = 0
0.00.283.840 I llm_load_print_meta: n_expert_used    = 0
0.00.283.840 I llm_load_print_meta: causal attn      = 1
0.00.283.840 I llm_load_print_meta: pooling type     = 0
0.00.283.841 I llm_load_print_meta: rope type        = 2
0.00.283.842 I llm_load_print_meta: rope scaling     = linear
0.00.283.844 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.845 I llm_load_print_meta: freq_scale_train = 1
0.00.283.845 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.846 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.847 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.848 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.848 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.849 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.849 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.850 I llm_load_print_meta: model type       = 2B
0.00.283.851 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.852 I llm_load_print_meta: model params     = 2.51 B
0.00.283.854 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.855 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.855 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.856 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.857 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.857 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.860 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.860 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.861 I llm_load_print_meta: max token length = 93
0.00.354.732 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.354.740 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.360.237 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.245 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.246 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.246 I llama_new_context_with_model: n_batch       = 2048
0.00.360.246 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.247 I llama_new_context_with_model: flash_attn    = 0
0.00.360.251 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.252 I llama_new_context_with_model: freq_scale    = 1
0.00.360.253 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.737 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.752 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.860 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.192 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.199 I llama_new_context_with_model: graph nodes  = 601
0.00.376.200 I llama_new_context_with_model: graph splits = 1
0.00.376.202 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.634 I main: llama threadpool init, n_threads = 4
0.00.464.650 I 
0.00.464.734 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.737 I 
0.00.464.785 I sampler seed: 4237983867
0.00.464.797 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.808 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.813 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.813 I 
 increamentalism for a more nuanced understanding of the relationship between language and thought.

**Deciphering the Relationship Between Language and Thought: A Critical Approach**

0.02.934.036 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6349.82 tokens per second)
0.02.934.039 I llama_perf_context_print:        load time =     463.81 ms
0.02.934.040 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.934.041 I llama_perf_context_print:        eval time =    2449.78 ms /    32 runs   (   76.56 ms per token,    13.06 tokens per second)
0.02.934.043 I llama_perf_context_print:       total time =    2469.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.898s
user	0m40.226s
sys	0m9.503s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4178 (84e1c33c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40267.67 ms
main:    total time = 40267.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.570 I build: 4178 (84e1c33c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.667 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.677 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.686 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.692 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.693 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.698 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.699 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.699 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.700 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.700 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.702 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.707 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.707 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.708 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.708 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.709 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.830 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.840 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.719 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.725 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.726 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.726 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.727 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.728 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.729 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.732 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.732 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.733 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.734 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.735 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.739 I llama_model_loader: - type  f32:   37 tensors
0.00.132.740 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.740 I llama_model_loader: - type q6_K:   19 tensors
0.00.218.615 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.271.472 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.272.175 I llm_load_vocab: special tokens cache size = 5
0.00.293.414 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.433 I llm_load_print_meta: arch             = gemma
0.00.293.433 I llm_load_print_meta: vocab type       = SPM
0.00.293.434 I llm_load_print_meta: n_vocab          = 256000
0.00.293.435 I llm_load_print_meta: n_merges         = 0
0.00.293.435 I llm_load_print_meta: vocab_only       = 0
0.00.293.436 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.436 I llm_load_print_meta: n_embd           = 2048
0.00.293.436 I llm_load_print_meta: n_layer          = 18
0.00.293.448 I llm_load_print_meta: n_head           = 8
0.00.293.449 I llm_load_print_meta: n_head_kv        = 1
0.00.293.449 I llm_load_print_meta: n_rot            = 256
0.00.293.450 I llm_load_print_meta: n_swa            = 0
0.00.293.450 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.450 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.451 I llm_load_print_meta: n_gqa            = 8
0.00.293.452 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.453 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.454 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.455 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.456 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.456 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.456 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.457 I llm_load_print_meta: n_ff             = 16384
0.00.293.457 I llm_load_print_meta: n_expert         = 0
0.00.293.457 I llm_load_print_meta: n_expert_used    = 0
0.00.293.458 I llm_load_print_meta: causal attn      = 1
0.00.293.458 I llm_load_print_meta: pooling type     = 0
0.00.293.458 I llm_load_print_meta: rope type        = 2
0.00.293.459 I llm_load_print_meta: rope scaling     = linear
0.00.293.460 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.461 I llm_load_print_meta: freq_scale_train = 1
0.00.293.461 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.461 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.462 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.462 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.462 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.463 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.463 I llm_load_print_meta: model type       = 2B
0.00.293.464 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.293.465 I llm_load_print_meta: model params     = 2.51 B
0.00.293.465 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.293.466 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.466 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.467 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.467 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.467 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.468 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.468 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.468 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.469 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.469 I llm_load_print_meta: max token length = 93
0.00.351.856 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.351.866 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.351.866 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.351.867 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.351.868 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.351.868 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.357.101 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.108 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.108 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.108 I llama_new_context_with_model: n_batch       = 2048
0.00.357.109 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.110 I llama_new_context_with_model: flash_attn    = 0
0.00.357.112 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.113 I llama_new_context_with_model: freq_scale    = 1
0.00.357.114 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.371.992 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.006 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.101 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.412 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.418 I llama_new_context_with_model: graph nodes  = 601
0.00.373.418 I llama_new_context_with_model: graph splits = 1
0.00.373.420 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.928 I main: llama threadpool init, n_threads = 4
0.00.449.943 I 
0.00.450.014 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.450.017 I 
0.00.450.061 I sampler seed: 2035574679
0.00.450.072 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.086 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.090 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.090 I 
 increase and negate each other to form two distinct statements.

**Solution:**

The statements are:

1. If it is true that A implies B

0.02.133.840 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  5998.91 tokens per second)
0.02.133.843 I llama_perf_context_print:        load time =     449.13 ms
0.02.133.844 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.133.846 I llama_perf_context_print:        eval time =    1662.91 ms /    32 runs   (   51.97 ms per token,    19.24 tokens per second)
0.02.133.846 I llama_perf_context_print:       total time =    1683.92 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4178 (84e1c33c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40227.89 ms
main:    total time = 40227.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.544 I build: 4178 (84e1c33c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.287 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.302 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.484 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.488 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.491 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.492 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.493 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.493 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.494 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.497 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.498 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.498 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.499 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.499 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.761 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.147 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.999 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.005 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.006 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.007 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.007 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.009 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.010 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.013 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.015 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.020 I llama_model_loader: - type  f32:   37 tensors
0.00.132.022 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.022 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.085 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.743 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.350 I llm_load_vocab: special tokens cache size = 5
0.00.270.399 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.416 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.417 I llm_load_print_meta: arch             = gemma
0.00.270.418 I llm_load_print_meta: vocab type       = SPM
0.00.270.418 I llm_load_print_meta: n_vocab          = 256000
0.00.270.420 I llm_load_print_meta: n_merges         = 0
0.00.270.420 I llm_load_print_meta: vocab_only       = 0
0.00.270.421 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.421 I llm_load_print_meta: n_embd           = 2048
0.00.270.421 I llm_load_print_meta: n_layer          = 18
0.00.270.433 I llm_load_print_meta: n_head           = 8
0.00.270.434 I llm_load_print_meta: n_head_kv        = 1
0.00.270.434 I llm_load_print_meta: n_rot            = 256
0.00.270.434 I llm_load_print_meta: n_swa            = 0
0.00.270.435 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.435 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.436 I llm_load_print_meta: n_gqa            = 8
0.00.270.437 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.438 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.439 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.443 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.444 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.444 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.444 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.445 I llm_load_print_meta: n_ff             = 16384
0.00.270.445 I llm_load_print_meta: n_expert         = 0
0.00.270.446 I llm_load_print_meta: n_expert_used    = 0
0.00.270.446 I llm_load_print_meta: causal attn      = 1
0.00.270.446 I llm_load_print_meta: pooling type     = 0
0.00.270.446 I llm_load_print_meta: rope type        = 2
0.00.270.447 I llm_load_print_meta: rope scaling     = linear
0.00.270.448 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.449 I llm_load_print_meta: freq_scale_train = 1
0.00.270.449 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.450 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.450 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.451 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.451 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.451 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.451 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.452 I llm_load_print_meta: model type       = 2B
0.00.270.452 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.453 I llm_load_print_meta: model params     = 2.51 B
0.00.270.454 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.454 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.455 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.455 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.456 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.458 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.458 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.459 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.459 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.460 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.460 I llm_load_print_meta: max token length = 93
0.00.326.152 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.331.408 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.415 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.415 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.416 I llama_new_context_with_model: n_batch       = 2048
0.00.331.416 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.417 I llama_new_context_with_model: flash_attn    = 0
0.00.331.420 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.421 I llama_new_context_with_model: freq_scale    = 1
0.00.331.422 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.352 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.447 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.676 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.683 I llama_new_context_with_model: graph nodes  = 601
0.00.347.683 I llama_new_context_with_model: graph splits = 1
0.00.347.685 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.817 I main: llama threadpool init, n_threads = 4
0.00.422.833 I 
0.00.422.909 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.912 I 
0.00.422.955 I sampler seed: 4258069553
0.00.422.965 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.970 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.971 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.971 I 
 seconded into the sentence: "The man with the bushy mustache and the mischievous grin was the one who would steal the show."

**Questions:**

1

0.02.033.686 I llama_perf_sampler_print:    sampling time =       5.44 ms /    33 runs   (    0.16 ms per token,  6070.64 tokens per second)
0.02.033.689 I llama_perf_context_print:        load time =     422.06 ms
0.02.033.690 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.033.692 I llama_perf_context_print:        eval time =    1590.49 ms /    32 runs   (   49.70 ms per token,    20.12 tokens per second)
0.02.033.692 I llama_perf_context_print:       total time =    1610.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.509s
user	10m24.911s
sys	0m7.288s
