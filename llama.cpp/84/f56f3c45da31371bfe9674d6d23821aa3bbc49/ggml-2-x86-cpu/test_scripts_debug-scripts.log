+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.667 I build: 3838 (84f56f3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.807 I main: load the model and apply lora adapter, if any
0.00.025.060 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.252 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.347 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.360 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.361 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.366 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.368 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.369 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.370 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.370 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.371 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.379 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.380 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.381 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.383 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.384 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.682 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.805 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.875 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.883 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.884 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.884 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.885 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.886 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.887 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.891 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.892 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.893 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.894 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.895 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.904 I llama_model_loader: - type  f32:   37 tensors
0.00.197.908 I llama_model_loader: - type q8_0:  127 tensors
0.00.337.065 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.365.145 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.366.224 I llm_load_vocab: special tokens cache size = 5
0.00.424.097 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.424.156 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.424.160 I llm_load_print_meta: arch             = gemma
0.00.424.161 I llm_load_print_meta: vocab type       = SPM
0.00.424.161 I llm_load_print_meta: n_vocab          = 256000
0.00.424.164 I llm_load_print_meta: n_merges         = 0
0.00.424.166 I llm_load_print_meta: vocab_only       = 0
0.00.424.166 I llm_load_print_meta: n_ctx_train      = 8192
0.00.424.167 I llm_load_print_meta: n_embd           = 2048
0.00.424.167 I llm_load_print_meta: n_layer          = 18
0.00.424.226 I llm_load_print_meta: n_head           = 8
0.00.424.236 I llm_load_print_meta: n_head_kv        = 1
0.00.424.236 I llm_load_print_meta: n_rot            = 256
0.00.424.237 I llm_load_print_meta: n_swa            = 0
0.00.424.238 I llm_load_print_meta: n_embd_head_k    = 256
0.00.424.238 I llm_load_print_meta: n_embd_head_v    = 256
0.00.424.243 I llm_load_print_meta: n_gqa            = 8
0.00.424.247 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.424.252 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.424.256 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.424.257 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.424.258 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.424.258 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.424.259 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.424.264 I llm_load_print_meta: n_ff             = 16384
0.00.424.265 I llm_load_print_meta: n_expert         = 0
0.00.424.265 I llm_load_print_meta: n_expert_used    = 0
0.00.424.265 I llm_load_print_meta: causal attn      = 1
0.00.424.266 I llm_load_print_meta: pooling type     = 0
0.00.424.266 I llm_load_print_meta: rope type        = 2
0.00.424.267 I llm_load_print_meta: rope scaling     = linear
0.00.424.268 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.424.269 I llm_load_print_meta: freq_scale_train = 1
0.00.424.269 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.424.270 I llm_load_print_meta: rope_finetuned   = unknown
0.00.424.270 I llm_load_print_meta: ssm_d_conv       = 0
0.00.424.270 I llm_load_print_meta: ssm_d_inner      = 0
0.00.424.270 I llm_load_print_meta: ssm_d_state      = 0
0.00.424.271 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.424.271 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.424.272 I llm_load_print_meta: model type       = 2B
0.00.424.284 I llm_load_print_meta: model ftype      = Q8_0
0.00.424.286 I llm_load_print_meta: model params     = 2.51 B
0.00.424.287 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.424.287 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.424.288 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.424.291 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.424.291 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.424.292 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.424.292 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.424.292 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.424.299 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.424.301 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.424.301 I llm_load_print_meta: max token length = 93
0.00.424.478 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.523.385 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.523.396 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.523.397 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.523.397 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.523.398 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.523.399 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.529.114 I llama_new_context_with_model: n_ctx      = 8192
0.00.529.122 I llama_new_context_with_model: n_batch    = 2048
0.00.529.122 I llama_new_context_with_model: n_ubatch   = 512
0.00.529.123 I llama_new_context_with_model: flash_attn = 0
0.00.529.125 I llama_new_context_with_model: freq_base  = 10000.0
0.00.529.126 I llama_new_context_with_model: freq_scale = 1
0.00.558.773 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.558.815 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.558.925 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.560.298 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.560.304 I llama_new_context_with_model: graph nodes  = 601
0.00.560.304 I llama_new_context_with_model: graph splits = 1
0.00.560.320 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.177.708 I main: llama threadpool init, n_threads = 4
0.01.177.719 I 
0.01.177.817 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.177.821 I 
0.01.177.986 I sampler seed: 3775318500
0.01.177.996 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.178.001 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.178.002 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.178.005 I 
 increasities of the Renaissance and the Enlightenment, and how these ideas have shaped the modern world.

**Answer:**

**The Renaissance and Enlightenment: Shaping Modern

0.14.754.167 I llama_perf_sampler_print:    sampling time =      49.43 ms /    33 runs   (    1.50 ms per token,   667.65 tokens per second)
0.14.754.170 I llama_perf_context_print:        load time =    1174.80 ms
0.14.754.186 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.754.188 I llama_perf_context_print:        eval time =   13493.47 ms /    32 runs   (  421.67 ms per token,     2.37 tokens per second)
0.14.754.189 I llama_perf_context_print:       total time =   13576.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.661 I build: 3838 (84f56f3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.002.843 I main: load the model and apply lora adapter, if any
0.00.025.354 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.467 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.486 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.491 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.497 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.499 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.501 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.502 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.504 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.505 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.516 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.517 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.519 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.520 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.525 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.591 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.921 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.992 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.199.002 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.199.003 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.199.005 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.199.005 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.199.006 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.199.007 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.199.011 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.199.012 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.199.013 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.199.013 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.199.015 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.199.025 I llama_model_loader: - type  f32:   37 tensors
0.00.199.028 I llama_model_loader: - type q8_0:  127 tensors
0.00.359.726 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.388.918 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.389.939 I llm_load_vocab: special tokens cache size = 5
0.00.447.953 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.448.017 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.448.019 I llm_load_print_meta: arch             = gemma
0.00.448.020 I llm_load_print_meta: vocab type       = SPM
0.00.448.020 I llm_load_print_meta: n_vocab          = 256000
0.00.448.023 I llm_load_print_meta: n_merges         = 0
0.00.448.024 I llm_load_print_meta: vocab_only       = 0
0.00.448.024 I llm_load_print_meta: n_ctx_train      = 8192
0.00.448.025 I llm_load_print_meta: n_embd           = 2048
0.00.448.025 I llm_load_print_meta: n_layer          = 18
0.00.448.091 I llm_load_print_meta: n_head           = 8
0.00.448.098 I llm_load_print_meta: n_head_kv        = 1
0.00.448.099 I llm_load_print_meta: n_rot            = 256
0.00.448.100 I llm_load_print_meta: n_swa            = 0
0.00.448.100 I llm_load_print_meta: n_embd_head_k    = 256
0.00.448.100 I llm_load_print_meta: n_embd_head_v    = 256
0.00.448.105 I llm_load_print_meta: n_gqa            = 8
0.00.448.110 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.448.115 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.448.116 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.448.117 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.448.118 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.448.118 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.448.119 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.448.124 I llm_load_print_meta: n_ff             = 16384
0.00.448.124 I llm_load_print_meta: n_expert         = 0
0.00.448.125 I llm_load_print_meta: n_expert_used    = 0
0.00.448.125 I llm_load_print_meta: causal attn      = 1
0.00.448.125 I llm_load_print_meta: pooling type     = 0
0.00.448.126 I llm_load_print_meta: rope type        = 2
0.00.448.126 I llm_load_print_meta: rope scaling     = linear
0.00.448.128 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.448.128 I llm_load_print_meta: freq_scale_train = 1
0.00.448.129 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.448.129 I llm_load_print_meta: rope_finetuned   = unknown
0.00.448.129 I llm_load_print_meta: ssm_d_conv       = 0
0.00.448.130 I llm_load_print_meta: ssm_d_inner      = 0
0.00.448.130 I llm_load_print_meta: ssm_d_state      = 0
0.00.448.130 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.448.131 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.448.132 I llm_load_print_meta: model type       = 2B
0.00.448.133 I llm_load_print_meta: model ftype      = Q8_0
0.00.448.133 I llm_load_print_meta: model params     = 2.51 B
0.00.448.134 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.448.135 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.448.158 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.448.160 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.448.161 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.448.162 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.448.162 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.448.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.448.171 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.448.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.448.175 I llm_load_print_meta: max token length = 93
0.00.448.385 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.542.242 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.548.137 I llama_new_context_with_model: n_ctx      = 8192
0.00.548.144 I llama_new_context_with_model: n_batch    = 2048
0.00.548.144 I llama_new_context_with_model: n_ubatch   = 512
0.00.548.145 I llama_new_context_with_model: flash_attn = 0
0.00.548.148 I llama_new_context_with_model: freq_base  = 10000.0
0.00.548.149 I llama_new_context_with_model: freq_scale = 1
0.00.577.882 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.577.931 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.578.061 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.579.492 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.579.499 I llama_new_context_with_model: graph nodes  = 601
0.00.579.500 I llama_new_context_with_model: graph splits = 1
0.00.579.518 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.190.702 I main: llama threadpool init, n_threads = 4
0.01.190.714 I 
0.01.190.817 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.190.829 I 
0.01.191.003 I sampler seed: 3017120921
0.01.191.013 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.191.019 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.191.021 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.191.022 I 
 increasements.

I am unable to access the requested information as I do not have access to private user data or personal information. [end of text]


0.12.531.720 I llama_perf_sampler_print:    sampling time =      41.59 ms /    28 runs   (    1.49 ms per token,   673.16 tokens per second)
0.12.531.732 I llama_perf_context_print:        load time =    1187.75 ms
0.12.531.734 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.531.736 I llama_perf_context_print:        eval time =   11271.06 ms /    27 runs   (  417.45 ms per token,     2.40 tokens per second)
0.12.531.737 I llama_perf_context_print:       total time =   11341.03 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.667 I build: 3838 (84f56f3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.975 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.161 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.253 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.265 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.267 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.271 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.272 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.274 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.274 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.276 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.277 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.283 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.285 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.285 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.287 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.296 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.128 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.135 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.200 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.210 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.211 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.212 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.212 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.213 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.215 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.218 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.219 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.220 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.221 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.222 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.230 I llama_model_loader: - type  f32:   37 tensors
0.00.198.234 I llama_model_loader: - type q8_0:  127 tensors
0.00.353.917 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.384.012 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.385.076 I llm_load_vocab: special tokens cache size = 5
0.00.442.911 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.442.971 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.442.973 I llm_load_print_meta: arch             = gemma
0.00.442.973 I llm_load_print_meta: vocab type       = SPM
0.00.442.975 I llm_load_print_meta: n_vocab          = 256000
0.00.442.977 I llm_load_print_meta: n_merges         = 0
0.00.442.978 I llm_load_print_meta: vocab_only       = 0
0.00.442.978 I llm_load_print_meta: n_ctx_train      = 8192
0.00.442.978 I llm_load_print_meta: n_embd           = 2048
0.00.442.979 I llm_load_print_meta: n_layer          = 18
0.00.443.043 I llm_load_print_meta: n_head           = 8
0.00.443.050 I llm_load_print_meta: n_head_kv        = 1
0.00.443.050 I llm_load_print_meta: n_rot            = 256
0.00.443.051 I llm_load_print_meta: n_swa            = 0
0.00.443.051 I llm_load_print_meta: n_embd_head_k    = 256
0.00.443.051 I llm_load_print_meta: n_embd_head_v    = 256
0.00.443.056 I llm_load_print_meta: n_gqa            = 8
0.00.443.060 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.443.075 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.443.076 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.443.078 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.443.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.443.079 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.443.079 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.443.086 I llm_load_print_meta: n_ff             = 16384
0.00.443.087 I llm_load_print_meta: n_expert         = 0
0.00.443.092 I llm_load_print_meta: n_expert_used    = 0
0.00.443.092 I llm_load_print_meta: causal attn      = 1
0.00.443.093 I llm_load_print_meta: pooling type     = 0
0.00.443.093 I llm_load_print_meta: rope type        = 2
0.00.443.094 I llm_load_print_meta: rope scaling     = linear
0.00.443.095 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.443.096 I llm_load_print_meta: freq_scale_train = 1
0.00.443.097 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.443.097 I llm_load_print_meta: rope_finetuned   = unknown
0.00.443.097 I llm_load_print_meta: ssm_d_conv       = 0
0.00.443.098 I llm_load_print_meta: ssm_d_inner      = 0
0.00.443.098 I llm_load_print_meta: ssm_d_state      = 0
0.00.443.101 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.443.102 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.443.102 I llm_load_print_meta: model type       = 2B
0.00.443.103 I llm_load_print_meta: model ftype      = Q8_0
0.00.443.104 I llm_load_print_meta: model params     = 2.51 B
0.00.443.105 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.443.106 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.443.107 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.443.107 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.443.120 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.443.123 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.443.123 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.443.124 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.443.130 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.443.133 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.443.135 I llm_load_print_meta: max token length = 93
0.00.443.319 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.520.151 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.520.162 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.520.163 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.520.164 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.520.165 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.520.166 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.525.807 I llama_new_context_with_model: n_ctx      = 8192
0.00.525.815 I llama_new_context_with_model: n_batch    = 2048
0.00.525.815 I llama_new_context_with_model: n_ubatch   = 512
0.00.525.816 I llama_new_context_with_model: flash_attn = 0
0.00.525.819 I llama_new_context_with_model: freq_base  = 10000.0
0.00.525.820 I llama_new_context_with_model: freq_scale = 1
0.00.555.766 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.555.807 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.555.915 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.557.324 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.557.331 I llama_new_context_with_model: graph nodes  = 601
0.00.557.331 I llama_new_context_with_model: graph splits = 1
0.00.557.347 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.168.419 I main: llama threadpool init, n_threads = 4
0.01.168.431 I 
0.01.168.522 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.168.526 I 
0.01.168.689 I sampler seed: 836263436
0.01.168.699 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.168.704 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.168.705 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.168.705 I 
 increasively.

I have a question about the meaning of the phrase "a reasonable doubt exists".

Could someone please explain the different interpretations and nuances of this

0.14.736.127 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.61 tokens per second)
0.14.736.143 I llama_perf_context_print:        load time =    1165.53 ms
0.14.736.145 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.736.146 I llama_perf_context_print:        eval time =   13485.34 ms /    32 runs   (  421.42 ms per token,     2.37 tokens per second)
0.14.736.147 I llama_perf_context_print:       total time =   13567.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.636 I build: 3838 (84f56f3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.025.124 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.334 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.441 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.455 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.465 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.476 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.487 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.493 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.495 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.506 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.507 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.509 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.513 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.515 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.685 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.900 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.026 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.037 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.038 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.039 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.040 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.041 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.044 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.045 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.046 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.048 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.198.050 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.061 I llama_model_loader: - type  f32:   37 tensors
0.00.198.066 I llama_model_loader: - type q8_0:  127 tensors
0.00.354.215 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.382.449 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.383.498 I llm_load_vocab: special tokens cache size = 5
0.00.441.584 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.441.650 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.441.655 I llm_load_print_meta: arch             = gemma
0.00.441.656 I llm_load_print_meta: vocab type       = SPM
0.00.441.657 I llm_load_print_meta: n_vocab          = 256000
0.00.441.659 I llm_load_print_meta: n_merges         = 0
0.00.441.660 I llm_load_print_meta: vocab_only       = 0
0.00.441.661 I llm_load_print_meta: n_ctx_train      = 8192
0.00.441.661 I llm_load_print_meta: n_embd           = 2048
0.00.441.662 I llm_load_print_meta: n_layer          = 18
0.00.441.735 I llm_load_print_meta: n_head           = 8
0.00.441.744 I llm_load_print_meta: n_head_kv        = 1
0.00.441.745 I llm_load_print_meta: n_rot            = 256
0.00.441.745 I llm_load_print_meta: n_swa            = 0
0.00.441.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.441.746 I llm_load_print_meta: n_embd_head_v    = 256
0.00.441.750 I llm_load_print_meta: n_gqa            = 8
0.00.441.755 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.441.759 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.441.761 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.441.762 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.441.763 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.441.763 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.441.764 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.441.769 I llm_load_print_meta: n_ff             = 16384
0.00.441.769 I llm_load_print_meta: n_expert         = 0
0.00.441.770 I llm_load_print_meta: n_expert_used    = 0
0.00.441.770 I llm_load_print_meta: causal attn      = 1
0.00.441.770 I llm_load_print_meta: pooling type     = 0
0.00.441.771 I llm_load_print_meta: rope type        = 2
0.00.441.771 I llm_load_print_meta: rope scaling     = linear
0.00.441.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.441.773 I llm_load_print_meta: freq_scale_train = 1
0.00.441.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.441.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.441.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.441.775 I llm_load_print_meta: ssm_d_inner      = 0
0.00.441.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.441.775 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.441.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.441.776 I llm_load_print_meta: model type       = 2B
0.00.441.777 I llm_load_print_meta: model ftype      = Q8_0
0.00.441.778 I llm_load_print_meta: model params     = 2.51 B
0.00.441.779 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.441.779 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.441.780 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.441.781 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.441.781 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.441.781 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.441.782 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.441.782 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.441.788 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.441.789 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.441.790 I llm_load_print_meta: max token length = 93
0.00.441.963 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.513.553 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.513.564 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.519.499 I llama_new_context_with_model: n_ctx      = 8192
0.00.519.507 I llama_new_context_with_model: n_batch    = 2048
0.00.519.508 I llama_new_context_with_model: n_ubatch   = 512
0.00.519.508 I llama_new_context_with_model: flash_attn = 0
0.00.519.511 I llama_new_context_with_model: freq_base  = 10000.0
0.00.519.512 I llama_new_context_with_model: freq_scale = 1
0.00.550.180 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.550.227 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.550.342 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.551.824 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.551.832 I llama_new_context_with_model: graph nodes  = 601
0.00.551.833 I llama_new_context_with_model: graph splits = 1
0.00.551.851 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.194.919 I main: llama threadpool init, n_threads = 4
0.01.194.932 I 
0.01.195.032 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.195.036 I 
0.01.195.210 I sampler seed: 3693685780
0.01.195.220 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.195.225 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.195.225 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.195.226 I 
 increasities in the game! 😈

**Note:** I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.11.375.774 I llama_perf_sampler_print:    sampling time =      37.02 ms /    25 runs   (    1.48 ms per token,   675.22 tokens per second)
0.11.375.778 I llama_perf_context_print:        load time =    1192.00 ms
0.11.375.780 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.375.781 I llama_perf_context_print:        eval time =   10118.35 ms /    24 runs   (  421.60 ms per token,     2.37 tokens per second)
0.11.375.782 I llama_perf_context_print:       total time =   10180.87 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.176s
user	3m26.755s
sys	0m9.692s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3838 (84f56f3c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199642.94 ms
main:    total time = 199642.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.731 I build: 3838 (84f56f3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.958 I main: llama backend init
0.00.002.895 I main: load the model and apply lora adapter, if any
0.00.024.946 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.135 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.233 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.248 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.251 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.255 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.259 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.260 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.261 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.262 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.270 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.272 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.273 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.274 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.771 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.940 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.001 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.011 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.012 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.012 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.013 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.014 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.015 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.018 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.020 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.021 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.198.023 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.032 I llama_model_loader: - type  f32:   37 tensors
0.00.198.037 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.037 I llama_model_loader: - type q6_K:   19 tensors
0.00.368.471 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.398.600 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.399.732 I llm_load_vocab: special tokens cache size = 5
0.00.457.788 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.457.852 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.457.853 I llm_load_print_meta: arch             = gemma
0.00.457.854 I llm_load_print_meta: vocab type       = SPM
0.00.457.855 I llm_load_print_meta: n_vocab          = 256000
0.00.457.858 I llm_load_print_meta: n_merges         = 0
0.00.457.858 I llm_load_print_meta: vocab_only       = 0
0.00.457.859 I llm_load_print_meta: n_ctx_train      = 8192
0.00.457.859 I llm_load_print_meta: n_embd           = 2048
0.00.457.859 I llm_load_print_meta: n_layer          = 18
0.00.457.924 I llm_load_print_meta: n_head           = 8
0.00.457.931 I llm_load_print_meta: n_head_kv        = 1
0.00.457.932 I llm_load_print_meta: n_rot            = 256
0.00.457.932 I llm_load_print_meta: n_swa            = 0
0.00.457.933 I llm_load_print_meta: n_embd_head_k    = 256
0.00.457.933 I llm_load_print_meta: n_embd_head_v    = 256
0.00.457.938 I llm_load_print_meta: n_gqa            = 8
0.00.457.942 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.457.947 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.457.948 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.457.950 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.457.950 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.457.951 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.457.951 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.457.956 I llm_load_print_meta: n_ff             = 16384
0.00.457.957 I llm_load_print_meta: n_expert         = 0
0.00.457.958 I llm_load_print_meta: n_expert_used    = 0
0.00.457.958 I llm_load_print_meta: causal attn      = 1
0.00.457.958 I llm_load_print_meta: pooling type     = 0
0.00.457.958 I llm_load_print_meta: rope type        = 2
0.00.457.959 I llm_load_print_meta: rope scaling     = linear
0.00.457.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.457.985 I llm_load_print_meta: freq_scale_train = 1
0.00.457.985 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.457.986 I llm_load_print_meta: rope_finetuned   = unknown
0.00.457.986 I llm_load_print_meta: ssm_d_conv       = 0
0.00.457.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.457.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.457.988 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.457.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.457.989 I llm_load_print_meta: model type       = 2B
0.00.457.990 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.457.991 I llm_load_print_meta: model params     = 2.51 B
0.00.457.992 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.457.992 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.457.993 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.457.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.457.994 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.457.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.457.995 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.457.996 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.458.002 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.458.004 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.458.004 I llm_load_print_meta: max token length = 93
0.00.458.189 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.517.016 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.517.026 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.517.027 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.517.028 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.517.028 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.517.029 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.522.619 I llama_new_context_with_model: n_ctx      = 8192
0.00.522.628 I llama_new_context_with_model: n_batch    = 2048
0.00.522.628 I llama_new_context_with_model: n_ubatch   = 512
0.00.522.629 I llama_new_context_with_model: flash_attn = 0
0.00.522.633 I llama_new_context_with_model: freq_base  = 10000.0
0.00.522.633 I llama_new_context_with_model: freq_scale = 1
0.00.552.347 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.552.385 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.552.495 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.553.874 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.553.880 I llama_new_context_with_model: graph nodes  = 601
0.00.553.880 I llama_new_context_with_model: graph splits = 1
0.00.553.897 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.137.766 I main: llama threadpool init, n_threads = 4
0.01.137.779 I 
0.01.137.872 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.137.875 I 
0.01.138.039 I sampler seed: 2065671919
0.01.138.051 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.138.055 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.138.056 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.138.056 I 
 encompassing the concepts of learning, knowledge, and education.

**Learning:**

Learning is a multifaceted process that encompasses acquiring new knowledge, skills, and attitudes

0.12.102.037 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   667.96 tokens per second)
0.12.102.040 I llama_perf_context_print:        load time =    1134.77 ms
0.12.102.042 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.102.043 I llama_perf_context_print:        eval time =   10881.99 ms /    32 runs   (  340.06 ms per token,     2.94 tokens per second)
0.12.102.044 I llama_perf_context_print:       total time =   10964.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3838 (84f56f3c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199595.55 ms
main:    total time = 199595.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.679 I build: 3838 (84f56f3c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.807 I main: load the model and apply lora adapter, if any
0.00.024.860 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.960 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.977 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.982 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.986 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.987 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.988 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.990 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.999 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.001 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.002 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.006 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.007 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.336 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.503 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.513 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.514 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.515 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.516 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.517 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.518 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.521 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.521 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.529 I llama_model_loader: - type  f32:   37 tensors
0.00.197.533 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.534 I llama_model_loader: - type q6_K:   19 tensors
0.00.351.783 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.382.116 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.383.208 I llm_load_vocab: special tokens cache size = 5
0.00.441.293 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.441.358 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.441.359 I llm_load_print_meta: arch             = gemma
0.00.441.360 I llm_load_print_meta: vocab type       = SPM
0.00.441.361 I llm_load_print_meta: n_vocab          = 256000
0.00.441.364 I llm_load_print_meta: n_merges         = 0
0.00.441.364 I llm_load_print_meta: vocab_only       = 0
0.00.441.365 I llm_load_print_meta: n_ctx_train      = 8192
0.00.441.365 I llm_load_print_meta: n_embd           = 2048
0.00.441.365 I llm_load_print_meta: n_layer          = 18
0.00.441.429 I llm_load_print_meta: n_head           = 8
0.00.441.436 I llm_load_print_meta: n_head_kv        = 1
0.00.441.437 I llm_load_print_meta: n_rot            = 256
0.00.441.438 I llm_load_print_meta: n_swa            = 0
0.00.441.438 I llm_load_print_meta: n_embd_head_k    = 256
0.00.441.439 I llm_load_print_meta: n_embd_head_v    = 256
0.00.441.443 I llm_load_print_meta: n_gqa            = 8
0.00.441.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.441.452 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.441.453 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.441.455 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.441.455 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.441.456 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.441.456 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.441.461 I llm_load_print_meta: n_ff             = 16384
0.00.441.461 I llm_load_print_meta: n_expert         = 0
0.00.441.462 I llm_load_print_meta: n_expert_used    = 0
0.00.441.462 I llm_load_print_meta: causal attn      = 1
0.00.441.462 I llm_load_print_meta: pooling type     = 0
0.00.441.463 I llm_load_print_meta: rope type        = 2
0.00.441.463 I llm_load_print_meta: rope scaling     = linear
0.00.441.465 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.441.465 I llm_load_print_meta: freq_scale_train = 1
0.00.441.466 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.441.466 I llm_load_print_meta: rope_finetuned   = unknown
0.00.441.466 I llm_load_print_meta: ssm_d_conv       = 0
0.00.441.466 I llm_load_print_meta: ssm_d_inner      = 0
0.00.441.467 I llm_load_print_meta: ssm_d_state      = 0
0.00.441.467 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.441.467 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.441.468 I llm_load_print_meta: model type       = 2B
0.00.441.469 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.441.470 I llm_load_print_meta: model params     = 2.51 B
0.00.441.470 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.441.471 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.441.471 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.441.472 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.441.472 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.441.472 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.441.473 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.441.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.441.479 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.441.480 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.441.480 I llm_load_print_meta: max token length = 93
0.00.441.662 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.498.750 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.504.369 I llama_new_context_with_model: n_ctx      = 8192
0.00.504.375 I llama_new_context_with_model: n_batch    = 2048
0.00.504.376 I llama_new_context_with_model: n_ubatch   = 512
0.00.504.376 I llama_new_context_with_model: flash_attn = 0
0.00.504.379 I llama_new_context_with_model: freq_base  = 10000.0
0.00.504.380 I llama_new_context_with_model: freq_scale = 1
0.00.534.586 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.534.631 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.534.738 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.536.131 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.536.137 I llama_new_context_with_model: graph nodes  = 601
0.00.536.138 I llama_new_context_with_model: graph splits = 1
0.00.536.154 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.123.773 I main: llama threadpool init, n_threads = 4
0.01.123.786 I 
0.01.123.882 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.123.886 I 
0.01.124.058 I sampler seed: 101012787
0.01.124.069 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.124.076 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.124.077 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.124.077 I 
 seconally to the question and answer format.

**Question:** Explain the concept of quantum entanglement and its implications.

**Answer:**

**Concept of Quantum

0.12.134.771 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.54 tokens per second)
0.12.134.778 I llama_perf_context_print:        load time =    1120.87 ms
0.12.134.779 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.134.781 I llama_perf_context_print:        eval time =   10928.63 ms /    32 runs   (  341.52 ms per token,     2.93 tokens per second)
0.12.134.782 I llama_perf_context_print:       total time =   11011.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.441s
user	50m19.513s
sys	0m6.510s
