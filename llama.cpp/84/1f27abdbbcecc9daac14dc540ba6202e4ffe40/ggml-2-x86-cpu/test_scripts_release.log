+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.021.617 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.624 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.632 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.640 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.644 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.647 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.648 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.649 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.649 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.650 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.650 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.654 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.655 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.655 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.656 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.656 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.530 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.167 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.125 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.132 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.132 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.134 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.135 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.136 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.139 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.139 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.140 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.140 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.141 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.145 I llama_model_loader: - type  f32:   37 tensors
0.00.133.146 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.868 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.553 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.118 I llm_load_vocab: special tokens cache size = 5
0.00.272.097 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.115 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.115 I llm_load_print_meta: arch             = gemma
0.00.272.116 I llm_load_print_meta: vocab type       = SPM
0.00.272.116 I llm_load_print_meta: n_vocab          = 256000
0.00.272.117 I llm_load_print_meta: n_merges         = 0
0.00.272.117 I llm_load_print_meta: vocab_only       = 0
0.00.272.117 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.118 I llm_load_print_meta: n_embd           = 2048
0.00.272.118 I llm_load_print_meta: n_layer          = 18
0.00.272.130 I llm_load_print_meta: n_head           = 8
0.00.272.131 I llm_load_print_meta: n_head_kv        = 1
0.00.272.131 I llm_load_print_meta: n_rot            = 256
0.00.272.132 I llm_load_print_meta: n_swa            = 0
0.00.272.132 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.132 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.133 I llm_load_print_meta: n_gqa            = 8
0.00.272.134 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.135 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.136 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.137 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.138 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.138 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.138 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.139 I llm_load_print_meta: n_ff             = 16384
0.00.272.139 I llm_load_print_meta: n_expert         = 0
0.00.272.140 I llm_load_print_meta: n_expert_used    = 0
0.00.272.140 I llm_load_print_meta: causal attn      = 1
0.00.272.140 I llm_load_print_meta: pooling type     = 0
0.00.272.141 I llm_load_print_meta: rope type        = 2
0.00.272.141 I llm_load_print_meta: rope scaling     = linear
0.00.272.143 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.143 I llm_load_print_meta: freq_scale_train = 1
0.00.272.144 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.144 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.144 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.145 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.145 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.145 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.145 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.146 I llm_load_print_meta: model type       = 2B
0.00.272.146 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.147 I llm_load_print_meta: model params     = 2.51 B
0.00.272.148 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.148 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.148 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.149 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.149 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.149 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.150 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.150 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.151 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.151 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.151 I llm_load_print_meta: max token length = 93
0.00.373.761 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.373.767 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.373.767 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.373.768 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.373.769 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.373.769 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.379.041 I llama_new_context_with_model: n_seq_max     = 1
0.00.379.047 I llama_new_context_with_model: n_ctx         = 4096
0.00.379.047 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.379.048 I llama_new_context_with_model: n_batch       = 2048
0.00.379.048 I llama_new_context_with_model: n_ubatch      = 512
0.00.379.049 I llama_new_context_with_model: flash_attn    = 0
0.00.379.051 I llama_new_context_with_model: freq_base     = 10000.0
0.00.379.052 I llama_new_context_with_model: freq_scale    = 1
0.00.379.053 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.394.331 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.394.345 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.433 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.395.653 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.395.660 I llama_new_context_with_model: graph nodes  = 601
0.00.395.660 I llama_new_context_with_model: graph splits = 1
0.00.395.662 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.294 I main: llama threadpool init, n_threads = 4
0.00.480.309 I 
0.00.480.383 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.480.387 I 
0.00.480.427 I sampler seed: 3061513178
0.00.480.439 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.441 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.443 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.443 I 
 seconary effects, or CSEs, are unintended consequences of a medical treatment or intervention. They can range from minor inconveniences to serious complications.

**Types

0.02.717.773 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7125.89 tokens per second)
0.02.717.775 I llama_perf_context_print:        load time =     479.40 ms
0.02.717.776 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.717.778 I llama_perf_context_print:        eval time =    2219.14 ms /    32 runs   (   69.35 ms per token,    14.42 tokens per second)
0.02.717.778 I llama_perf_context_print:       total time =    2237.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.591 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.000.929 I main: load the model and apply lora adapter, if any
0.00.021.874 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.888 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.895 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.896 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.901 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.902 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.903 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.904 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.905 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.905 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.910 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.910 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.911 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.912 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.912 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.011 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.263 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.108 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.115 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.116 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.116 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.117 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.119 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.120 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.123 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.124 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.125 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.125 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.137 I llama_model_loader: - type  f32:   37 tensors
0.00.132.138 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.829 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.209 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.816 I llm_load_vocab: special tokens cache size = 5
0.00.265.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.296 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.296 I llm_load_print_meta: arch             = gemma
0.00.265.297 I llm_load_print_meta: vocab type       = SPM
0.00.265.297 I llm_load_print_meta: n_vocab          = 256000
0.00.265.298 I llm_load_print_meta: n_merges         = 0
0.00.265.298 I llm_load_print_meta: vocab_only       = 0
0.00.265.298 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.299 I llm_load_print_meta: n_embd           = 2048
0.00.265.299 I llm_load_print_meta: n_layer          = 18
0.00.265.310 I llm_load_print_meta: n_head           = 8
0.00.265.311 I llm_load_print_meta: n_head_kv        = 1
0.00.265.312 I llm_load_print_meta: n_rot            = 256
0.00.265.312 I llm_load_print_meta: n_swa            = 0
0.00.265.312 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.312 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.313 I llm_load_print_meta: n_gqa            = 8
0.00.265.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.315 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.316 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.317 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.318 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.318 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.318 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.319 I llm_load_print_meta: n_ff             = 16384
0.00.265.320 I llm_load_print_meta: n_expert         = 0
0.00.265.320 I llm_load_print_meta: n_expert_used    = 0
0.00.265.320 I llm_load_print_meta: causal attn      = 1
0.00.265.320 I llm_load_print_meta: pooling type     = 0
0.00.265.321 I llm_load_print_meta: rope type        = 2
0.00.265.321 I llm_load_print_meta: rope scaling     = linear
0.00.265.322 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.323 I llm_load_print_meta: freq_scale_train = 1
0.00.265.323 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.324 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.324 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.324 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.324 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.325 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.325 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.325 I llm_load_print_meta: model type       = 2B
0.00.265.326 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.327 I llm_load_print_meta: model params     = 2.51 B
0.00.265.327 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.328 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.329 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.329 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.329 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.330 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.330 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.330 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.331 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.331 I llm_load_print_meta: max token length = 93
0.00.360.163 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.530 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.537 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.537 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.538 I llama_new_context_with_model: n_batch       = 2048
0.00.365.538 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.539 I llama_new_context_with_model: flash_attn    = 0
0.00.365.541 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.542 I llama_new_context_with_model: freq_scale    = 1
0.00.365.543 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.454 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.471 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.567 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.775 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.782 I llama_new_context_with_model: graph nodes  = 601
0.00.382.782 I llama_new_context_with_model: graph splits = 1
0.00.382.784 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.498 I main: llama threadpool init, n_threads = 4
0.00.464.512 I 
0.00.464.588 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.591 I 
0.00.464.637 I sampler seed: 669557716
0.00.464.647 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.652 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.653 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.653 I 
 maneuvled faces
I am unable to answer the question as it contains inappropriate and suggestive language. [end of text]


0.01.898.527 I llama_perf_sampler_print:    sampling time =       3.14 ms /    22 runs   (    0.14 ms per token,  7008.60 tokens per second)
0.01.898.529 I llama_perf_context_print:        load time =     463.55 ms
0.01.898.530 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.898.531 I llama_perf_context_print:        eval time =    1421.48 ms /    21 runs   (   67.69 ms per token,    14.77 tokens per second)
0.01.898.532 I llama_perf_context_print:       total time =    1434.04 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.564 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.000.894 I main: load the model and apply lora adapter, if any
0.00.021.656 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.667 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.675 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.683 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.684 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.691 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.692 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.692 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.693 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.694 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.694 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.699 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.699 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.700 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.700 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.701 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.381 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.692 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.592 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.599 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.600 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.601 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.601 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.602 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.603 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.605 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.606 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.607 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.607 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.608 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.611 I llama_model_loader: - type  f32:   37 tensors
0.00.132.613 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.697 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.756 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.307 I llm_load_vocab: special tokens cache size = 5
0.00.264.742 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.761 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.761 I llm_load_print_meta: arch             = gemma
0.00.264.762 I llm_load_print_meta: vocab type       = SPM
0.00.264.762 I llm_load_print_meta: n_vocab          = 256000
0.00.264.763 I llm_load_print_meta: n_merges         = 0
0.00.264.763 I llm_load_print_meta: vocab_only       = 0
0.00.264.764 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.764 I llm_load_print_meta: n_embd           = 2048
0.00.264.764 I llm_load_print_meta: n_layer          = 18
0.00.264.777 I llm_load_print_meta: n_head           = 8
0.00.264.778 I llm_load_print_meta: n_head_kv        = 1
0.00.264.779 I llm_load_print_meta: n_rot            = 256
0.00.264.779 I llm_load_print_meta: n_swa            = 0
0.00.264.779 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.779 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.780 I llm_load_print_meta: n_gqa            = 8
0.00.264.781 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.782 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.783 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.784 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.785 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.785 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.785 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.786 I llm_load_print_meta: n_ff             = 16384
0.00.264.787 I llm_load_print_meta: n_expert         = 0
0.00.264.787 I llm_load_print_meta: n_expert_used    = 0
0.00.264.787 I llm_load_print_meta: causal attn      = 1
0.00.264.788 I llm_load_print_meta: pooling type     = 0
0.00.264.788 I llm_load_print_meta: rope type        = 2
0.00.264.788 I llm_load_print_meta: rope scaling     = linear
0.00.264.790 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.791 I llm_load_print_meta: freq_scale_train = 1
0.00.264.791 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.791 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.792 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.792 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.792 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.792 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.793 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.793 I llm_load_print_meta: model type       = 2B
0.00.264.794 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.795 I llm_load_print_meta: model params     = 2.51 B
0.00.264.795 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.796 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.796 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.797 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.798 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.798 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.798 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.799 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.799 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.800 I llm_load_print_meta: max token length = 93
0.00.351.573 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.351.581 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.582 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.351.583 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.351.584 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.351.584 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.356.771 I llama_new_context_with_model: n_seq_max     = 1
0.00.356.780 I llama_new_context_with_model: n_ctx         = 4096
0.00.356.780 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.356.781 I llama_new_context_with_model: n_batch       = 2048
0.00.356.781 I llama_new_context_with_model: n_ubatch      = 512
0.00.356.782 I llama_new_context_with_model: flash_attn    = 0
0.00.356.785 I llama_new_context_with_model: freq_base     = 10000.0
0.00.356.786 I llama_new_context_with_model: freq_scale    = 1
0.00.356.787 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.999 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.016 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.104 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.322 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.328 I llama_new_context_with_model: graph nodes  = 601
0.00.374.328 I llama_new_context_with_model: graph splits = 1
0.00.374.330 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.999 I main: llama threadpool init, n_threads = 4
0.00.460.013 I 
0.00.460.089 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.092 I 
0.00.460.137 I sampler seed: 1005698751
0.00.460.147 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.150 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.151 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.152 I 
 increasels!

The correct answer is "Cinderella".

Cinderella is a famous fairy tale character known for her beautiful gown, tragic circumstances, and the kindness of

0.02.618.234 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7000.42 tokens per second)
0.02.618.236 I llama_perf_context_print:        load time =     459.08 ms
0.02.618.237 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.618.239 I llama_perf_context_print:        eval time =    2139.22 ms /    32 runs   (   66.85 ms per token,    14.96 tokens per second)
0.02.618.240 I llama_perf_context_print:       total time =    2158.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.872 I main: load the model and apply lora adapter, if any
0.00.021.195 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.205 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.213 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.217 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.220 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.223 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.224 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.225 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.225 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.226 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.226 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.230 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.231 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.231 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.232 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.232 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.642 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.680 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.564 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.571 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.573 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.576 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.576 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.577 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.578 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.579 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.581 I llama_model_loader: - type  f32:   37 tensors
0.00.131.582 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.351 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.755 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.324 I llm_load_vocab: special tokens cache size = 5
0.00.264.435 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.451 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.451 I llm_load_print_meta: arch             = gemma
0.00.264.452 I llm_load_print_meta: vocab type       = SPM
0.00.264.452 I llm_load_print_meta: n_vocab          = 256000
0.00.264.453 I llm_load_print_meta: n_merges         = 0
0.00.264.453 I llm_load_print_meta: vocab_only       = 0
0.00.264.453 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.454 I llm_load_print_meta: n_embd           = 2048
0.00.264.454 I llm_load_print_meta: n_layer          = 18
0.00.264.465 I llm_load_print_meta: n_head           = 8
0.00.264.466 I llm_load_print_meta: n_head_kv        = 1
0.00.264.467 I llm_load_print_meta: n_rot            = 256
0.00.264.467 I llm_load_print_meta: n_swa            = 0
0.00.264.467 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.468 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.468 I llm_load_print_meta: n_gqa            = 8
0.00.264.469 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.470 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.471 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.473 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.473 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.473 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.474 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.474 I llm_load_print_meta: n_ff             = 16384
0.00.264.475 I llm_load_print_meta: n_expert         = 0
0.00.264.475 I llm_load_print_meta: n_expert_used    = 0
0.00.264.475 I llm_load_print_meta: causal attn      = 1
0.00.264.476 I llm_load_print_meta: pooling type     = 0
0.00.264.476 I llm_load_print_meta: rope type        = 2
0.00.264.476 I llm_load_print_meta: rope scaling     = linear
0.00.264.478 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.478 I llm_load_print_meta: freq_scale_train = 1
0.00.264.478 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.479 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.479 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.479 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.479 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.480 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.480 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.480 I llm_load_print_meta: model type       = 2B
0.00.264.481 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.482 I llm_load_print_meta: model params     = 2.51 B
0.00.264.483 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.483 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.483 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.484 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.485 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.485 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.485 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.486 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.486 I llm_load_print_meta: max token length = 93
0.00.335.511 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.517 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.597 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.605 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.605 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.605 I llama_new_context_with_model: n_batch       = 2048
0.00.340.606 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.606 I llama_new_context_with_model: flash_attn    = 0
0.00.340.609 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.610 I llama_new_context_with_model: freq_scale    = 1
0.00.340.611 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.201 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.215 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.310 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.548 I llama_new_context_with_model: graph nodes  = 601
0.00.357.549 I llama_new_context_with_model: graph splits = 1
0.00.357.551 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.881 I main: llama threadpool init, n_threads = 4
0.00.452.897 I 
0.00.452.975 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.452.979 I 
0.00.453.023 I sampler seed: 3747101166
0.00.453.033 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.038 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.039 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.039 I 
 increasities for the following:

a) A cup of tea

b) A glass of wine

c) A bottle of water

d) A carton

0.02.865.620 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7018.29 tokens per second)
0.02.865.623 I llama_perf_context_print:        load time =     451.99 ms
0.02.865.624 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.865.625 I llama_perf_context_print:        eval time =    2393.95 ms /    32 runs   (   74.81 ms per token,    13.37 tokens per second)
0.02.865.626 I llama_perf_context_print:       total time =    2412.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.658s
user	0m35.856s
sys	0m9.357s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4051 (841f27ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31965.78 ms
main:    total time = 31965.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.870 I main: load the model and apply lora adapter, if any
0.00.021.204 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.214 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.222 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.230 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.231 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.234 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.235 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.235 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.236 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.236 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.237 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.240 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.240 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.241 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.241 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.242 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.996 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.884 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.732 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.738 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.738 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.739 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.739 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.740 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.741 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.743 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.743 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.744 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.744 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.746 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.748 I llama_model_loader: - type  f32:   37 tensors
0.00.131.749 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.750 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.990 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.009 I llm_load_vocab: special tokens cache size = 5
0.00.259.273 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.290 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.291 I llm_load_print_meta: arch             = gemma
0.00.259.291 I llm_load_print_meta: vocab type       = SPM
0.00.259.292 I llm_load_print_meta: n_vocab          = 256000
0.00.259.292 I llm_load_print_meta: n_merges         = 0
0.00.259.293 I llm_load_print_meta: vocab_only       = 0
0.00.259.293 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.293 I llm_load_print_meta: n_embd           = 2048
0.00.259.294 I llm_load_print_meta: n_layer          = 18
0.00.259.305 I llm_load_print_meta: n_head           = 8
0.00.259.306 I llm_load_print_meta: n_head_kv        = 1
0.00.259.307 I llm_load_print_meta: n_rot            = 256
0.00.259.307 I llm_load_print_meta: n_swa            = 0
0.00.259.307 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.307 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.308 I llm_load_print_meta: n_gqa            = 8
0.00.259.309 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.310 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.311 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.314 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.314 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.315 I llm_load_print_meta: n_ff             = 16384
0.00.259.315 I llm_load_print_meta: n_expert         = 0
0.00.259.316 I llm_load_print_meta: n_expert_used    = 0
0.00.259.316 I llm_load_print_meta: causal attn      = 1
0.00.259.317 I llm_load_print_meta: pooling type     = 0
0.00.259.317 I llm_load_print_meta: rope type        = 2
0.00.259.317 I llm_load_print_meta: rope scaling     = linear
0.00.259.319 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.320 I llm_load_print_meta: freq_scale_train = 1
0.00.259.320 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.320 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.321 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.321 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.321 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.321 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.321 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.322 I llm_load_print_meta: model type       = 2B
0.00.259.322 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.323 I llm_load_print_meta: model params     = 2.51 B
0.00.259.324 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.324 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.325 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.325 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.325 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.326 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.326 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.327 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.327 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.327 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.328 I llm_load_print_meta: max token length = 93
0.00.320.169 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.320.176 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.320.177 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.320.177 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.320.178 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.320.179 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.325.356 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.362 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.363 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.363 I llama_new_context_with_model: n_batch       = 2048
0.00.325.364 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.364 I llama_new_context_with_model: flash_attn    = 0
0.00.325.366 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.367 I llama_new_context_with_model: freq_scale    = 1
0.00.325.368 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.695 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.708 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.802 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.025 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.032 I llama_new_context_with_model: graph nodes  = 601
0.00.342.032 I llama_new_context_with_model: graph splits = 1
0.00.342.034 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.311 I main: llama threadpool init, n_threads = 4
0.00.417.326 I 
0.00.417.403 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.417.406 I 
0.00.417.449 I sampler seed: 447557795
0.00.417.460 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.464 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.464 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.465 I 
 maneuvled into a mythical creature.

**Mythological Creature**

The mythical creature is said to be a hybrid of a fox and a cat, with

0.02.048.719 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6828.06 tokens per second)
0.02.048.722 I llama_perf_context_print:        load time =     416.42 ms
0.02.048.724 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.048.725 I llama_perf_context_print:        eval time =    1612.47 ms /    32 runs   (   50.39 ms per token,    19.85 tokens per second)
0.02.048.726 I llama_perf_context_print:       total time =    1631.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4051 (841f27ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32035.98 ms
main:    total time = 32035.98 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.530 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.021.330 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.346 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.355 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.359 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.362 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.363 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.363 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.364 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.364 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.365 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.368 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.369 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.369 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.369 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.370 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.912 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.863 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.740 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.747 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.747 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.748 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.749 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.749 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.750 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.753 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.753 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.756 I llama_model_loader: - type  f32:   37 tensors
0.00.131.757 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.758 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.634 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.121 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.630 I llm_load_vocab: special tokens cache size = 5
0.00.265.392 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.408 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.409 I llm_load_print_meta: arch             = gemma
0.00.265.411 I llm_load_print_meta: vocab type       = SPM
0.00.265.411 I llm_load_print_meta: n_vocab          = 256000
0.00.265.412 I llm_load_print_meta: n_merges         = 0
0.00.265.412 I llm_load_print_meta: vocab_only       = 0
0.00.265.412 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.413 I llm_load_print_meta: n_embd           = 2048
0.00.265.413 I llm_load_print_meta: n_layer          = 18
0.00.265.424 I llm_load_print_meta: n_head           = 8
0.00.265.426 I llm_load_print_meta: n_head_kv        = 1
0.00.265.426 I llm_load_print_meta: n_rot            = 256
0.00.265.427 I llm_load_print_meta: n_swa            = 0
0.00.265.427 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.427 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.428 I llm_load_print_meta: n_gqa            = 8
0.00.265.430 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.431 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.432 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.435 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.436 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.436 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.437 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.438 I llm_load_print_meta: n_ff             = 16384
0.00.265.439 I llm_load_print_meta: n_expert         = 0
0.00.265.439 I llm_load_print_meta: n_expert_used    = 0
0.00.265.440 I llm_load_print_meta: causal attn      = 1
0.00.265.440 I llm_load_print_meta: pooling type     = 0
0.00.265.440 I llm_load_print_meta: rope type        = 2
0.00.265.443 I llm_load_print_meta: rope scaling     = linear
0.00.265.444 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.445 I llm_load_print_meta: freq_scale_train = 1
0.00.265.445 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.446 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.446 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.446 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.446 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.447 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.447 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.447 I llm_load_print_meta: model type       = 2B
0.00.265.448 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.448 I llm_load_print_meta: model params     = 2.51 B
0.00.265.449 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.449 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.450 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.451 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.451 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.451 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.452 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.452 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.453 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.454 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.454 I llm_load_print_meta: max token length = 93
0.00.323.261 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.368 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.375 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.375 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.375 I llama_new_context_with_model: n_batch       = 2048
0.00.328.376 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.376 I llama_new_context_with_model: flash_attn    = 0
0.00.328.378 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.379 I llama_new_context_with_model: freq_scale    = 1
0.00.328.380 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.897 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.913 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.005 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.273 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.279 I llama_new_context_with_model: graph nodes  = 601
0.00.345.279 I llama_new_context_with_model: graph splits = 1
0.00.345.281 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.761 I main: llama threadpool init, n_threads = 4
0.00.419.775 I 
0.00.419.851 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.419.855 I 
0.00.419.900 I sampler seed: 1197361987
0.00.419.912 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.915 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.916 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.917 I 
 encomprages and other limitations of the traditional method of understanding the mind.

**Philosophical Limitations of Traditional Mind Understanding:**

* **Reductionism:** Views the

0.02.011.862 I llama_perf_sampler_print:    sampling time =       5.78 ms /    33 runs   (    0.18 ms per token,  5713.30 tokens per second)
0.02.011.864 I llama_perf_context_print:        load time =     418.88 ms
0.02.011.865 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.011.866 I llama_perf_context_print:        eval time =    1571.65 ms /    32 runs   (   49.11 ms per token,    20.36 tokens per second)
0.02.011.867 I llama_perf_context_print:       total time =    1592.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.896s
user	8m14.550s
sys	0m6.913s
