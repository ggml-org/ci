+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.001.091 I main: load the model and apply lora adapter, if any
0.00.023.508 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.516 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.605 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.616 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.620 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.625 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.626 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.627 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.628 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.629 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.630 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.637 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.641 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.642 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.643 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.645 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.200 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.066 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.175 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.182 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.183 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.184 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.185 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.187 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.188 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.192 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.193 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.194 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.195 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.196 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.204 I llama_model_loader: - type  f32:   37 tensors
0.00.265.206 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.496 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.934 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.906 I llm_load_vocab: special tokens cache size = 5
0.00.607.563 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.632 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.634 I llm_load_print_meta: arch             = gemma
0.00.607.634 I llm_load_print_meta: vocab type       = SPM
0.00.607.636 I llm_load_print_meta: n_vocab          = 256000
0.00.607.638 I llm_load_print_meta: n_merges         = 0
0.00.607.639 I llm_load_print_meta: vocab_only       = 0
0.00.607.639 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.640 I llm_load_print_meta: n_embd           = 2048
0.00.607.640 I llm_load_print_meta: n_layer          = 18
0.00.607.707 I llm_load_print_meta: n_head           = 8
0.00.607.714 I llm_load_print_meta: n_head_kv        = 1
0.00.607.715 I llm_load_print_meta: n_rot            = 256
0.00.607.715 I llm_load_print_meta: n_swa            = 0
0.00.607.716 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.717 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.721 I llm_load_print_meta: n_gqa            = 8
0.00.607.726 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.731 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.732 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.733 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.734 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.734 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.735 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.740 I llm_load_print_meta: n_ff             = 16384
0.00.607.741 I llm_load_print_meta: n_expert         = 0
0.00.607.741 I llm_load_print_meta: n_expert_used    = 0
0.00.607.742 I llm_load_print_meta: causal attn      = 1
0.00.607.742 I llm_load_print_meta: pooling type     = 0
0.00.607.742 I llm_load_print_meta: rope type        = 2
0.00.607.744 I llm_load_print_meta: rope scaling     = linear
0.00.607.746 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.747 I llm_load_print_meta: freq_scale_train = 1
0.00.607.748 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.748 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.748 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.748 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.749 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.749 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.749 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.754 I llm_load_print_meta: model type       = 2B
0.00.607.755 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.765 I llm_load_print_meta: model params     = 2.51 B
0.00.607.774 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.775 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.776 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.776 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.777 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.778 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.779 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.785 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.786 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.786 I llm_load_print_meta: max token length = 93
0.00.710.455 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.710.466 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.710.467 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.710.468 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.710.468 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.710.469 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.716.255 I llama_new_context_with_model: n_seq_max     = 1
0.00.716.262 I llama_new_context_with_model: n_ctx         = 4096
0.00.716.262 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.716.263 I llama_new_context_with_model: n_batch       = 2048
0.00.716.263 I llama_new_context_with_model: n_ubatch      = 512
0.00.716.264 I llama_new_context_with_model: flash_attn    = 0
0.00.716.266 I llama_new_context_with_model: freq_base     = 10000.0
0.00.716.267 I llama_new_context_with_model: freq_scale    = 1
0.00.716.267 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.732.482 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.732.521 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.732.646 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.735.157 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.735.161 I llama_new_context_with_model: graph nodes  = 601
0.00.735.162 I llama_new_context_with_model: graph splits = 1
0.00.735.187 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.425 I main: llama threadpool init, n_threads = 4
0.01.340.437 I 
0.01.340.540 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.544 I 
0.01.340.775 I sampler seed: 3531693330
0.01.340.789 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.796 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.340.799 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.799 I 
 increasities in the music industry, and the challenges and opportunities it poses to artists and listeners.

**Challenge 1: Navigating the ever-changing digital

0.14.761.940 I llama_perf_sampler_print:    sampling time =      48.16 ms /    33 runs   (    1.46 ms per token,   685.24 tokens per second)
0.14.761.944 I llama_perf_context_print:        load time =    1339.23 ms
0.14.761.945 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.761.947 I llama_perf_context_print:        eval time =   13331.94 ms /    32 runs   (  416.62 ms per token,     2.40 tokens per second)
0.14.761.947 I llama_perf_context_print:       total time =   13421.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.001.096 I main: load the model and apply lora adapter, if any
0.00.023.679 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.774 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.788 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.790 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.793 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.797 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.799 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.800 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.801 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.802 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.808 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.809 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.810 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.811 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.812 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.791 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.864 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.113 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.125 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.126 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.127 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.128 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.130 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.134 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.135 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.137 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.137 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.265.139 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.147 I llama_model_loader: - type  f32:   37 tensors
0.00.265.148 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.071 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.461 I llm_load_vocab: special tokens cache size = 5
0.00.608.800 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.866 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.867 I llm_load_print_meta: arch             = gemma
0.00.608.868 I llm_load_print_meta: vocab type       = SPM
0.00.608.868 I llm_load_print_meta: n_vocab          = 256000
0.00.608.871 I llm_load_print_meta: n_merges         = 0
0.00.608.871 I llm_load_print_meta: vocab_only       = 0
0.00.608.872 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.872 I llm_load_print_meta: n_embd           = 2048
0.00.608.872 I llm_load_print_meta: n_layer          = 18
0.00.608.937 I llm_load_print_meta: n_head           = 8
0.00.608.944 I llm_load_print_meta: n_head_kv        = 1
0.00.608.945 I llm_load_print_meta: n_rot            = 256
0.00.608.945 I llm_load_print_meta: n_swa            = 0
0.00.608.947 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.948 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.953 I llm_load_print_meta: n_gqa            = 8
0.00.608.957 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.963 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.964 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.966 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.966 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.967 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.967 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.972 I llm_load_print_meta: n_ff             = 16384
0.00.608.972 I llm_load_print_meta: n_expert         = 0
0.00.608.974 I llm_load_print_meta: n_expert_used    = 0
0.00.608.974 I llm_load_print_meta: causal attn      = 1
0.00.608.974 I llm_load_print_meta: pooling type     = 0
0.00.608.975 I llm_load_print_meta: rope type        = 2
0.00.608.975 I llm_load_print_meta: rope scaling     = linear
0.00.608.978 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.982 I llm_load_print_meta: freq_scale_train = 1
0.00.608.982 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.983 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.983 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.983 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.002 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.006 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.006 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.007 I llm_load_print_meta: model type       = 2B
0.00.609.008 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.009 I llm_load_print_meta: model params     = 2.51 B
0.00.609.018 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.018 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.019 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.020 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.020 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.021 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.022 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.022 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.029 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.031 I llm_load_print_meta: max token length = 93
0.00.706.187 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.712.052 I llama_new_context_with_model: n_seq_max     = 1
0.00.712.059 I llama_new_context_with_model: n_ctx         = 4096
0.00.712.059 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.712.060 I llama_new_context_with_model: n_batch       = 2048
0.00.712.060 I llama_new_context_with_model: n_ubatch      = 512
0.00.712.060 I llama_new_context_with_model: flash_attn    = 0
0.00.712.062 I llama_new_context_with_model: freq_base     = 10000.0
0.00.712.063 I llama_new_context_with_model: freq_scale    = 1
0.00.712.064 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.728.636 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.728.680 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.728.799 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.731.274 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.731.278 I llama_new_context_with_model: graph nodes  = 601
0.00.731.278 I llama_new_context_with_model: graph splits = 1
0.00.731.302 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.257 I main: llama threadpool init, n_threads = 4
0.01.338.268 I 
0.01.338.379 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.383 I 
0.01.338.612 I sampler seed: 1347395985
0.01.338.624 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.632 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.338.633 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.633 I 
 increasively from 10 to 100.

What is the final value of the expression?

$$10 + 2^x$$

0.14.873.331 I llama_perf_sampler_print:    sampling time =      48.10 ms /    33 runs   (    1.46 ms per token,   686.10 tokens per second)
0.14.873.347 I llama_perf_context_print:        load time =    1337.06 ms
0.14.873.349 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.873.350 I llama_perf_context_print:        eval time =   13446.50 ms /    32 runs   (  420.20 ms per token,     2.38 tokens per second)
0.14.873.351 I llama_perf_context_print:       total time =   13535.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.001.129 I main: load the model and apply lora adapter, if any
0.00.023.491 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.502 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.588 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.599 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.603 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.608 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.609 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.611 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.613 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.614 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.616 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.622 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.626 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.627 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.628 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.629 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.263 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.123 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.264.149 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.264.157 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.264.158 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.264.159 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.264.160 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.264.161 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.264.162 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.264.166 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.264.167 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.264.167 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.264.168 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.264.169 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.264.177 I llama_model_loader: - type  f32:   37 tensors
0.00.264.179 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.970 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.389 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.249 I llm_load_vocab: special tokens cache size = 5
0.00.604.598 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.668 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.668 I llm_load_print_meta: arch             = gemma
0.00.604.669 I llm_load_print_meta: vocab type       = SPM
0.00.604.670 I llm_load_print_meta: n_vocab          = 256000
0.00.604.672 I llm_load_print_meta: n_merges         = 0
0.00.604.673 I llm_load_print_meta: vocab_only       = 0
0.00.604.673 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.673 I llm_load_print_meta: n_embd           = 2048
0.00.604.674 I llm_load_print_meta: n_layer          = 18
0.00.604.738 I llm_load_print_meta: n_head           = 8
0.00.604.745 I llm_load_print_meta: n_head_kv        = 1
0.00.604.746 I llm_load_print_meta: n_rot            = 256
0.00.604.746 I llm_load_print_meta: n_swa            = 0
0.00.604.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.761 I llm_load_print_meta: n_gqa            = 8
0.00.604.768 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.773 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.778 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.780 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.781 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.781 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.789 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.795 I llm_load_print_meta: n_ff             = 16384
0.00.604.800 I llm_load_print_meta: n_expert         = 0
0.00.604.801 I llm_load_print_meta: n_expert_used    = 0
0.00.604.806 I llm_load_print_meta: causal attn      = 1
0.00.604.807 I llm_load_print_meta: pooling type     = 0
0.00.604.812 I llm_load_print_meta: rope type        = 2
0.00.604.818 I llm_load_print_meta: rope scaling     = linear
0.00.604.819 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.820 I llm_load_print_meta: freq_scale_train = 1
0.00.604.821 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.822 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.822 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.822 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.824 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.824 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.825 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.825 I llm_load_print_meta: model type       = 2B
0.00.604.827 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.827 I llm_load_print_meta: model params     = 2.51 B
0.00.604.836 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.840 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.841 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.841 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.842 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.845 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.846 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.846 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.852 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.854 I llm_load_print_meta: max token length = 93
0.00.694.315 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.694.322 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.694.323 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.694.324 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.694.324 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.694.325 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.700.076 I llama_new_context_with_model: n_seq_max     = 1
0.00.700.083 I llama_new_context_with_model: n_ctx         = 4096
0.00.700.083 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.700.084 I llama_new_context_with_model: n_batch       = 2048
0.00.700.084 I llama_new_context_with_model: n_ubatch      = 512
0.00.700.085 I llama_new_context_with_model: flash_attn    = 0
0.00.700.087 I llama_new_context_with_model: freq_base     = 10000.0
0.00.700.088 I llama_new_context_with_model: freq_scale    = 1
0.00.700.089 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.716.068 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.716.109 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.716.238 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.763 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.718.768 I llama_new_context_with_model: graph nodes  = 601
0.00.718.769 I llama_new_context_with_model: graph splits = 1
0.00.718.793 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.323.744 I main: llama threadpool init, n_threads = 4
0.01.323.758 I 
0.01.323.866 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.323.870 I 
0.01.324.103 I sampler seed: 4200564940
0.01.324.116 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.121 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.324.125 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.125 I 
 seconary effects.

**a)** The effect of a treatment on the incidence of a disease.
**b)** The effect of a treatment on the survival

0.14.719.256 I llama_perf_sampler_print:    sampling time =      48.54 ms /    33 runs   (    1.47 ms per token,   679.85 tokens per second)
0.14.719.258 I llama_perf_context_print:        load time =    1322.52 ms
0.14.719.260 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.719.275 I llama_perf_context_print:        eval time =   13305.56 ms /    32 runs   (  415.80 ms per token,     2.41 tokens per second)
0.14.719.276 I llama_perf_context_print:       total time =   13395.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.692 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.001.157 I main: load the model and apply lora adapter, if any
0.00.023.772 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.781 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.873 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.884 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.886 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.890 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.892 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.893 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.894 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.895 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.897 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.905 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.909 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.910 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.911 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.098 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.858 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.012 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.021 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.023 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.024 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.025 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.027 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.028 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.032 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.045 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.048 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.049 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.050 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.059 I llama_model_loader: - type  f32:   37 tensors
0.00.265.061 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.147 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.638 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.602 I llm_load_vocab: special tokens cache size = 5
0.00.597.892 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.960 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.961 I llm_load_print_meta: arch             = gemma
0.00.597.961 I llm_load_print_meta: vocab type       = SPM
0.00.597.963 I llm_load_print_meta: n_vocab          = 256000
0.00.597.965 I llm_load_print_meta: n_merges         = 0
0.00.597.965 I llm_load_print_meta: vocab_only       = 0
0.00.597.966 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.966 I llm_load_print_meta: n_embd           = 2048
0.00.597.966 I llm_load_print_meta: n_layer          = 18
0.00.598.032 I llm_load_print_meta: n_head           = 8
0.00.598.040 I llm_load_print_meta: n_head_kv        = 1
0.00.598.041 I llm_load_print_meta: n_rot            = 256
0.00.598.042 I llm_load_print_meta: n_swa            = 0
0.00.598.042 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.042 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.048 I llm_load_print_meta: n_gqa            = 8
0.00.598.052 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.058 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.060 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.062 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.063 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.068 I llm_load_print_meta: n_ff             = 16384
0.00.598.071 I llm_load_print_meta: n_expert         = 0
0.00.598.072 I llm_load_print_meta: n_expert_used    = 0
0.00.598.072 I llm_load_print_meta: causal attn      = 1
0.00.598.073 I llm_load_print_meta: pooling type     = 0
0.00.598.073 I llm_load_print_meta: rope type        = 2
0.00.598.073 I llm_load_print_meta: rope scaling     = linear
0.00.598.075 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.075 I llm_load_print_meta: freq_scale_train = 1
0.00.598.076 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.076 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.077 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.077 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.078 I llm_load_print_meta: model type       = 2B
0.00.598.079 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.080 I llm_load_print_meta: model params     = 2.51 B
0.00.598.088 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.089 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.090 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.091 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.092 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.092 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.092 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.093 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.101 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.102 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.103 I llm_load_print_meta: max token length = 93
0.00.669.972 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.669.982 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.675.713 I llama_new_context_with_model: n_seq_max     = 1
0.00.675.720 I llama_new_context_with_model: n_ctx         = 4096
0.00.675.720 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.675.720 I llama_new_context_with_model: n_batch       = 2048
0.00.675.721 I llama_new_context_with_model: n_ubatch      = 512
0.00.675.721 I llama_new_context_with_model: flash_attn    = 0
0.00.675.724 I llama_new_context_with_model: freq_base     = 10000.0
0.00.675.725 I llama_new_context_with_model: freq_scale    = 1
0.00.675.726 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.691.856 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.691.896 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.692.022 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.694.523 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.694.528 I llama_new_context_with_model: graph nodes  = 601
0.00.694.528 I llama_new_context_with_model: graph splits = 1
0.00.694.551 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.083 I main: llama threadpool init, n_threads = 4
0.01.301.096 I 
0.01.301.202 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.206 I 
0.01.301.436 I sampler seed: 4127772491
0.01.301.449 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.458 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.301.459 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.459 I 
 increadibly.

I am unable to answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.10.118.180 I llama_perf_sampler_print:    sampling time =      31.62 ms /    22 runs   (    1.44 ms per token,   695.74 tokens per second)
0.10.118.184 I llama_perf_context_print:        load time =    1299.83 ms
0.10.118.186 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.118.187 I llama_perf_context_print:        eval time =    8757.57 ms /    21 runs   (  417.03 ms per token,     2.40 tokens per second)
0.10.118.188 I llama_perf_context_print:       total time =    8817.11 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.110s
user	3m29.340s
sys	0m9.285s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4051 (841f27ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198455.02 ms
main:    total time = 198455.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.001.086 I main: load the model and apply lora adapter, if any
0.00.023.625 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.635 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.724 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.736 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.738 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.741 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.743 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.744 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.745 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.746 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.747 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.752 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.754 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.756 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.757 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.759 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.290 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.435 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.580 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.592 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.593 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.594 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.595 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.597 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.598 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.602 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.603 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.604 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.263.605 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.263.606 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.263.615 I llama_model_loader: - type  f32:   37 tensors
0.00.263.618 I llama_model_loader: - type q4_K:  108 tensors
0.00.263.619 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.376 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.992 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.868 I llm_load_vocab: special tokens cache size = 5
0.00.601.009 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.079 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.081 I llm_load_print_meta: arch             = gemma
0.00.601.082 I llm_load_print_meta: vocab type       = SPM
0.00.601.082 I llm_load_print_meta: n_vocab          = 256000
0.00.601.084 I llm_load_print_meta: n_merges         = 0
0.00.601.085 I llm_load_print_meta: vocab_only       = 0
0.00.601.085 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.086 I llm_load_print_meta: n_embd           = 2048
0.00.601.086 I llm_load_print_meta: n_layer          = 18
0.00.601.148 I llm_load_print_meta: n_head           = 8
0.00.601.155 I llm_load_print_meta: n_head_kv        = 1
0.00.601.155 I llm_load_print_meta: n_rot            = 256
0.00.601.156 I llm_load_print_meta: n_swa            = 0
0.00.601.157 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.157 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.163 I llm_load_print_meta: n_gqa            = 8
0.00.601.167 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.172 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.173 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.175 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.175 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.176 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.176 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.181 I llm_load_print_meta: n_ff             = 16384
0.00.601.181 I llm_load_print_meta: n_expert         = 0
0.00.601.182 I llm_load_print_meta: n_expert_used    = 0
0.00.601.182 I llm_load_print_meta: causal attn      = 1
0.00.601.182 I llm_load_print_meta: pooling type     = 0
0.00.601.183 I llm_load_print_meta: rope type        = 2
0.00.601.183 I llm_load_print_meta: rope scaling     = linear
0.00.601.185 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.186 I llm_load_print_meta: freq_scale_train = 1
0.00.601.187 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.187 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.187 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.187 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.188 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.198 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.200 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.200 I llm_load_print_meta: model type       = 2B
0.00.601.202 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.601.203 I llm_load_print_meta: model params     = 2.51 B
0.00.601.212 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.601.212 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.213 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.226 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.227 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.227 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.228 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.229 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.235 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.237 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.237 I llm_load_print_meta: max token length = 93
0.00.665.635 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.665.645 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.665.646 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.665.647 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.665.648 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.665.648 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.671.425 I llama_new_context_with_model: n_seq_max     = 1
0.00.671.432 I llama_new_context_with_model: n_ctx         = 4096
0.00.671.432 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.671.433 I llama_new_context_with_model: n_batch       = 2048
0.00.671.433 I llama_new_context_with_model: n_ubatch      = 512
0.00.671.434 I llama_new_context_with_model: flash_attn    = 0
0.00.671.436 I llama_new_context_with_model: freq_base     = 10000.0
0.00.671.437 I llama_new_context_with_model: freq_scale    = 1
0.00.671.438 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.687.739 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.687.779 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.687.902 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.690.418 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.690.422 I llama_new_context_with_model: graph nodes  = 601
0.00.690.422 I llama_new_context_with_model: graph splits = 1
0.00.690.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.260.310 I main: llama threadpool init, n_threads = 4
0.01.260.323 I 
0.01.260.436 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.260.436 I 
0.01.260.667 I sampler seed: 2560686383
0.01.260.683 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.260.689 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.260.692 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.260.693 I 
 seconde.

**Assistant**

I am unable to access personal information, including social security numbers, financial information, or personally identifiable information. Therefore, I

0.12.105.578 I llama_perf_sampler_print:    sampling time =      48.28 ms /    33 runs   (    1.46 ms per token,   683.48 tokens per second)
0.12.105.582 I llama_perf_context_print:        load time =    1259.13 ms
0.12.105.583 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.105.586 I llama_perf_context_print:        eval time =   10755.62 ms /    32 runs   (  336.11 ms per token,     2.98 tokens per second)
0.12.105.587 I llama_perf_context_print:       total time =   10845.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4051 (841f27ab)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198601.68 ms
main:    total time = 198601.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.676 I build: 4051 (841f27ab) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.001.161 I main: load the model and apply lora adapter, if any
0.00.023.413 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.514 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.528 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.530 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.534 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.538 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.540 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.541 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.542 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.543 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.549 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.550 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.551 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.552 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.553 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.658 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.112 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.263.940 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.263.948 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.263.949 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.263.950 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.263.951 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.263.954 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.263.955 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.263.959 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.263.963 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.263.970 I llama_model_loader: - type  f32:   37 tensors
0.00.263.973 I llama_model_loader: - type q4_K:  108 tensors
0.00.263.974 I llama_model_loader: - type q6_K:   19 tensors
0.00.437.068 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.079 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.926 I llm_load_vocab: special tokens cache size = 5
0.00.591.104 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.170 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.171 I llm_load_print_meta: arch             = gemma
0.00.591.172 I llm_load_print_meta: vocab type       = SPM
0.00.591.173 I llm_load_print_meta: n_vocab          = 256000
0.00.591.175 I llm_load_print_meta: n_merges         = 0
0.00.591.175 I llm_load_print_meta: vocab_only       = 0
0.00.591.176 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.176 I llm_load_print_meta: n_embd           = 2048
0.00.591.176 I llm_load_print_meta: n_layer          = 18
0.00.591.241 I llm_load_print_meta: n_head           = 8
0.00.591.248 I llm_load_print_meta: n_head_kv        = 1
0.00.591.248 I llm_load_print_meta: n_rot            = 256
0.00.591.249 I llm_load_print_meta: n_swa            = 0
0.00.591.249 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.250 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.254 I llm_load_print_meta: n_gqa            = 8
0.00.591.270 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.275 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.277 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.278 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.278 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.279 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.279 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.284 I llm_load_print_meta: n_ff             = 16384
0.00.591.285 I llm_load_print_meta: n_expert         = 0
0.00.591.285 I llm_load_print_meta: n_expert_used    = 0
0.00.591.301 I llm_load_print_meta: causal attn      = 1
0.00.591.302 I llm_load_print_meta: pooling type     = 0
0.00.591.311 I llm_load_print_meta: rope type        = 2
0.00.591.311 I llm_load_print_meta: rope scaling     = linear
0.00.591.313 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.314 I llm_load_print_meta: freq_scale_train = 1
0.00.591.321 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.322 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.323 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.323 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.324 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.324 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.331 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.332 I llm_load_print_meta: model type       = 2B
0.00.591.334 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.335 I llm_load_print_meta: model params     = 2.51 B
0.00.591.344 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.352 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.353 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.353 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.354 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.355 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.355 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.356 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.361 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.363 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.363 I llm_load_print_meta: max token length = 93
0.00.651.626 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.657.377 I llama_new_context_with_model: n_seq_max     = 1
0.00.657.384 I llama_new_context_with_model: n_ctx         = 4096
0.00.657.385 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.657.385 I llama_new_context_with_model: n_batch       = 2048
0.00.657.385 I llama_new_context_with_model: n_ubatch      = 512
0.00.657.386 I llama_new_context_with_model: flash_attn    = 0
0.00.657.388 I llama_new_context_with_model: freq_base     = 10000.0
0.00.657.389 I llama_new_context_with_model: freq_scale    = 1
0.00.657.390 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.674.311 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.674.353 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.674.480 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.677.049 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.677.053 I llama_new_context_with_model: graph nodes  = 601
0.00.677.053 I llama_new_context_with_model: graph splits = 1
0.00.677.077 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.582 I main: llama threadpool init, n_threads = 4
0.01.251.597 I 
0.01.251.703 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.707 I 
0.01.251.937 I sampler seed: 2685458497
0.01.251.950 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.251.956 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.251.959 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.251.960 I 
 seconally in this manner:

**Step 1**
- Identify the key problem or opportunity.
- Gather information and data relevant to understanding the problem

0.12.077.747 I llama_perf_sampler_print:    sampling time =      47.92 ms /    33 runs   (    1.45 ms per token,   688.60 tokens per second)
0.12.077.750 I llama_perf_context_print:        load time =    1250.32 ms
0.12.077.752 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.077.754 I llama_perf_context_print:        eval time =   10737.23 ms /    32 runs   (  335.54 ms per token,     2.98 tokens per second)
0.12.077.755 I llama_perf_context_print:       total time =   10826.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.146s
user	50m8.251s
sys	0m6.231s
