+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.640 I build: 3901 (e7022064) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.007 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.215 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.302 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.313 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.315 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.319 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.320 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.322 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.324 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.325 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.333 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.337 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.338 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.339 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.340 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.476 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.930 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.941 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.943 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.944 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.945 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.946 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.950 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.951 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.952 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.953 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.954 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.963 I llama_model_loader: - type  f32:   37 tensors
0.00.269.968 I llama_model_loader: - type q8_0:  127 tensors
0.00.429.098 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.457.790 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.458.865 I llm_load_vocab: special tokens cache size = 5
0.00.554.093 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.554.156 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.554.160 I llm_load_print_meta: arch             = gemma
0.00.554.161 I llm_load_print_meta: vocab type       = SPM
0.00.554.162 I llm_load_print_meta: n_vocab          = 256000
0.00.554.164 I llm_load_print_meta: n_merges         = 0
0.00.554.165 I llm_load_print_meta: vocab_only       = 0
0.00.554.165 I llm_load_print_meta: n_ctx_train      = 8192
0.00.554.166 I llm_load_print_meta: n_embd           = 2048
0.00.554.166 I llm_load_print_meta: n_layer          = 18
0.00.554.228 I llm_load_print_meta: n_head           = 8
0.00.554.238 I llm_load_print_meta: n_head_kv        = 1
0.00.554.240 I llm_load_print_meta: n_rot            = 256
0.00.554.241 I llm_load_print_meta: n_swa            = 0
0.00.554.241 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.253 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.263 I llm_load_print_meta: n_gqa            = 8
0.00.554.267 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.274 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.275 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.276 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.277 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.277 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.290 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.298 I llm_load_print_meta: n_ff             = 16384
0.00.554.298 I llm_load_print_meta: n_expert         = 0
0.00.554.299 I llm_load_print_meta: n_expert_used    = 0
0.00.554.299 I llm_load_print_meta: causal attn      = 1
0.00.554.299 I llm_load_print_meta: pooling type     = 0
0.00.554.300 I llm_load_print_meta: rope type        = 2
0.00.554.300 I llm_load_print_meta: rope scaling     = linear
0.00.554.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.303 I llm_load_print_meta: freq_scale_train = 1
0.00.554.304 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.304 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.304 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.305 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.305 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.314 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.314 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.315 I llm_load_print_meta: model type       = 2B
0.00.554.316 I llm_load_print_meta: model ftype      = Q8_0
0.00.554.317 I llm_load_print_meta: model params     = 2.51 B
0.00.554.318 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.554.319 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.319 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.320 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.320 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.321 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.328 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.331 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.337 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.554.339 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.554.339 I llm_load_print_meta: max token length = 93
0.00.554.507 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.654.798 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.654.809 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.654.810 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.654.811 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.654.812 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.654.812 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.660.601 I llama_new_context_with_model: n_ctx      = 8192
0.00.660.609 I llama_new_context_with_model: n_batch    = 2048
0.00.660.610 I llama_new_context_with_model: n_ubatch   = 512
0.00.660.610 I llama_new_context_with_model: flash_attn = 0
0.00.660.613 I llama_new_context_with_model: freq_base  = 10000.0
0.00.660.614 I llama_new_context_with_model: freq_scale = 1
0.00.690.533 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.690.574 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.690.690 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.692.108 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.692.114 I llama_new_context_with_model: graph nodes  = 601
0.00.692.115 I llama_new_context_with_model: graph splits = 1
0.00.692.131 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.371 I main: llama threadpool init, n_threads = 4
0.01.303.383 I 
0.01.303.493 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.497 I 
0.01.303.662 I sampler seed: 442838535
0.01.303.672 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.679 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.303.689 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.697 I 
 increably.

I am unable to find the requested information. Please check your database and provide the requested data. [end of text]


0.11.481.867 I llama_perf_sampler_print:    sampling time =      36.77 ms /    25 runs   (    1.47 ms per token,   679.88 tokens per second)
0.11.481.870 I llama_perf_context_print:        load time =    1300.40 ms
0.11.481.872 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.481.888 I llama_perf_context_print:        eval time =   10117.19 ms /    24 runs   (  421.55 ms per token,     2.37 tokens per second)
0.11.481.889 I llama_perf_context_print:       total time =   10178.51 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.677 I build: 3901 (e7022064) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.831 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.432 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.526 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.540 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.542 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.546 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.550 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.551 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.552 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.553 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.553 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.561 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.562 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.563 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.564 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.565 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.395 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.787 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.245 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.256 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.257 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.258 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.259 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.261 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.262 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.265 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.266 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.267 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.268 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.270 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.279 I llama_model_loader: - type  f32:   37 tensors
0.00.270.283 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.660 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.471.532 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.472.589 I llm_load_vocab: special tokens cache size = 5
0.00.567.413 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.567.478 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.567.479 I llm_load_print_meta: arch             = gemma
0.00.567.480 I llm_load_print_meta: vocab type       = SPM
0.00.567.481 I llm_load_print_meta: n_vocab          = 256000
0.00.567.483 I llm_load_print_meta: n_merges         = 0
0.00.567.484 I llm_load_print_meta: vocab_only       = 0
0.00.567.484 I llm_load_print_meta: n_ctx_train      = 8192
0.00.567.484 I llm_load_print_meta: n_embd           = 2048
0.00.567.485 I llm_load_print_meta: n_layer          = 18
0.00.567.550 I llm_load_print_meta: n_head           = 8
0.00.567.558 I llm_load_print_meta: n_head_kv        = 1
0.00.567.558 I llm_load_print_meta: n_rot            = 256
0.00.567.559 I llm_load_print_meta: n_swa            = 0
0.00.567.559 I llm_load_print_meta: n_embd_head_k    = 256
0.00.567.560 I llm_load_print_meta: n_embd_head_v    = 256
0.00.567.564 I llm_load_print_meta: n_gqa            = 8
0.00.567.568 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.567.573 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.567.574 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.567.576 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.567.577 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.567.577 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.567.577 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.567.582 I llm_load_print_meta: n_ff             = 16384
0.00.567.583 I llm_load_print_meta: n_expert         = 0
0.00.567.583 I llm_load_print_meta: n_expert_used    = 0
0.00.567.584 I llm_load_print_meta: causal attn      = 1
0.00.567.584 I llm_load_print_meta: pooling type     = 0
0.00.567.584 I llm_load_print_meta: rope type        = 2
0.00.567.585 I llm_load_print_meta: rope scaling     = linear
0.00.567.586 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.567.586 I llm_load_print_meta: freq_scale_train = 1
0.00.567.587 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.567.587 I llm_load_print_meta: rope_finetuned   = unknown
0.00.567.587 I llm_load_print_meta: ssm_d_conv       = 0
0.00.567.588 I llm_load_print_meta: ssm_d_inner      = 0
0.00.567.588 I llm_load_print_meta: ssm_d_state      = 0
0.00.567.588 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.567.589 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.567.589 I llm_load_print_meta: model type       = 2B
0.00.567.590 I llm_load_print_meta: model ftype      = Q8_0
0.00.567.591 I llm_load_print_meta: model params     = 2.51 B
0.00.567.592 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.567.592 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.567.592 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.567.593 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.567.593 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.567.593 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.567.594 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.567.594 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.567.600 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.567.601 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.567.602 I llm_load_print_meta: max token length = 93
0.00.567.782 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.661.576 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.667.739 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.749 I llama_new_context_with_model: n_batch    = 2048
0.00.667.750 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.750 I llama_new_context_with_model: flash_attn = 0
0.00.667.755 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.756 I llama_new_context_with_model: freq_scale = 1
0.00.701.361 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.407 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.522 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.702.862 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.868 I llama_new_context_with_model: graph nodes  = 601
0.00.702.868 I llama_new_context_with_model: graph splits = 1
0.00.702.884 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.314.061 I main: llama threadpool init, n_threads = 4
0.01.314.072 I 
0.01.314.180 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.314.184 I 
0.01.314.350 I sampler seed: 3900081137
0.01.314.361 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.314.368 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.314.369 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.314.369 I 
 increably with glee,
A symphony of sound, a melody divine.

**What is the poem trying to convey?**

The poem is trying to

0.14.936.866 I llama_perf_sampler_print:    sampling time =      50.03 ms /    33 runs   (    1.52 ms per token,   659.58 tokens per second)
0.14.936.871 I llama_perf_context_print:        load time =    1311.05 ms
0.14.936.873 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.936.876 I llama_perf_context_print:        eval time =   13538.83 ms /    32 runs   (  423.09 ms per token,     2.36 tokens per second)
0.14.936.877 I llama_perf_context_print:       total time =   13622.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.699 I build: 3901 (e7022064) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.002.845 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.026.199 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.026.416 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.026.506 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.518 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.519 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.524 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.528 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.529 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.530 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.531 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.540 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.541 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.542 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.543 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.544 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.482 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.767 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.182 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.189 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.190 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.191 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.192 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.193 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.194 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.198 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.199 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.200 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.202 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.203 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.210 I llama_model_loader: - type  f32:   37 tensors
0.00.271.214 I llama_model_loader: - type q8_0:  127 tensors
0.00.431.514 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.461.479 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.462.532 I llm_load_vocab: special tokens cache size = 5
0.00.557.492 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.553 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.555 I llm_load_print_meta: arch             = gemma
0.00.557.555 I llm_load_print_meta: vocab type       = SPM
0.00.557.556 I llm_load_print_meta: n_vocab          = 256000
0.00.557.559 I llm_load_print_meta: n_merges         = 0
0.00.557.559 I llm_load_print_meta: vocab_only       = 0
0.00.557.559 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.560 I llm_load_print_meta: n_embd           = 2048
0.00.557.560 I llm_load_print_meta: n_layer          = 18
0.00.557.640 I llm_load_print_meta: n_head           = 8
0.00.557.649 I llm_load_print_meta: n_head_kv        = 1
0.00.557.650 I llm_load_print_meta: n_rot            = 256
0.00.557.650 I llm_load_print_meta: n_swa            = 0
0.00.557.651 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.651 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.656 I llm_load_print_meta: n_gqa            = 8
0.00.557.660 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.666 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.667 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.668 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.669 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.670 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.670 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.676 I llm_load_print_meta: n_ff             = 16384
0.00.557.677 I llm_load_print_meta: n_expert         = 0
0.00.557.678 I llm_load_print_meta: n_expert_used    = 0
0.00.557.678 I llm_load_print_meta: causal attn      = 1
0.00.557.683 I llm_load_print_meta: pooling type     = 0
0.00.557.683 I llm_load_print_meta: rope type        = 2
0.00.557.684 I llm_load_print_meta: rope scaling     = linear
0.00.557.690 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.691 I llm_load_print_meta: freq_scale_train = 1
0.00.557.691 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.693 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.693 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.693 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.694 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.694 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.708 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.710 I llm_load_print_meta: model type       = 2B
0.00.557.711 I llm_load_print_meta: model ftype      = Q8_0
0.00.557.712 I llm_load_print_meta: model params     = 2.51 B
0.00.557.713 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.557.713 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.721 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.729 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.730 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.730 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.731 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.732 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.738 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.557.739 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.557.739 I llm_load_print_meta: max token length = 93
0.00.557.911 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.635.358 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.635.368 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.635.369 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.635.370 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.635.370 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.635.371 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.640.964 I llama_new_context_with_model: n_ctx      = 8192
0.00.640.971 I llama_new_context_with_model: n_batch    = 2048
0.00.640.972 I llama_new_context_with_model: n_ubatch   = 512
0.00.640.972 I llama_new_context_with_model: flash_attn = 0
0.00.640.975 I llama_new_context_with_model: freq_base  = 10000.0
0.00.640.976 I llama_new_context_with_model: freq_scale = 1
0.00.670.088 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.670.130 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.670.257 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.671.678 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.671.685 I llama_new_context_with_model: graph nodes  = 601
0.00.671.685 I llama_new_context_with_model: graph splits = 1
0.00.671.700 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.165 I main: llama threadpool init, n_threads = 4
0.01.284.177 I 
0.01.284.287 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.287 I 
0.01.284.456 I sampler seed: 1164022219
0.01.284.468 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.474 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.284.475 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.475 I 
 increasities? [end of text]


0.02.981.460 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.31 tokens per second)
0.02.981.464 I llama_perf_context_print:        load time =    1281.13 ms
0.02.981.479 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.981.481 I llama_perf_context_print:        eval time =    1685.34 ms /     4 runs   (  421.33 ms per token,     2.37 tokens per second)
0.02.981.482 I llama_perf_context_print:       total time =    1697.31 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.716 I build: 3901 (e7022064) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.953 I main: llama backend init
0.00.002.958 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.361 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.592 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.692 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.706 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.711 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.717 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.723 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.725 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.728 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.731 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.735 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.747 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.749 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.760 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.765 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.767 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.096 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.658 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.254 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.266 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.267 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.268 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.269 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.270 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.271 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.275 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.276 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.279 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.280 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.281 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.291 I llama_model_loader: - type  f32:   37 tensors
0.00.271.296 I llama_model_loader: - type q8_0:  127 tensors
0.00.437.708 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.767 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.466.822 I llm_load_vocab: special tokens cache size = 5
0.00.561.958 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.562.020 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.562.021 I llm_load_print_meta: arch             = gemma
0.00.562.022 I llm_load_print_meta: vocab type       = SPM
0.00.562.023 I llm_load_print_meta: n_vocab          = 256000
0.00.562.025 I llm_load_print_meta: n_merges         = 0
0.00.562.026 I llm_load_print_meta: vocab_only       = 0
0.00.562.026 I llm_load_print_meta: n_ctx_train      = 8192
0.00.562.027 I llm_load_print_meta: n_embd           = 2048
0.00.562.027 I llm_load_print_meta: n_layer          = 18
0.00.562.091 I llm_load_print_meta: n_head           = 8
0.00.562.098 I llm_load_print_meta: n_head_kv        = 1
0.00.562.098 I llm_load_print_meta: n_rot            = 256
0.00.562.099 I llm_load_print_meta: n_swa            = 0
0.00.562.099 I llm_load_print_meta: n_embd_head_k    = 256
0.00.562.099 I llm_load_print_meta: n_embd_head_v    = 256
0.00.562.104 I llm_load_print_meta: n_gqa            = 8
0.00.562.109 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.562.116 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.562.120 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.562.122 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.562.123 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.562.124 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.562.125 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.562.132 I llm_load_print_meta: n_ff             = 16384
0.00.562.143 I llm_load_print_meta: n_expert         = 0
0.00.562.148 I llm_load_print_meta: n_expert_used    = 0
0.00.562.148 I llm_load_print_meta: causal attn      = 1
0.00.562.149 I llm_load_print_meta: pooling type     = 0
0.00.562.164 I llm_load_print_meta: rope type        = 2
0.00.562.165 I llm_load_print_meta: rope scaling     = linear
0.00.562.167 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.562.168 I llm_load_print_meta: freq_scale_train = 1
0.00.562.169 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.562.170 I llm_load_print_meta: rope_finetuned   = unknown
0.00.562.171 I llm_load_print_meta: ssm_d_conv       = 0
0.00.562.171 I llm_load_print_meta: ssm_d_inner      = 0
0.00.562.175 I llm_load_print_meta: ssm_d_state      = 0
0.00.562.176 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.562.176 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.562.177 I llm_load_print_meta: model type       = 2B
0.00.562.179 I llm_load_print_meta: model ftype      = Q8_0
0.00.562.181 I llm_load_print_meta: model params     = 2.51 B
0.00.562.184 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.562.185 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.562.185 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.562.186 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.562.187 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.562.188 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.562.189 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.562.193 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.562.200 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.562.201 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.562.202 I llm_load_print_meta: max token length = 93
0.00.562.387 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.633.722 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.633.733 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.639.771 I llama_new_context_with_model: n_ctx      = 8192
0.00.639.780 I llama_new_context_with_model: n_batch    = 2048
0.00.639.781 I llama_new_context_with_model: n_ubatch   = 512
0.00.639.781 I llama_new_context_with_model: flash_attn = 0
0.00.639.784 I llama_new_context_with_model: freq_base  = 10000.0
0.00.639.785 I llama_new_context_with_model: freq_scale = 1
0.00.669.840 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.669.884 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.670.008 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.671.423 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.671.432 I llama_new_context_with_model: graph nodes  = 601
0.00.671.433 I llama_new_context_with_model: graph splits = 1
0.00.671.452 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.296.711 I main: llama threadpool init, n_threads = 4
0.01.296.723 I 
0.01.296.848 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.852 I 
0.01.297.033 I sampler seed: 1105705220
0.01.297.044 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.050 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.297.051 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.052 I 
 seconally. [end of text]


0.02.995.937 I llama_perf_sampler_print:    sampling time =       6.21 ms /     5 runs   (    1.24 ms per token,   805.02 tokens per second)
0.02.995.940 I llama_perf_context_print:        load time =    1293.54 ms
0.02.995.967 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.995.970 I llama_perf_context_print:        eval time =    1687.05 ms /     4 runs   (  421.76 ms per token,     2.37 tokens per second)
0.02.995.971 I llama_perf_context_print:       total time =    1699.24 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m42.213s
user	2m1.299s
sys	0m9.635s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3901 (e7022064)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198881.55 ms
main:    total time = 198881.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.693 I build: 3901 (e7022064) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.002.865 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.172 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.388 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.483 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.494 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.497 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.501 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.505 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.506 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.507 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.508 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.509 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.516 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.518 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.519 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.520 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.529 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.667 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.131 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.495 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.506 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.507 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.509 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.510 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.511 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.512 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.516 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.517 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.519 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.520 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.272.521 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.531 I llama_model_loader: - type  f32:   37 tensors
0.00.272.534 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.535 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.687 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.945 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.485.965 I llm_load_vocab: special tokens cache size = 5
0.00.580.698 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.580.762 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.580.763 I llm_load_print_meta: arch             = gemma
0.00.580.764 I llm_load_print_meta: vocab type       = SPM
0.00.580.765 I llm_load_print_meta: n_vocab          = 256000
0.00.580.767 I llm_load_print_meta: n_merges         = 0
0.00.580.768 I llm_load_print_meta: vocab_only       = 0
0.00.580.768 I llm_load_print_meta: n_ctx_train      = 8192
0.00.580.769 I llm_load_print_meta: n_embd           = 2048
0.00.580.769 I llm_load_print_meta: n_layer          = 18
0.00.580.836 I llm_load_print_meta: n_head           = 8
0.00.580.843 I llm_load_print_meta: n_head_kv        = 1
0.00.580.844 I llm_load_print_meta: n_rot            = 256
0.00.580.844 I llm_load_print_meta: n_swa            = 0
0.00.580.844 I llm_load_print_meta: n_embd_head_k    = 256
0.00.580.845 I llm_load_print_meta: n_embd_head_v    = 256
0.00.580.850 I llm_load_print_meta: n_gqa            = 8
0.00.580.867 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.580.873 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.580.874 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.580.875 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.580.876 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.580.876 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.580.877 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.580.881 I llm_load_print_meta: n_ff             = 16384
0.00.580.883 I llm_load_print_meta: n_expert         = 0
0.00.580.883 I llm_load_print_meta: n_expert_used    = 0
0.00.580.888 I llm_load_print_meta: causal attn      = 1
0.00.580.888 I llm_load_print_meta: pooling type     = 0
0.00.580.888 I llm_load_print_meta: rope type        = 2
0.00.580.889 I llm_load_print_meta: rope scaling     = linear
0.00.580.901 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.580.902 I llm_load_print_meta: freq_scale_train = 1
0.00.580.903 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.580.904 I llm_load_print_meta: rope_finetuned   = unknown
0.00.580.905 I llm_load_print_meta: ssm_d_conv       = 0
0.00.580.905 I llm_load_print_meta: ssm_d_inner      = 0
0.00.580.905 I llm_load_print_meta: ssm_d_state      = 0
0.00.580.906 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.580.907 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.580.908 I llm_load_print_meta: model type       = 2B
0.00.580.923 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.580.924 I llm_load_print_meta: model params     = 2.51 B
0.00.580.925 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.580.925 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.580.926 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.580.926 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.580.927 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.580.930 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.580.931 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.580.931 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.580.937 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.580.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.580.939 I llm_load_print_meta: max token length = 93
0.00.581.106 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.639.836 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.639.847 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.639.849 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.639.849 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.639.850 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.639.850 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.645.561 I llama_new_context_with_model: n_ctx      = 8192
0.00.645.569 I llama_new_context_with_model: n_batch    = 2048
0.00.645.569 I llama_new_context_with_model: n_ubatch   = 512
0.00.645.570 I llama_new_context_with_model: flash_attn = 0
0.00.645.574 I llama_new_context_with_model: freq_base  = 10000.0
0.00.645.575 I llama_new_context_with_model: freq_scale = 1
0.00.677.365 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.408 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.677.526 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.679.038 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.679.046 I llama_new_context_with_model: graph nodes  = 601
0.00.679.046 I llama_new_context_with_model: graph splits = 1
0.00.679.063 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.257.860 I main: llama threadpool init, n_threads = 4
0.01.257.874 I 
0.01.257.983 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.257.987 I 
0.01.258.154 I sampler seed: 2646544990
0.01.258.165 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.258.172 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.258.172 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.258.173 I 
 increasities is a common trope in fantasy. Is there a specific reason why this trope is so popular?

**Possible reasons for the popularity of the trope:**

0.12.225.828 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.74 tokens per second)
0.12.225.846 I llama_perf_context_print:        load time =    1254.78 ms
0.12.225.847 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.225.849 I llama_perf_context_print:        eval time =   10884.32 ms /    32 runs   (  340.14 ms per token,     2.94 tokens per second)
0.12.225.850 I llama_perf_context_print:       total time =   10967.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3901 (e7022064)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199199.67 ms
main:    total time = 199199.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.646 I build: 3901 (e7022064) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.125 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.228 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.244 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.246 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.250 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.257 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.258 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.259 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.283 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.284 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.285 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.286 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.547 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.932 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.423 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.434 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.436 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.437 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.438 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.439 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.441 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.444 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.445 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.454 I llama_model_loader: - type  f32:   37 tensors
0.00.270.459 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.459 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.930 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.476.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.477.784 I llm_load_vocab: special tokens cache size = 5
0.00.576.028 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.576.091 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.576.093 I llm_load_print_meta: arch             = gemma
0.00.576.093 I llm_load_print_meta: vocab type       = SPM
0.00.576.094 I llm_load_print_meta: n_vocab          = 256000
0.00.576.097 I llm_load_print_meta: n_merges         = 0
0.00.576.098 I llm_load_print_meta: vocab_only       = 0
0.00.576.098 I llm_load_print_meta: n_ctx_train      = 8192
0.00.576.098 I llm_load_print_meta: n_embd           = 2048
0.00.576.099 I llm_load_print_meta: n_layer          = 18
0.00.576.162 I llm_load_print_meta: n_head           = 8
0.00.576.169 I llm_load_print_meta: n_head_kv        = 1
0.00.576.170 I llm_load_print_meta: n_rot            = 256
0.00.576.170 I llm_load_print_meta: n_swa            = 0
0.00.576.171 I llm_load_print_meta: n_embd_head_k    = 256
0.00.576.171 I llm_load_print_meta: n_embd_head_v    = 256
0.00.576.176 I llm_load_print_meta: n_gqa            = 8
0.00.576.180 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.576.186 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.576.186 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.576.188 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.576.188 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.576.189 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.576.189 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.576.194 I llm_load_print_meta: n_ff             = 16384
0.00.576.195 I llm_load_print_meta: n_expert         = 0
0.00.576.195 I llm_load_print_meta: n_expert_used    = 0
0.00.576.196 I llm_load_print_meta: causal attn      = 1
0.00.576.196 I llm_load_print_meta: pooling type     = 0
0.00.576.196 I llm_load_print_meta: rope type        = 2
0.00.576.197 I llm_load_print_meta: rope scaling     = linear
0.00.576.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.576.198 I llm_load_print_meta: freq_scale_train = 1
0.00.576.199 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.576.199 I llm_load_print_meta: rope_finetuned   = unknown
0.00.576.199 I llm_load_print_meta: ssm_d_conv       = 0
0.00.576.199 I llm_load_print_meta: ssm_d_inner      = 0
0.00.576.200 I llm_load_print_meta: ssm_d_state      = 0
0.00.576.200 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.576.200 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.576.201 I llm_load_print_meta: model type       = 2B
0.00.576.202 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.576.203 I llm_load_print_meta: model params     = 2.51 B
0.00.576.203 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.576.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.576.205 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.576.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.576.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.576.229 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.576.230 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.576.231 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.576.236 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.576.238 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.576.239 I llm_load_print_meta: max token length = 93
0.00.576.407 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.633.867 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.639.570 I llama_new_context_with_model: n_ctx      = 8192
0.00.639.579 I llama_new_context_with_model: n_batch    = 2048
0.00.639.579 I llama_new_context_with_model: n_ubatch   = 512
0.00.639.580 I llama_new_context_with_model: flash_attn = 0
0.00.639.584 I llama_new_context_with_model: freq_base  = 10000.0
0.00.639.585 I llama_new_context_with_model: freq_scale = 1
0.00.672.005 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.672.052 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.672.165 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.548 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.554 I llama_new_context_with_model: graph nodes  = 601
0.00.673.554 I llama_new_context_with_model: graph splits = 1
0.00.673.570 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.253.847 I main: llama threadpool init, n_threads = 4
0.01.253.859 I 
0.01.253.977 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.253.981 I 
0.01.254.148 I sampler seed: 1544998870
0.01.254.158 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.254.164 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.254.165 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.254.166 I 
 seconally.

I am not sure what the question is asking. Please provide more context or clarification. [end of text]


0.08.789.094 I llama_perf_sampler_print:    sampling time =      33.71 ms /    23 runs   (    1.47 ms per token,   682.37 tokens per second)
0.08.789.097 I llama_perf_context_print:        load time =    1250.84 ms
0.08.789.118 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.789.120 I llama_perf_context_print:        eval time =    7477.32 ms /    22 runs   (  339.88 ms per token,     2.94 tokens per second)
0.08.789.121 I llama_perf_context_print:       total time =    7535.26 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m2.022s
user	50m5.900s
sys	0m6.392s
