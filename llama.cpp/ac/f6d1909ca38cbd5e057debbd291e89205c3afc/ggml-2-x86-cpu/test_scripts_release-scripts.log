+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.858 I main: load the model and apply lora adapter, if any
0.00.022.176 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.223 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.230 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.235 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.236 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.239 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.239 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.240 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.241 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.241 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.241 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.245 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.246 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.246 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.247 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.247 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.459 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.649 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.580 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.587 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.588 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.589 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.589 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.590 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.591 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.593 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.594 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.594 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.595 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.597 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.600 I llama_model_loader: - type  f32:   37 tensors
0.00.132.604 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.393 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.337 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.242.808 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.247.337 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.256.628 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.258 I llm_load_vocab: special tokens cache size = 5
0.00.278.198 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.214 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.215 I llm_load_print_meta: arch             = gemma
0.00.278.216 I llm_load_print_meta: vocab type       = SPM
0.00.278.216 I llm_load_print_meta: n_vocab          = 256000
0.00.278.217 I llm_load_print_meta: n_merges         = 0
0.00.278.217 I llm_load_print_meta: vocab_only       = 0
0.00.278.218 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.218 I llm_load_print_meta: n_embd           = 2048
0.00.278.218 I llm_load_print_meta: n_layer          = 18
0.00.278.229 I llm_load_print_meta: n_head           = 8
0.00.278.230 I llm_load_print_meta: n_head_kv        = 1
0.00.278.230 I llm_load_print_meta: n_rot            = 256
0.00.278.230 I llm_load_print_meta: n_swa            = 0
0.00.278.231 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.232 I llm_load_print_meta: n_gqa            = 8
0.00.278.233 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.234 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.234 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.236 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.236 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.237 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.237 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.238 I llm_load_print_meta: n_ff             = 16384
0.00.278.238 I llm_load_print_meta: n_expert         = 0
0.00.278.238 I llm_load_print_meta: n_expert_used    = 0
0.00.278.239 I llm_load_print_meta: causal attn      = 1
0.00.278.239 I llm_load_print_meta: pooling type     = 0
0.00.278.239 I llm_load_print_meta: rope type        = 2
0.00.278.240 I llm_load_print_meta: rope scaling     = linear
0.00.278.241 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.242 I llm_load_print_meta: freq_scale_train = 1
0.00.278.242 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.242 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.243 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.243 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.243 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.243 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.243 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.244 I llm_load_print_meta: model type       = 2B
0.00.278.244 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.245 I llm_load_print_meta: model params     = 2.51 B
0.00.278.246 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.246 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.247 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.247 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.248 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.248 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.248 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.248 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.249 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.249 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.250 I llm_load_print_meta: max token length = 93
0.00.278.277 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.378.198 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.378.206 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.378.207 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.378.208 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.378.208 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.378.209 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.383.437 I llama_new_context_with_model: n_ctx      = 8192
0.00.383.445 I llama_new_context_with_model: n_batch    = 2048
0.00.383.445 I llama_new_context_with_model: n_ubatch   = 512
0.00.383.446 I llama_new_context_with_model: flash_attn = 0
0.00.383.448 I llama_new_context_with_model: freq_base  = 10000.0
0.00.383.449 I llama_new_context_with_model: freq_scale = 1
0.00.412.620 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.412.638 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.412.733 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.413.584 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.413.592 I llama_new_context_with_model: graph nodes  = 601
0.00.413.593 I llama_new_context_with_model: graph splits = 1
0.00.413.594 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.505.334 I main: llama threadpool init, n_threads = 4
0.00.505.346 I 
0.00.505.425 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.505.428 I 
0.00.505.467 I sampler seed: 4239920611
0.00.505.479 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.505.482 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.505.483 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.505.483 I 
 increasities in the late 19th century that resulted in widespread unemployment and social upheaval. [end of text]


0.01.926.949 I llama_perf_sampler_print:    sampling time =       3.22 ms /    21 runs   (    0.15 ms per token,  6521.74 tokens per second)
0.01.926.953 I llama_perf_context_print:        load time =     503.45 ms
0.01.926.954 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.926.956 I llama_perf_context_print:        eval time =    1409.64 ms /    20 runs   (   70.48 ms per token,    14.19 tokens per second)
0.01.926.957 I llama_perf_context_print:       total time =    1421.62 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.638 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.842 I main: llama backend init
0.00.001.977 I main: load the model and apply lora adapter, if any
0.00.022.374 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.387 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.394 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.395 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.400 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.401 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.401 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.402 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.402 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.403 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.408 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.408 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.409 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.409 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.410 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.902 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.976 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.791 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.798 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.798 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.799 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.799 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.800 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.801 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.804 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.804 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.805 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.805 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.806 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.808 I llama_model_loader: - type  f32:   37 tensors
0.00.131.811 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.081 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.805 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.243.075 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.247.051 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.256.315 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.963 I llm_load_vocab: special tokens cache size = 5
0.00.278.282 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.300 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.301 I llm_load_print_meta: arch             = gemma
0.00.278.302 I llm_load_print_meta: vocab type       = SPM
0.00.278.302 I llm_load_print_meta: n_vocab          = 256000
0.00.278.303 I llm_load_print_meta: n_merges         = 0
0.00.278.303 I llm_load_print_meta: vocab_only       = 0
0.00.278.304 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.304 I llm_load_print_meta: n_embd           = 2048
0.00.278.304 I llm_load_print_meta: n_layer          = 18
0.00.278.317 I llm_load_print_meta: n_head           = 8
0.00.278.318 I llm_load_print_meta: n_head_kv        = 1
0.00.278.319 I llm_load_print_meta: n_rot            = 256
0.00.278.319 I llm_load_print_meta: n_swa            = 0
0.00.278.319 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.319 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.320 I llm_load_print_meta: n_gqa            = 8
0.00.278.321 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.322 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.323 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.324 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.325 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.325 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.325 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.326 I llm_load_print_meta: n_ff             = 16384
0.00.278.326 I llm_load_print_meta: n_expert         = 0
0.00.278.327 I llm_load_print_meta: n_expert_used    = 0
0.00.278.327 I llm_load_print_meta: causal attn      = 1
0.00.278.327 I llm_load_print_meta: pooling type     = 0
0.00.278.328 I llm_load_print_meta: rope type        = 2
0.00.278.328 I llm_load_print_meta: rope scaling     = linear
0.00.278.329 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.330 I llm_load_print_meta: freq_scale_train = 1
0.00.278.330 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.331 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.331 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.331 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.331 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.332 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.332 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.332 I llm_load_print_meta: model type       = 2B
0.00.278.333 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.334 I llm_load_print_meta: model params     = 2.51 B
0.00.278.335 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.335 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.335 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.336 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.336 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.336 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.336 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.337 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.337 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.337 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.338 I llm_load_print_meta: max token length = 93
0.00.278.364 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.372.065 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.377.173 I llama_new_context_with_model: n_ctx      = 8192
0.00.377.179 I llama_new_context_with_model: n_batch    = 2048
0.00.377.179 I llama_new_context_with_model: n_ubatch   = 512
0.00.377.180 I llama_new_context_with_model: flash_attn = 0
0.00.377.182 I llama_new_context_with_model: freq_base  = 10000.0
0.00.377.183 I llama_new_context_with_model: freq_scale = 1
0.00.406.727 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.742 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.745 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.753 I llama_new_context_with_model: graph nodes  = 601
0.00.407.754 I llama_new_context_with_model: graph splits = 1
0.00.407.756 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.304 I main: llama threadpool init, n_threads = 4
0.00.496.318 I 
0.00.496.398 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.402 I 
0.00.496.442 I sampler seed: 3776096835
0.00.496.453 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.456 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.496.456 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.457 I 
 increasities.
I cannot find any information about this, so I am unable to provide an answer. [end of text]


0.02.006.590 I llama_perf_sampler_print:    sampling time =       3.49 ms /    23 runs   (    0.15 ms per token,  6586.48 tokens per second)
0.02.006.593 I llama_perf_context_print:        load time =     494.30 ms
0.02.006.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.006.596 I llama_perf_context_print:        eval time =    1496.57 ms /    22 runs   (   68.03 ms per token,    14.70 tokens per second)
0.02.006.597 I llama_perf_context_print:       total time =    1510.29 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.526 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.001.795 I main: load the model and apply lora adapter, if any
0.00.021.956 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.007 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.021 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.022 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.026 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.027 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.028 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.028 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.028 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.034 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.034 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.035 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.455 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.701 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.618 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.625 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.626 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.627 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.628 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.629 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.629 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.632 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.633 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.633 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.634 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.634 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.638 I llama_model_loader: - type  f32:   37 tensors
0.00.132.641 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.567 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.062 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.253.568 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.258.502 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.268.855 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.512 I llm_load_vocab: special tokens cache size = 5
0.00.290.650 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.668 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.669 I llm_load_print_meta: arch             = gemma
0.00.290.669 I llm_load_print_meta: vocab type       = SPM
0.00.290.670 I llm_load_print_meta: n_vocab          = 256000
0.00.290.671 I llm_load_print_meta: n_merges         = 0
0.00.290.671 I llm_load_print_meta: vocab_only       = 0
0.00.290.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.672 I llm_load_print_meta: n_embd           = 2048
0.00.290.672 I llm_load_print_meta: n_layer          = 18
0.00.290.684 I llm_load_print_meta: n_head           = 8
0.00.290.685 I llm_load_print_meta: n_head_kv        = 1
0.00.290.685 I llm_load_print_meta: n_rot            = 256
0.00.290.686 I llm_load_print_meta: n_swa            = 0
0.00.290.686 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.687 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.687 I llm_load_print_meta: n_gqa            = 8
0.00.290.688 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.689 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.690 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.691 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.692 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.692 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.692 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.693 I llm_load_print_meta: n_ff             = 16384
0.00.290.694 I llm_load_print_meta: n_expert         = 0
0.00.290.694 I llm_load_print_meta: n_expert_used    = 0
0.00.290.694 I llm_load_print_meta: causal attn      = 1
0.00.290.695 I llm_load_print_meta: pooling type     = 0
0.00.290.695 I llm_load_print_meta: rope type        = 2
0.00.290.695 I llm_load_print_meta: rope scaling     = linear
0.00.290.697 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.697 I llm_load_print_meta: freq_scale_train = 1
0.00.290.698 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.698 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.698 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.698 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.698 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.699 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.699 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.699 I llm_load_print_meta: model type       = 2B
0.00.290.700 I llm_load_print_meta: model ftype      = Q8_0
0.00.290.701 I llm_load_print_meta: model params     = 2.51 B
0.00.290.702 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.290.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.703 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.703 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.703 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.704 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.704 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.704 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.705 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.705 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.705 I llm_load_print_meta: max token length = 93
0.00.290.736 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.368.469 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.368.479 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.368.480 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.368.481 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.368.481 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.368.482 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.373.580 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.588 I llama_new_context_with_model: n_batch    = 2048
0.00.373.589 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.589 I llama_new_context_with_model: flash_attn = 0
0.00.373.591 I llama_new_context_with_model: freq_base  = 10000.0
0.00.373.592 I llama_new_context_with_model: freq_scale = 1
0.00.405.122 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.405.140 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.405.242 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.406.146 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.406.155 I llama_new_context_with_model: graph nodes  = 601
0.00.406.155 I llama_new_context_with_model: graph splits = 1
0.00.406.157 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.499.258 I main: llama threadpool init, n_threads = 4
0.00.499.271 I 
0.00.499.349 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.499.354 I 
0.00.499.393 I sampler seed: 3448847261
0.00.499.401 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.499.406 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.499.407 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.499.407 I 
 increasities to create a more complex and nuanced portrayal of the characters. [end of text]


0.01.563.196 I llama_perf_sampler_print:    sampling time =       2.34 ms /    16 runs   (    0.15 ms per token,  6849.32 tokens per second)
0.01.563.199 I llama_perf_context_print:        load time =     497.44 ms
0.01.563.200 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.563.201 I llama_perf_context_print:        eval time =    1054.47 ms /    15 runs   (   70.30 ms per token,    14.23 tokens per second)
0.01.563.202 I llama_perf_context_print:       total time =    1063.95 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.532 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.001.872 I main: load the model and apply lora adapter, if any
0.00.021.677 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.731 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.745 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.750 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.752 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.756 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.757 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.758 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.759 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.760 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.761 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.766 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.767 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.771 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.772 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.773 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.350 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.495 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.417 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.424 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.425 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.425 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.426 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.427 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.428 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.430 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.432 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.432 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.433 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.433 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.437 I llama_model_loader: - type  f32:   37 tensors
0.00.132.440 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.565 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.248.913 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.253.004 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.261.179 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.747 I llm_load_vocab: special tokens cache size = 5
0.00.282.354 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.375 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.375 I llm_load_print_meta: arch             = gemma
0.00.282.375 I llm_load_print_meta: vocab type       = SPM
0.00.282.376 I llm_load_print_meta: n_vocab          = 256000
0.00.282.377 I llm_load_print_meta: n_merges         = 0
0.00.282.377 I llm_load_print_meta: vocab_only       = 0
0.00.282.377 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.378 I llm_load_print_meta: n_embd           = 2048
0.00.282.378 I llm_load_print_meta: n_layer          = 18
0.00.282.390 I llm_load_print_meta: n_head           = 8
0.00.282.391 I llm_load_print_meta: n_head_kv        = 1
0.00.282.391 I llm_load_print_meta: n_rot            = 256
0.00.282.391 I llm_load_print_meta: n_swa            = 0
0.00.282.392 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.392 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.393 I llm_load_print_meta: n_gqa            = 8
0.00.282.394 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.395 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.396 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.397 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.398 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.398 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.398 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.399 I llm_load_print_meta: n_ff             = 16384
0.00.282.400 I llm_load_print_meta: n_expert         = 0
0.00.282.400 I llm_load_print_meta: n_expert_used    = 0
0.00.282.400 I llm_load_print_meta: causal attn      = 1
0.00.282.400 I llm_load_print_meta: pooling type     = 0
0.00.282.401 I llm_load_print_meta: rope type        = 2
0.00.282.401 I llm_load_print_meta: rope scaling     = linear
0.00.282.402 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.403 I llm_load_print_meta: freq_scale_train = 1
0.00.282.403 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.403 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.404 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.404 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.404 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.404 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.405 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.405 I llm_load_print_meta: model type       = 2B
0.00.282.406 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.406 I llm_load_print_meta: model params     = 2.51 B
0.00.282.407 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.408 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.408 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.408 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.409 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.409 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.410 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.410 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.410 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.411 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.412 I llm_load_print_meta: max token length = 93
0.00.282.434 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.352.626 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.352.634 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.357.652 I llama_new_context_with_model: n_ctx      = 8192
0.00.357.660 I llama_new_context_with_model: n_batch    = 2048
0.00.357.660 I llama_new_context_with_model: n_ubatch   = 512
0.00.357.660 I llama_new_context_with_model: flash_attn = 0
0.00.357.664 I llama_new_context_with_model: freq_base  = 10000.0
0.00.357.664 I llama_new_context_with_model: freq_scale = 1
0.00.387.223 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.387.237 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.387.348 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.221 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.388.228 I llama_new_context_with_model: graph nodes  = 601
0.00.388.229 I llama_new_context_with_model: graph splits = 1
0.00.388.231 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.791 I main: llama threadpool init, n_threads = 4
0.00.482.804 I 
0.00.482.879 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.482.883 I 
0.00.482.921 I sampler seed: 4104770009
0.00.482.931 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.933 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.482.934 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.934 I 
 increably. [end of text]


0.00.793.849 I llama_perf_sampler_print:    sampling time =       0.66 ms /     5 runs   (    0.13 ms per token,  7564.30 tokens per second)
0.00.793.851 I llama_perf_context_print:        load time =     480.89 ms
0.00.793.852 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.793.853 I llama_perf_context_print:        eval time =     307.87 ms /     4 runs   (   76.97 ms per token,    12.99 tokens per second)
0.00.793.854 I llama_perf_context_print:       total time =     311.07 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m15.968s
user	0m20.221s
sys	0m9.478s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3957 (acf6d190)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32034.45 ms
main:    total time = 32034.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.554 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.855 I main: load the model and apply lora adapter, if any
0.00.022.304 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.351 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.364 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.370 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.371 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.376 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.377 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.378 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.378 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.379 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.379 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.383 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.384 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.385 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.386 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.837 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.139 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.038 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.045 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.046 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.046 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.047 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.048 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.048 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.051 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.052 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.052 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.053 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.055 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.058 I llama_model_loader: - type  f32:   37 tensors
0.00.133.060 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.061 I llama_model_loader: - type q6_K:   19 tensors
0.00.219.699 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.090 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.253.432 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.257.566 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.266.529 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.180 I llm_load_vocab: special tokens cache size = 5
0.00.287.936 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.954 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.954 I llm_load_print_meta: arch             = gemma
0.00.287.955 I llm_load_print_meta: vocab type       = SPM
0.00.287.955 I llm_load_print_meta: n_vocab          = 256000
0.00.287.956 I llm_load_print_meta: n_merges         = 0
0.00.287.956 I llm_load_print_meta: vocab_only       = 0
0.00.287.957 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.957 I llm_load_print_meta: n_embd           = 2048
0.00.287.957 I llm_load_print_meta: n_layer          = 18
0.00.287.971 I llm_load_print_meta: n_head           = 8
0.00.287.974 I llm_load_print_meta: n_head_kv        = 1
0.00.287.975 I llm_load_print_meta: n_rot            = 256
0.00.287.975 I llm_load_print_meta: n_swa            = 0
0.00.287.976 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.976 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.977 I llm_load_print_meta: n_gqa            = 8
0.00.287.978 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.980 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.983 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.984 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.984 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.985 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.985 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.986 I llm_load_print_meta: n_ff             = 16384
0.00.287.987 I llm_load_print_meta: n_expert         = 0
0.00.287.987 I llm_load_print_meta: n_expert_used    = 0
0.00.287.987 I llm_load_print_meta: causal attn      = 1
0.00.287.987 I llm_load_print_meta: pooling type     = 0
0.00.287.988 I llm_load_print_meta: rope type        = 2
0.00.287.988 I llm_load_print_meta: rope scaling     = linear
0.00.287.989 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.990 I llm_load_print_meta: freq_scale_train = 1
0.00.287.990 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.991 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.991 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.991 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.991 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.992 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.992 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.993 I llm_load_print_meta: model type       = 2B
0.00.287.994 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.287.995 I llm_load_print_meta: model params     = 2.51 B
0.00.287.995 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.287.996 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.997 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.997 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.998 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.998 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.999 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.000 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.000 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.000 I llm_load_print_meta: max token length = 93
0.00.288.021 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.346.367 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.346.375 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.346.376 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.346.377 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.346.377 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.346.378 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.351.546 I llama_new_context_with_model: n_ctx      = 8192
0.00.351.554 I llama_new_context_with_model: n_batch    = 2048
0.00.351.554 I llama_new_context_with_model: n_ubatch   = 512
0.00.351.555 I llama_new_context_with_model: flash_attn = 0
0.00.351.558 I llama_new_context_with_model: freq_base  = 10000.0
0.00.351.558 I llama_new_context_with_model: freq_scale = 1
0.00.380.975 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.380.991 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.381.085 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.952 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.381.960 I llama_new_context_with_model: graph nodes  = 601
0.00.381.961 I llama_new_context_with_model: graph splits = 1
0.00.381.962 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.549 I main: llama threadpool init, n_threads = 4
0.00.464.562 I 
0.00.464.642 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.464.646 I 
0.00.464.686 I sampler seed: 1157423523
0.00.464.697 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.699 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.464.700 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.700 I 
 effe,

I cannot access the requested file. The requested file is not accessible or could not be found.

I would appreciate it if you could investigate this

0.02.144.646 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6589.46 tokens per second)
0.02.144.649 I llama_perf_context_print:        load time =     462.67 ms
0.02.144.651 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.144.652 I llama_perf_context_print:        eval time =    1661.66 ms /    32 runs   (   51.93 ms per token,    19.26 tokens per second)
0.02.144.653 I llama_perf_context_print:       total time =    1680.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3957 (acf6d190)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32154.63 ms
main:    total time = 32154.63 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.623 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.854 I main: llama backend init
0.00.002.000 I main: load the model and apply lora adapter, if any
0.00.022.198 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.210 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.216 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.217 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.221 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.222 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.223 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.224 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.229 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.229 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.230 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.231 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.232 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.328 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.429 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.324 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.331 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.332 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.333 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.334 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.335 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.336 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.339 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.339 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.342 I llama_model_loader: - type  f32:   37 tensors
0.00.133.345 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.345 I llama_model_loader: - type q6_K:   19 tensors
0.00.215.730 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.785 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.251.195 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.255.394 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.263.801 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.375 I llm_load_vocab: special tokens cache size = 5
0.00.285.696 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.713 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.713 I llm_load_print_meta: arch             = gemma
0.00.285.714 I llm_load_print_meta: vocab type       = SPM
0.00.285.714 I llm_load_print_meta: n_vocab          = 256000
0.00.285.715 I llm_load_print_meta: n_merges         = 0
0.00.285.715 I llm_load_print_meta: vocab_only       = 0
0.00.285.715 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.716 I llm_load_print_meta: n_embd           = 2048
0.00.285.716 I llm_load_print_meta: n_layer          = 18
0.00.285.727 I llm_load_print_meta: n_head           = 8
0.00.285.728 I llm_load_print_meta: n_head_kv        = 1
0.00.285.729 I llm_load_print_meta: n_rot            = 256
0.00.285.729 I llm_load_print_meta: n_swa            = 0
0.00.285.729 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.730 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.731 I llm_load_print_meta: n_gqa            = 8
0.00.285.732 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.732 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.733 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.735 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.736 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.737 I llm_load_print_meta: n_ff             = 16384
0.00.285.737 I llm_load_print_meta: n_expert         = 0
0.00.285.737 I llm_load_print_meta: n_expert_used    = 0
0.00.285.738 I llm_load_print_meta: causal attn      = 1
0.00.285.738 I llm_load_print_meta: pooling type     = 0
0.00.285.738 I llm_load_print_meta: rope type        = 2
0.00.285.739 I llm_load_print_meta: rope scaling     = linear
0.00.285.740 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.741 I llm_load_print_meta: freq_scale_train = 1
0.00.285.741 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.741 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.742 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.742 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.742 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.742 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.742 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.743 I llm_load_print_meta: model type       = 2B
0.00.285.743 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.744 I llm_load_print_meta: model params     = 2.51 B
0.00.285.745 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.745 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.746 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.746 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.746 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.747 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.747 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.747 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.747 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.748 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.748 I llm_load_print_meta: max token length = 93
0.00.285.776 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.342.582 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.347.654 I llama_new_context_with_model: n_ctx      = 8192
0.00.347.660 I llama_new_context_with_model: n_batch    = 2048
0.00.347.660 I llama_new_context_with_model: n_ubatch   = 512
0.00.347.661 I llama_new_context_with_model: flash_attn = 0
0.00.347.664 I llama_new_context_with_model: freq_base  = 10000.0
0.00.347.664 I llama_new_context_with_model: freq_scale = 1
0.00.377.848 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.377.866 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.377.961 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.840 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.378.849 I llama_new_context_with_model: graph nodes  = 601
0.00.378.850 I llama_new_context_with_model: graph splits = 1
0.00.378.851 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.344 I main: llama threadpool init, n_threads = 4
0.00.461.358 I 
0.00.461.434 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.437 I 
0.00.461.477 I sampler seed: 3844751849
0.00.461.488 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.492 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.00.461.492 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.493 I 
 seconally.

I am not sure how to answer this question. It is asking me to write a creative story. But I am not sure where to start

0.02.111.213 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6556.73 tokens per second)
0.02.111.215 I llama_perf_context_print:        load time =     459.32 ms
0.02.111.217 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.111.219 I llama_perf_context_print:        eval time =    1631.27 ms /    32 runs   (   50.98 ms per token,    19.62 tokens per second)
0.02.111.219 I llama_perf_context_print:       total time =    1649.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.286s
user	8m15.698s
sys	0m6.975s
