+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.025.186 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.406 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.503 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.515 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.517 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.521 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.523 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.524 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.525 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.526 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.527 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.536 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.540 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.541 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.542 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.543 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.806 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.059 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.117 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.128 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.129 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.130 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.131 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.132 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.133 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.137 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.138 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.140 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.142 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.152 I llama_model_loader: - type  f32:   37 tensors
0.00.269.157 I llama_model_loader: - type q8_0:  127 tensors
0.00.482.633 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.837 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.530.891 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.537.043 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.550.005 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.551.007 I llm_load_vocab: special tokens cache size = 5
0.00.657.179 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.657.249 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.657.250 I llm_load_print_meta: arch             = gemma
0.00.657.251 I llm_load_print_meta: vocab type       = SPM
0.00.657.252 I llm_load_print_meta: n_vocab          = 256000
0.00.657.254 I llm_load_print_meta: n_merges         = 0
0.00.657.254 I llm_load_print_meta: vocab_only       = 0
0.00.657.255 I llm_load_print_meta: n_ctx_train      = 8192
0.00.657.255 I llm_load_print_meta: n_embd           = 2048
0.00.657.255 I llm_load_print_meta: n_layer          = 18
0.00.657.321 I llm_load_print_meta: n_head           = 8
0.00.657.327 I llm_load_print_meta: n_head_kv        = 1
0.00.657.328 I llm_load_print_meta: n_rot            = 256
0.00.657.328 I llm_load_print_meta: n_swa            = 0
0.00.657.329 I llm_load_print_meta: n_embd_head_k    = 256
0.00.657.329 I llm_load_print_meta: n_embd_head_v    = 256
0.00.657.333 I llm_load_print_meta: n_gqa            = 8
0.00.657.338 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.657.344 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.657.345 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.657.347 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.657.347 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.657.348 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.657.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.657.353 I llm_load_print_meta: n_ff             = 16384
0.00.657.353 I llm_load_print_meta: n_expert         = 0
0.00.657.354 I llm_load_print_meta: n_expert_used    = 0
0.00.657.354 I llm_load_print_meta: causal attn      = 1
0.00.657.355 I llm_load_print_meta: pooling type     = 0
0.00.657.355 I llm_load_print_meta: rope type        = 2
0.00.657.355 I llm_load_print_meta: rope scaling     = linear
0.00.657.357 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.657.358 I llm_load_print_meta: freq_scale_train = 1
0.00.657.358 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.657.359 I llm_load_print_meta: rope_finetuned   = unknown
0.00.657.359 I llm_load_print_meta: ssm_d_conv       = 0
0.00.657.359 I llm_load_print_meta: ssm_d_inner      = 0
0.00.657.359 I llm_load_print_meta: ssm_d_state      = 0
0.00.657.360 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.657.361 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.657.362 I llm_load_print_meta: model type       = 2B
0.00.657.363 I llm_load_print_meta: model ftype      = Q8_0
0.00.657.363 I llm_load_print_meta: model params     = 2.51 B
0.00.657.364 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.657.365 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.657.365 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.657.366 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.657.367 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.657.367 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.657.368 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.657.369 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.657.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.657.377 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.657.377 I llm_load_print_meta: max token length = 93
0.00.657.557 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.757.564 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.757.576 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.757.577 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.757.578 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.757.578 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.757.579 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.763.375 I llama_new_context_with_model: n_ctx      = 8192
0.00.763.383 I llama_new_context_with_model: n_batch    = 2048
0.00.763.383 I llama_new_context_with_model: n_ubatch   = 512
0.00.763.384 I llama_new_context_with_model: flash_attn = 0
0.00.763.387 I llama_new_context_with_model: freq_base  = 10000.0
0.00.763.388 I llama_new_context_with_model: freq_scale = 1
0.00.795.565 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.795.611 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.795.729 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.797.109 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.797.114 I llama_new_context_with_model: graph nodes  = 601
0.00.797.114 I llama_new_context_with_model: graph splits = 1
0.00.797.130 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.410.693 I main: llama threadpool init, n_threads = 4
0.01.410.706 I 
0.01.410.815 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.410.819 I 
0.01.411.019 I sampler seed: 2095096783
0.01.411.030 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.411.038 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.411.039 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.411.039 I 
 increably!

I'm not sure I understand. Could you please explain what you mean?

I'm unable to provide a response that includes inappropriate

0.14.883.805 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.05 tokens per second)
0.14.883.809 I llama_perf_context_print:        load time =    1407.81 ms
0.14.883.811 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.883.819 I llama_perf_context_print:        eval time =   13389.49 ms /    32 runs   (  418.42 ms per token,     2.39 tokens per second)
0.14.883.821 I llama_perf_context_print:       total time =   13473.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.847 I main: load the model and apply lora adapter, if any
0.00.025.589 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.695 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.712 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.716 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.721 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.723 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.724 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.725 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.727 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.727 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.735 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.736 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.737 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.738 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.739 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.740 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.903 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.060 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.071 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.072 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.073 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.074 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.075 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.076 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.080 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.081 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.082 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.097 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.100 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.111 I llama_model_loader: - type  f32:   37 tensors
0.00.268.114 I llama_model_loader: - type q8_0:  127 tensors
0.00.471.141 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.848 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.520.004 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.526.566 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.540.227 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.541.251 I llm_load_vocab: special tokens cache size = 5
0.00.635.548 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.635.622 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.635.623 I llm_load_print_meta: arch             = gemma
0.00.635.623 I llm_load_print_meta: vocab type       = SPM
0.00.635.624 I llm_load_print_meta: n_vocab          = 256000
0.00.635.626 I llm_load_print_meta: n_merges         = 0
0.00.635.627 I llm_load_print_meta: vocab_only       = 0
0.00.635.627 I llm_load_print_meta: n_ctx_train      = 8192
0.00.635.628 I llm_load_print_meta: n_embd           = 2048
0.00.635.628 I llm_load_print_meta: n_layer          = 18
0.00.635.693 I llm_load_print_meta: n_head           = 8
0.00.635.700 I llm_load_print_meta: n_head_kv        = 1
0.00.635.701 I llm_load_print_meta: n_rot            = 256
0.00.635.701 I llm_load_print_meta: n_swa            = 0
0.00.635.701 I llm_load_print_meta: n_embd_head_k    = 256
0.00.635.702 I llm_load_print_meta: n_embd_head_v    = 256
0.00.635.706 I llm_load_print_meta: n_gqa            = 8
0.00.635.711 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.635.715 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.635.717 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.635.718 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.635.719 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.635.719 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.635.719 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.635.724 I llm_load_print_meta: n_ff             = 16384
0.00.635.725 I llm_load_print_meta: n_expert         = 0
0.00.635.725 I llm_load_print_meta: n_expert_used    = 0
0.00.635.725 I llm_load_print_meta: causal attn      = 1
0.00.635.726 I llm_load_print_meta: pooling type     = 0
0.00.635.726 I llm_load_print_meta: rope type        = 2
0.00.635.727 I llm_load_print_meta: rope scaling     = linear
0.00.635.728 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.635.728 I llm_load_print_meta: freq_scale_train = 1
0.00.635.729 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.635.730 I llm_load_print_meta: rope_finetuned   = unknown
0.00.635.730 I llm_load_print_meta: ssm_d_conv       = 0
0.00.635.730 I llm_load_print_meta: ssm_d_inner      = 0
0.00.635.756 I llm_load_print_meta: ssm_d_state      = 0
0.00.635.756 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.635.757 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.635.757 I llm_load_print_meta: model type       = 2B
0.00.635.758 I llm_load_print_meta: model ftype      = Q8_0
0.00.635.759 I llm_load_print_meta: model params     = 2.51 B
0.00.635.760 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.635.760 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.635.761 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.635.762 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.635.767 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.635.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.635.767 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.635.768 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.635.774 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.635.776 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.635.777 I llm_load_print_meta: max token length = 93
0.00.635.947 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.731.307 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.737.373 I llama_new_context_with_model: n_ctx      = 8192
0.00.737.381 I llama_new_context_with_model: n_batch    = 2048
0.00.737.382 I llama_new_context_with_model: n_ubatch   = 512
0.00.737.383 I llama_new_context_with_model: flash_attn = 0
0.00.737.387 I llama_new_context_with_model: freq_base  = 10000.0
0.00.737.388 I llama_new_context_with_model: freq_scale = 1
0.00.769.549 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.769.594 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.769.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.771.125 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.771.130 I llama_new_context_with_model: graph nodes  = 601
0.00.771.131 I llama_new_context_with_model: graph splits = 1
0.00.771.147 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.437.652 I main: llama threadpool init, n_threads = 4
0.01.437.664 I 
0.01.437.773 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.437.777 I 
0.01.437.959 I sampler seed: 463769854
0.01.437.971 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.437.978 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.437.981 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.437.982 I 
 increasively. I have no idea what you are talking about. 

Could you please provide more context? [end of text]


0.11.179.787 I llama_perf_sampler_print:    sampling time =      35.38 ms /    24 runs   (    1.47 ms per token,   678.31 tokens per second)
0.11.179.790 I llama_perf_context_print:        load time =    1434.71 ms
0.11.179.792 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.179.793 I llama_perf_context_print:        eval time =    9681.50 ms /    23 runs   (  420.93 ms per token,     2.38 tokens per second)
0.11.179.815 I llama_perf_context_print:       total time =    9742.14 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.846 I main: load the model and apply lora adapter, if any
0.00.024.770 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.989 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.084 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.096 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.097 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.102 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.106 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.108 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.109 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.110 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.118 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.119 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.121 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.122 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.126 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.861 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.878 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.988 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.000 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.001 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.005 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.008 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.009 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.010 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.011 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.013 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.023 I llama_model_loader: - type  f32:   37 tensors
0.00.267.029 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.169 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.632 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.515.778 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.522.295 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.536.593 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.537.664 I llm_load_vocab: special tokens cache size = 5
0.00.632.098 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.632.171 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.632.172 I llm_load_print_meta: arch             = gemma
0.00.632.173 I llm_load_print_meta: vocab type       = SPM
0.00.632.174 I llm_load_print_meta: n_vocab          = 256000
0.00.632.177 I llm_load_print_meta: n_merges         = 0
0.00.632.177 I llm_load_print_meta: vocab_only       = 0
0.00.632.177 I llm_load_print_meta: n_ctx_train      = 8192
0.00.632.178 I llm_load_print_meta: n_embd           = 2048
0.00.632.178 I llm_load_print_meta: n_layer          = 18
0.00.632.244 I llm_load_print_meta: n_head           = 8
0.00.632.251 I llm_load_print_meta: n_head_kv        = 1
0.00.632.252 I llm_load_print_meta: n_rot            = 256
0.00.632.253 I llm_load_print_meta: n_swa            = 0
0.00.632.253 I llm_load_print_meta: n_embd_head_k    = 256
0.00.632.254 I llm_load_print_meta: n_embd_head_v    = 256
0.00.632.258 I llm_load_print_meta: n_gqa            = 8
0.00.632.263 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.632.269 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.632.270 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.632.272 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.632.272 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.632.273 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.632.273 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.632.288 I llm_load_print_meta: n_ff             = 16384
0.00.632.289 I llm_load_print_meta: n_expert         = 0
0.00.632.289 I llm_load_print_meta: n_expert_used    = 0
0.00.632.289 I llm_load_print_meta: causal attn      = 1
0.00.632.290 I llm_load_print_meta: pooling type     = 0
0.00.632.290 I llm_load_print_meta: rope type        = 2
0.00.632.290 I llm_load_print_meta: rope scaling     = linear
0.00.632.292 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.632.293 I llm_load_print_meta: freq_scale_train = 1
0.00.632.293 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.632.293 I llm_load_print_meta: rope_finetuned   = unknown
0.00.632.294 I llm_load_print_meta: ssm_d_conv       = 0
0.00.632.305 I llm_load_print_meta: ssm_d_inner      = 0
0.00.632.319 I llm_load_print_meta: ssm_d_state      = 0
0.00.632.322 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.632.323 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.632.324 I llm_load_print_meta: model type       = 2B
0.00.632.325 I llm_load_print_meta: model ftype      = Q8_0
0.00.632.325 I llm_load_print_meta: model params     = 2.51 B
0.00.632.327 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.632.327 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.632.328 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.632.337 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.632.345 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.632.346 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.632.346 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.632.346 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.632.352 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.632.355 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.632.355 I llm_load_print_meta: max token length = 93
0.00.632.526 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.710.964 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.710.972 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.710.973 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.710.974 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.710.975 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.710.975 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.716.649 I llama_new_context_with_model: n_ctx      = 8192
0.00.716.658 I llama_new_context_with_model: n_batch    = 2048
0.00.716.658 I llama_new_context_with_model: n_ubatch   = 512
0.00.716.659 I llama_new_context_with_model: flash_attn = 0
0.00.716.661 I llama_new_context_with_model: freq_base  = 10000.0
0.00.716.662 I llama_new_context_with_model: freq_scale = 1
0.00.746.995 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.040 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.161 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.579 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.583 I llama_new_context_with_model: graph nodes  = 601
0.00.748.584 I llama_new_context_with_model: graph splits = 1
0.00.748.600 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.363.317 I main: llama threadpool init, n_threads = 4
0.01.363.330 I 
0.01.363.440 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.445 I 
0.01.363.627 I sampler seed: 2005932594
0.01.363.638 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.645 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.363.646 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.649 I 
 increably, as the relentless sun beat down on the parched earth. The wind, a mournful sigh, whispered through the barren fields, carrying the scent of

0.14.815.131 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   669.02 tokens per second)
0.14.815.134 I llama_perf_context_print:        load time =    1360.37 ms
0.14.815.136 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.815.137 I llama_perf_context_print:        eval time =   13367.00 ms /    32 runs   (  417.72 ms per token,     2.39 tokens per second)
0.14.815.138 I llama_perf_context_print:       total time =   13451.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.025.061 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.283 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.378 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.390 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.392 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.397 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.402 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.403 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.404 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.405 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.406 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.414 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.415 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.417 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.419 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.420 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.158.410 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.263.301 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.283.459 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.283.470 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.283.471 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.283.472 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.283.473 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.283.476 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.283.477 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.283.482 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.283.483 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.283.484 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.283.485 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.283.487 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.283.496 I llama_model_loader: - type  f32:   37 tensors
0.00.283.500 I llama_model_loader: - type q8_0:  127 tensors
0.00.493.793 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.541.232 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.543.296 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.549.665 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.563.025 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.564.033 I llm_load_vocab: special tokens cache size = 5
0.00.662.589 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.662.670 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.662.674 I llm_load_print_meta: arch             = gemma
0.00.662.675 I llm_load_print_meta: vocab type       = SPM
0.00.662.676 I llm_load_print_meta: n_vocab          = 256000
0.00.662.678 I llm_load_print_meta: n_merges         = 0
0.00.662.679 I llm_load_print_meta: vocab_only       = 0
0.00.662.679 I llm_load_print_meta: n_ctx_train      = 8192
0.00.662.679 I llm_load_print_meta: n_embd           = 2048
0.00.662.680 I llm_load_print_meta: n_layer          = 18
0.00.662.742 I llm_load_print_meta: n_head           = 8
0.00.662.751 I llm_load_print_meta: n_head_kv        = 1
0.00.662.751 I llm_load_print_meta: n_rot            = 256
0.00.662.753 I llm_load_print_meta: n_swa            = 0
0.00.662.753 I llm_load_print_meta: n_embd_head_k    = 256
0.00.662.754 I llm_load_print_meta: n_embd_head_v    = 256
0.00.662.758 I llm_load_print_meta: n_gqa            = 8
0.00.662.763 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.662.768 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.662.769 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.662.770 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.662.771 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.662.772 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.662.773 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.662.778 I llm_load_print_meta: n_ff             = 16384
0.00.662.779 I llm_load_print_meta: n_expert         = 0
0.00.662.780 I llm_load_print_meta: n_expert_used    = 0
0.00.662.792 I llm_load_print_meta: causal attn      = 1
0.00.662.793 I llm_load_print_meta: pooling type     = 0
0.00.662.794 I llm_load_print_meta: rope type        = 2
0.00.662.807 I llm_load_print_meta: rope scaling     = linear
0.00.662.809 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.662.810 I llm_load_print_meta: freq_scale_train = 1
0.00.662.810 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.662.811 I llm_load_print_meta: rope_finetuned   = unknown
0.00.662.812 I llm_load_print_meta: ssm_d_conv       = 0
0.00.662.812 I llm_load_print_meta: ssm_d_inner      = 0
0.00.662.813 I llm_load_print_meta: ssm_d_state      = 0
0.00.662.813 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.662.813 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.662.814 I llm_load_print_meta: model type       = 2B
0.00.662.815 I llm_load_print_meta: model ftype      = Q8_0
0.00.662.815 I llm_load_print_meta: model params     = 2.51 B
0.00.662.816 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.662.817 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.662.818 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.662.818 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.662.819 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.662.819 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.662.828 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.662.829 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.662.835 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.662.837 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.662.837 I llm_load_print_meta: max token length = 93
0.00.662.999 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.734.342 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.734.354 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.740.355 I llama_new_context_with_model: n_ctx      = 8192
0.00.740.363 I llama_new_context_with_model: n_batch    = 2048
0.00.740.363 I llama_new_context_with_model: n_ubatch   = 512
0.00.740.364 I llama_new_context_with_model: flash_attn = 0
0.00.740.367 I llama_new_context_with_model: freq_base  = 10000.0
0.00.740.368 I llama_new_context_with_model: freq_scale = 1
0.00.770.341 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.770.384 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.770.496 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.771.904 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.771.909 I llama_new_context_with_model: graph nodes  = 601
0.00.771.909 I llama_new_context_with_model: graph splits = 1
0.00.771.925 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.397.019 I main: llama threadpool init, n_threads = 4
0.01.397.031 I 
0.01.397.140 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.397.141 I 
0.01.397.321 I sampler seed: 3680551653
0.01.397.334 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.397.340 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.397.342 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.397.343 I 
 increably.

I am not sure if my understanding of the prompt is correct. Could you please elaborate on what you mean?

I apologize, but I

0.14.791.001 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.29 tokens per second)
0.14.791.017 I llama_perf_context_print:        load time =    1394.13 ms
0.14.791.018 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.791.020 I llama_perf_context_print:        eval time =   13311.04 ms /    32 runs   (  415.97 ms per token,     2.40 tokens per second)
0.14.791.022 I llama_perf_context_print:       total time =   13394.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.615s
user	3m33.382s
sys	0m9.681s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3957 (acf6d190)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198642.42 ms
main:    total time = 198642.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.692 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.886 I main: llama backend init
0.00.002.859 I main: load the model and apply lora adapter, if any
0.00.024.763 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.974 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.070 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.089 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.093 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.094 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.095 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.097 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.104 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.105 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.106 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.107 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.108 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.982 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.977 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.910 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.922 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.923 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.924 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.925 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.926 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.927 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.930 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.931 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.932 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.933 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.935 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.943 I llama_model_loader: - type  f32:   37 tensors
0.00.266.948 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.949 I llama_model_loader: - type q6_K:   19 tensors
0.00.460.562 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.540 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.510.678 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.517.271 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.531.169 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.532.154 I llm_load_vocab: special tokens cache size = 5
0.00.629.332 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.406 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.407 I llm_load_print_meta: arch             = gemma
0.00.629.408 I llm_load_print_meta: vocab type       = SPM
0.00.629.409 I llm_load_print_meta: n_vocab          = 256000
0.00.629.411 I llm_load_print_meta: n_merges         = 0
0.00.629.412 I llm_load_print_meta: vocab_only       = 0
0.00.629.412 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.412 I llm_load_print_meta: n_embd           = 2048
0.00.629.413 I llm_load_print_meta: n_layer          = 18
0.00.629.476 I llm_load_print_meta: n_head           = 8
0.00.629.484 I llm_load_print_meta: n_head_kv        = 1
0.00.629.484 I llm_load_print_meta: n_rot            = 256
0.00.629.485 I llm_load_print_meta: n_swa            = 0
0.00.629.485 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.485 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.490 I llm_load_print_meta: n_gqa            = 8
0.00.629.494 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.499 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.500 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.502 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.502 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.503 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.503 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.508 I llm_load_print_meta: n_ff             = 16384
0.00.629.509 I llm_load_print_meta: n_expert         = 0
0.00.629.509 I llm_load_print_meta: n_expert_used    = 0
0.00.629.509 I llm_load_print_meta: causal attn      = 1
0.00.629.510 I llm_load_print_meta: pooling type     = 0
0.00.629.510 I llm_load_print_meta: rope type        = 2
0.00.629.511 I llm_load_print_meta: rope scaling     = linear
0.00.629.512 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.513 I llm_load_print_meta: freq_scale_train = 1
0.00.629.513 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.514 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.514 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.514 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.515 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.515 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.515 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.516 I llm_load_print_meta: model type       = 2B
0.00.629.517 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.629.518 I llm_load_print_meta: model params     = 2.51 B
0.00.629.519 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.629.519 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.520 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.521 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.521 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.521 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.522 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.522 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.528 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.529 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.530 I llm_load_print_meta: max token length = 93
0.00.629.706 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.097 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.690.109 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.690.110 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.690.111 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.690.112 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.690.112 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.695.874 I llama_new_context_with_model: n_ctx      = 8192
0.00.695.885 I llama_new_context_with_model: n_batch    = 2048
0.00.695.886 I llama_new_context_with_model: n_ubatch   = 512
0.00.695.887 I llama_new_context_with_model: flash_attn = 0
0.00.695.891 I llama_new_context_with_model: freq_base  = 10000.0
0.00.695.892 I llama_new_context_with_model: freq_scale = 1
0.00.727.940 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.984 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.097 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.512 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.518 I llama_new_context_with_model: graph nodes  = 601
0.00.729.518 I llama_new_context_with_model: graph splits = 1
0.00.729.535 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.308.123 I main: llama threadpool init, n_threads = 4
0.01.308.136 I 
0.01.308.245 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.308.249 I 
0.01.308.427 I sampler seed: 3996854885
0.01.308.439 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.308.446 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.308.448 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.308.448 I 
 increasities for the following prompts:

**Prompt 1:** What is the importance of innovation in solving environmental challenges?

**Prompt 2:** How can

0.12.244.950 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.32 tokens per second)
0.12.244.953 I llama_perf_context_print:        load time =    1305.17 ms
0.12.244.955 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.244.956 I llama_perf_context_print:        eval time =   10853.49 ms /    32 runs   (  339.17 ms per token,     2.95 tokens per second)
0.12.244.958 I llama_perf_context_print:       total time =   10936.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3957 (acf6d190)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199643.27 ms
main:    total time = 199643.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 3957 (acf6d190) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.632 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.727 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.740 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.741 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.746 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.748 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.750 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.754 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.756 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.763 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.768 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.775 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.777 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.778 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.046 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.630 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.487 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.496 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.497 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.498 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.499 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.500 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.501 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.505 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.506 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.515 I llama_model_loader: - type  f32:   37 tensors
0.00.265.519 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.520 I llama_model_loader: - type q6_K:   19 tensors
0.00.451.481 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.197 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.500.191 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.506.083 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.518.033 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.997 I llm_load_vocab: special tokens cache size = 5
0.00.627.919 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.995 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.996 I llm_load_print_meta: arch             = gemma
0.00.627.996 I llm_load_print_meta: vocab type       = SPM
0.00.627.997 I llm_load_print_meta: n_vocab          = 256000
0.00.628.000 I llm_load_print_meta: n_merges         = 0
0.00.628.000 I llm_load_print_meta: vocab_only       = 0
0.00.628.001 I llm_load_print_meta: n_ctx_train      = 8192
0.00.628.001 I llm_load_print_meta: n_embd           = 2048
0.00.628.001 I llm_load_print_meta: n_layer          = 18
0.00.628.068 I llm_load_print_meta: n_head           = 8
0.00.628.075 I llm_load_print_meta: n_head_kv        = 1
0.00.628.076 I llm_load_print_meta: n_rot            = 256
0.00.628.076 I llm_load_print_meta: n_swa            = 0
0.00.628.076 I llm_load_print_meta: n_embd_head_k    = 256
0.00.628.077 I llm_load_print_meta: n_embd_head_v    = 256
0.00.628.082 I llm_load_print_meta: n_gqa            = 8
0.00.628.089 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.628.097 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.628.098 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.628.100 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.628.100 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.628.101 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.628.102 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.628.108 I llm_load_print_meta: n_ff             = 16384
0.00.628.109 I llm_load_print_meta: n_expert         = 0
0.00.628.110 I llm_load_print_meta: n_expert_used    = 0
0.00.628.110 I llm_load_print_meta: causal attn      = 1
0.00.628.111 I llm_load_print_meta: pooling type     = 0
0.00.628.112 I llm_load_print_meta: rope type        = 2
0.00.628.113 I llm_load_print_meta: rope scaling     = linear
0.00.628.115 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.628.117 I llm_load_print_meta: freq_scale_train = 1
0.00.628.118 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.628.131 I llm_load_print_meta: rope_finetuned   = unknown
0.00.628.139 I llm_load_print_meta: ssm_d_conv       = 0
0.00.628.139 I llm_load_print_meta: ssm_d_inner      = 0
0.00.628.140 I llm_load_print_meta: ssm_d_state      = 0
0.00.628.140 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.628.143 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.628.144 I llm_load_print_meta: model type       = 2B
0.00.628.146 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.628.147 I llm_load_print_meta: model params     = 2.51 B
0.00.628.149 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.628.152 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.628.153 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.628.154 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.628.155 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.628.155 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.628.156 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.628.156 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.628.163 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.628.174 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.628.174 I llm_load_print_meta: max token length = 93
0.00.628.357 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.686.428 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.692.324 I llama_new_context_with_model: n_ctx      = 8192
0.00.692.332 I llama_new_context_with_model: n_batch    = 2048
0.00.692.332 I llama_new_context_with_model: n_ubatch   = 512
0.00.692.333 I llama_new_context_with_model: flash_attn = 0
0.00.692.337 I llama_new_context_with_model: freq_base  = 10000.0
0.00.692.337 I llama_new_context_with_model: freq_scale = 1
0.00.721.824 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.883 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.004 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.388 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.394 I llama_new_context_with_model: graph nodes  = 601
0.00.723.394 I llama_new_context_with_model: graph splits = 1
0.00.723.412 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.719 I main: llama threadpool init, n_threads = 4
0.01.303.732 I 
0.01.303.852 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.856 I 
0.01.304.050 I sampler seed: 2342288543
0.01.304.062 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.304.071 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.304.081 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.304.081 I 
 seconally. [end of text]


0.02.687.072 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.70 tokens per second)
0.02.687.074 I llama_perf_context_print:        load time =    1300.84 ms
0.02.687.076 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.687.077 I llama_perf_context_print:        eval time =    1371.39 ms /     4 runs   (  342.85 ms per token,     2.92 tokens per second)
0.02.687.078 I llama_perf_context_print:       total time =    1383.36 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m56.143s
user	49m40.016s
sys	0m6.455s
