+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 3922 (acbf9759) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.001.854 I main: load the model and apply lora adapter, if any
0.00.022.248 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.297 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.305 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.311 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.312 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.316 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.317 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.318 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.318 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.319 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.320 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.324 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.325 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.326 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.327 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.878 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.322 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.329 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.330 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.330 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.331 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.332 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.332 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.335 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.336 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.336 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.338 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.339 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.342 I llama_model_loader: - type  f32:   37 tensors
0.00.134.345 I llama_model_loader: - type q8_0:  127 tensors
0.00.225.009 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.816 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.264.469 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.269.727 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.280.621 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.281.356 I llm_load_vocab: special tokens cache size = 5
0.00.302.462 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.302.482 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.302.482 I llm_load_print_meta: arch             = gemma
0.00.302.483 I llm_load_print_meta: vocab type       = SPM
0.00.302.484 I llm_load_print_meta: n_vocab          = 256000
0.00.302.484 I llm_load_print_meta: n_merges         = 0
0.00.302.484 I llm_load_print_meta: vocab_only       = 0
0.00.302.484 I llm_load_print_meta: n_ctx_train      = 8192
0.00.302.485 I llm_load_print_meta: n_embd           = 2048
0.00.302.485 I llm_load_print_meta: n_layer          = 18
0.00.302.498 I llm_load_print_meta: n_head           = 8
0.00.302.499 I llm_load_print_meta: n_head_kv        = 1
0.00.302.499 I llm_load_print_meta: n_rot            = 256
0.00.302.500 I llm_load_print_meta: n_swa            = 0
0.00.302.500 I llm_load_print_meta: n_embd_head_k    = 256
0.00.302.500 I llm_load_print_meta: n_embd_head_v    = 256
0.00.302.501 I llm_load_print_meta: n_gqa            = 8
0.00.302.503 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.302.503 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.302.504 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.302.506 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.302.506 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.302.506 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.302.506 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.302.508 I llm_load_print_meta: n_ff             = 16384
0.00.302.508 I llm_load_print_meta: n_expert         = 0
0.00.302.508 I llm_load_print_meta: n_expert_used    = 0
0.00.302.508 I llm_load_print_meta: causal attn      = 1
0.00.302.509 I llm_load_print_meta: pooling type     = 0
0.00.302.509 I llm_load_print_meta: rope type        = 2
0.00.302.510 I llm_load_print_meta: rope scaling     = linear
0.00.302.511 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.302.512 I llm_load_print_meta: freq_scale_train = 1
0.00.302.512 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.302.512 I llm_load_print_meta: rope_finetuned   = unknown
0.00.302.512 I llm_load_print_meta: ssm_d_conv       = 0
0.00.302.513 I llm_load_print_meta: ssm_d_inner      = 0
0.00.302.513 I llm_load_print_meta: ssm_d_state      = 0
0.00.302.513 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.302.513 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.302.514 I llm_load_print_meta: model type       = 2B
0.00.302.514 I llm_load_print_meta: model ftype      = Q8_0
0.00.302.515 I llm_load_print_meta: model params     = 2.51 B
0.00.302.516 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.302.516 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.302.517 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.302.517 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.302.518 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.302.518 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.302.518 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.302.519 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.302.519 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.302.519 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.302.520 I llm_load_print_meta: max token length = 93
0.00.302.543 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.401.580 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.401.601 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.401.602 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.401.603 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.401.604 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.401.605 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.406.872 I llama_new_context_with_model: n_ctx      = 8192
0.00.406.879 I llama_new_context_with_model: n_batch    = 2048
0.00.406.879 I llama_new_context_with_model: n_ubatch   = 512
0.00.406.880 I llama_new_context_with_model: flash_attn = 0
0.00.406.884 I llama_new_context_with_model: freq_base  = 10000.0
0.00.406.885 I llama_new_context_with_model: freq_scale = 1
0.00.436.938 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.436.955 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.437.055 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.437.974 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.437.981 I llama_new_context_with_model: graph nodes  = 601
0.00.437.982 I llama_new_context_with_model: graph splits = 1
0.00.437.984 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.530.000 I main: llama threadpool init, n_threads = 4
0.00.530.011 I 
0.00.530.087 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.530.091 I 
0.00.530.130 I sampler seed: 3851542262
0.00.530.141 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.530.144 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.530.145 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.530.145 I 
 increasities and injustices, such as the enslavement of Africans, the brutalization of indigenous peoples, and the systematic oppression of women.

**What is the

0.02.787.757 I llama_perf_sampler_print:    sampling time =       5.45 ms /    33 runs   (    0.17 ms per token,  6057.27 tokens per second)
0.02.787.760 I llama_perf_context_print:        load time =     528.12 ms
0.02.787.761 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.787.763 I llama_perf_context_print:        eval time =    2238.95 ms /    32 runs   (   69.97 ms per token,    14.29 tokens per second)
0.02.787.763 I llama_perf_context_print:       total time =    2257.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.562 I build: 3922 (acbf9759) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.001.916 I main: load the model and apply lora adapter, if any
0.00.021.898 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.909 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.916 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.916 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.920 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.921 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.922 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.923 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.924 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.924 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.930 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.931 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.933 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.934 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.939 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.316 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.711 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.627 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.636 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.638 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.640 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.642 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.643 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.643 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.644 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.648 I llama_model_loader: - type  f32:   37 tensors
0.00.131.651 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.258 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.475 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.241.784 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.245.969 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.254.287 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.850 I llm_load_vocab: special tokens cache size = 5
0.00.275.423 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.442 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.442 I llm_load_print_meta: arch             = gemma
0.00.275.443 I llm_load_print_meta: vocab type       = SPM
0.00.275.444 I llm_load_print_meta: n_vocab          = 256000
0.00.275.445 I llm_load_print_meta: n_merges         = 0
0.00.275.445 I llm_load_print_meta: vocab_only       = 0
0.00.275.445 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.446 I llm_load_print_meta: n_embd           = 2048
0.00.275.446 I llm_load_print_meta: n_layer          = 18
0.00.275.458 I llm_load_print_meta: n_head           = 8
0.00.275.459 I llm_load_print_meta: n_head_kv        = 1
0.00.275.459 I llm_load_print_meta: n_rot            = 256
0.00.275.459 I llm_load_print_meta: n_swa            = 0
0.00.275.460 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.461 I llm_load_print_meta: n_gqa            = 8
0.00.275.462 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.463 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.464 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.465 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.465 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.466 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.466 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.467 I llm_load_print_meta: n_ff             = 16384
0.00.275.467 I llm_load_print_meta: n_expert         = 0
0.00.275.468 I llm_load_print_meta: n_expert_used    = 0
0.00.275.468 I llm_load_print_meta: causal attn      = 1
0.00.275.468 I llm_load_print_meta: pooling type     = 0
0.00.275.469 I llm_load_print_meta: rope type        = 2
0.00.275.469 I llm_load_print_meta: rope scaling     = linear
0.00.275.471 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.472 I llm_load_print_meta: freq_scale_train = 1
0.00.275.472 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.472 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.473 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.473 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.473 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.473 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.474 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.474 I llm_load_print_meta: model type       = 2B
0.00.275.475 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.475 I llm_load_print_meta: model params     = 2.51 B
0.00.275.476 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.477 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.477 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.477 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.478 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.478 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.478 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.479 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.479 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.479 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.480 I llm_load_print_meta: max token length = 93
0.00.275.508 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.369.001 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.374.121 I llama_new_context_with_model: n_ctx      = 8192
0.00.374.127 I llama_new_context_with_model: n_batch    = 2048
0.00.374.128 I llama_new_context_with_model: n_ubatch   = 512
0.00.374.128 I llama_new_context_with_model: flash_attn = 0
0.00.374.131 I llama_new_context_with_model: freq_base  = 10000.0
0.00.374.131 I llama_new_context_with_model: freq_scale = 1
0.00.403.432 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.403.448 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.403.538 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.404.422 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.404.430 I llama_new_context_with_model: graph nodes  = 601
0.00.404.430 I llama_new_context_with_model: graph splits = 1
0.00.404.432 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.108 I main: llama threadpool init, n_threads = 4
0.00.496.120 I 
0.00.496.212 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.496.216 I 
0.00.496.263 I sampler seed: 1333289223
0.00.496.279 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.284 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.286 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.287 I 
 seconary effects.

**a.** Bilateral asymmetry
**b.** Contrast
**c.** Focal effects
**d.** Inter-group differences

Answer:

0.02.679.280 I llama_perf_sampler_print:    sampling time =       5.66 ms /    33 runs   (    0.17 ms per token,  5831.42 tokens per second)
0.02.679.283 I llama_perf_context_print:        load time =     494.17 ms
0.02.679.284 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.679.285 I llama_perf_context_print:        eval time =    2163.60 ms /    32 runs   (   67.61 ms per token,    14.79 tokens per second)
0.02.679.286 I llama_perf_context_print:       total time =    2183.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.567 I build: 3922 (acbf9759) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.808 I main: llama backend init
0.00.001.943 I main: load the model and apply lora adapter, if any
0.00.023.890 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.946 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.955 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.962 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.964 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.969 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.973 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.975 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.975 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.977 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.983 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.985 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.986 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.987 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.988 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.452 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.018 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.946 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.954 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.955 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.955 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.956 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.958 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.959 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.962 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.963 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.964 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.965 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.138.966 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.138.970 I llama_model_loader: - type  f32:   37 tensors
0.00.138.973 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.276 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.303 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.249.580 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.253.341 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.260.878 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.408 I llm_load_vocab: special tokens cache size = 5
0.00.282.268 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.286 I llm_load_print_meta: arch             = gemma
0.00.282.286 I llm_load_print_meta: vocab type       = SPM
0.00.282.287 I llm_load_print_meta: n_vocab          = 256000
0.00.282.287 I llm_load_print_meta: n_merges         = 0
0.00.282.287 I llm_load_print_meta: vocab_only       = 0
0.00.282.288 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.288 I llm_load_print_meta: n_embd           = 2048
0.00.282.288 I llm_load_print_meta: n_layer          = 18
0.00.282.301 I llm_load_print_meta: n_head           = 8
0.00.282.302 I llm_load_print_meta: n_head_kv        = 1
0.00.282.303 I llm_load_print_meta: n_rot            = 256
0.00.282.303 I llm_load_print_meta: n_swa            = 0
0.00.282.303 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.303 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.304 I llm_load_print_meta: n_gqa            = 8
0.00.282.305 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.306 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.307 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.308 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.308 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.308 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.309 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.310 I llm_load_print_meta: n_ff             = 16384
0.00.282.311 I llm_load_print_meta: n_expert         = 0
0.00.282.311 I llm_load_print_meta: n_expert_used    = 0
0.00.282.311 I llm_load_print_meta: causal attn      = 1
0.00.282.312 I llm_load_print_meta: pooling type     = 0
0.00.282.313 I llm_load_print_meta: rope type        = 2
0.00.282.313 I llm_load_print_meta: rope scaling     = linear
0.00.282.315 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.315 I llm_load_print_meta: freq_scale_train = 1
0.00.282.316 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.316 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.316 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.316 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.316 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.317 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.317 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.318 I llm_load_print_meta: model type       = 2B
0.00.282.318 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.319 I llm_load_print_meta: model params     = 2.51 B
0.00.282.320 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.321 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.321 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.322 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.322 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.323 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.323 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.323 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.323 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.324 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.325 I llm_load_print_meta: max token length = 93
0.00.282.352 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.357.992 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.357.999 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.358.000 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.358.001 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.358.001 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.358.002 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.363.060 I llama_new_context_with_model: n_ctx      = 8192
0.00.363.066 I llama_new_context_with_model: n_batch    = 2048
0.00.363.067 I llama_new_context_with_model: n_ubatch   = 512
0.00.363.067 I llama_new_context_with_model: flash_attn = 0
0.00.363.070 I llama_new_context_with_model: freq_base  = 10000.0
0.00.363.071 I llama_new_context_with_model: freq_scale = 1
0.00.392.918 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.392.934 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.393.030 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.393.905 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.393.914 I llama_new_context_with_model: graph nodes  = 601
0.00.393.914 I llama_new_context_with_model: graph splits = 1
0.00.393.916 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.486.829 I main: llama threadpool init, n_threads = 4
0.00.486.842 I 
0.00.486.926 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.486.930 I 
0.00.486.984 I sampler seed: 3849109562
0.00.486.995 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.999 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.999 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.999 I 
 increasities to an all-encompassing and insightful perspective on the nature of the human mind.

**The Human Mind: A Tapestry of Complexity and

0.02.778.871 I llama_perf_sampler_print:    sampling time =       5.78 ms /    33 runs   (    0.18 ms per token,  5714.29 tokens per second)
0.02.778.874 I llama_perf_context_print:        load time =     484.86 ms
0.02.778.875 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.778.876 I llama_perf_context_print:        eval time =    2272.95 ms /    32 runs   (   71.03 ms per token,    14.08 tokens per second)
0.02.778.877 I llama_perf_context_print:       total time =    2292.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.550 I build: 3922 (acbf9759) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.001.928 I main: load the model and apply lora adapter, if any
0.00.022.137 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.186 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.197 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.204 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.207 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.211 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.212 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.216 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.217 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.217 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.218 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.223 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.224 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.863 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.837 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.763 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.770 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.771 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.772 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.772 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.773 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.774 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.777 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.778 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.779 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.780 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.780 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.784 I llama_model_loader: - type  f32:   37 tensors
0.00.132.787 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.936 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.615 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.256.174 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.260.696 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.270.029 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.692 I llm_load_vocab: special tokens cache size = 5
0.00.291.412 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.430 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.430 I llm_load_print_meta: arch             = gemma
0.00.291.431 I llm_load_print_meta: vocab type       = SPM
0.00.291.431 I llm_load_print_meta: n_vocab          = 256000
0.00.291.432 I llm_load_print_meta: n_merges         = 0
0.00.291.432 I llm_load_print_meta: vocab_only       = 0
0.00.291.432 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.433 I llm_load_print_meta: n_embd           = 2048
0.00.291.433 I llm_load_print_meta: n_layer          = 18
0.00.291.445 I llm_load_print_meta: n_head           = 8
0.00.291.446 I llm_load_print_meta: n_head_kv        = 1
0.00.291.447 I llm_load_print_meta: n_rot            = 256
0.00.291.447 I llm_load_print_meta: n_swa            = 0
0.00.291.447 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.447 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.448 I llm_load_print_meta: n_gqa            = 8
0.00.291.449 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.450 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.451 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.453 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.453 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.453 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.453 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.454 I llm_load_print_meta: n_ff             = 16384
0.00.291.455 I llm_load_print_meta: n_expert         = 0
0.00.291.455 I llm_load_print_meta: n_expert_used    = 0
0.00.291.455 I llm_load_print_meta: causal attn      = 1
0.00.291.456 I llm_load_print_meta: pooling type     = 0
0.00.291.456 I llm_load_print_meta: rope type        = 2
0.00.291.456 I llm_load_print_meta: rope scaling     = linear
0.00.291.458 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.458 I llm_load_print_meta: freq_scale_train = 1
0.00.291.458 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.459 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.459 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.459 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.459 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.459 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.460 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.460 I llm_load_print_meta: model type       = 2B
0.00.291.461 I llm_load_print_meta: model ftype      = Q8_0
0.00.291.461 I llm_load_print_meta: model params     = 2.51 B
0.00.291.462 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.291.463 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.463 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.464 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.465 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.465 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.466 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.466 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.466 I llm_load_print_meta: max token length = 93
0.00.291.486 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.362.059 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.362.067 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.367.158 I llama_new_context_with_model: n_ctx      = 8192
0.00.367.165 I llama_new_context_with_model: n_batch    = 2048
0.00.367.165 I llama_new_context_with_model: n_ubatch   = 512
0.00.367.166 I llama_new_context_with_model: flash_attn = 0
0.00.367.170 I llama_new_context_with_model: freq_base  = 10000.0
0.00.367.171 I llama_new_context_with_model: freq_scale = 1
0.00.395.974 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.990 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.396.082 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.957 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.396.965 I llama_new_context_with_model: graph nodes  = 601
0.00.396.965 I llama_new_context_with_model: graph splits = 1
0.00.396.967 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.908 I main: llama threadpool init, n_threads = 4
0.00.506.922 I 
0.00.507.001 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.507.001 I 
0.00.507.043 I sampler seed: 97167341
0.00.507.050 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.507.058 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.507.059 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.507.059 I 
 increasities, and the potential for an increase in violence. [end of text]


0.01.501.715 I llama_perf_sampler_print:    sampling time =       2.46 ms /    14 runs   (    0.18 ms per token,  5688.74 tokens per second)
0.01.501.717 I llama_perf_context_print:        load time =     504.96 ms
0.01.501.718 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.501.720 I llama_perf_context_print:        eval time =     985.77 ms /    13 runs   (   75.83 ms per token,    13.19 tokens per second)
0.01.501.720 I llama_perf_context_print:       total time =     994.81 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.504s
user	0m34.006s
sys	0m9.471s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3922 (acbf9759)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32216.62 ms
main:    total time = 32216.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 3922 (acbf9759) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.022.238 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.287 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.294 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.301 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.302 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.309 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.309 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.310 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.310 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.311 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.314 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.315 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.315 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.317 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.317 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.618 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.424 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.432 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.440 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.441 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.441 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.442 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.443 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.443 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.446 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.446 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.447 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.447 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.448 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.452 I llama_model_loader: - type  f32:   37 tensors
0.00.133.455 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.456 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.548 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.802 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.238.924 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.242.339 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.249.108 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.596 I llm_load_vocab: special tokens cache size = 5
0.00.270.133 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.151 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.152 I llm_load_print_meta: arch             = gemma
0.00.270.153 I llm_load_print_meta: vocab type       = SPM
0.00.270.154 I llm_load_print_meta: n_vocab          = 256000
0.00.270.154 I llm_load_print_meta: n_merges         = 0
0.00.270.154 I llm_load_print_meta: vocab_only       = 0
0.00.270.155 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.155 I llm_load_print_meta: n_embd           = 2048
0.00.270.155 I llm_load_print_meta: n_layer          = 18
0.00.270.166 I llm_load_print_meta: n_head           = 8
0.00.270.167 I llm_load_print_meta: n_head_kv        = 1
0.00.270.168 I llm_load_print_meta: n_rot            = 256
0.00.270.168 I llm_load_print_meta: n_swa            = 0
0.00.270.168 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.169 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.170 I llm_load_print_meta: n_gqa            = 8
0.00.270.171 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.171 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.172 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.173 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.174 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.174 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.174 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.175 I llm_load_print_meta: n_ff             = 16384
0.00.270.176 I llm_load_print_meta: n_expert         = 0
0.00.270.176 I llm_load_print_meta: n_expert_used    = 0
0.00.270.176 I llm_load_print_meta: causal attn      = 1
0.00.270.177 I llm_load_print_meta: pooling type     = 0
0.00.270.177 I llm_load_print_meta: rope type        = 2
0.00.270.177 I llm_load_print_meta: rope scaling     = linear
0.00.270.179 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.179 I llm_load_print_meta: freq_scale_train = 1
0.00.270.179 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.180 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.180 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.180 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.181 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.181 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.181 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.182 I llm_load_print_meta: model type       = 2B
0.00.270.182 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.183 I llm_load_print_meta: model params     = 2.51 B
0.00.270.184 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.184 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.184 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.185 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.185 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.185 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.185 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.186 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.186 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.186 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.187 I llm_load_print_meta: max token length = 93
0.00.270.205 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.328.113 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.328.120 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.328.121 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.328.121 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.328.122 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.328.122 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.333.064 I llama_new_context_with_model: n_ctx      = 8192
0.00.333.070 I llama_new_context_with_model: n_batch    = 2048
0.00.333.071 I llama_new_context_with_model: n_ubatch   = 512
0.00.333.071 I llama_new_context_with_model: flash_attn = 0
0.00.333.073 I llama_new_context_with_model: freq_base  = 10000.0
0.00.333.075 I llama_new_context_with_model: freq_scale = 1
0.00.361.748 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.763 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.855 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.744 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.362.751 I llama_new_context_with_model: graph nodes  = 601
0.00.362.751 I llama_new_context_with_model: graph splits = 1
0.00.362.753 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.441 I main: llama threadpool init, n_threads = 4
0.00.443.454 I 
0.00.443.530 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.533 I 
0.00.443.572 I sampler seed: 3885714984
0.00.443.583 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.587 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.587 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.587 I 
 increasities! 

I cannot find a definition for this phrase. It sounds like gibberish. [end of text]


0.01.498.226 I llama_perf_sampler_print:    sampling time =       3.72 ms /    22 runs   (    0.17 ms per token,  5915.57 tokens per second)
0.01.498.229 I llama_perf_context_print:        load time =     441.58 ms
0.01.498.231 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.498.234 I llama_perf_context_print:        eval time =    1042.15 ms /    21 runs   (   49.63 ms per token,    20.15 tokens per second)
0.01.498.235 I llama_perf_context_print:       total time =    1054.79 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3922 (acbf9759)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32063.45 ms
main:    total time = 32063.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.580 I build: 3922 (acbf9759) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.001.892 I main: load the model and apply lora adapter, if any
0.00.022.832 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.849 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.857 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.858 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.862 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.863 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.863 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.864 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.865 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.869 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.869 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.870 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.871 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.872 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.333 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.617 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.624 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.626 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.628 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.629 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.630 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.633 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.634 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.638 I llama_model_loader: - type  f32:   37 tensors
0.00.133.640 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.641 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.210 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.246.510 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.250.476 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.258.884 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.498 I llm_load_vocab: special tokens cache size = 5
0.00.280.070 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.086 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.087 I llm_load_print_meta: arch             = gemma
0.00.280.088 I llm_load_print_meta: vocab type       = SPM
0.00.280.088 I llm_load_print_meta: n_vocab          = 256000
0.00.280.088 I llm_load_print_meta: n_merges         = 0
0.00.280.089 I llm_load_print_meta: vocab_only       = 0
0.00.280.089 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.090 I llm_load_print_meta: n_embd           = 2048
0.00.280.090 I llm_load_print_meta: n_layer          = 18
0.00.280.101 I llm_load_print_meta: n_head           = 8
0.00.280.103 I llm_load_print_meta: n_head_kv        = 1
0.00.280.103 I llm_load_print_meta: n_rot            = 256
0.00.280.103 I llm_load_print_meta: n_swa            = 0
0.00.280.104 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.104 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.105 I llm_load_print_meta: n_gqa            = 8
0.00.280.107 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.107 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.108 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.110 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.111 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.111 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.111 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.112 I llm_load_print_meta: n_ff             = 16384
0.00.280.112 I llm_load_print_meta: n_expert         = 0
0.00.280.113 I llm_load_print_meta: n_expert_used    = 0
0.00.280.113 I llm_load_print_meta: causal attn      = 1
0.00.280.114 I llm_load_print_meta: pooling type     = 0
0.00.280.115 I llm_load_print_meta: rope type        = 2
0.00.280.116 I llm_load_print_meta: rope scaling     = linear
0.00.280.118 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.119 I llm_load_print_meta: freq_scale_train = 1
0.00.280.119 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.120 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.120 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.123 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.123 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.123 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.124 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.124 I llm_load_print_meta: model type       = 2B
0.00.280.124 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.126 I llm_load_print_meta: model params     = 2.51 B
0.00.280.127 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.128 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.128 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.129 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.129 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.129 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.130 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.130 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.130 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.131 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.131 I llm_load_print_meta: max token length = 93
0.00.280.149 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.338.795 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.344.003 I llama_new_context_with_model: n_ctx      = 8192
0.00.344.010 I llama_new_context_with_model: n_batch    = 2048
0.00.344.010 I llama_new_context_with_model: n_ubatch   = 512
0.00.344.011 I llama_new_context_with_model: flash_attn = 0
0.00.344.013 I llama_new_context_with_model: freq_base  = 10000.0
0.00.344.014 I llama_new_context_with_model: freq_scale = 1
0.00.374.808 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.374.823 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.374.917 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.810 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.375.819 I llama_new_context_with_model: graph nodes  = 601
0.00.375.819 I llama_new_context_with_model: graph splits = 1
0.00.375.821 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.474 I main: llama threadpool init, n_threads = 4
0.00.457.484 I 
0.00.457.558 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.457.562 I 
0.00.457.601 I sampler seed: 1480981021
0.00.457.611 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.614 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.615 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.615 I 
 increasities and the consequences of engaging in such behavior. [end of text]


0.01.073.065 I llama_perf_sampler_print:    sampling time =       2.20 ms /    13 runs   (    0.17 ms per token,  5911.78 tokens per second)
0.01.073.067 I llama_perf_context_print:        load time =     455.56 ms
0.01.073.069 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.073.070 I llama_perf_context_print:        eval time =     607.31 ms /    12 runs   (   50.61 ms per token,    19.76 tokens per second)
0.01.073.070 I llama_perf_context_print:       total time =     615.60 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m9.680s
user	8m8.781s
sys	0m6.953s
