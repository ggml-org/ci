+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.689 I build: 3965 (ac113a0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.900 I main: llama backend init
0.00.002.847 I main: load the model and apply lora adapter, if any
0.00.024.936 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.144 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.231 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.241 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.243 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.247 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.249 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.251 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.265 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.272 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.273 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.282 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.286 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.288 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.289 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.296 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.677 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.683 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.064 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.074 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.075 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.076 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.077 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.078 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.079 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.083 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.084 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.086 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.086 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.088 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.096 I llama_model_loader: - type  f32:   37 tensors
0.00.275.101 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.900 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.783 I llm_load_vocab: special tokens cache size = 5
0.00.615.222 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.295 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.296 I llm_load_print_meta: arch             = gemma
0.00.615.297 I llm_load_print_meta: vocab type       = SPM
0.00.615.298 I llm_load_print_meta: n_vocab          = 256000
0.00.615.300 I llm_load_print_meta: n_merges         = 0
0.00.615.301 I llm_load_print_meta: vocab_only       = 0
0.00.615.301 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.301 I llm_load_print_meta: n_embd           = 2048
0.00.615.302 I llm_load_print_meta: n_layer          = 18
0.00.615.367 I llm_load_print_meta: n_head           = 8
0.00.615.375 I llm_load_print_meta: n_head_kv        = 1
0.00.615.376 I llm_load_print_meta: n_rot            = 256
0.00.615.376 I llm_load_print_meta: n_swa            = 0
0.00.615.377 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.378 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.383 I llm_load_print_meta: n_gqa            = 8
0.00.615.390 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.401 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.404 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.405 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.406 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.406 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.416 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.427 I llm_load_print_meta: n_ff             = 16384
0.00.615.428 I llm_load_print_meta: n_expert         = 0
0.00.615.429 I llm_load_print_meta: n_expert_used    = 0
0.00.615.430 I llm_load_print_meta: causal attn      = 1
0.00.615.430 I llm_load_print_meta: pooling type     = 0
0.00.615.431 I llm_load_print_meta: rope type        = 2
0.00.615.432 I llm_load_print_meta: rope scaling     = linear
0.00.615.434 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.435 I llm_load_print_meta: freq_scale_train = 1
0.00.615.436 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.437 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.437 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.438 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.439 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.439 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.440 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.441 I llm_load_print_meta: model type       = 2B
0.00.615.444 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.445 I llm_load_print_meta: model params     = 2.51 B
0.00.615.447 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.447 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.448 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.458 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.467 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.468 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.469 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.470 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.477 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.479 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.479 I llm_load_print_meta: max token length = 93
0.00.615.654 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.715.664 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.715.676 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.715.676 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.715.677 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.715.678 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.715.678 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.721.510 I llama_new_context_with_model: n_ctx      = 8192
0.00.721.517 I llama_new_context_with_model: n_batch    = 2048
0.00.721.518 I llama_new_context_with_model: n_ubatch   = 512
0.00.721.518 I llama_new_context_with_model: flash_attn = 0
0.00.721.520 I llama_new_context_with_model: freq_base  = 10000.0
0.00.721.521 I llama_new_context_with_model: freq_scale = 1
0.00.751.098 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.751.143 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.751.256 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.663 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.668 I llama_new_context_with_model: graph nodes  = 601
0.00.752.668 I llama_new_context_with_model: graph splits = 1
0.00.752.684 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.871 I main: llama threadpool init, n_threads = 4
0.01.362.884 I 
0.01.362.998 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.363.003 I 
0.01.363.186 I sampler seed: 2128911274
0.01.363.198 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.363.207 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.363.208 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.363.210 I 
 increamically.

I am not able to generate responses that contain potentially harmful or inappropriate content. [end of text]


0.09.732.472 I llama_perf_sampler_print:    sampling time =      31.95 ms /    21 runs   (    1.52 ms per token,   657.34 tokens per second)
0.09.732.476 I llama_perf_context_print:        load time =    1359.94 ms
0.09.732.478 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.732.480 I llama_perf_context_print:        eval time =    8308.32 ms /    20 runs   (  415.42 ms per token,     2.41 tokens per second)
0.09.732.481 I llama_perf_context_print:       total time =    8369.61 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3965 (ac113a0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
0.00.028.163 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.028.256 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.271 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.273 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.277 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.280 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.281 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.282 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.283 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.284 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.292 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.293 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.295 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.296 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.297 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.705 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.274.976 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.293.229 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.293.237 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.293.238 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.293.240 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.293.240 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.293.242 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.293.244 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.293.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.293.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.293.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.293.251 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.293.253 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.293.261 I llama_model_loader: - type  f32:   37 tensors
0.00.293.265 I llama_model_loader: - type q8_0:  127 tensors
0.00.467.422 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.409 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.355 I llm_load_vocab: special tokens cache size = 5
0.00.628.805 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.628.874 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.628.875 I llm_load_print_meta: arch             = gemma
0.00.628.876 I llm_load_print_meta: vocab type       = SPM
0.00.628.876 I llm_load_print_meta: n_vocab          = 256000
0.00.628.879 I llm_load_print_meta: n_merges         = 0
0.00.628.880 I llm_load_print_meta: vocab_only       = 0
0.00.628.880 I llm_load_print_meta: n_ctx_train      = 8192
0.00.628.880 I llm_load_print_meta: n_embd           = 2048
0.00.628.881 I llm_load_print_meta: n_layer          = 18
0.00.628.943 I llm_load_print_meta: n_head           = 8
0.00.628.951 I llm_load_print_meta: n_head_kv        = 1
0.00.628.953 I llm_load_print_meta: n_rot            = 256
0.00.628.953 I llm_load_print_meta: n_swa            = 0
0.00.628.954 I llm_load_print_meta: n_embd_head_k    = 256
0.00.628.954 I llm_load_print_meta: n_embd_head_v    = 256
0.00.628.959 I llm_load_print_meta: n_gqa            = 8
0.00.628.964 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.628.972 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.628.974 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.628.976 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.628.976 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.628.976 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.628.977 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.628.982 I llm_load_print_meta: n_ff             = 16384
0.00.628.983 I llm_load_print_meta: n_expert         = 0
0.00.628.983 I llm_load_print_meta: n_expert_used    = 0
0.00.628.992 I llm_load_print_meta: causal attn      = 1
0.00.628.993 I llm_load_print_meta: pooling type     = 0
0.00.628.993 I llm_load_print_meta: rope type        = 2
0.00.628.994 I llm_load_print_meta: rope scaling     = linear
0.00.628.996 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.628.997 I llm_load_print_meta: freq_scale_train = 1
0.00.629.009 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.012 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.013 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.013 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.013 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.014 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.014 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.015 I llm_load_print_meta: model type       = 2B
0.00.629.016 I llm_load_print_meta: model ftype      = Q8_0
0.00.629.017 I llm_load_print_meta: model params     = 2.51 B
0.00.629.017 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.629.018 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.021 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.021 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.022 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.022 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.023 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.028 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.030 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.030 I llm_load_print_meta: max token length = 93
0.00.629.195 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.723.345 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.729.026 I llama_new_context_with_model: n_ctx      = 8192
0.00.729.034 I llama_new_context_with_model: n_batch    = 2048
0.00.729.034 I llama_new_context_with_model: n_ubatch   = 512
0.00.729.035 I llama_new_context_with_model: flash_attn = 0
0.00.729.038 I llama_new_context_with_model: freq_base  = 10000.0
0.00.729.038 I llama_new_context_with_model: freq_scale = 1
0.00.759.735 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.759.778 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.759.894 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.761.262 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.761.269 I llama_new_context_with_model: graph nodes  = 601
0.00.761.269 I llama_new_context_with_model: graph splits = 1
0.00.761.286 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.987 I main: llama threadpool init, n_threads = 4
0.01.371.999 I 
0.01.372.107 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.372.111 I 
0.01.372.291 I sampler seed: 844373463
0.01.372.302 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.372.310 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.372.311 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.372.311 I 
 increasities, and the like.

I am unable to access the requested content. Please check your internet connection or try again later. [end of text]


0.13.155.400 I llama_perf_sampler_print:    sampling time =      45.11 ms /    29 runs   (    1.56 ms per token,   642.82 tokens per second)
0.13.155.404 I llama_perf_context_print:        load time =    1369.08 ms
0.13.155.405 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.155.406 I llama_perf_context_print:        eval time =   11698.21 ms /    28 runs   (  417.79 ms per token,     2.39 tokens per second)
0.13.155.407 I llama_perf_context_print:       total time =   11783.42 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3965 (ac113a0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.781 I main: load the model and apply lora adapter, if any
0.00.024.773 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.973 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.066 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.078 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.079 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.083 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.085 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.086 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.087 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.089 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.096 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.097 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.098 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.099 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.100 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.305 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.310 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.686 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.693 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.694 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.696 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.697 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.699 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.700 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.703 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.704 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.705 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.706 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.274.707 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.716 I llama_model_loader: - type  f32:   37 tensors
0.00.274.720 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.185 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.968 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.995 I llm_load_vocab: special tokens cache size = 5
0.00.610.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.659 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.659 I llm_load_print_meta: arch             = gemma
0.00.610.660 I llm_load_print_meta: vocab type       = SPM
0.00.610.661 I llm_load_print_meta: n_vocab          = 256000
0.00.610.664 I llm_load_print_meta: n_merges         = 0
0.00.610.665 I llm_load_print_meta: vocab_only       = 0
0.00.610.665 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.665 I llm_load_print_meta: n_embd           = 2048
0.00.610.666 I llm_load_print_meta: n_layer          = 18
0.00.610.728 I llm_load_print_meta: n_head           = 8
0.00.610.735 I llm_load_print_meta: n_head_kv        = 1
0.00.610.735 I llm_load_print_meta: n_rot            = 256
0.00.610.736 I llm_load_print_meta: n_swa            = 0
0.00.610.736 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.737 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.741 I llm_load_print_meta: n_gqa            = 8
0.00.610.746 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.751 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.752 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.753 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.754 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.761 I llm_load_print_meta: n_ff             = 16384
0.00.610.761 I llm_load_print_meta: n_expert         = 0
0.00.610.762 I llm_load_print_meta: n_expert_used    = 0
0.00.610.762 I llm_load_print_meta: causal attn      = 1
0.00.610.762 I llm_load_print_meta: pooling type     = 0
0.00.610.763 I llm_load_print_meta: rope type        = 2
0.00.610.763 I llm_load_print_meta: rope scaling     = linear
0.00.610.764 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.765 I llm_load_print_meta: freq_scale_train = 1
0.00.610.765 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.766 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.766 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.767 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.768 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.768 I llm_load_print_meta: model type       = 2B
0.00.610.769 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.770 I llm_load_print_meta: model params     = 2.51 B
0.00.610.771 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.771 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.772 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.772 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.773 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.773 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.773 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.774 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.779 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.782 I llm_load_print_meta: max token length = 93
0.00.610.945 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.689.717 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.689.724 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.689.725 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.689.726 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.689.727 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.689.727 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.695.324 I llama_new_context_with_model: n_ctx      = 8192
0.00.695.331 I llama_new_context_with_model: n_batch    = 2048
0.00.695.332 I llama_new_context_with_model: n_ubatch   = 512
0.00.695.332 I llama_new_context_with_model: flash_attn = 0
0.00.695.335 I llama_new_context_with_model: freq_base  = 10000.0
0.00.695.335 I llama_new_context_with_model: freq_scale = 1
0.00.725.270 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.312 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.424 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.834 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.839 I llama_new_context_with_model: graph nodes  = 601
0.00.726.839 I llama_new_context_with_model: graph splits = 1
0.00.726.856 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.379.571 I main: llama threadpool init, n_threads = 4
0.01.379.586 I 
0.01.379.703 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.379.708 I 
0.01.379.901 I sampler seed: 3613459056
0.01.379.913 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.379.921 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.379.922 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.379.931 I 
 increably, but tragically.

**Analysis:**

* The poem uses vivid imagery and figurative language to create a poignant and memorable effect.
* The speaker

0.14.973.239 I llama_perf_sampler_print:    sampling time =      51.21 ms /    33 runs   (    1.55 ms per token,   644.39 tokens per second)
0.14.973.242 I llama_perf_context_print:        load time =    1376.70 ms
0.14.973.243 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.973.277 I llama_perf_context_print:        eval time =   13496.82 ms /    32 runs   (  421.78 ms per token,     2.37 tokens per second)
0.14.973.278 I llama_perf_context_print:       total time =   13593.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 3965 (ac113a0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.024.784 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.982 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.070 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.088 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.089 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.090 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.092 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.093 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.095 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.102 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.107 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.109 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.738 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.244 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.605 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.615 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.616 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.617 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.618 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.619 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.620 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.624 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.625 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.626 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.627 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.275.628 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.637 I llama_model_loader: - type  f32:   37 tensors
0.00.275.640 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.221 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.742 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.711 I llm_load_vocab: special tokens cache size = 5
0.00.620.399 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.470 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.471 I llm_load_print_meta: arch             = gemma
0.00.620.472 I llm_load_print_meta: vocab type       = SPM
0.00.620.473 I llm_load_print_meta: n_vocab          = 256000
0.00.620.475 I llm_load_print_meta: n_merges         = 0
0.00.620.476 I llm_load_print_meta: vocab_only       = 0
0.00.620.476 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.477 I llm_load_print_meta: n_embd           = 2048
0.00.620.477 I llm_load_print_meta: n_layer          = 18
0.00.620.541 I llm_load_print_meta: n_head           = 8
0.00.620.548 I llm_load_print_meta: n_head_kv        = 1
0.00.620.548 I llm_load_print_meta: n_rot            = 256
0.00.620.549 I llm_load_print_meta: n_swa            = 0
0.00.620.549 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.549 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.554 I llm_load_print_meta: n_gqa            = 8
0.00.620.558 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.563 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.564 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.566 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.566 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.567 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.567 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.600 I llm_load_print_meta: n_ff             = 16384
0.00.620.601 I llm_load_print_meta: n_expert         = 0
0.00.620.601 I llm_load_print_meta: n_expert_used    = 0
0.00.620.602 I llm_load_print_meta: causal attn      = 1
0.00.620.615 I llm_load_print_meta: pooling type     = 0
0.00.620.616 I llm_load_print_meta: rope type        = 2
0.00.620.616 I llm_load_print_meta: rope scaling     = linear
0.00.620.618 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.627 I llm_load_print_meta: freq_scale_train = 1
0.00.620.628 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.628 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.628 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.629 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.629 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.629 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.634 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.635 I llm_load_print_meta: model type       = 2B
0.00.620.636 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.645 I llm_load_print_meta: model params     = 2.51 B
0.00.620.647 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.647 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.648 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.648 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.649 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.656 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.657 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.658 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.663 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.665 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.665 I llm_load_print_meta: max token length = 93
0.00.620.832 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.692.082 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.692.093 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.697.782 I llama_new_context_with_model: n_ctx      = 8192
0.00.697.788 I llama_new_context_with_model: n_batch    = 2048
0.00.697.788 I llama_new_context_with_model: n_ubatch   = 512
0.00.697.789 I llama_new_context_with_model: flash_attn = 0
0.00.697.791 I llama_new_context_with_model: freq_base  = 10000.0
0.00.697.792 I llama_new_context_with_model: freq_scale = 1
0.00.728.455 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.728.497 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.728.613 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.729.972 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.729.978 I llama_new_context_with_model: graph nodes  = 601
0.00.729.979 I llama_new_context_with_model: graph splits = 1
0.00.729.995 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.344.431 I main: llama threadpool init, n_threads = 4
0.01.344.443 I 
0.01.344.549 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.344.555 I 
0.01.344.742 I sampler seed: 3254198529
0.01.344.763 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.772 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.785 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.786 I 
 increasities into a more digestible format. [end of text]


0.05.127.519 I llama_perf_sampler_print:    sampling time =      13.91 ms /    10 runs   (    1.39 ms per token,   718.96 tokens per second)
0.05.127.522 I llama_perf_context_print:        load time =    1341.53 ms
0.05.127.544 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.127.547 I llama_perf_context_print:        eval time =    3754.58 ms /     9 runs   (  417.18 ms per token,     2.40 tokens per second)
0.05.127.548 I llama_perf_context_print:       total time =    3783.10 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.645s
user	2m42.983s
sys	0m9.433s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3965 (ac113a0f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199476.12 ms
main:    total time = 199476.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3965 (ac113a0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.726 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.931 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.045 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.057 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.058 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.062 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.066 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.067 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.068 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.069 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.070 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.078 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.079 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.087 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.089 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.090 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.465 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.863 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.280 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.290 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.291 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.292 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.293 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.294 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.311 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.317 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.318 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.319 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.320 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.322 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.331 I llama_model_loader: - type  f32:   37 tensors
0.00.275.336 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.342 I llama_model_loader: - type q6_K:   19 tensors
0.00.448.456 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.791 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.800 I llm_load_vocab: special tokens cache size = 5
0.00.611.234 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.305 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.306 I llm_load_print_meta: arch             = gemma
0.00.611.307 I llm_load_print_meta: vocab type       = SPM
0.00.611.308 I llm_load_print_meta: n_vocab          = 256000
0.00.611.310 I llm_load_print_meta: n_merges         = 0
0.00.611.311 I llm_load_print_meta: vocab_only       = 0
0.00.611.311 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.311 I llm_load_print_meta: n_embd           = 2048
0.00.611.312 I llm_load_print_meta: n_layer          = 18
0.00.611.377 I llm_load_print_meta: n_head           = 8
0.00.611.384 I llm_load_print_meta: n_head_kv        = 1
0.00.611.385 I llm_load_print_meta: n_rot            = 256
0.00.611.385 I llm_load_print_meta: n_swa            = 0
0.00.611.385 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.386 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.391 I llm_load_print_meta: n_gqa            = 8
0.00.611.396 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.405 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.406 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.408 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.408 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.409 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.410 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.415 I llm_load_print_meta: n_ff             = 16384
0.00.611.416 I llm_load_print_meta: n_expert         = 0
0.00.611.416 I llm_load_print_meta: n_expert_used    = 0
0.00.611.417 I llm_load_print_meta: causal attn      = 1
0.00.611.417 I llm_load_print_meta: pooling type     = 0
0.00.611.418 I llm_load_print_meta: rope type        = 2
0.00.611.418 I llm_load_print_meta: rope scaling     = linear
0.00.611.419 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.420 I llm_load_print_meta: freq_scale_train = 1
0.00.611.421 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.422 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.422 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.423 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.423 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.424 I llm_load_print_meta: model type       = 2B
0.00.611.426 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.427 I llm_load_print_meta: model params     = 2.51 B
0.00.611.428 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.428 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.429 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.429 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.430 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.430 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.430 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.431 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.437 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.438 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.439 I llm_load_print_meta: max token length = 93
0.00.611.609 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.672.105 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.672.116 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.672.116 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.672.117 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.672.118 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.672.118 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.677.714 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.720 I llama_new_context_with_model: n_batch    = 2048
0.00.677.721 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.721 I llama_new_context_with_model: flash_attn = 0
0.00.677.724 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.725 I llama_new_context_with_model: freq_scale = 1
0.00.706.372 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.416 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.531 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.917 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.707.922 I llama_new_context_with_model: graph nodes  = 601
0.00.707.923 I llama_new_context_with_model: graph splits = 1
0.00.707.938 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.289.196 I main: llama threadpool init, n_threads = 4
0.01.289.209 I 
0.01.289.317 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.289.321 I 
0.01.289.507 I sampler seed: 385051216
0.01.289.519 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.289.525 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.289.527 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.289.527 I 
 encompating all the relevant information, the essay should explore the impact of technology on our lives, highlighting its positive and negative effects.

**Technology: A Double

0.12.271.904 I llama_perf_sampler_print:    sampling time =      49.91 ms /    33 runs   (    1.51 ms per token,   661.16 tokens per second)
0.12.271.908 I llama_perf_context_print:        load time =    1286.30 ms
0.12.271.909 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.271.921 I llama_perf_context_print:        eval time =   10887.72 ms /    32 runs   (  340.24 ms per token,     2.94 tokens per second)
0.12.271.923 I llama_perf_context_print:       total time =   10982.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3965 (ac113a0f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199389.62 ms
main:    total time = 199389.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 3965 (ac113a0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.797 I main: load the model and apply lora adapter, if any
0.00.025.025 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.126 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.142 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.146 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.151 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.152 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.154 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.154 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.155 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.156 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.163 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.164 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.168 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.169 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.630 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.970 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.978 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.979 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.981 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.982 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.983 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.984 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.988 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.989 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.996 I llama_model_loader: - type  f32:   37 tensors
0.00.276.000 I llama_model_loader: - type q4_K:  108 tensors
0.00.276.000 I llama_model_loader: - type q6_K:   19 tensors
0.00.456.797 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.332 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.326 I llm_load_vocab: special tokens cache size = 5
0.00.627.019 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.093 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.094 I llm_load_print_meta: arch             = gemma
0.00.627.094 I llm_load_print_meta: vocab type       = SPM
0.00.627.095 I llm_load_print_meta: n_vocab          = 256000
0.00.627.098 I llm_load_print_meta: n_merges         = 0
0.00.627.098 I llm_load_print_meta: vocab_only       = 0
0.00.627.099 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.099 I llm_load_print_meta: n_embd           = 2048
0.00.627.100 I llm_load_print_meta: n_layer          = 18
0.00.627.166 I llm_load_print_meta: n_head           = 8
0.00.627.173 I llm_load_print_meta: n_head_kv        = 1
0.00.627.174 I llm_load_print_meta: n_rot            = 256
0.00.627.175 I llm_load_print_meta: n_swa            = 0
0.00.627.175 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.175 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.180 I llm_load_print_meta: n_gqa            = 8
0.00.627.184 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.190 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.192 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.194 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.194 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.195 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.195 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.201 I llm_load_print_meta: n_ff             = 16384
0.00.627.201 I llm_load_print_meta: n_expert         = 0
0.00.627.202 I llm_load_print_meta: n_expert_used    = 0
0.00.627.202 I llm_load_print_meta: causal attn      = 1
0.00.627.202 I llm_load_print_meta: pooling type     = 0
0.00.627.203 I llm_load_print_meta: rope type        = 2
0.00.627.204 I llm_load_print_meta: rope scaling     = linear
0.00.627.205 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.206 I llm_load_print_meta: freq_scale_train = 1
0.00.627.207 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.207 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.208 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.208 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.220 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.231 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.239 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.241 I llm_load_print_meta: model type       = 2B
0.00.627.246 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.627.247 I llm_load_print_meta: model params     = 2.51 B
0.00.627.247 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.627.255 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.256 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.257 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.257 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.258 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.264 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.265 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.272 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.273 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.274 I llm_load_print_meta: max token length = 93
0.00.627.441 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.688.688 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.696.773 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.782 I llama_new_context_with_model: n_batch    = 2048
0.00.696.783 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.784 I llama_new_context_with_model: flash_attn = 0
0.00.696.788 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.789 I llama_new_context_with_model: freq_scale = 1
0.00.730.629 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.730.683 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.730.809 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.732.223 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.732.228 I llama_new_context_with_model: graph nodes  = 601
0.00.732.229 I llama_new_context_with_model: graph splits = 1
0.00.732.247 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.625 I main: llama threadpool init, n_threads = 4
0.01.318.638 I 
0.01.318.763 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.768 I 
0.01.318.957 I sampler seed: 793995418
0.01.318.969 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.979 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.318.980 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.981 I 
 maneupher.

**Instructions:**
- Write a paragraph that summarizes the main idea of the passage.
- Identify the main idea and supporting details from the

0.12.277.468 I llama_perf_sampler_print:    sampling time =      48.99 ms /    33 runs   (    1.48 ms per token,   673.63 tokens per second)
0.12.277.474 I llama_perf_context_print:        load time =    1315.74 ms
0.12.277.475 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.277.477 I llama_perf_context_print:        eval time =   10864.47 ms /    32 runs   (  339.51 ms per token,     2.95 tokens per second)
0.12.277.478 I llama_perf_context_print:       total time =   10958.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.278s
user	50m13.910s
sys	0m6.444s
