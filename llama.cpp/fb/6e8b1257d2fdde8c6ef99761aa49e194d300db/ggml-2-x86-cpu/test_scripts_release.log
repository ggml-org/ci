+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4212 (fb6e8b12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.114 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.121 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.128 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.132 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.133 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.137 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.138 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.139 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.139 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.139 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.143 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.144 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.144 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.145 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.145 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.633 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.946 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.790 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.796 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.797 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.798 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.798 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.799 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.800 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.803 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.804 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.805 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.806 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.807 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.810 I llama_model_loader: - type  f32:   37 tensors
0.00.131.811 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.082 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.304 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.851 I llm_load_vocab: special tokens cache size = 5
0.00.261.794 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.810 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.810 I llm_load_print_meta: arch             = gemma
0.00.261.811 I llm_load_print_meta: vocab type       = SPM
0.00.261.812 I llm_load_print_meta: n_vocab          = 256000
0.00.261.812 I llm_load_print_meta: n_merges         = 0
0.00.261.812 I llm_load_print_meta: vocab_only       = 0
0.00.261.813 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.813 I llm_load_print_meta: n_embd           = 2048
0.00.261.813 I llm_load_print_meta: n_layer          = 18
0.00.261.826 I llm_load_print_meta: n_head           = 8
0.00.261.827 I llm_load_print_meta: n_head_kv        = 1
0.00.261.827 I llm_load_print_meta: n_rot            = 256
0.00.261.827 I llm_load_print_meta: n_swa            = 0
0.00.261.828 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.828 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.829 I llm_load_print_meta: n_gqa            = 8
0.00.261.830 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.831 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.832 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.833 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.833 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.834 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.834 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.835 I llm_load_print_meta: n_ff             = 16384
0.00.261.835 I llm_load_print_meta: n_expert         = 0
0.00.261.835 I llm_load_print_meta: n_expert_used    = 0
0.00.261.836 I llm_load_print_meta: causal attn      = 1
0.00.261.836 I llm_load_print_meta: pooling type     = 0
0.00.261.836 I llm_load_print_meta: rope type        = 2
0.00.261.837 I llm_load_print_meta: rope scaling     = linear
0.00.261.838 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.838 I llm_load_print_meta: freq_scale_train = 1
0.00.261.839 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.839 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.839 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.839 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.840 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.840 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.840 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.841 I llm_load_print_meta: model type       = 2B
0.00.261.841 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.842 I llm_load_print_meta: model params     = 2.51 B
0.00.261.843 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.843 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.844 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.844 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.844 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.845 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.845 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.845 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.846 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.846 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.846 I llm_load_print_meta: max token length = 93
0.00.363.090 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.097 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.098 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.099 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.099 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.100 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.282 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.288 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.288 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.289 I llama_new_context_with_model: n_batch       = 2048
0.00.368.289 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.290 I llama_new_context_with_model: flash_attn    = 0
0.00.368.292 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.293 I llama_new_context_with_model: freq_scale    = 1
0.00.368.294 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.221 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.236 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.331 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.674 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.680 I llama_new_context_with_model: graph nodes  = 601
0.00.384.681 I llama_new_context_with_model: graph splits = 1
0.00.384.683 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.533 I main: llama threadpool init, n_threads = 4
0.00.469.549 I 
0.00.469.628 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.469.633 I 
0.00.469.687 I sampler seed: 3091984914
0.00.469.698 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.710 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.714 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.714 I 
 increably. The way you answer this question is indicative of your intelligence and understanding of the world. [end of text]


0.01.952.654 I llama_perf_sampler_print:    sampling time =       3.32 ms /    22 runs   (    0.15 ms per token,  6630.50 tokens per second)
0.01.952.656 I llama_perf_context_print:        load time =     468.76 ms
0.01.952.658 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.952.660 I llama_perf_context_print:        eval time =    1470.16 ms /    21 runs   (   70.01 ms per token,    14.28 tokens per second)
0.01.952.663 I llama_perf_context_print:       total time =    1483.13 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.547 I build: 4212 (fb6e8b12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.745 I main: load the model and apply lora adapter, if any
0.00.021.412 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.428 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.435 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.437 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.441 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.443 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.443 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.444 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.445 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.445 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.450 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.450 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.451 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.451 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.452 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.862 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.865 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.713 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.720 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.720 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.721 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.721 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.722 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.723 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.725 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.726 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.727 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.728 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.729 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.732 I llama_model_loader: - type  f32:   37 tensors
0.00.131.733 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.319 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.811 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.317 I llm_load_vocab: special tokens cache size = 5
0.00.264.309 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.326 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.326 I llm_load_print_meta: arch             = gemma
0.00.264.327 I llm_load_print_meta: vocab type       = SPM
0.00.264.328 I llm_load_print_meta: n_vocab          = 256000
0.00.264.328 I llm_load_print_meta: n_merges         = 0
0.00.264.328 I llm_load_print_meta: vocab_only       = 0
0.00.264.329 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.329 I llm_load_print_meta: n_embd           = 2048
0.00.264.329 I llm_load_print_meta: n_layer          = 18
0.00.264.340 I llm_load_print_meta: n_head           = 8
0.00.264.341 I llm_load_print_meta: n_head_kv        = 1
0.00.264.341 I llm_load_print_meta: n_rot            = 256
0.00.264.341 I llm_load_print_meta: n_swa            = 0
0.00.264.342 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.342 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.343 I llm_load_print_meta: n_gqa            = 8
0.00.264.344 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.345 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.345 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.347 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.347 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.347 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.349 I llm_load_print_meta: n_ff             = 16384
0.00.264.349 I llm_load_print_meta: n_expert         = 0
0.00.264.349 I llm_load_print_meta: n_expert_used    = 0
0.00.264.349 I llm_load_print_meta: causal attn      = 1
0.00.264.350 I llm_load_print_meta: pooling type     = 0
0.00.264.350 I llm_load_print_meta: rope type        = 2
0.00.264.350 I llm_load_print_meta: rope scaling     = linear
0.00.264.351 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.352 I llm_load_print_meta: freq_scale_train = 1
0.00.264.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.353 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.353 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.354 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.354 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.354 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.355 I llm_load_print_meta: model type       = 2B
0.00.264.355 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.356 I llm_load_print_meta: model params     = 2.51 B
0.00.264.357 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.357 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.358 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.358 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.359 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.359 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.359 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.360 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.360 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.360 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.361 I llm_load_print_meta: max token length = 93
0.00.359.434 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.648 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.654 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.655 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.655 I llama_new_context_with_model: n_batch       = 2048
0.00.364.656 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.657 I llama_new_context_with_model: flash_attn    = 0
0.00.364.659 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.660 I llama_new_context_with_model: freq_scale    = 1
0.00.364.661 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.027 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.042 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.137 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.411 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.418 I llama_new_context_with_model: graph nodes  = 601
0.00.381.418 I llama_new_context_with_model: graph splits = 1
0.00.381.420 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.352 I main: llama threadpool init, n_threads = 4
0.00.463.366 I 
0.00.463.440 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.443 I 
0.00.463.490 I sampler seed: 2518633797
0.00.463.501 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.515 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.518 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.519 I 
 increasities, an elegant and eloquent way to express yourself. [end of text]


0.01.345.110 I llama_perf_sampler_print:    sampling time =       2.17 ms /    14 runs   (    0.16 ms per token,  6448.64 tokens per second)
0.01.345.113 I llama_perf_context_print:        load time =     462.59 ms
0.01.345.114 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.345.117 I llama_perf_context_print:        eval time =     873.02 ms /    13 runs   (   67.16 ms per token,    14.89 tokens per second)
0.01.345.118 I llama_perf_context_print:       total time =     881.76 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.560 I build: 4212 (fb6e8b12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.788 I main: load the model and apply lora adapter, if any
0.00.021.308 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.316 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.332 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.332 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.336 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.337 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.338 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.338 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.339 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.344 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.345 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.346 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.347 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.043 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.877 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.853 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.861 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.862 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.862 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.863 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.864 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.865 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.868 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.869 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.870 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.870 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.871 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.875 I llama_model_loader: - type  f32:   37 tensors
0.00.132.876 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.985 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.202 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.711 I llm_load_vocab: special tokens cache size = 5
0.00.268.648 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.666 I llm_load_print_meta: arch             = gemma
0.00.268.666 I llm_load_print_meta: vocab type       = SPM
0.00.268.667 I llm_load_print_meta: n_vocab          = 256000
0.00.268.667 I llm_load_print_meta: n_merges         = 0
0.00.268.668 I llm_load_print_meta: vocab_only       = 0
0.00.268.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.668 I llm_load_print_meta: n_embd           = 2048
0.00.268.668 I llm_load_print_meta: n_layer          = 18
0.00.268.680 I llm_load_print_meta: n_head           = 8
0.00.268.681 I llm_load_print_meta: n_head_kv        = 1
0.00.268.681 I llm_load_print_meta: n_rot            = 256
0.00.268.682 I llm_load_print_meta: n_swa            = 0
0.00.268.682 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.682 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.683 I llm_load_print_meta: n_gqa            = 8
0.00.268.684 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.685 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.695 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.697 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.697 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.698 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.698 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.699 I llm_load_print_meta: n_ff             = 16384
0.00.268.699 I llm_load_print_meta: n_expert         = 0
0.00.268.700 I llm_load_print_meta: n_expert_used    = 0
0.00.268.700 I llm_load_print_meta: causal attn      = 1
0.00.268.700 I llm_load_print_meta: pooling type     = 0
0.00.268.701 I llm_load_print_meta: rope type        = 2
0.00.268.701 I llm_load_print_meta: rope scaling     = linear
0.00.268.703 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.703 I llm_load_print_meta: freq_scale_train = 1
0.00.268.704 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.704 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.704 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.705 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.705 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.705 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.705 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.706 I llm_load_print_meta: model type       = 2B
0.00.268.706 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.708 I llm_load_print_meta: model params     = 2.51 B
0.00.268.709 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.709 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.709 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.710 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.711 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.711 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.712 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.713 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.713 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.714 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.715 I llm_load_print_meta: max token length = 93
0.00.344.116 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.122 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.123 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.124 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.124 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.125 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.349.421 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.427 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.427 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.428 I llama_new_context_with_model: n_batch       = 2048
0.00.349.428 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.429 I llama_new_context_with_model: flash_attn    = 0
0.00.349.431 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.432 I llama_new_context_with_model: freq_scale    = 1
0.00.349.433 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.246 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.262 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.359 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.623 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.629 I llama_new_context_with_model: graph nodes  = 601
0.00.365.629 I llama_new_context_with_model: graph splits = 1
0.00.365.631 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.085 I main: llama threadpool init, n_threads = 4
0.00.450.100 I 
0.00.450.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.450.176 I 
0.00.450.218 I sampler seed: 2302452077
0.00.450.228 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.230 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.231 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.231 I 
 increably.

I'm so glad I found you! You're the best partner I could ask for.

I'm so glad I met

0.02.703.643 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6344.93 tokens per second)
0.02.703.645 I llama_perf_context_print:        load time =     449.28 ms
0.02.703.646 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.703.647 I llama_perf_context_print:        eval time =    2234.63 ms /    32 runs   (   69.83 ms per token,    14.32 tokens per second)
0.02.703.648 I llama_perf_context_print:       total time =    2253.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.164 I build: 4212 (fb6e8b12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.353 I main: llama backend init
0.00.000.359 I main: load the model and apply lora adapter, if any
0.00.020.408 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.417 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.424 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.433 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.437 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.441 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.442 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.443 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.443 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.444 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.444 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.448 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.448 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.449 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.450 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.966 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.024 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.853 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.859 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.860 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.861 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.862 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.863 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.867 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.868 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.870 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.871 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.872 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.876 I llama_model_loader: - type  f32:   37 tensors
0.00.130.877 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.009 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.001 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.582 I llm_load_vocab: special tokens cache size = 5
0.00.264.428 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.442 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.443 I llm_load_print_meta: arch             = gemma
0.00.264.443 I llm_load_print_meta: vocab type       = SPM
0.00.264.444 I llm_load_print_meta: n_vocab          = 256000
0.00.264.445 I llm_load_print_meta: n_merges         = 0
0.00.264.445 I llm_load_print_meta: vocab_only       = 0
0.00.264.445 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.445 I llm_load_print_meta: n_embd           = 2048
0.00.264.446 I llm_load_print_meta: n_layer          = 18
0.00.264.456 I llm_load_print_meta: n_head           = 8
0.00.264.457 I llm_load_print_meta: n_head_kv        = 1
0.00.264.457 I llm_load_print_meta: n_rot            = 256
0.00.264.458 I llm_load_print_meta: n_swa            = 0
0.00.264.458 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.458 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.459 I llm_load_print_meta: n_gqa            = 8
0.00.264.460 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.462 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.462 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.464 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.464 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.465 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.465 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.466 I llm_load_print_meta: n_ff             = 16384
0.00.264.466 I llm_load_print_meta: n_expert         = 0
0.00.264.466 I llm_load_print_meta: n_expert_used    = 0
0.00.264.466 I llm_load_print_meta: causal attn      = 1
0.00.264.467 I llm_load_print_meta: pooling type     = 0
0.00.264.467 I llm_load_print_meta: rope type        = 2
0.00.264.467 I llm_load_print_meta: rope scaling     = linear
0.00.264.469 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.469 I llm_load_print_meta: freq_scale_train = 1
0.00.264.470 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.470 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.471 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.471 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.471 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.472 I llm_load_print_meta: model type       = 2B
0.00.264.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.473 I llm_load_print_meta: model params     = 2.51 B
0.00.264.474 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.474 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.475 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.475 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.476 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.476 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.476 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.477 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.477 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.477 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.478 I llm_load_print_meta: max token length = 93
0.00.335.530 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.335.537 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.340.725 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.732 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.733 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.733 I llama_new_context_with_model: n_batch       = 2048
0.00.340.733 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.734 I llama_new_context_with_model: flash_attn    = 0
0.00.340.737 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.738 I llama_new_context_with_model: freq_scale    = 1
0.00.340.739 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.783 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.797 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.893 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.210 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.216 I llama_new_context_with_model: graph nodes  = 601
0.00.357.217 I llama_new_context_with_model: graph splits = 1
0.00.357.219 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.350 I main: llama threadpool init, n_threads = 4
0.00.445.367 I 
0.00.445.439 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.442 I 
0.00.445.491 I sampler seed: 1617262125
0.00.445.502 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.506 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.507 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.507 I 
 increasively.

I am not sure what to make of this situation. It seems like a lot of information is being thrown at once and I am having difficulty

0.02.866.188 I llama_perf_sampler_print:    sampling time =       6.10 ms /    33 runs   (    0.18 ms per token,  5409.84 tokens per second)
0.02.866.190 I llama_perf_context_print:        load time =     444.97 ms
0.02.866.191 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.866.193 I llama_perf_context_print:        eval time =    2399.72 ms /    32 runs   (   74.99 ms per token,    13.33 tokens per second)
0.02.866.193 I llama_perf_context_print:       total time =    2420.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.489s
user	0m31.001s
sys	0m9.315s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4212 (fb6e8b12)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40209.15 ms
main:    total time = 40209.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4212 (fb6e8b12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.726 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.021.818 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.828 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.836 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.844 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.845 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.848 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.849 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.851 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.855 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.855 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.856 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.857 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.857 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.510 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.513 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.317 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.323 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.323 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.324 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.325 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.325 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.326 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.329 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.330 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.331 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.332 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.333 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.336 I llama_model_loader: - type  f32:   37 tensors
0.00.132.337 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.338 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.362 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.114 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.565 I llm_load_vocab: special tokens cache size = 5
0.00.260.474 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.489 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.490 I llm_load_print_meta: arch             = gemma
0.00.260.490 I llm_load_print_meta: vocab type       = SPM
0.00.260.491 I llm_load_print_meta: n_vocab          = 256000
0.00.260.491 I llm_load_print_meta: n_merges         = 0
0.00.260.492 I llm_load_print_meta: vocab_only       = 0
0.00.260.492 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.492 I llm_load_print_meta: n_embd           = 2048
0.00.260.492 I llm_load_print_meta: n_layer          = 18
0.00.260.504 I llm_load_print_meta: n_head           = 8
0.00.260.505 I llm_load_print_meta: n_head_kv        = 1
0.00.260.505 I llm_load_print_meta: n_rot            = 256
0.00.260.506 I llm_load_print_meta: n_swa            = 0
0.00.260.506 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.506 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.507 I llm_load_print_meta: n_gqa            = 8
0.00.260.508 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.509 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.510 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.512 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.512 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.512 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.513 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.513 I llm_load_print_meta: n_ff             = 16384
0.00.260.514 I llm_load_print_meta: n_expert         = 0
0.00.260.514 I llm_load_print_meta: n_expert_used    = 0
0.00.260.515 I llm_load_print_meta: causal attn      = 1
0.00.260.515 I llm_load_print_meta: pooling type     = 0
0.00.260.515 I llm_load_print_meta: rope type        = 2
0.00.260.516 I llm_load_print_meta: rope scaling     = linear
0.00.260.517 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.517 I llm_load_print_meta: freq_scale_train = 1
0.00.260.518 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.518 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.518 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.518 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.519 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.519 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.519 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.520 I llm_load_print_meta: model type       = 2B
0.00.260.520 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.521 I llm_load_print_meta: model params     = 2.51 B
0.00.260.522 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.522 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.523 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.523 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.523 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.524 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.524 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.524 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.525 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.525 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.525 I llm_load_print_meta: max token length = 93
0.00.320.359 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.320.365 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.320.366 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.320.366 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.320.367 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.320.368 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.325.679 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.686 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.686 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.686 I llama_new_context_with_model: n_batch       = 2048
0.00.325.687 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.687 I llama_new_context_with_model: flash_attn    = 0
0.00.325.690 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.691 I llama_new_context_with_model: freq_scale    = 1
0.00.325.692 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.896 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.911 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.007 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.345 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.352 I llama_new_context_with_model: graph nodes  = 601
0.00.342.353 I llama_new_context_with_model: graph splits = 1
0.00.342.355 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.190 I main: llama threadpool init, n_threads = 4
0.00.419.206 I 
0.00.419.278 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.281 I 
0.00.419.323 I sampler seed: 3174097331
0.00.419.334 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.339 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.340 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.340 I 
 maneuvative.

I am unable to provide a response as the question contains offensive and derogatory language that is unacceptable. [end of text]


0.01.641.076 I llama_perf_sampler_print:    sampling time =       4.08 ms /    26 runs   (    0.16 ms per token,  6366.31 tokens per second)
0.01.641.079 I llama_perf_context_print:        load time =     418.44 ms
0.01.641.080 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.641.082 I llama_perf_context_print:        eval time =    1207.26 ms /    25 runs   (   48.29 ms per token,    20.71 tokens per second)
0.01.641.083 I llama_perf_context_print:       total time =    1221.89 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4212 (fb6e8b12)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40184.50 ms
main:    total time = 40184.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.563 I build: 4212 (fb6e8b12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.368 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.383 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.390 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.391 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.395 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.396 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.397 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.397 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.397 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.402 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.402 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.403 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.486 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.496 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.448 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.454 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.455 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.455 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.456 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.457 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.458 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.460 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.460 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.463 I llama_model_loader: - type  f32:   37 tensors
0.00.132.464 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.465 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.300 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.482 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.049 I llm_load_vocab: special tokens cache size = 5
0.00.264.091 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.108 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.108 I llm_load_print_meta: arch             = gemma
0.00.264.109 I llm_load_print_meta: vocab type       = SPM
0.00.264.109 I llm_load_print_meta: n_vocab          = 256000
0.00.264.110 I llm_load_print_meta: n_merges         = 0
0.00.264.111 I llm_load_print_meta: vocab_only       = 0
0.00.264.111 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.113 I llm_load_print_meta: n_embd           = 2048
0.00.264.113 I llm_load_print_meta: n_layer          = 18
0.00.264.125 I llm_load_print_meta: n_head           = 8
0.00.264.126 I llm_load_print_meta: n_head_kv        = 1
0.00.264.127 I llm_load_print_meta: n_rot            = 256
0.00.264.127 I llm_load_print_meta: n_swa            = 0
0.00.264.127 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.127 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.128 I llm_load_print_meta: n_gqa            = 8
0.00.264.129 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.130 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.131 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.133 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.134 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.134 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.135 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.136 I llm_load_print_meta: n_ff             = 16384
0.00.264.136 I llm_load_print_meta: n_expert         = 0
0.00.264.136 I llm_load_print_meta: n_expert_used    = 0
0.00.264.136 I llm_load_print_meta: causal attn      = 1
0.00.264.137 I llm_load_print_meta: pooling type     = 0
0.00.264.137 I llm_load_print_meta: rope type        = 2
0.00.264.138 I llm_load_print_meta: rope scaling     = linear
0.00.264.140 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.140 I llm_load_print_meta: freq_scale_train = 1
0.00.264.141 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.141 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.142 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.142 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.142 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.142 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.143 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.143 I llm_load_print_meta: model type       = 2B
0.00.264.144 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.264.145 I llm_load_print_meta: model params     = 2.51 B
0.00.264.146 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.264.146 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.147 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.147 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.147 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.148 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.149 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.149 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.149 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.150 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.150 I llm_load_print_meta: max token length = 93
0.00.319.950 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.325.197 I llama_new_context_with_model: n_seq_max     = 1
0.00.325.203 I llama_new_context_with_model: n_ctx         = 4096
0.00.325.203 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.325.203 I llama_new_context_with_model: n_batch       = 2048
0.00.325.204 I llama_new_context_with_model: n_ubatch      = 512
0.00.325.204 I llama_new_context_with_model: flash_attn    = 0
0.00.325.207 I llama_new_context_with_model: freq_base     = 10000.0
0.00.325.208 I llama_new_context_with_model: freq_scale    = 1
0.00.325.209 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.635 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.650 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.741 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.967 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.974 I llama_new_context_with_model: graph nodes  = 601
0.00.340.974 I llama_new_context_with_model: graph splits = 1
0.00.340.976 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.283 I main: llama threadpool init, n_threads = 4
0.00.414.299 I 
0.00.414.374 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.414.377 I 
0.00.414.427 I sampler seed: 1036997162
0.00.414.438 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.451 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.455 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.455 I 
 seconally to a strong current. The current drags the boat and the person swimming against it is experiencing a lot of drag.

The question is: what is

0.01.978.657 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6581.57 tokens per second)
0.01.978.659 I llama_perf_context_print:        load time =     413.50 ms
0.01.978.662 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.978.664 I llama_perf_context_print:        eval time =    1544.74 ms /    32 runs   (   48.27 ms per token,    20.72 tokens per second)
0.01.978.665 I llama_perf_context_print:       total time =    1564.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.796s
user	10m22.516s
sys	0m6.902s
