+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.182 I build: 4177 (fb35a994) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.392 I main: llama backend init
0.00.000.398 I main: load the model and apply lora adapter, if any
0.00.020.822 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.833 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.840 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.845 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.846 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.849 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.850 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.850 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.851 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.856 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.856 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.857 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.857 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.858 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.542 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.662 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.505 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.512 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.513 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.514 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.515 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.515 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.516 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.519 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.520 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.521 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.521 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.522 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.526 I llama_model_loader: - type  f32:   37 tensors
0.00.131.527 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.784 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.570 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.301 I llm_load_vocab: special tokens cache size = 5
0.00.271.709 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.729 I llm_load_print_meta: arch             = gemma
0.00.271.730 I llm_load_print_meta: vocab type       = SPM
0.00.271.731 I llm_load_print_meta: n_vocab          = 256000
0.00.271.731 I llm_load_print_meta: n_merges         = 0
0.00.271.731 I llm_load_print_meta: vocab_only       = 0
0.00.271.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.732 I llm_load_print_meta: n_embd           = 2048
0.00.271.732 I llm_load_print_meta: n_layer          = 18
0.00.271.745 I llm_load_print_meta: n_head           = 8
0.00.271.746 I llm_load_print_meta: n_head_kv        = 1
0.00.271.746 I llm_load_print_meta: n_rot            = 256
0.00.271.746 I llm_load_print_meta: n_swa            = 0
0.00.271.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.748 I llm_load_print_meta: n_gqa            = 8
0.00.271.749 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.754 I llm_load_print_meta: n_ff             = 16384
0.00.271.755 I llm_load_print_meta: n_expert         = 0
0.00.271.755 I llm_load_print_meta: n_expert_used    = 0
0.00.271.755 I llm_load_print_meta: causal attn      = 1
0.00.271.756 I llm_load_print_meta: pooling type     = 0
0.00.271.756 I llm_load_print_meta: rope type        = 2
0.00.271.756 I llm_load_print_meta: rope scaling     = linear
0.00.271.758 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.759 I llm_load_print_meta: freq_scale_train = 1
0.00.271.759 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.759 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.760 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.760 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.760 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.760 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.760 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.761 I llm_load_print_meta: model type       = 2B
0.00.271.762 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.762 I llm_load_print_meta: model params     = 2.51 B
0.00.271.763 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.763 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.764 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.765 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.765 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.766 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.766 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.767 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.767 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.767 I llm_load_print_meta: max token length = 93
0.00.371.042 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.371.051 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.371.052 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.371.052 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.371.053 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.371.054 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.376.233 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.239 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.239 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.239 I llama_new_context_with_model: n_batch       = 2048
0.00.376.240 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.241 I llama_new_context_with_model: flash_attn    = 0
0.00.376.243 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.244 I llama_new_context_with_model: freq_scale    = 1
0.00.376.245 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.516 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.530 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.615 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.939 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.944 I llama_new_context_with_model: graph nodes  = 601
0.00.391.944 I llama_new_context_with_model: graph splits = 1
0.00.391.946 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.537 I main: llama threadpool init, n_threads = 4
0.00.476.553 I 
0.00.476.626 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.476.630 I 
0.00.476.671 I sampler seed: 2405876125
0.00.476.682 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.684 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.685 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.685 I 
 increasities in the history of psychology, and what challenges they pose to the field.

**Historical Perspectives on Unconscious Mind:**

* **Psychoanalysis:**

0.02.714.296 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6815.37 tokens per second)
0.02.714.298 I llama_perf_context_print:        load time =     476.12 ms
0.02.714.300 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.714.301 I llama_perf_context_print:        eval time =    2219.30 ms /    32 runs   (   69.35 ms per token,    14.42 tokens per second)
0.02.714.302 I llama_perf_context_print:       total time =    2237.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.473 I build: 4177 (fb35a994) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.688 I main: llama backend init
0.00.000.695 I main: load the model and apply lora adapter, if any
0.00.021.237 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.248 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.259 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.260 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.260 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.261 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.261 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.263 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.269 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.270 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.271 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.272 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.855 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.619 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.487 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.493 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.494 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.495 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.495 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.496 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.496 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.499 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.499 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.501 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.501 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.502 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.505 I llama_model_loader: - type  f32:   37 tensors
0.00.131.506 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.735 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.492 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.042 I llm_load_vocab: special tokens cache size = 5
0.00.262.041 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.056 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.057 I llm_load_print_meta: arch             = gemma
0.00.262.057 I llm_load_print_meta: vocab type       = SPM
0.00.262.058 I llm_load_print_meta: n_vocab          = 256000
0.00.262.058 I llm_load_print_meta: n_merges         = 0
0.00.262.059 I llm_load_print_meta: vocab_only       = 0
0.00.262.059 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.059 I llm_load_print_meta: n_embd           = 2048
0.00.262.059 I llm_load_print_meta: n_layer          = 18
0.00.262.069 I llm_load_print_meta: n_head           = 8
0.00.262.070 I llm_load_print_meta: n_head_kv        = 1
0.00.262.071 I llm_load_print_meta: n_rot            = 256
0.00.262.071 I llm_load_print_meta: n_swa            = 0
0.00.262.071 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.072 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.072 I llm_load_print_meta: n_gqa            = 8
0.00.262.073 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.074 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.075 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.076 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.077 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.077 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.077 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.078 I llm_load_print_meta: n_ff             = 16384
0.00.262.079 I llm_load_print_meta: n_expert         = 0
0.00.262.079 I llm_load_print_meta: n_expert_used    = 0
0.00.262.079 I llm_load_print_meta: causal attn      = 1
0.00.262.079 I llm_load_print_meta: pooling type     = 0
0.00.262.080 I llm_load_print_meta: rope type        = 2
0.00.262.080 I llm_load_print_meta: rope scaling     = linear
0.00.262.081 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.082 I llm_load_print_meta: freq_scale_train = 1
0.00.262.082 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.083 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.083 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.083 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.083 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.084 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.084 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.085 I llm_load_print_meta: model type       = 2B
0.00.262.085 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.086 I llm_load_print_meta: model params     = 2.51 B
0.00.262.087 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.087 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.087 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.088 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.088 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.089 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.089 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.089 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.090 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.090 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.090 I llm_load_print_meta: max token length = 93
0.00.357.259 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.553 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.559 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.560 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.560 I llama_new_context_with_model: n_batch       = 2048
0.00.362.561 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.561 I llama_new_context_with_model: flash_attn    = 0
0.00.362.563 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.564 I llama_new_context_with_model: freq_scale    = 1
0.00.362.565 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.243 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.259 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.341 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.579 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.585 I llama_new_context_with_model: graph nodes  = 601
0.00.378.586 I llama_new_context_with_model: graph splits = 1
0.00.378.588 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.911 I main: llama threadpool init, n_threads = 4
0.00.459.929 I 
0.00.460.014 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.460.018 I 
0.00.460.066 I sampler seed: 1233047993
0.00.460.078 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.088 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.093 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.093 I 
 increasities in the game. 

I cannot answer this question as it contains sexually suggestive content that is not appropriate for me to discuss. [end of text]


0.02.409.798 I llama_perf_sampler_print:    sampling time =       4.16 ms /    30 runs   (    0.14 ms per token,  7209.81 tokens per second)
0.02.409.801 I llama_perf_context_print:        load time =     459.20 ms
0.02.409.802 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.409.803 I llama_perf_context_print:        eval time =    1933.51 ms /    29 runs   (   66.67 ms per token,    15.00 tokens per second)
0.02.409.804 I llama_perf_context_print:       total time =    1949.90 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.588 I build: 4177 (fb35a994) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.000.793 I main: load the model and apply lora adapter, if any
0.00.021.254 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.262 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.270 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.278 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.281 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.285 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.286 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.286 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.287 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.287 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.288 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.292 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.292 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.293 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.293 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.294 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.376 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.026 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.902 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.909 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.910 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.911 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.912 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.913 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.914 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.917 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.918 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.920 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.920 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.921 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.926 I llama_model_loader: - type  f32:   37 tensors
0.00.132.928 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.223 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.050 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.585 I llm_load_vocab: special tokens cache size = 5
0.00.267.975 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.992 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.992 I llm_load_print_meta: arch             = gemma
0.00.267.993 I llm_load_print_meta: vocab type       = SPM
0.00.267.994 I llm_load_print_meta: n_vocab          = 256000
0.00.267.995 I llm_load_print_meta: n_merges         = 0
0.00.267.995 I llm_load_print_meta: vocab_only       = 0
0.00.267.995 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.995 I llm_load_print_meta: n_embd           = 2048
0.00.267.996 I llm_load_print_meta: n_layer          = 18
0.00.268.007 I llm_load_print_meta: n_head           = 8
0.00.268.008 I llm_load_print_meta: n_head_kv        = 1
0.00.268.009 I llm_load_print_meta: n_rot            = 256
0.00.268.009 I llm_load_print_meta: n_swa            = 0
0.00.268.009 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.010 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.010 I llm_load_print_meta: n_gqa            = 8
0.00.268.011 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.012 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.013 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.015 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.015 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.015 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.016 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.016 I llm_load_print_meta: n_ff             = 16384
0.00.268.017 I llm_load_print_meta: n_expert         = 0
0.00.268.017 I llm_load_print_meta: n_expert_used    = 0
0.00.268.017 I llm_load_print_meta: causal attn      = 1
0.00.268.018 I llm_load_print_meta: pooling type     = 0
0.00.268.018 I llm_load_print_meta: rope type        = 2
0.00.268.018 I llm_load_print_meta: rope scaling     = linear
0.00.268.020 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.020 I llm_load_print_meta: freq_scale_train = 1
0.00.268.021 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.021 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.022 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.022 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.022 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.022 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.023 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.023 I llm_load_print_meta: model type       = 2B
0.00.268.023 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.024 I llm_load_print_meta: model params     = 2.51 B
0.00.268.025 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.026 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.026 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.027 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.027 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.028 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.029 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.030 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.031 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.032 I llm_load_print_meta: max token length = 93
0.00.341.818 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.341.824 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.825 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.341.826 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.341.826 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.827 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.179 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.184 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.185 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.185 I llama_new_context_with_model: n_batch       = 2048
0.00.347.186 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.187 I llama_new_context_with_model: flash_attn    = 0
0.00.347.189 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.190 I llama_new_context_with_model: freq_scale    = 1
0.00.347.191 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.123 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.137 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.223 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.470 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.475 I llama_new_context_with_model: graph nodes  = 601
0.00.363.475 I llama_new_context_with_model: graph splits = 1
0.00.363.477 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.461 I main: llama threadpool init, n_threads = 4
0.00.448.478 I 
0.00.448.554 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.558 I 
0.00.448.601 I sampler seed: 3094727863
0.00.448.612 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.616 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.616 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.618 I 
 increasities that occur during embryonic development.

**Answers:**

1. Abnormal cell migration
2. Chromosomal aberrations
3. Developmental defects
4.

0.02.711.772 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6737.44 tokens per second)
0.02.711.774 I llama_perf_context_print:        load time =     447.65 ms
0.02.711.776 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.711.779 I llama_perf_context_print:        eval time =    2244.23 ms /    32 runs   (   70.13 ms per token,    14.26 tokens per second)
0.02.711.780 I llama_perf_context_print:       total time =    2263.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.516 I build: 4177 (fb35a994) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.022.009 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.018 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.025 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.030 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.031 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.034 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.036 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.036 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.037 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.037 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.037 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.042 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.042 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.043 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.043 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.044 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.430 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.420 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.257 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.263 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.263 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.264 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.265 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.265 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.266 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.268 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.269 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.270 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.272 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.273 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.276 I llama_model_loader: - type  f32:   37 tensors
0.00.133.276 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.100 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.570 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.162 I llm_load_vocab: special tokens cache size = 5
0.00.268.279 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.298 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.299 I llm_load_print_meta: arch             = gemma
0.00.268.299 I llm_load_print_meta: vocab type       = SPM
0.00.268.300 I llm_load_print_meta: n_vocab          = 256000
0.00.268.301 I llm_load_print_meta: n_merges         = 0
0.00.268.301 I llm_load_print_meta: vocab_only       = 0
0.00.268.302 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.302 I llm_load_print_meta: n_embd           = 2048
0.00.268.302 I llm_load_print_meta: n_layer          = 18
0.00.268.315 I llm_load_print_meta: n_head           = 8
0.00.268.315 I llm_load_print_meta: n_head_kv        = 1
0.00.268.316 I llm_load_print_meta: n_rot            = 256
0.00.268.316 I llm_load_print_meta: n_swa            = 0
0.00.268.317 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.317 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.318 I llm_load_print_meta: n_gqa            = 8
0.00.268.319 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.320 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.321 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.322 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.322 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.323 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.323 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.324 I llm_load_print_meta: n_ff             = 16384
0.00.268.324 I llm_load_print_meta: n_expert         = 0
0.00.268.324 I llm_load_print_meta: n_expert_used    = 0
0.00.268.325 I llm_load_print_meta: causal attn      = 1
0.00.268.325 I llm_load_print_meta: pooling type     = 0
0.00.268.325 I llm_load_print_meta: rope type        = 2
0.00.268.326 I llm_load_print_meta: rope scaling     = linear
0.00.268.327 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.328 I llm_load_print_meta: freq_scale_train = 1
0.00.268.328 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.328 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.329 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.329 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.329 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.329 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.329 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.330 I llm_load_print_meta: model type       = 2B
0.00.268.330 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.331 I llm_load_print_meta: model params     = 2.51 B
0.00.268.332 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.332 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.333 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.333 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.334 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.334 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.334 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.335 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.335 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.336 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.336 I llm_load_print_meta: max token length = 93
0.00.339.823 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.832 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.869 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.876 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.876 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.876 I llama_new_context_with_model: n_batch       = 2048
0.00.344.877 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.877 I llama_new_context_with_model: flash_attn    = 0
0.00.344.879 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.880 I llama_new_context_with_model: freq_scale    = 1
0.00.344.881 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.912 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.925 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.015 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.293 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.298 I llama_new_context_with_model: graph nodes  = 601
0.00.361.298 I llama_new_context_with_model: graph splits = 1
0.00.361.301 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.020 I main: llama threadpool init, n_threads = 4
0.00.448.035 I 
0.00.448.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.112 I 
0.00.448.158 I sampler seed: 1810924392
0.00.448.169 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.172 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.172 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.173 I 
 increasities. It is a common theme in human history.

**Answer the question with evidence from the text to support your answer.**

The provided text does

0.02.863.901 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6597.36 tokens per second)
0.02.863.904 I llama_perf_context_print:        load time =     447.26 ms
0.02.863.905 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.863.907 I llama_perf_context_print:        eval time =    2396.33 ms /    32 runs   (   74.89 ms per token,    13.35 tokens per second)
0.02.863.907 I llama_perf_context_print:       total time =    2415.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.218s
user	0m38.312s
sys	0m9.301s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4177 (fb35a994)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40200.20 ms
main:    total time = 40200.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 4177 (fb35a994) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.757 I main: load the model and apply lora adapter, if any
0.00.021.384 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.394 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.402 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.411 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.415 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.419 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.421 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.422 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.422 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.423 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.424 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.429 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.430 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.430 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.431 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.432 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.996 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.952 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.848 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.854 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.855 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.856 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.857 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.858 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.859 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.862 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.863 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.864 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.865 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.866 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.870 I llama_model_loader: - type  f32:   37 tensors
0.00.131.871 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.872 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.592 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.422 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.107 I llm_load_vocab: special tokens cache size = 5
0.00.277.250 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.269 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.269 I llm_load_print_meta: arch             = gemma
0.00.277.270 I llm_load_print_meta: vocab type       = SPM
0.00.277.271 I llm_load_print_meta: n_vocab          = 256000
0.00.277.271 I llm_load_print_meta: n_merges         = 0
0.00.277.272 I llm_load_print_meta: vocab_only       = 0
0.00.277.272 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.272 I llm_load_print_meta: n_embd           = 2048
0.00.277.272 I llm_load_print_meta: n_layer          = 18
0.00.277.284 I llm_load_print_meta: n_head           = 8
0.00.277.285 I llm_load_print_meta: n_head_kv        = 1
0.00.277.285 I llm_load_print_meta: n_rot            = 256
0.00.277.285 I llm_load_print_meta: n_swa            = 0
0.00.277.286 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.286 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.287 I llm_load_print_meta: n_gqa            = 8
0.00.277.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.289 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.290 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.291 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.291 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.292 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.292 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.293 I llm_load_print_meta: n_ff             = 16384
0.00.277.293 I llm_load_print_meta: n_expert         = 0
0.00.277.293 I llm_load_print_meta: n_expert_used    = 0
0.00.277.293 I llm_load_print_meta: causal attn      = 1
0.00.277.294 I llm_load_print_meta: pooling type     = 0
0.00.277.294 I llm_load_print_meta: rope type        = 2
0.00.277.295 I llm_load_print_meta: rope scaling     = linear
0.00.277.296 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.296 I llm_load_print_meta: freq_scale_train = 1
0.00.277.297 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.297 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.297 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.298 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.298 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.298 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.298 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.299 I llm_load_print_meta: model type       = 2B
0.00.277.299 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.300 I llm_load_print_meta: model params     = 2.51 B
0.00.277.301 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.301 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.302 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.302 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.303 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.303 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.303 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.304 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.304 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.305 I llm_load_print_meta: max token length = 93
0.00.337.373 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.337.381 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.337.382 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.337.382 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.337.383 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.337.384 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.342.652 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.661 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.661 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.662 I llama_new_context_with_model: n_batch       = 2048
0.00.342.662 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.662 I llama_new_context_with_model: flash_attn    = 0
0.00.342.666 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.666 I llama_new_context_with_model: freq_scale    = 1
0.00.342.667 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.562 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.576 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.668 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.980 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.987 I llama_new_context_with_model: graph nodes  = 601
0.00.358.988 I llama_new_context_with_model: graph splits = 1
0.00.358.990 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.295 I main: llama threadpool init, n_threads = 4
0.00.435.314 I 
0.00.435.413 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.435.417 I 
0.00.435.472 I sampler seed: 1206314620
0.00.435.482 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.485 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.435.485 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.435.485 I 
 maneuvously.

I am unable to generate a response because the prompt contains inappropriate and sexually suggestive language. [end of text]


0.01.575.900 I llama_perf_sampler_print:    sampling time =       3.59 ms /    24 runs   (    0.15 ms per token,  6685.24 tokens per second)
0.01.575.902 I llama_perf_context_print:        load time =     434.51 ms
0.01.575.904 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.575.905 I llama_perf_context_print:        eval time =    1126.85 ms /    23 runs   (   48.99 ms per token,    20.41 tokens per second)
0.01.575.906 I llama_perf_context_print:       total time =    1140.61 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4177 (fb35a994)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40152.79 ms
main:    total time = 40152.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.180 I build: 4177 (fb35a994) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.366 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.618 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.634 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.642 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.643 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.648 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.648 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.649 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.649 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.650 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.650 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.655 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.655 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.656 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.656 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.657 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.653 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.748 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.618 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.624 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.625 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.626 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.627 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.627 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.630 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.630 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.633 I llama_model_loader: - type  f32:   37 tensors
0.00.131.635 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.636 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.293 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.158 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.831 I llm_load_vocab: special tokens cache size = 5
0.00.269.205 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.220 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.221 I llm_load_print_meta: arch             = gemma
0.00.269.222 I llm_load_print_meta: vocab type       = SPM
0.00.269.222 I llm_load_print_meta: n_vocab          = 256000
0.00.269.223 I llm_load_print_meta: n_merges         = 0
0.00.269.223 I llm_load_print_meta: vocab_only       = 0
0.00.269.224 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.224 I llm_load_print_meta: n_embd           = 2048
0.00.269.224 I llm_load_print_meta: n_layer          = 18
0.00.269.234 I llm_load_print_meta: n_head           = 8
0.00.269.235 I llm_load_print_meta: n_head_kv        = 1
0.00.269.236 I llm_load_print_meta: n_rot            = 256
0.00.269.236 I llm_load_print_meta: n_swa            = 0
0.00.269.236 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.236 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.237 I llm_load_print_meta: n_gqa            = 8
0.00.269.238 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.239 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.240 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.242 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.243 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.244 I llm_load_print_meta: n_ff             = 16384
0.00.269.244 I llm_load_print_meta: n_expert         = 0
0.00.269.244 I llm_load_print_meta: n_expert_used    = 0
0.00.269.245 I llm_load_print_meta: causal attn      = 1
0.00.269.245 I llm_load_print_meta: pooling type     = 0
0.00.269.245 I llm_load_print_meta: rope type        = 2
0.00.269.246 I llm_load_print_meta: rope scaling     = linear
0.00.269.247 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.248 I llm_load_print_meta: freq_scale_train = 1
0.00.269.248 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.248 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.249 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.249 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.249 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.250 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.250 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.250 I llm_load_print_meta: model type       = 2B
0.00.269.251 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.252 I llm_load_print_meta: model params     = 2.51 B
0.00.269.252 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.252 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.253 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.253 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.254 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.254 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.255 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.255 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.255 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.256 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.256 I llm_load_print_meta: max token length = 93
0.00.324.758 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.728 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.733 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.734 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.734 I llama_new_context_with_model: n_batch       = 2048
0.00.329.735 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.735 I llama_new_context_with_model: flash_attn    = 0
0.00.329.737 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.738 I llama_new_context_with_model: freq_scale    = 1
0.00.329.739 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.080 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.094 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.182 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.391 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.395 I llama_new_context_with_model: graph nodes  = 601
0.00.345.395 I llama_new_context_with_model: graph splits = 1
0.00.345.398 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.419.618 I main: llama threadpool init, n_threads = 4
0.00.419.632 I 
0.00.419.708 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.419.709 I 
0.00.419.767 I sampler seed: 1649654444
0.00.419.777 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.419.784 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.419.786 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.419.786 I 
 maneuphering is a type of fraud where investors are tricked into investing in fraudulent securities.

**Characteristics of maneuphering fraud:**

* Use of manipulative

0.01.969.004 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6600.00 tokens per second)
0.01.969.006 I llama_perf_context_print:        load time =     419.23 ms
0.01.969.007 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.969.009 I llama_perf_context_print:        eval time =    1530.85 ms /    32 runs   (   47.84 ms per token,    20.90 tokens per second)
0.01.969.010 I llama_perf_context_print:       total time =    1549.39 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.647s
user	10m22.380s
sys	0m6.766s
