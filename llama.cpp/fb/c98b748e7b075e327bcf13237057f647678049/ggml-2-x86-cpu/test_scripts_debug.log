+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 3920 (fbc98b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
0.00.024.953 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.162 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.249 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.261 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.263 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.267 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.276 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.280 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.282 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.283 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.284 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.291 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.293 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.294 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.296 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.304 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.718 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.629 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.845 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.853 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.854 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.855 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.856 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.857 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.859 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.862 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.863 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.864 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.865 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.867 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.875 I llama_model_loader: - type  f32:   37 tensors
0.00.267.879 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.260 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.342 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.490.144 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.495.689 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.507.339 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.294 I llm_load_vocab: special tokens cache size = 5
0.00.604.975 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.047 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.051 I llm_load_print_meta: arch             = gemma
0.00.605.052 I llm_load_print_meta: vocab type       = SPM
0.00.605.053 I llm_load_print_meta: n_vocab          = 256000
0.00.605.055 I llm_load_print_meta: n_merges         = 0
0.00.605.056 I llm_load_print_meta: vocab_only       = 0
0.00.605.056 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.056 I llm_load_print_meta: n_embd           = 2048
0.00.605.057 I llm_load_print_meta: n_layer          = 18
0.00.605.120 I llm_load_print_meta: n_head           = 8
0.00.605.130 I llm_load_print_meta: n_head_kv        = 1
0.00.605.130 I llm_load_print_meta: n_rot            = 256
0.00.605.130 I llm_load_print_meta: n_swa            = 0
0.00.605.132 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.132 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.137 I llm_load_print_meta: n_gqa            = 8
0.00.605.142 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.147 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.150 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.152 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.152 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.152 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.153 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.158 I llm_load_print_meta: n_ff             = 16384
0.00.605.158 I llm_load_print_meta: n_expert         = 0
0.00.605.159 I llm_load_print_meta: n_expert_used    = 0
0.00.605.159 I llm_load_print_meta: causal attn      = 1
0.00.605.159 I llm_load_print_meta: pooling type     = 0
0.00.605.160 I llm_load_print_meta: rope type        = 2
0.00.605.161 I llm_load_print_meta: rope scaling     = linear
0.00.605.162 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.163 I llm_load_print_meta: freq_scale_train = 1
0.00.605.164 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.164 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.165 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.165 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.165 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.166 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.168 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.169 I llm_load_print_meta: model type       = 2B
0.00.605.170 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.171 I llm_load_print_meta: model params     = 2.51 B
0.00.605.171 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.172 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.172 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.173 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.173 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.174 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.174 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.174 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.180 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.181 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.182 I llm_load_print_meta: max token length = 93
0.00.605.348 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.708.978 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.708.987 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.708.988 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.708.988 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.708.989 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.708.989 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.715.615 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.622 I llama_new_context_with_model: n_batch    = 2048
0.00.715.623 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.623 I llama_new_context_with_model: flash_attn = 0
0.00.715.626 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.626 I llama_new_context_with_model: freq_scale = 1
0.00.744.417 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.744.459 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.744.572 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.931 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.745.936 I llama_new_context_with_model: graph nodes  = 601
0.00.745.937 I llama_new_context_with_model: graph splits = 1
0.00.745.952 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.093 I main: llama threadpool init, n_threads = 4
0.01.357.105 I 
0.01.357.208 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.212 I 
0.01.357.390 I sampler seed: 3415957167
0.01.357.403 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.410 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.357.413 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.414 I 
 increably.

I am unable to access the requested data. Please check your internet connection and try again later.

I apologize for any inconvenience this may cause

0.14.779.716 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.44 tokens per second)
0.14.779.730 I llama_perf_context_print:        load time =    1354.19 ms
0.14.779.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.779.734 I llama_perf_context_print:        eval time =   13340.29 ms /    32 runs   (  416.88 ms per token,     2.40 tokens per second)
0.14.779.735 I llama_perf_context_print:       total time =   13422.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3920 (fbc98b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.025.623 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.718 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.732 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.733 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.737 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.741 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.742 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.745 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.754 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.755 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.756 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.757 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.758 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.325 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.109 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.453 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.462 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.463 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.464 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.466 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.467 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.470 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.474 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.475 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.476 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.477 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.479 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.496 I llama_model_loader: - type  f32:   37 tensors
0.00.268.501 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.200 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.387 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.486.575 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.493.216 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.507.414 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.458 I llm_load_vocab: special tokens cache size = 5
0.00.614.518 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.583 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.584 I llm_load_print_meta: arch             = gemma
0.00.614.585 I llm_load_print_meta: vocab type       = SPM
0.00.614.586 I llm_load_print_meta: n_vocab          = 256000
0.00.614.588 I llm_load_print_meta: n_merges         = 0
0.00.614.588 I llm_load_print_meta: vocab_only       = 0
0.00.614.589 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.589 I llm_load_print_meta: n_embd           = 2048
0.00.614.589 I llm_load_print_meta: n_layer          = 18
0.00.614.655 I llm_load_print_meta: n_head           = 8
0.00.614.661 I llm_load_print_meta: n_head_kv        = 1
0.00.614.663 I llm_load_print_meta: n_rot            = 256
0.00.614.664 I llm_load_print_meta: n_swa            = 0
0.00.614.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.664 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.669 I llm_load_print_meta: n_gqa            = 8
0.00.614.674 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.682 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.684 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.686 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.687 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.687 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.687 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.692 I llm_load_print_meta: n_ff             = 16384
0.00.614.693 I llm_load_print_meta: n_expert         = 0
0.00.614.694 I llm_load_print_meta: n_expert_used    = 0
0.00.614.695 I llm_load_print_meta: causal attn      = 1
0.00.614.698 I llm_load_print_meta: pooling type     = 0
0.00.614.698 I llm_load_print_meta: rope type        = 2
0.00.614.699 I llm_load_print_meta: rope scaling     = linear
0.00.614.700 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.700 I llm_load_print_meta: freq_scale_train = 1
0.00.614.701 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.701 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.701 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.702 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.702 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.702 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.702 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.703 I llm_load_print_meta: model type       = 2B
0.00.614.704 I llm_load_print_meta: model ftype      = Q8_0
0.00.614.705 I llm_load_print_meta: model params     = 2.51 B
0.00.614.715 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.614.716 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.717 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.717 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.718 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.719 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.719 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.720 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.725 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.727 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.727 I llm_load_print_meta: max token length = 93
0.00.614.893 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.711.686 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.717.282 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.289 I llama_new_context_with_model: n_batch    = 2048
0.00.717.290 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.290 I llama_new_context_with_model: flash_attn = 0
0.00.717.293 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.294 I llama_new_context_with_model: freq_scale = 1
0.00.746.433 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.478 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.746.595 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.962 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.747.968 I llama_new_context_with_model: graph nodes  = 601
0.00.747.968 I llama_new_context_with_model: graph splits = 1
0.00.747.984 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.360.921 I main: llama threadpool init, n_threads = 4
0.01.360.931 I 
0.01.361.036 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.040 I 
0.01.361.215 I sampler seed: 479175279
0.01.361.227 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.235 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.361.235 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.235 I 
 increasities are a common feature of which biome?

a) Tundra
b) Desert
c) Forest
d) Grassland

The answer is c

0.14.951.095 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.36 tokens per second)
0.14.951.121 I llama_perf_context_print:        load time =    1358.07 ms
0.14.951.123 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.951.125 I llama_perf_context_print:        eval time =   13507.88 ms /    32 runs   (  422.12 ms per token,     2.37 tokens per second)
0.14.951.127 I llama_perf_context_print:       total time =   13590.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3920 (fbc98b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
0.00.024.663 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.869 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.961 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.972 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.975 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.980 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.985 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.986 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.988 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.001 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.006 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.007 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.009 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.019 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.537 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.420 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.797 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.805 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.807 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.808 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.809 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.810 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.811 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.815 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.816 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.817 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.818 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.819 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.826 I llama_model_loader: - type  f32:   37 tensors
0.00.268.831 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.189 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.342 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.489.130 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.494.611 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.506.357 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.337 I llm_load_vocab: special tokens cache size = 5
0.00.609.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.658 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.662 I llm_load_print_meta: arch             = gemma
0.00.609.663 I llm_load_print_meta: vocab type       = SPM
0.00.609.664 I llm_load_print_meta: n_vocab          = 256000
0.00.609.666 I llm_load_print_meta: n_merges         = 0
0.00.609.666 I llm_load_print_meta: vocab_only       = 0
0.00.609.667 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.667 I llm_load_print_meta: n_embd           = 2048
0.00.609.668 I llm_load_print_meta: n_layer          = 18
0.00.609.731 I llm_load_print_meta: n_head           = 8
0.00.609.741 I llm_load_print_meta: n_head_kv        = 1
0.00.609.741 I llm_load_print_meta: n_rot            = 256
0.00.609.742 I llm_load_print_meta: n_swa            = 0
0.00.609.743 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.743 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.748 I llm_load_print_meta: n_gqa            = 8
0.00.609.752 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.757 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.759 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.761 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.761 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.762 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.762 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.767 I llm_load_print_meta: n_ff             = 16384
0.00.609.767 I llm_load_print_meta: n_expert         = 0
0.00.609.776 I llm_load_print_meta: n_expert_used    = 0
0.00.609.777 I llm_load_print_meta: causal attn      = 1
0.00.609.789 I llm_load_print_meta: pooling type     = 0
0.00.609.793 I llm_load_print_meta: rope type        = 2
0.00.609.793 I llm_load_print_meta: rope scaling     = linear
0.00.609.794 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.795 I llm_load_print_meta: freq_scale_train = 1
0.00.609.795 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.796 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.796 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.796 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.797 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.797 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.798 I llm_load_print_meta: model type       = 2B
0.00.609.799 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.800 I llm_load_print_meta: model params     = 2.51 B
0.00.609.801 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.801 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.803 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.804 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.804 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.814 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.814 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.815 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.821 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.822 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.823 I llm_load_print_meta: max token length = 93
0.00.609.996 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.339 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.687.347 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.687.348 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.687.349 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.687.349 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.687.350 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.693.023 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.031 I llama_new_context_with_model: n_batch    = 2048
0.00.693.031 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.032 I llama_new_context_with_model: flash_attn = 0
0.00.693.035 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.036 I llama_new_context_with_model: freq_scale = 1
0.00.722.521 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.563 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.676 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.101 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.106 I llama_new_context_with_model: graph nodes  = 601
0.00.724.106 I llama_new_context_with_model: graph splits = 1
0.00.724.122 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.860 I main: llama threadpool init, n_threads = 4
0.01.345.870 I 
0.01.345.981 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.985 I 
0.01.346.173 I sampler seed: 1982924119
0.01.346.186 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.346.194 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.346.197 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.346.197 I 
 increasements in the poem.

**Answer:**

I am unable to provide an answer as the provided context does not contain the requested information. [end of text]


0.13.957.466 I llama_perf_sampler_print:    sampling time =      46.05 ms /    31 runs   (    1.49 ms per token,   673.20 tokens per second)
0.13.957.469 I llama_perf_context_print:        load time =    1342.94 ms
0.13.957.470 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.957.484 I llama_perf_context_print:        eval time =   12535.30 ms /    30 runs   (  417.84 ms per token,     2.39 tokens per second)
0.13.957.486 I llama_perf_context_print:       total time =   12611.61 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3920 (fbc98b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.762 I main: load the model and apply lora adapter, if any
0.00.024.546 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.749 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.834 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.843 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.845 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.849 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.850 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.851 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.852 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.853 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.854 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.860 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.861 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.863 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.864 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.865 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.539 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.118 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.585 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.593 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.594 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.595 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.596 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.597 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.599 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.602 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.603 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.604 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.606 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.266.607 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.615 I llama_model_loader: - type  f32:   37 tensors
0.00.266.619 I llama_model_loader: - type q8_0:  127 tensors
0.00.438.155 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.481.002 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.482.692 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.487.671 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.497.994 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.876 I llm_load_vocab: special tokens cache size = 5
0.00.609.905 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.975 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.979 I llm_load_print_meta: arch             = gemma
0.00.609.980 I llm_load_print_meta: vocab type       = SPM
0.00.609.981 I llm_load_print_meta: n_vocab          = 256000
0.00.609.983 I llm_load_print_meta: n_merges         = 0
0.00.609.984 I llm_load_print_meta: vocab_only       = 0
0.00.609.984 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.984 I llm_load_print_meta: n_embd           = 2048
0.00.609.985 I llm_load_print_meta: n_layer          = 18
0.00.610.048 I llm_load_print_meta: n_head           = 8
0.00.610.058 I llm_load_print_meta: n_head_kv        = 1
0.00.610.059 I llm_load_print_meta: n_rot            = 256
0.00.610.059 I llm_load_print_meta: n_swa            = 0
0.00.610.059 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.059 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.064 I llm_load_print_meta: n_gqa            = 8
0.00.610.069 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.073 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.075 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.076 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.076 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.077 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.077 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.082 I llm_load_print_meta: n_ff             = 16384
0.00.610.083 I llm_load_print_meta: n_expert         = 0
0.00.610.083 I llm_load_print_meta: n_expert_used    = 0
0.00.610.083 I llm_load_print_meta: causal attn      = 1
0.00.610.084 I llm_load_print_meta: pooling type     = 0
0.00.610.085 I llm_load_print_meta: rope type        = 2
0.00.610.085 I llm_load_print_meta: rope scaling     = linear
0.00.610.088 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.089 I llm_load_print_meta: freq_scale_train = 1
0.00.610.089 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.090 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.090 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.091 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.091 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.091 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.091 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.092 I llm_load_print_meta: model type       = 2B
0.00.610.093 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.096 I llm_load_print_meta: model params     = 2.51 B
0.00.610.096 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.097 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.111 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.112 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.113 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.113 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.114 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.114 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.120 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.121 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.122 I llm_load_print_meta: max token length = 93
0.00.610.287 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.474 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.681.486 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.687.365 I llama_new_context_with_model: n_ctx      = 8192
0.00.687.374 I llama_new_context_with_model: n_batch    = 2048
0.00.687.374 I llama_new_context_with_model: n_ubatch   = 512
0.00.687.375 I llama_new_context_with_model: flash_attn = 0
0.00.687.378 I llama_new_context_with_model: freq_base  = 10000.0
0.00.687.379 I llama_new_context_with_model: freq_scale = 1
0.00.717.853 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.897 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.011 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.719.393 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.719.398 I llama_new_context_with_model: graph nodes  = 601
0.00.719.398 I llama_new_context_with_model: graph splits = 1
0.00.719.414 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.572 I main: llama threadpool init, n_threads = 4
0.01.330.581 I 
0.01.330.684 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.687 I 
0.01.330.870 I sampler seed: 3606796731
0.01.330.881 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.888 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.330.889 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.889 I 
 increably.

I understand your frustration. I've been there too.

I want to assure you that we're on the same page. We

0.14.757.152 I llama_perf_sampler_print:    sampling time =      49.46 ms /    33 runs   (    1.50 ms per token,   667.17 tokens per second)
0.14.757.155 I llama_perf_context_print:        load time =    1327.72 ms
0.14.757.157 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.757.160 I llama_perf_context_print:        eval time =   13343.92 ms /    32 runs   (  417.00 ms per token,     2.40 tokens per second)
0.14.757.161 I llama_perf_context_print:       total time =   13426.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.576s
user	3m44.933s
sys	0m9.346s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3920 (fbc98b74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199182.52 ms
main:    total time = 199182.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3920 (fbc98b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.024.849 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.048 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.134 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.145 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.148 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.152 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.153 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.155 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.156 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.158 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.159 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.166 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.167 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.176 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.178 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.252 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.650 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.048 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.057 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.058 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.059 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.060 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.061 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.062 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.067 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.068 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.069 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.070 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.072 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.081 I llama_model_loader: - type  f32:   37 tensors
0.00.268.094 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.107 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.006 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.621 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.496.677 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.502.960 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.515.465 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.387 I llm_load_vocab: special tokens cache size = 5
0.00.611.167 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.240 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.241 I llm_load_print_meta: arch             = gemma
0.00.611.242 I llm_load_print_meta: vocab type       = SPM
0.00.611.243 I llm_load_print_meta: n_vocab          = 256000
0.00.611.245 I llm_load_print_meta: n_merges         = 0
0.00.611.245 I llm_load_print_meta: vocab_only       = 0
0.00.611.246 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.246 I llm_load_print_meta: n_embd           = 2048
0.00.611.247 I llm_load_print_meta: n_layer          = 18
0.00.611.312 I llm_load_print_meta: n_head           = 8
0.00.611.319 I llm_load_print_meta: n_head_kv        = 1
0.00.611.320 I llm_load_print_meta: n_rot            = 256
0.00.611.321 I llm_load_print_meta: n_swa            = 0
0.00.611.321 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.322 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.327 I llm_load_print_meta: n_gqa            = 8
0.00.611.332 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.337 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.339 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.340 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.340 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.341 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.341 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.347 I llm_load_print_meta: n_ff             = 16384
0.00.611.348 I llm_load_print_meta: n_expert         = 0
0.00.611.348 I llm_load_print_meta: n_expert_used    = 0
0.00.611.349 I llm_load_print_meta: causal attn      = 1
0.00.611.349 I llm_load_print_meta: pooling type     = 0
0.00.611.369 I llm_load_print_meta: rope type        = 2
0.00.611.374 I llm_load_print_meta: rope scaling     = linear
0.00.611.376 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.384 I llm_load_print_meta: freq_scale_train = 1
0.00.611.385 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.393 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.393 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.394 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.394 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.394 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.401 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.403 I llm_load_print_meta: model type       = 2B
0.00.611.404 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.405 I llm_load_print_meta: model params     = 2.51 B
0.00.611.406 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.407 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.407 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.408 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.408 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.409 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.410 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.410 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.416 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.418 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.419 I llm_load_print_meta: max token length = 93
0.00.611.587 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.671.057 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.671.066 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.671.066 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.671.067 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.671.068 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.671.068 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.676.743 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.750 I llama_new_context_with_model: n_batch    = 2048
0.00.676.751 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.751 I llama_new_context_with_model: flash_attn = 0
0.00.676.754 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.755 I llama_new_context_with_model: freq_scale = 1
0.00.705.224 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.266 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.374 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.810 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.706.815 I llama_new_context_with_model: graph nodes  = 601
0.00.706.816 I llama_new_context_with_model: graph splits = 1
0.00.706.832 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.393 I main: llama threadpool init, n_threads = 4
0.01.285.406 I 
0.01.285.512 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.516 I 
0.01.285.693 I sampler seed: 2625055570
0.01.285.704 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.721 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.285.725 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.725 I 
 encompates a wide range of topics, from the latest news and entertainment to in-depth analysis of complex issues and cultural trends.

**a) Identify the

0.12.217.585 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.72 tokens per second)
0.12.217.588 I llama_perf_context_print:        load time =    1282.52 ms
0.12.217.590 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.217.591 I llama_perf_context_print:        eval time =   10851.06 ms /    32 runs   (  339.10 ms per token,     2.95 tokens per second)
0.12.217.606 I llama_perf_context_print:       total time =   10932.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3920 (fbc98b74)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199151.90 ms
main:    total time = 199151.90 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 3920 (fbc98b74) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.860 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.025.012 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.106 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.120 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.121 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.125 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.127 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.129 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.130 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.131 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.139 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.146 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.148 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.149 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.150 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.151 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.828 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.076 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.513 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.524 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.525 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.527 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.528 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.529 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.545 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.551 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.552 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.561 I llama_model_loader: - type  f32:   37 tensors
0.00.267.565 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.568 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.146 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.379 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.509.088 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.514.186 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.525.172 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.119 I llm_load_vocab: special tokens cache size = 5
0.00.621.285 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.621.358 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.621.362 I llm_load_print_meta: arch             = gemma
0.00.621.363 I llm_load_print_meta: vocab type       = SPM
0.00.621.364 I llm_load_print_meta: n_vocab          = 256000
0.00.621.366 I llm_load_print_meta: n_merges         = 0
0.00.621.366 I llm_load_print_meta: vocab_only       = 0
0.00.621.367 I llm_load_print_meta: n_ctx_train      = 8192
0.00.621.367 I llm_load_print_meta: n_embd           = 2048
0.00.621.367 I llm_load_print_meta: n_layer          = 18
0.00.621.432 I llm_load_print_meta: n_head           = 8
0.00.621.442 I llm_load_print_meta: n_head_kv        = 1
0.00.621.443 I llm_load_print_meta: n_rot            = 256
0.00.621.443 I llm_load_print_meta: n_swa            = 0
0.00.621.445 I llm_load_print_meta: n_embd_head_k    = 256
0.00.621.446 I llm_load_print_meta: n_embd_head_v    = 256
0.00.621.450 I llm_load_print_meta: n_gqa            = 8
0.00.621.455 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.621.460 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.621.464 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.621.465 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.621.465 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.621.466 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.621.466 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.621.471 I llm_load_print_meta: n_ff             = 16384
0.00.621.471 I llm_load_print_meta: n_expert         = 0
0.00.621.472 I llm_load_print_meta: n_expert_used    = 0
0.00.621.473 I llm_load_print_meta: causal attn      = 1
0.00.621.473 I llm_load_print_meta: pooling type     = 0
0.00.621.474 I llm_load_print_meta: rope type        = 2
0.00.621.474 I llm_load_print_meta: rope scaling     = linear
0.00.621.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.621.476 I llm_load_print_meta: freq_scale_train = 1
0.00.621.479 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.621.479 I llm_load_print_meta: rope_finetuned   = unknown
0.00.621.480 I llm_load_print_meta: ssm_d_conv       = 0
0.00.621.480 I llm_load_print_meta: ssm_d_inner      = 0
0.00.621.481 I llm_load_print_meta: ssm_d_state      = 0
0.00.621.481 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.621.481 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.621.482 I llm_load_print_meta: model type       = 2B
0.00.621.483 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.621.483 I llm_load_print_meta: model params     = 2.51 B
0.00.621.484 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.621.484 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.621.495 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.621.496 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.621.497 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.621.497 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.621.498 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.621.499 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.621.504 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.621.506 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.621.506 I llm_load_print_meta: max token length = 93
0.00.621.680 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.678.386 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.683.997 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.002 I llama_new_context_with_model: n_batch    = 2048
0.00.684.003 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.003 I llama_new_context_with_model: flash_attn = 0
0.00.684.006 I llama_new_context_with_model: freq_base  = 10000.0
0.00.684.007 I llama_new_context_with_model: freq_scale = 1
0.00.714.494 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.714.537 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.714.650 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.038 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.043 I llama_new_context_with_model: graph nodes  = 601
0.00.716.043 I llama_new_context_with_model: graph splits = 1
0.00.716.058 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.295.414 I main: llama threadpool init, n_threads = 4
0.01.295.426 I 
0.01.295.529 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.295.533 I 
0.01.295.708 I sampler seed: 4208410711
0.01.295.720 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.295.727 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> softmax -> dist 
0.01.295.728 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.295.728 I 
 encompassing the spectrum of human experience.

**Answer:**

**A comprehensive understanding of the human experience encompasses an intricate tapestry woven from various threads, each contributing

0.12.236.711 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.58 tokens per second)
0.12.236.714 I llama_perf_context_print:        load time =    1292.54 ms
0.12.236.715 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.236.717 I llama_perf_context_print:        eval time =   10859.66 ms /    32 runs   (  339.36 ms per token,     2.95 tokens per second)
0.12.236.718 I llama_perf_context_print:       total time =   10941.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.645s
user	50m8.006s
sys	0m6.239s
