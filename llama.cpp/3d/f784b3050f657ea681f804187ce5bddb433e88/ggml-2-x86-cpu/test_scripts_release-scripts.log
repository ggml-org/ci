+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.457 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.649 I main: llama backend init
0.00.000.655 I main: load the model and apply lora adapter, if any
0.00.021.463 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.474 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.481 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.486 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.492 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.493 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.493 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.494 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.495 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.500 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.500 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.501 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.502 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.502 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.843 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.210 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.216 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.217 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.218 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.219 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.220 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.222 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.226 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.226 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.227 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.228 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.229 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.234 I llama_model_loader: - type  f32:   37 tensors
0.00.131.235 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.141 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.566 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.205 I llm_load_vocab: special tokens cache size = 5
0.00.265.336 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.356 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.356 I llm_load_print_meta: arch             = gemma
0.00.265.357 I llm_load_print_meta: vocab type       = SPM
0.00.265.358 I llm_load_print_meta: n_vocab          = 256000
0.00.265.358 I llm_load_print_meta: n_merges         = 0
0.00.265.358 I llm_load_print_meta: vocab_only       = 0
0.00.265.358 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.359 I llm_load_print_meta: n_embd           = 2048
0.00.265.359 I llm_load_print_meta: n_layer          = 18
0.00.265.372 I llm_load_print_meta: n_head           = 8
0.00.265.373 I llm_load_print_meta: n_head_kv        = 1
0.00.265.374 I llm_load_print_meta: n_rot            = 256
0.00.265.374 I llm_load_print_meta: n_swa            = 0
0.00.265.374 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.374 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.375 I llm_load_print_meta: n_gqa            = 8
0.00.265.376 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.377 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.378 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.380 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.380 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.380 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.381 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.382 I llm_load_print_meta: n_ff             = 16384
0.00.265.382 I llm_load_print_meta: n_expert         = 0
0.00.265.382 I llm_load_print_meta: n_expert_used    = 0
0.00.265.382 I llm_load_print_meta: causal attn      = 1
0.00.265.383 I llm_load_print_meta: pooling type     = 0
0.00.265.383 I llm_load_print_meta: rope type        = 2
0.00.265.383 I llm_load_print_meta: rope scaling     = linear
0.00.265.385 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.385 I llm_load_print_meta: freq_scale_train = 1
0.00.265.386 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.386 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.386 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.387 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.387 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.387 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.387 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.388 I llm_load_print_meta: model type       = 2B
0.00.265.388 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.389 I llm_load_print_meta: model params     = 2.51 B
0.00.265.390 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.390 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.391 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.391 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.392 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.392 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.392 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.393 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.393 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.393 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.394 I llm_load_print_meta: max token length = 93
0.00.366.513 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.366.521 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.366.521 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.366.522 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.366.522 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.366.523 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.934 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.940 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.940 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.940 I llama_new_context_with_model: n_batch       = 2048
0.00.371.941 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.941 I llama_new_context_with_model: flash_attn    = 0
0.00.371.943 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.944 I llama_new_context_with_model: freq_scale    = 1
0.00.371.944 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.772 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.785 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.876 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.178 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.184 I llama_new_context_with_model: graph nodes  = 601
0.00.388.184 I llama_new_context_with_model: graph splits = 1
0.00.388.187 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.959 I main: llama threadpool init, n_threads = 4
0.00.473.974 I 
0.00.474.048 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.474.051 I 
0.00.474.098 I sampler seed: 1254311086
0.00.474.109 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.124 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.127 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.127 I 
 increasities

The word "incredibilis" means something that is very impressive or remarkable.

**Question:** How does the use of "incredibilis

0.02.729.119 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6444.05 tokens per second)
0.02.729.122 I llama_perf_context_print:        load time =     473.29 ms
0.02.729.123 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.729.124 I llama_perf_context_print:        eval time =    2235.40 ms /    32 runs   (   69.86 ms per token,    14.32 tokens per second)
0.02.729.125 I llama_perf_context_print:       total time =    2255.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.542 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.215 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.231 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.241 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.246 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.250 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.250 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.251 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.251 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.252 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.256 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.257 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.257 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.258 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.258 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.749 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.050 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.057 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.058 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.058 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.059 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.060 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.061 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.063 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.065 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.066 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.066 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.067 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.071 I llama_model_loader: - type  f32:   37 tensors
0.00.131.074 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.381 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.777 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.434 I llm_load_vocab: special tokens cache size = 5
0.00.272.487 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.502 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.503 I llm_load_print_meta: arch             = gemma
0.00.272.503 I llm_load_print_meta: vocab type       = SPM
0.00.272.504 I llm_load_print_meta: n_vocab          = 256000
0.00.272.504 I llm_load_print_meta: n_merges         = 0
0.00.272.505 I llm_load_print_meta: vocab_only       = 0
0.00.272.505 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.505 I llm_load_print_meta: n_embd           = 2048
0.00.272.505 I llm_load_print_meta: n_layer          = 18
0.00.272.517 I llm_load_print_meta: n_head           = 8
0.00.272.518 I llm_load_print_meta: n_head_kv        = 1
0.00.272.518 I llm_load_print_meta: n_rot            = 256
0.00.272.518 I llm_load_print_meta: n_swa            = 0
0.00.272.518 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.519 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.519 I llm_load_print_meta: n_gqa            = 8
0.00.272.520 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.521 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.522 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.524 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.524 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.525 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.525 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.526 I llm_load_print_meta: n_ff             = 16384
0.00.272.526 I llm_load_print_meta: n_expert         = 0
0.00.272.527 I llm_load_print_meta: n_expert_used    = 0
0.00.272.527 I llm_load_print_meta: causal attn      = 1
0.00.272.527 I llm_load_print_meta: pooling type     = 0
0.00.272.527 I llm_load_print_meta: rope type        = 2
0.00.272.528 I llm_load_print_meta: rope scaling     = linear
0.00.272.529 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.530 I llm_load_print_meta: freq_scale_train = 1
0.00.272.530 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.531 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.531 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.531 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.531 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.531 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.532 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.532 I llm_load_print_meta: model type       = 2B
0.00.272.533 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.533 I llm_load_print_meta: model params     = 2.51 B
0.00.272.534 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.536 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.537 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.537 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.537 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.538 I llm_load_print_meta: max token length = 93
0.00.367.433 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.700 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.706 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.706 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.707 I llama_new_context_with_model: n_batch       = 2048
0.00.372.707 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.708 I llama_new_context_with_model: flash_attn    = 0
0.00.372.711 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.711 I llama_new_context_with_model: freq_scale    = 1
0.00.372.712 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.887 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.902 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.995 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.266 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.273 I llama_new_context_with_model: graph nodes  = 601
0.00.389.274 I llama_new_context_with_model: graph splits = 1
0.00.389.276 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.583 I main: llama threadpool init, n_threads = 4
0.00.470.598 I 
0.00.470.669 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.672 I 
0.00.470.714 I sampler seed: 3552824776
0.00.470.724 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.729 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.729 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.729 I 
 increasities to the effect that the population of the planet is decreasing.

**Answer:**

**Population decline is a complex issue with numerous causes and consequences.

0.02.663.591 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6731.95 tokens per second)
0.02.663.594 I llama_perf_context_print:        load time =     469.83 ms
0.02.663.595 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.663.597 I llama_perf_context_print:        eval time =    2173.26 ms /    32 runs   (   67.91 ms per token,    14.72 tokens per second)
0.02.663.598 I llama_perf_context_print:       total time =    2193.02 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.561 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.763 I main: load the model and apply lora adapter, if any
0.00.020.847 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.857 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.864 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.873 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.877 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.881 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.882 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.883 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.883 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.884 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.884 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.892 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.893 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.894 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.894 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.895 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.187 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.092 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.098 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.099 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.100 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.100 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.101 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.102 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.104 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.105 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.106 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.107 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.112 I llama_model_loader: - type  f32:   37 tensors
0.00.131.113 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.322 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.475 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.099 I llm_load_vocab: special tokens cache size = 5
0.00.281.371 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.387 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.388 I llm_load_print_meta: arch             = gemma
0.00.281.388 I llm_load_print_meta: vocab type       = SPM
0.00.281.389 I llm_load_print_meta: n_vocab          = 256000
0.00.281.390 I llm_load_print_meta: n_merges         = 0
0.00.281.390 I llm_load_print_meta: vocab_only       = 0
0.00.281.390 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.391 I llm_load_print_meta: n_embd           = 2048
0.00.281.391 I llm_load_print_meta: n_layer          = 18
0.00.281.402 I llm_load_print_meta: n_head           = 8
0.00.281.403 I llm_load_print_meta: n_head_kv        = 1
0.00.281.404 I llm_load_print_meta: n_rot            = 256
0.00.281.404 I llm_load_print_meta: n_swa            = 0
0.00.281.404 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.405 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.406 I llm_load_print_meta: n_gqa            = 8
0.00.281.406 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.408 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.408 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.410 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.410 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.410 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.411 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.412 I llm_load_print_meta: n_ff             = 16384
0.00.281.412 I llm_load_print_meta: n_expert         = 0
0.00.281.412 I llm_load_print_meta: n_expert_used    = 0
0.00.281.413 I llm_load_print_meta: causal attn      = 1
0.00.281.413 I llm_load_print_meta: pooling type     = 0
0.00.281.413 I llm_load_print_meta: rope type        = 2
0.00.281.413 I llm_load_print_meta: rope scaling     = linear
0.00.281.415 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.416 I llm_load_print_meta: freq_scale_train = 1
0.00.281.416 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.416 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.416 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.417 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.417 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.417 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.418 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.418 I llm_load_print_meta: model type       = 2B
0.00.281.419 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.420 I llm_load_print_meta: model params     = 2.51 B
0.00.281.420 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.421 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.421 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.422 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.422 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.422 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.423 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.423 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.423 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.424 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.424 I llm_load_print_meta: max token length = 93
0.00.357.958 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.357.966 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.967 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.357.967 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.357.968 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.357.968 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.363.093 I llama_new_context_with_model: n_seq_max     = 1
0.00.363.099 I llama_new_context_with_model: n_ctx         = 4096
0.00.363.099 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.363.100 I llama_new_context_with_model: n_batch       = 2048
0.00.363.100 I llama_new_context_with_model: n_ubatch      = 512
0.00.363.101 I llama_new_context_with_model: flash_attn    = 0
0.00.363.103 I llama_new_context_with_model: freq_base     = 10000.0
0.00.363.104 I llama_new_context_with_model: freq_scale    = 1
0.00.363.105 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.316 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.329 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.434 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.799 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.805 I llama_new_context_with_model: graph nodes  = 601
0.00.379.805 I llama_new_context_with_model: graph splits = 1
0.00.379.807 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.983 I main: llama threadpool init, n_threads = 4
0.00.463.997 I 
0.00.464.069 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.072 I 
0.00.464.119 I sampler seed: 2847693872
0.00.464.129 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.140 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.144 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.144 I 
 increadibly. [end of text]


0.00.754.102 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8000.00 tokens per second)
0.00.754.106 I llama_perf_context_print:        load time =     463.20 ms
0.00.754.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.754.109 I llama_perf_context_print:        eval time =     286.52 ms /     4 runs   (   71.63 ms per token,    13.96 tokens per second)
0.00.754.109 I llama_perf_context_print:       total time =     290.13 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.537 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.056 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.075 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.081 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.090 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.100 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.104 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.105 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.105 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.106 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.106 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.111 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.112 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.112 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.113 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.114 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.913 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.332 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.208 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.209 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.209 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.210 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.211 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.211 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.214 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.214 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.215 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.216 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.217 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.220 I llama_model_loader: - type  f32:   37 tensors
0.00.131.221 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.840 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.200 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.829 I llm_load_vocab: special tokens cache size = 5
0.00.267.934 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.950 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.950 I llm_load_print_meta: arch             = gemma
0.00.267.951 I llm_load_print_meta: vocab type       = SPM
0.00.267.952 I llm_load_print_meta: n_vocab          = 256000
0.00.267.952 I llm_load_print_meta: n_merges         = 0
0.00.267.952 I llm_load_print_meta: vocab_only       = 0
0.00.267.953 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.953 I llm_load_print_meta: n_embd           = 2048
0.00.267.953 I llm_load_print_meta: n_layer          = 18
0.00.267.964 I llm_load_print_meta: n_head           = 8
0.00.267.965 I llm_load_print_meta: n_head_kv        = 1
0.00.267.965 I llm_load_print_meta: n_rot            = 256
0.00.267.966 I llm_load_print_meta: n_swa            = 0
0.00.267.966 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.966 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.967 I llm_load_print_meta: n_gqa            = 8
0.00.267.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.969 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.971 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.972 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.972 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.972 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.973 I llm_load_print_meta: n_ff             = 16384
0.00.267.973 I llm_load_print_meta: n_expert         = 0
0.00.267.974 I llm_load_print_meta: n_expert_used    = 0
0.00.267.974 I llm_load_print_meta: causal attn      = 1
0.00.267.974 I llm_load_print_meta: pooling type     = 0
0.00.267.974 I llm_load_print_meta: rope type        = 2
0.00.267.975 I llm_load_print_meta: rope scaling     = linear
0.00.267.976 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.977 I llm_load_print_meta: freq_scale_train = 1
0.00.267.977 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.978 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.978 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.979 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.979 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.979 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.980 I llm_load_print_meta: model type       = 2B
0.00.267.980 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.981 I llm_load_print_meta: model params     = 2.51 B
0.00.267.982 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.982 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.983 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.983 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.984 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.984 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.985 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.985 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.985 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.986 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.986 I llm_load_print_meta: max token length = 93
0.00.339.342 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.348 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.323 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.329 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.330 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.330 I llama_new_context_with_model: n_batch       = 2048
0.00.344.331 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.331 I llama_new_context_with_model: flash_attn    = 0
0.00.344.333 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.334 I llama_new_context_with_model: freq_scale    = 1
0.00.344.335 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.642 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.657 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.751 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.039 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.046 I llama_new_context_with_model: graph nodes  = 601
0.00.361.046 I llama_new_context_with_model: graph splits = 1
0.00.361.049 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.793 I main: llama threadpool init, n_threads = 4
0.00.451.809 I 
0.00.451.881 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.884 I 
0.00.451.923 I sampler seed: 4283076381
0.00.451.937 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.947 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.948 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.948 I 
 increably. 

I apologize, but I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.02.271.635 I llama_perf_sampler_print:    sampling time =       3.85 ms /    25 runs   (    0.15 ms per token,  6496.88 tokens per second)
0.02.271.638 I llama_perf_context_print:        load time =     451.04 ms
0.02.271.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.271.641 I llama_perf_context_print:        eval time =    1805.04 ms /    24 runs   (   75.21 ms per token,    13.30 tokens per second)
0.02.271.642 I llama_perf_context_print:       total time =    1819.85 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.973s
user	0m29.175s
sys	0m9.275s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4280 (3df784b3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40379.39 ms
main:    total time = 40379.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.590 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.021.792 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.804 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.812 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.818 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.820 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.824 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.825 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.826 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.826 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.827 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.827 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.832 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.832 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.833 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.834 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.835 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.088 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.146 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.971 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.977 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.978 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.979 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.979 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.980 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.981 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.983 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.983 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.985 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.986 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.989 I llama_model_loader: - type  f32:   37 tensors
0.00.130.990 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.991 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.115 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.860 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.345 I llm_load_vocab: special tokens cache size = 5
0.00.260.270 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.285 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.285 I llm_load_print_meta: arch             = gemma
0.00.260.286 I llm_load_print_meta: vocab type       = SPM
0.00.260.286 I llm_load_print_meta: n_vocab          = 256000
0.00.260.287 I llm_load_print_meta: n_merges         = 0
0.00.260.287 I llm_load_print_meta: vocab_only       = 0
0.00.260.287 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.287 I llm_load_print_meta: n_embd           = 2048
0.00.260.288 I llm_load_print_meta: n_layer          = 18
0.00.260.299 I llm_load_print_meta: n_head           = 8
0.00.260.301 I llm_load_print_meta: n_head_kv        = 1
0.00.260.301 I llm_load_print_meta: n_rot            = 256
0.00.260.302 I llm_load_print_meta: n_swa            = 0
0.00.260.303 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.303 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.304 I llm_load_print_meta: n_gqa            = 8
0.00.260.305 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.306 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.307 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.309 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.309 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.309 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.310 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.311 I llm_load_print_meta: n_ff             = 16384
0.00.260.311 I llm_load_print_meta: n_expert         = 0
0.00.260.312 I llm_load_print_meta: n_expert_used    = 0
0.00.260.312 I llm_load_print_meta: causal attn      = 1
0.00.260.313 I llm_load_print_meta: pooling type     = 0
0.00.260.313 I llm_load_print_meta: rope type        = 2
0.00.260.314 I llm_load_print_meta: rope scaling     = linear
0.00.260.315 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.315 I llm_load_print_meta: freq_scale_train = 1
0.00.260.316 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.317 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.317 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.317 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.317 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.318 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.318 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.319 I llm_load_print_meta: model type       = 2B
0.00.260.320 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.320 I llm_load_print_meta: model params     = 2.51 B
0.00.260.321 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.322 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.322 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.323 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.323 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.323 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.324 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.325 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.325 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.326 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.326 I llm_load_print_meta: max token length = 93
0.00.321.167 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.173 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.174 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.174 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.175 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.175 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.387 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.393 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.394 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.394 I llama_new_context_with_model: n_batch       = 2048
0.00.326.395 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.395 I llama_new_context_with_model: flash_attn    = 0
0.00.326.397 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.398 I llama_new_context_with_model: freq_scale    = 1
0.00.326.399 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.340.774 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.340.788 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.340.878 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.124 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.131 I llama_new_context_with_model: graph nodes  = 601
0.00.342.131 I llama_new_context_with_model: graph splits = 1
0.00.342.134 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.122 I main: llama threadpool init, n_threads = 4
0.00.417.139 I 
0.00.417.214 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.417.217 I 
0.00.417.260 I sampler seed: 469010783
0.00.417.271 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.417.279 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.417.283 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.417.283 I 
 increamically. I cannot provide a response that includes sexually suggestive or inappropriate content. [end of text]


0.01.263.889 I llama_perf_sampler_print:    sampling time =       2.80 ms /    18 runs   (    0.16 ms per token,  6426.28 tokens per second)
0.01.263.892 I llama_perf_context_print:        load time =     416.31 ms
0.01.263.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.263.894 I llama_perf_context_print:        eval time =     835.81 ms /    17 runs   (   49.17 ms per token,    20.34 tokens per second)
0.01.263.895 I llama_perf_context_print:       total time =     846.78 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4280 (3df784b3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40187.11 ms
main:    total time = 40187.11 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.577 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.785 I main: load the model and apply lora adapter, if any
0.00.021.273 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.289 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.296 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.297 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.302 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.302 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.303 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.304 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.304 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.304 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.308 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.309 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.309 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.310 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.310 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.427 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.467 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.271 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.278 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.279 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.279 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.280 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.281 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.281 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.283 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.284 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.287 I llama_model_loader: - type  f32:   37 tensors
0.00.130.288 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.288 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.008 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.296 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.857 I llm_load_vocab: special tokens cache size = 5
0.00.265.535 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.551 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.552 I llm_load_print_meta: arch             = gemma
0.00.265.553 I llm_load_print_meta: vocab type       = SPM
0.00.265.553 I llm_load_print_meta: n_vocab          = 256000
0.00.265.554 I llm_load_print_meta: n_merges         = 0
0.00.265.554 I llm_load_print_meta: vocab_only       = 0
0.00.265.555 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.555 I llm_load_print_meta: n_embd           = 2048
0.00.265.555 I llm_load_print_meta: n_layer          = 18
0.00.265.568 I llm_load_print_meta: n_head           = 8
0.00.265.569 I llm_load_print_meta: n_head_kv        = 1
0.00.265.569 I llm_load_print_meta: n_rot            = 256
0.00.265.570 I llm_load_print_meta: n_swa            = 0
0.00.265.570 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.570 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.571 I llm_load_print_meta: n_gqa            = 8
0.00.265.572 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.573 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.574 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.575 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.575 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.576 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.576 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.577 I llm_load_print_meta: n_ff             = 16384
0.00.265.577 I llm_load_print_meta: n_expert         = 0
0.00.265.577 I llm_load_print_meta: n_expert_used    = 0
0.00.265.578 I llm_load_print_meta: causal attn      = 1
0.00.265.578 I llm_load_print_meta: pooling type     = 0
0.00.265.578 I llm_load_print_meta: rope type        = 2
0.00.265.578 I llm_load_print_meta: rope scaling     = linear
0.00.265.580 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.580 I llm_load_print_meta: freq_scale_train = 1
0.00.265.581 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.581 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.581 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.582 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.582 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.582 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.583 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.583 I llm_load_print_meta: model type       = 2B
0.00.265.584 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.584 I llm_load_print_meta: model params     = 2.51 B
0.00.265.585 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.586 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.586 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.586 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.587 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.587 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.587 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.588 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.588 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.589 I llm_load_print_meta: max token length = 93
0.00.323.046 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.328.243 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.249 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.249 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.250 I llama_new_context_with_model: n_batch       = 2048
0.00.328.250 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.251 I llama_new_context_with_model: flash_attn    = 0
0.00.328.253 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.254 I llama_new_context_with_model: freq_scale    = 1
0.00.328.255 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.002 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.018 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.116 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.346 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.353 I llama_new_context_with_model: graph nodes  = 601
0.00.345.353 I llama_new_context_with_model: graph splits = 1
0.00.345.356 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.721 I main: llama threadpool init, n_threads = 4
0.00.421.739 I 
0.00.421.817 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.421.821 I 
0.00.421.866 I sampler seed: 2960660731
0.00.421.878 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.889 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.892 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.893 I 
 seconally.

I am not able to generate text that is sexually suggestive in nature. [end of text]


0.01.353.708 I llama_perf_sampler_print:    sampling time =       2.88 ms /    20 runs   (    0.14 ms per token,  6934.81 tokens per second)
0.01.353.711 I llama_perf_context_print:        load time =     420.92 ms
0.01.353.712 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.353.713 I llama_perf_context_print:        eval time =     920.69 ms /    19 runs   (   48.46 ms per token,    20.64 tokens per second)
0.01.353.714 I llama_perf_context_print:       total time =     931.99 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.092s
user	10m18.718s
sys	0m6.905s
