+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.023.775 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.789 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.889 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.902 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.904 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.912 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.916 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.918 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.919 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.921 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.923 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.935 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.939 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.940 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.942 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.708 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.840 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.258 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.266 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.268 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.269 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.270 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.272 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.273 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.277 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.279 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.280 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.281 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.283 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.292 I llama_model_loader: - type  f32:   37 tensors
0.00.351.294 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.858 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.032 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.016 I llm_load_vocab: special tokens cache size = 5
0.00.846.646 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.718 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.719 I llm_load_print_meta: arch             = gemma
0.00.846.720 I llm_load_print_meta: vocab type       = SPM
0.00.846.721 I llm_load_print_meta: n_vocab          = 256000
0.00.846.723 I llm_load_print_meta: n_merges         = 0
0.00.846.724 I llm_load_print_meta: vocab_only       = 0
0.00.846.724 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.725 I llm_load_print_meta: n_embd           = 2048
0.00.846.725 I llm_load_print_meta: n_layer          = 18
0.00.846.789 I llm_load_print_meta: n_head           = 8
0.00.846.797 I llm_load_print_meta: n_head_kv        = 1
0.00.846.799 I llm_load_print_meta: n_rot            = 256
0.00.846.799 I llm_load_print_meta: n_swa            = 0
0.00.846.800 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.800 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.805 I llm_load_print_meta: n_gqa            = 8
0.00.846.811 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.816 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.817 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.819 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.830 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.832 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.832 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.839 I llm_load_print_meta: n_ff             = 16384
0.00.846.840 I llm_load_print_meta: n_expert         = 0
0.00.846.841 I llm_load_print_meta: n_expert_used    = 0
0.00.846.841 I llm_load_print_meta: causal attn      = 1
0.00.846.841 I llm_load_print_meta: pooling type     = 0
0.00.846.842 I llm_load_print_meta: rope type        = 2
0.00.846.842 I llm_load_print_meta: rope scaling     = linear
0.00.846.844 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.844 I llm_load_print_meta: freq_scale_train = 1
0.00.846.845 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.846 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.846 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.847 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.847 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.848 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.848 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.849 I llm_load_print_meta: model type       = 2B
0.00.846.850 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.851 I llm_load_print_meta: model params     = 2.51 B
0.00.846.869 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.870 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.871 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.872 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.872 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.873 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.877 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.890 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.893 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.894 I llm_load_print_meta: max token length = 93
0.00.949.476 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.949.485 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.949.486 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.949.487 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.949.488 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.949.489 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.955.452 I llama_new_context_with_model: n_seq_max     = 1
0.00.955.460 I llama_new_context_with_model: n_ctx         = 4096
0.00.955.460 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.955.461 I llama_new_context_with_model: n_batch       = 2048
0.00.955.461 I llama_new_context_with_model: n_ubatch      = 512
0.00.955.462 I llama_new_context_with_model: flash_attn    = 0
0.00.955.464 I llama_new_context_with_model: freq_base     = 10000.0
0.00.955.465 I llama_new_context_with_model: freq_scale    = 1
0.00.955.466 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.970.321 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.970.363 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.970.497 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.973.062 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.973.066 I llama_new_context_with_model: graph nodes  = 601
0.00.973.067 I llama_new_context_with_model: graph splits = 1
0.00.973.089 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.584.477 I main: llama threadpool init, n_threads = 4
0.01.584.494 I 
0.01.584.613 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.584.617 I 
0.01.584.861 I sampler seed: 1018521649
0.01.584.875 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.584.888 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.584.889 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.584.889 I 
 increasities?

I cannot find the requested information in the provided context. Please provide more context or ask a different question. [end of text]


0.12.725.952 I llama_perf_sampler_print:    sampling time =      39.16 ms /    27 runs   (    1.45 ms per token,   689.41 tokens per second)
0.12.725.955 I llama_perf_context_print:        load time =    1583.54 ms
0.12.725.956 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.725.958 I llama_perf_context_print:        eval time =   11070.15 ms /    26 runs   (  425.78 ms per token,     2.35 tokens per second)
0.12.725.980 I llama_perf_context_print:       total time =   11141.48 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.000.845 I main: load the model and apply lora adapter, if any
0.00.025.602 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.692 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.704 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.706 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.711 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.715 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.717 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.718 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.720 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.721 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.730 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.734 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.735 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.020 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.723 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.100 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.109 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.111 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.112 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.113 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.115 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.116 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.120 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.122 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.123 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.124 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.126 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.134 I llama_model_loader: - type  f32:   37 tensors
0.00.352.136 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.173 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.981 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.950 I llm_load_vocab: special tokens cache size = 5
0.00.846.417 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.846.491 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.846.492 I llm_load_print_meta: arch             = gemma
0.00.846.492 I llm_load_print_meta: vocab type       = SPM
0.00.846.493 I llm_load_print_meta: n_vocab          = 256000
0.00.846.496 I llm_load_print_meta: n_merges         = 0
0.00.846.496 I llm_load_print_meta: vocab_only       = 0
0.00.846.496 I llm_load_print_meta: n_ctx_train      = 8192
0.00.846.497 I llm_load_print_meta: n_embd           = 2048
0.00.846.497 I llm_load_print_meta: n_layer          = 18
0.00.846.564 I llm_load_print_meta: n_head           = 8
0.00.846.573 I llm_load_print_meta: n_head_kv        = 1
0.00.846.576 I llm_load_print_meta: n_rot            = 256
0.00.846.576 I llm_load_print_meta: n_swa            = 0
0.00.846.577 I llm_load_print_meta: n_embd_head_k    = 256
0.00.846.577 I llm_load_print_meta: n_embd_head_v    = 256
0.00.846.582 I llm_load_print_meta: n_gqa            = 8
0.00.846.587 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.846.593 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.846.594 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.846.595 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.846.595 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.846.596 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.846.597 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.846.602 I llm_load_print_meta: n_ff             = 16384
0.00.846.602 I llm_load_print_meta: n_expert         = 0
0.00.846.602 I llm_load_print_meta: n_expert_used    = 0
0.00.846.604 I llm_load_print_meta: causal attn      = 1
0.00.846.604 I llm_load_print_meta: pooling type     = 0
0.00.846.605 I llm_load_print_meta: rope type        = 2
0.00.846.616 I llm_load_print_meta: rope scaling     = linear
0.00.846.618 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.846.619 I llm_load_print_meta: freq_scale_train = 1
0.00.846.619 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.846.619 I llm_load_print_meta: rope_finetuned   = unknown
0.00.846.620 I llm_load_print_meta: ssm_d_conv       = 0
0.00.846.621 I llm_load_print_meta: ssm_d_inner      = 0
0.00.846.621 I llm_load_print_meta: ssm_d_state      = 0
0.00.846.621 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.846.622 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.846.634 I llm_load_print_meta: model type       = 2B
0.00.846.635 I llm_load_print_meta: model ftype      = Q8_0
0.00.846.636 I llm_load_print_meta: model params     = 2.51 B
0.00.846.637 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.846.638 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.846.639 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.846.639 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.846.640 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.846.641 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.846.641 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.846.642 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.846.648 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.846.649 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.846.650 I llm_load_print_meta: max token length = 93
0.00.943.361 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.949.423 I llama_new_context_with_model: n_seq_max     = 1
0.00.949.429 I llama_new_context_with_model: n_ctx         = 4096
0.00.949.430 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.949.430 I llama_new_context_with_model: n_batch       = 2048
0.00.949.430 I llama_new_context_with_model: n_ubatch      = 512
0.00.949.431 I llama_new_context_with_model: flash_attn    = 0
0.00.949.434 I llama_new_context_with_model: freq_base     = 10000.0
0.00.949.434 I llama_new_context_with_model: freq_scale    = 1
0.00.949.435 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.964.227 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.964.267 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.964.386 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.966.970 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.966.974 I llama_new_context_with_model: graph nodes  = 601
0.00.966.975 I llama_new_context_with_model: graph splits = 1
0.00.966.998 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.577.279 I main: llama threadpool init, n_threads = 4
0.01.577.295 I 
0.01.577.413 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.577.417 I 
0.01.577.652 I sampler seed: 2861747712
0.01.577.667 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.577.676 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.577.679 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.577.679 I 
 increasities in the statement, "The solution is not unique".

I'm not sure what you're trying to get at. Can you please re

0.15.261.533 I llama_perf_sampler_print:    sampling time =      48.70 ms /    33 runs   (    1.48 ms per token,   677.58 tokens per second)
0.15.261.548 I llama_perf_context_print:        load time =    1576.33 ms
0.15.261.549 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.261.551 I llama_perf_context_print:        eval time =   13596.15 ms /    32 runs   (  424.88 ms per token,     2.35 tokens per second)
0.15.261.552 I llama_perf_context_print:       total time =   13684.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.843 I main: load the model and apply lora adapter, if any
0.00.023.299 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.311 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.421 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.423 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.430 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.434 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.436 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.439 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.441 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.443 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.456 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.462 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.466 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.468 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.203 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.653 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.149 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.158 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.160 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.161 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.162 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.164 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.165 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.169 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.170 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.172 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.192 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.197 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.205 I llama_model_loader: - type  f32:   37 tensors
0.00.354.215 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.048 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.632.354 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.633.250 I llm_load_vocab: special tokens cache size = 5
0.00.826.455 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.826.533 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.826.538 I llm_load_print_meta: arch             = gemma
0.00.826.539 I llm_load_print_meta: vocab type       = SPM
0.00.826.540 I llm_load_print_meta: n_vocab          = 256000
0.00.826.542 I llm_load_print_meta: n_merges         = 0
0.00.826.542 I llm_load_print_meta: vocab_only       = 0
0.00.826.543 I llm_load_print_meta: n_ctx_train      = 8192
0.00.826.544 I llm_load_print_meta: n_embd           = 2048
0.00.826.544 I llm_load_print_meta: n_layer          = 18
0.00.826.607 I llm_load_print_meta: n_head           = 8
0.00.826.617 I llm_load_print_meta: n_head_kv        = 1
0.00.826.618 I llm_load_print_meta: n_rot            = 256
0.00.826.619 I llm_load_print_meta: n_swa            = 0
0.00.826.619 I llm_load_print_meta: n_embd_head_k    = 256
0.00.826.619 I llm_load_print_meta: n_embd_head_v    = 256
0.00.826.625 I llm_load_print_meta: n_gqa            = 8
0.00.826.629 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.826.635 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.826.639 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.826.640 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.826.641 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.826.641 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.826.642 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.826.646 I llm_load_print_meta: n_ff             = 16384
0.00.826.647 I llm_load_print_meta: n_expert         = 0
0.00.826.648 I llm_load_print_meta: n_expert_used    = 0
0.00.826.649 I llm_load_print_meta: causal attn      = 1
0.00.826.649 I llm_load_print_meta: pooling type     = 0
0.00.826.649 I llm_load_print_meta: rope type        = 2
0.00.826.651 I llm_load_print_meta: rope scaling     = linear
0.00.826.652 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.826.653 I llm_load_print_meta: freq_scale_train = 1
0.00.826.654 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.826.655 I llm_load_print_meta: rope_finetuned   = unknown
0.00.826.655 I llm_load_print_meta: ssm_d_conv       = 0
0.00.826.680 I llm_load_print_meta: ssm_d_inner      = 0
0.00.826.680 I llm_load_print_meta: ssm_d_state      = 0
0.00.826.681 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.826.681 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.826.689 I llm_load_print_meta: model type       = 2B
0.00.826.691 I llm_load_print_meta: model ftype      = Q8_0
0.00.826.698 I llm_load_print_meta: model params     = 2.51 B
0.00.826.700 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.826.700 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.826.701 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.826.702 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.826.702 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.826.703 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.826.710 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.826.711 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.826.718 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.826.719 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.826.719 I llm_load_print_meta: max token length = 93
0.00.904.838 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.904.849 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.904.850 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.904.850 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.904.851 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.904.852 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.911.619 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.626 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.627 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.627 I llama_new_context_with_model: n_batch       = 2048
0.00.911.627 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.628 I llama_new_context_with_model: flash_attn    = 0
0.00.911.630 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.631 I llama_new_context_with_model: freq_scale    = 1
0.00.911.632 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.925.902 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.925.940 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.056 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.928.714 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.928.719 I llama_new_context_with_model: graph nodes  = 601
0.00.928.720 I llama_new_context_with_model: graph splits = 1
0.00.928.743 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.538.350 I main: llama threadpool init, n_threads = 4
0.01.538.367 I 
0.01.538.501 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.538.506 I 
0.01.538.755 I sampler seed: 2717530278
0.01.538.770 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.538.783 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.538.785 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.538.785 I 
 increamically, as one becomes more engrossed in the task at hand.

This is the essence of flow, a state of complete immersion in an activity where time

0.15.095.959 I llama_perf_sampler_print:    sampling time =      48.29 ms /    33 runs   (    1.46 ms per token,   683.44 tokens per second)
0.15.095.965 I llama_perf_context_print:        load time =    1537.40 ms
0.15.095.967 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.095.969 I llama_perf_context_print:        eval time =   13469.78 ms /    32 runs   (  420.93 ms per token,     2.38 tokens per second)
0.15.095.970 I llama_perf_context_print:       total time =   13557.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.023.333 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.341 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.428 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.439 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.441 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.446 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.451 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.452 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.453 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.455 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.466 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.467 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.469 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.470 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.471 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.421 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.329.446 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.754 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.763 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.764 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.765 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.766 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.768 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.769 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.773 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.791 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.795 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.802 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.352.805 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.812 I llama_model_loader: - type  f32:   37 tensors
0.00.352.815 I llama_model_loader: - type q8_0:  127 tensors
0.00.578.491 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.905 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.761 I llm_load_vocab: special tokens cache size = 5
0.00.841.904 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.841.981 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.841.983 I llm_load_print_meta: arch             = gemma
0.00.841.983 I llm_load_print_meta: vocab type       = SPM
0.00.841.984 I llm_load_print_meta: n_vocab          = 256000
0.00.841.987 I llm_load_print_meta: n_merges         = 0
0.00.841.987 I llm_load_print_meta: vocab_only       = 0
0.00.841.988 I llm_load_print_meta: n_ctx_train      = 8192
0.00.841.988 I llm_load_print_meta: n_embd           = 2048
0.00.841.988 I llm_load_print_meta: n_layer          = 18
0.00.842.052 I llm_load_print_meta: n_head           = 8
0.00.842.059 I llm_load_print_meta: n_head_kv        = 1
0.00.842.059 I llm_load_print_meta: n_rot            = 256
0.00.842.060 I llm_load_print_meta: n_swa            = 0
0.00.842.060 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.060 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.065 I llm_load_print_meta: n_gqa            = 8
0.00.842.069 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.074 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.076 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.077 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.079 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.079 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.079 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.084 I llm_load_print_meta: n_ff             = 16384
0.00.842.085 I llm_load_print_meta: n_expert         = 0
0.00.842.085 I llm_load_print_meta: n_expert_used    = 0
0.00.842.086 I llm_load_print_meta: causal attn      = 1
0.00.842.086 I llm_load_print_meta: pooling type     = 0
0.00.842.086 I llm_load_print_meta: rope type        = 2
0.00.842.087 I llm_load_print_meta: rope scaling     = linear
0.00.842.088 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.089 I llm_load_print_meta: freq_scale_train = 1
0.00.842.090 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.090 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.090 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.091 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.092 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.092 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.093 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.093 I llm_load_print_meta: model type       = 2B
0.00.842.104 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.105 I llm_load_print_meta: model params     = 2.51 B
0.00.842.106 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.106 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.107 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.119 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.120 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.121 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.121 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.122 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.128 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.129 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.130 I llm_load_print_meta: max token length = 93
0.00.915.022 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.915.029 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.920.755 I llama_new_context_with_model: n_seq_max     = 1
0.00.920.762 I llama_new_context_with_model: n_ctx         = 4096
0.00.920.762 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.920.763 I llama_new_context_with_model: n_batch       = 2048
0.00.920.763 I llama_new_context_with_model: n_ubatch      = 512
0.00.920.764 I llama_new_context_with_model: flash_attn    = 0
0.00.920.766 I llama_new_context_with_model: freq_base     = 10000.0
0.00.920.766 I llama_new_context_with_model: freq_scale    = 1
0.00.920.767 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.352 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.935.393 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.935.508 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.938.047 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.938.051 I llama_new_context_with_model: graph nodes  = 601
0.00.938.051 I llama_new_context_with_model: graph splits = 1
0.00.938.075 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.548.206 I main: llama threadpool init, n_threads = 4
0.01.548.223 I 
0.01.548.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.548.349 I 
0.01.548.586 I sampler seed: 346185582
0.01.548.600 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.612 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.613 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.613 I 
 increasities, a term coined by me, to describe the creative process.

**1. Inspiration is the spark that ignites the creative process.**

*

0.15.137.721 I llama_perf_sampler_print:    sampling time =      47.99 ms /    33 runs   (    1.45 ms per token,   687.64 tokens per second)
0.15.137.725 I llama_perf_context_print:        load time =    1547.23 ms
0.15.137.726 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.137.729 I llama_perf_context_print:        eval time =   13502.16 ms /    32 runs   (  421.94 ms per token,     2.37 tokens per second)
0.15.137.730 I llama_perf_context_print:       total time =   13589.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.505s
user	3m41.497s
sys	0m9.337s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4280 (3df784b3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185825.58 ms
main:    total time = 185825.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.848 I main: llama backend init
0.00.000.856 I main: load the model and apply lora adapter, if any
0.00.023.443 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.452 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.545 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.556 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.558 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.563 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.568 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.569 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.570 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.572 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.573 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.580 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.582 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.583 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.584 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.693 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.965 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.405 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.415 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.417 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.418 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.419 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.421 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.422 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.427 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.428 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.429 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.431 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.352.432 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.442 I llama_model_loader: - type  f32:   37 tensors
0.00.352.446 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.446 I llama_model_loader: - type q6_K:   19 tensors
0.00.578.320 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.438 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.362 I llm_load_vocab: special tokens cache size = 5
0.00.843.427 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.506 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.510 I llm_load_print_meta: arch             = gemma
0.00.843.511 I llm_load_print_meta: vocab type       = SPM
0.00.843.512 I llm_load_print_meta: n_vocab          = 256000
0.00.843.514 I llm_load_print_meta: n_merges         = 0
0.00.843.515 I llm_load_print_meta: vocab_only       = 0
0.00.843.515 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.516 I llm_load_print_meta: n_embd           = 2048
0.00.843.516 I llm_load_print_meta: n_layer          = 18
0.00.843.582 I llm_load_print_meta: n_head           = 8
0.00.843.591 I llm_load_print_meta: n_head_kv        = 1
0.00.843.593 I llm_load_print_meta: n_rot            = 256
0.00.843.593 I llm_load_print_meta: n_swa            = 0
0.00.843.594 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.603 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.612 I llm_load_print_meta: n_gqa            = 8
0.00.843.617 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.622 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.626 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.627 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.628 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.843.628 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.843.628 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.843.633 I llm_load_print_meta: n_ff             = 16384
0.00.843.634 I llm_load_print_meta: n_expert         = 0
0.00.843.634 I llm_load_print_meta: n_expert_used    = 0
0.00.843.634 I llm_load_print_meta: causal attn      = 1
0.00.843.635 I llm_load_print_meta: pooling type     = 0
0.00.843.635 I llm_load_print_meta: rope type        = 2
0.00.843.635 I llm_load_print_meta: rope scaling     = linear
0.00.843.637 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.843.649 I llm_load_print_meta: freq_scale_train = 1
0.00.843.650 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.843.651 I llm_load_print_meta: rope_finetuned   = unknown
0.00.843.651 I llm_load_print_meta: ssm_d_conv       = 0
0.00.843.651 I llm_load_print_meta: ssm_d_inner      = 0
0.00.843.652 I llm_load_print_meta: ssm_d_state      = 0
0.00.843.655 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.843.655 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.843.656 I llm_load_print_meta: model type       = 2B
0.00.843.657 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.843.658 I llm_load_print_meta: model params     = 2.51 B
0.00.843.659 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.843.660 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.843.660 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.843.661 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.843.662 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.843.662 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.843.663 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.843.663 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.843.670 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.843.671 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.843.672 I llm_load_print_meta: max token length = 93
0.00.905.046 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.905.057 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.905.058 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.905.059 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.905.060 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.905.060 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.910.960 I llama_new_context_with_model: n_seq_max     = 1
0.00.910.968 I llama_new_context_with_model: n_ctx         = 4096
0.00.910.968 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.910.968 I llama_new_context_with_model: n_batch       = 2048
0.00.910.969 I llama_new_context_with_model: n_ubatch      = 512
0.00.910.969 I llama_new_context_with_model: flash_attn    = 0
0.00.910.972 I llama_new_context_with_model: freq_base     = 10000.0
0.00.910.973 I llama_new_context_with_model: freq_scale    = 1
0.00.910.973 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.925.843 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.925.881 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.003 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.928.571 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.928.574 I llama_new_context_with_model: graph nodes  = 601
0.00.928.574 I llama_new_context_with_model: graph splits = 1
0.00.928.597 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.514.945 I main: llama threadpool init, n_threads = 4
0.01.514.962 I 
0.01.515.100 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.515.104 I 
0.01.515.341 I sampler seed: 308212655
0.01.515.354 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.515.366 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.515.367 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.515.367 I 
 seconally.

I am unable to generate a response for this question as it requires me to generate text, which is a form of creative writing. As an

0.12.642.560 I llama_perf_sampler_print:    sampling time =      48.16 ms /    33 runs   (    1.46 ms per token,   685.23 tokens per second)
0.12.642.563 I llama_perf_context_print:        load time =    1513.99 ms
0.12.642.564 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.642.566 I llama_perf_context_print:        eval time =   11040.41 ms /    32 runs   (  345.01 ms per token,     2.90 tokens per second)
0.12.642.567 I llama_perf_context_print:       total time =   11127.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4280 (3df784b3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 184937.34 ms
main:    total time = 184937.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4280 (3df784b3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.000.893 I main: load the model and apply lora adapter, if any
0.00.023.279 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.387 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.402 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.406 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.413 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.415 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.416 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.417 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.418 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.420 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.430 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.434 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.435 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.437 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.438 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.674 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.698 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.096 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.105 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.107 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.108 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.109 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.111 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.112 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.116 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.117 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.127 I llama_model_loader: - type  f32:   37 tensors
0.00.352.130 I llama_model_loader: - type q4_K:  108 tensors
0.00.352.130 I llama_model_loader: - type q6_K:   19 tensors
0.00.577.264 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.638 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.616 I llm_load_vocab: special tokens cache size = 5
0.00.831.120 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.194 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.195 I llm_load_print_meta: arch             = gemma
0.00.831.195 I llm_load_print_meta: vocab type       = SPM
0.00.831.196 I llm_load_print_meta: n_vocab          = 256000
0.00.831.199 I llm_load_print_meta: n_merges         = 0
0.00.831.199 I llm_load_print_meta: vocab_only       = 0
0.00.831.200 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.200 I llm_load_print_meta: n_embd           = 2048
0.00.831.201 I llm_load_print_meta: n_layer          = 18
0.00.831.267 I llm_load_print_meta: n_head           = 8
0.00.831.274 I llm_load_print_meta: n_head_kv        = 1
0.00.831.275 I llm_load_print_meta: n_rot            = 256
0.00.831.275 I llm_load_print_meta: n_swa            = 0
0.00.831.275 I llm_load_print_meta: n_embd_head_k    = 256
0.00.831.276 I llm_load_print_meta: n_embd_head_v    = 256
0.00.831.280 I llm_load_print_meta: n_gqa            = 8
0.00.831.285 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.831.290 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.831.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.831.293 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.831.294 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.831.294 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.831.295 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.831.299 I llm_load_print_meta: n_ff             = 16384
0.00.831.300 I llm_load_print_meta: n_expert         = 0
0.00.831.300 I llm_load_print_meta: n_expert_used    = 0
0.00.831.300 I llm_load_print_meta: causal attn      = 1
0.00.831.300 I llm_load_print_meta: pooling type     = 0
0.00.831.301 I llm_load_print_meta: rope type        = 2
0.00.831.301 I llm_load_print_meta: rope scaling     = linear
0.00.831.302 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.831.303 I llm_load_print_meta: freq_scale_train = 1
0.00.831.303 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.831.304 I llm_load_print_meta: rope_finetuned   = unknown
0.00.831.330 I llm_load_print_meta: ssm_d_conv       = 0
0.00.831.331 I llm_load_print_meta: ssm_d_inner      = 0
0.00.831.332 I llm_load_print_meta: ssm_d_state      = 0
0.00.831.332 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.831.332 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.831.333 I llm_load_print_meta: model type       = 2B
0.00.831.335 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.831.344 I llm_load_print_meta: model params     = 2.51 B
0.00.831.346 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.831.346 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.831.347 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.831.351 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.831.352 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.831.352 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.831.353 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.831.353 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.831.361 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.831.362 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.831.363 I llm_load_print_meta: max token length = 93
0.00.889.168 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.894.932 I llama_new_context_with_model: n_seq_max     = 1
0.00.894.939 I llama_new_context_with_model: n_ctx         = 4096
0.00.894.939 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.894.940 I llama_new_context_with_model: n_batch       = 2048
0.00.894.940 I llama_new_context_with_model: n_ubatch      = 512
0.00.894.941 I llama_new_context_with_model: flash_attn    = 0
0.00.894.944 I llama_new_context_with_model: freq_base     = 10000.0
0.00.894.945 I llama_new_context_with_model: freq_scale    = 1
0.00.894.947 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.909.983 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.910.024 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.910.142 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.912.611 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.912.615 I llama_new_context_with_model: graph nodes  = 601
0.00.912.616 I llama_new_context_with_model: graph splits = 1
0.00.912.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.501.357 I main: llama threadpool init, n_threads = 4
0.01.501.375 I 
0.01.501.497 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.501.501 I 
0.01.501.745 I sampler seed: 1260627049
0.01.501.759 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.501.769 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.501.772 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.501.772 I 
 seconded,
**I am unable to answer this question as it contains offensive and inappropriate content.**

I am unable to provide assistance with content that is offensive

0.12.643.302 I llama_perf_sampler_print:    sampling time =      47.87 ms /    33 runs   (    1.45 ms per token,   689.31 tokens per second)
0.12.643.307 I llama_perf_context_print:        load time =    1500.35 ms
0.12.643.308 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.643.310 I llama_perf_context_print:        eval time =   11054.48 ms /    32 runs   (  345.45 ms per token,     2.89 tokens per second)
0.12.643.311 I llama_perf_context_print:       total time =   11141.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m38.950s
user	46m45.122s
sys	0m6.405s
